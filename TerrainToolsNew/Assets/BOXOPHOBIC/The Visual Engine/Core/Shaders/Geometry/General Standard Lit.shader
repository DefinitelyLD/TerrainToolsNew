// Made with Amplify Shader Editor v1.9.8.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector] _motion_highlight_color( "_motion_highlight_color", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _IsVersion( "_IsVersion", Float ) = 2070
		[HideInInspector] _IsTVEShader( "_IsTVEShader", Float ) = 1
		[HideInInspector] _IsShared( "_IsShared", Float ) = 0
		[HideInInspector] _IsIdentifier( "_IsIdentifier", Float ) = 0
		[HideInInspector] _IsCollected( "_IsCollected", Float ) = 0
		[HideInInspector] _IsConverted( "_IsConverted", Float ) = 0
		[HideInInspector] _IsCustomShader( "_IsCustomShader", Float ) = 0
		[HideInInspector] _MainTex( "Legacy MainTex", 2D ) = "white" {}
		[HideInInspector] _BumpMap( "Legacy BumpMap", 2D ) = "white" {}
		[HideInInspector] _Cutoff( "Legacy Cutoff", Float ) = 0.5
		[HideInInspector] _Color( "Legacy Color", Color ) = ( 0, 0, 0, 0 )
		[StyledCategory(Render Settings, true, 0, 10)] _RenderCategory( "[ Render Category ]", Float ) = 1
		[Enum(Opaque,0,Transparent,1)] _RenderMode( "Render Mode", Float ) = 0
		[Enum(Off,0,On,1)] _RenderZWrite( "Render ZWrite", Float ) = 1
		[Enum(Both,0,Back,1,Front,2)] _RenderCull( "Render Faces", Float ) = 2
		[HideInInspector] _render_normal( "_render_normal", Vector ) = ( 1, 1, 1, 0 )
		[HideInInspector] _RenderQueue( "Render Queue", Float ) = 0
		[HideInInspector] _RenderPriority( "Render Priority", Float ) = 0
		[HideInInspector] _RenderBakeGI( "Render BakeGI", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSSR( "Render SSR", Float ) = 0
		[Enum(Off,0,On,1)] _RenderDecals( "Render Decals", Float ) = 0
		[Enum(Auto,0,Off,1,On,2)] _RenderMotion( "Render Motion", Float ) = 0
		[Enum(Flip,0,Mirror,1,Same,2)] _RenderNormal( "Render Normals", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSpecular( "Render Specular", Float ) = 1
		[Enum(Off,0,On,1)] _RenderShadow( "Render Shadows", Float ) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)] _RenderFilter( "Render Filtering", Float ) = 0
		[Enum(Off,0,On,1)] _RenderClip( "Render Clipping", Float ) = 0
		[StyledSpace(10)] _RenderEnd( "[ Render End ]", Float ) = 1
		[HideInInspector] _NoiseTex3D( "Noise Mask 3D", 3D ) = "white" {}
		[HideInInspector] _NoiseTexSS( "Noise Mask SS", 2D ) = "white" {}
		[StyledCategory(Object Settings, true, 0, 10)] _ObjectCategory( "[ Object Category ]", Float ) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)] _ObjectBoundsInfo( "# ObjectBoundsInfo", Float ) = 0
		[Enum(Legacy,0,Standard,1)] _ObjectModelMode( "Object Model Mode", Float ) = 1
		[Enum(Off,0,Baked,1,Procedural,2)] _ObjectPivotMode( "Object Pivots Mode", Float ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _ObjectPhaseMode( "Object Phase Mask", Float ) = 0
		_ObjectHeightValue( "Object Height Value", Range( 0, 40 ) ) = 1
		_ObjectRadiusValue( "Object Radius Value", Range( 0, 40 ) ) = 1
		[HideInInspector] _object_phase_mode( "_object_phase_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _ObjectEnd( "[ Object End ]", Float ) = 1
		[StyledCategory(Global Settings, true, 0, 10)] _GlobalCategory( "[ Global Category ]", Float ) = 1
		[StyledMessage(Info, Use the Pivots sliders to control if the global texture is sampled in world space or at pivot position or pivots positions when baked pivots are used., 0, 10)] _GlobalPivotInfo( "# GlobalPivotInfo", Float ) = 0
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalCoatLayerValue( "Global Coat Layer", Float ) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalPaintLayerValue( "Global Paint Layer", Float ) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalAtmoLayerValue( "Global Atmo Layer", Float ) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFadeLayerValue( "Global Fade Layer", Float ) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalGlowLayerValue( "Global Glow Layer", Float ) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFormLayerValue( "Global Form Layer", Float ) = 0
		[StyledEnum(Flow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFlowLayerValue( "Global Flow Layer", Float ) = 0
		_GlobalCoatPivotValue( "Global Coat Pivots", Range( 0, 1 ) ) = 0
		_GlobalPaintPivotValue( "Global Paint Pivots", Range( 0, 1 ) ) = 0
		_GlobalAtmoPivotValue( "Global Atmo Pivots", Range( 0, 1 ) ) = 0
		_GlobalFadePivotValue( "Global Fade Pivots", Range( 0, 1 ) ) = 0
		_GlobalGlowPivotValue( "Global Glow Pivots", Range( 0, 1 ) ) = 0
		_GlobalFormPivotValue( "Global Form Pivots", Range( 0, 1 ) ) = 1
		_GlobalFlowPivotValue( "Global Flow Pivots", Range( 0, 1 ) ) = 1
		[StyledSpace(10)] _GlobalEnd( "[ Global End ]", Float ) = 1
		[StyledCategory(Main Settings, true, 0, 10)] _MainCategory( "[Main Category ]", Float ) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)] _MainMultiMaskInfo( "# MainMultiMaskInfo", Float ) = 0
		[StyledTextureSingleLine] _MainAlbedoTex( "Main Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _MainNormalTex( "Main Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _MainShaderTex( "Main Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _MainSampleMode( "Main Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _MainCoordMode( "Main UV Mode", Float ) = 0
		[StyledVector(9)] _MainCoordValue( "Main UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _main_coord_value( "_main_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _MainColorMode( "Main Color", Float ) = 0
		[HDR] _MainColor( "Main Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _MainColorTwo( "Main ColorB", Color ) = ( 1, 1, 1, 1 )
		_MainAlphaClipValue( "Main Alpha", Range( 0, 1 ) ) = 0.5
		_MainAlbedoValue( "Main Albedo", Range( 0, 1 ) ) = 1
		_MainNormalValue( "Main Normal", Range( -8, 8 ) ) = 1
		_MainMetallicValue( "Main Metallic", Range( 0, 1 ) ) = 0
		_MainOcclusionValue( "Main Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _MainOcclusionRemap( "Main Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _MainMultiRemap( "Main Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_MainSmoothnessValue( "Main Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _MainSmoothnessRemap( "Main Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _MainEnd( "[Main End ]", Float ) = 1
		[StyledCategory(Layer Settings, true, 0, 10)] _LayerCategory( "[ Layer Category ]", Float ) = 1
		_SecondIntensityValue( "Layer Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _SecondBakeMode( "Layer Baking", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _SecondAlbedoTex( "Layer Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _SecondNormalTex( "Layer Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _SecondShaderTex( "Layer Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _SecondSampleMode( "Layer Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _SecondCoordMode( "Layer UV Mode", Float ) = 0
		[StyledVector(9)] _SecondCoordValue( "Layer UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _SecondColorMode( "Layer Color", Float ) = 0
		[HDR] _SecondColor( "Layer Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _SecondColorTwo( "Layer ColorB", Color ) = ( 1, 1, 1, 1 )
		_SecondAlphaClipValue( "Layer Alpha", Range( 0, 1 ) ) = 0.5
		_SecondAlbedoValue( "Layer Albedo", Range( 0, 1 ) ) = 1
		_SecondNormalValue( "Layer Normal", Range( -8, 8 ) ) = 1
		_SecondMetallicValue( "Layer Metallic", Range( 0, 1 ) ) = 0
		_SecondOcclusionValue( "Layer Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondOcclusionRemap( "Layer Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _SecondMultiRemap( "Layer Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_SecondSmoothnessValue( "Layer Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondSmoothnessRemap( "Layer Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _SecondBlendIntensityValue( "Layer Blend Intensity", Range( 0, 1 ) ) = 1
		_SecondBlendAlbedoValue( "Layer Blend Albedos", Range( 0, 1 ) ) = 0
		_SecondBlendNormalValue( "Layer Blend Normals", Range( 0, 1 ) ) = 0
		_SecondBlendShaderValue( "Layer Blend Shaders", Range( 0, 1 ) ) = 0
		[Space(10)][StyledTextureSingleLine] _SecondMaskTex( "Layer Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)] _SecondMaskSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _SecondMaskCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(9)] _SecondMaskCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		_SecondGlobalValue( "Layer Coat Mask", Range( 0, 1 ) ) = 1
		_SecondMaskValue( "Layer TexB Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _SecondMaskRemap( "Layer TexB Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondLumaValue( "Layer Luma Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondLumaRemap( "Layer Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondProjValue( "Layer ProjY Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondProjRemap( "Layer ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondMeshValue( "Layer Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _SecondMeshMode( "Layer Mesh Mask", Float ) = 2
		[StyledRemapSlider] _SecondMeshRemap( "Layer Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _SecondBlendRemap( "Layer Blend Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _SecondElementMode( "Use Coat Elements", Float ) = 0
		[StyledSpace(10)] _LayerEnd( "[ Layer End ]", Float ) = 1
		[HideInInspector] _second_coord_value( "_second_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _second_vert_mode( "_second_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _second_mask_coord_value( "_second_mask_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledCategory(Detail Settings, true, 0, 10)] _DetailCategory( "[ Detail Category ]", Float ) = 1
		_ThirdIntensityValue( "Detail Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _ThirdBakeMode( "Detail Baking", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _ThirdAlbedoTex( "Detail Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _ThirdNormalTex( "Detail Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _ThirdShaderTex( "Detail Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _ThirdSampleMode( "Detail Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _ThirdCoordMode( "Detail UV Mode", Float ) = 0
		[StyledVector(9)] _ThirdCoordValue( "Detail UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _ThirdColorMode( "Detail Color", Float ) = 0
		[HDR] _ThirdColor( "Detail Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _ThirdColorTwo( "Detail ColorB", Color ) = ( 1, 1, 1, 1 )
		_ThirdAlphaClipValue( "Detail Alpha", Range( 0, 1 ) ) = 0.5
		_ThirdAlbedoValue( "Detail Albedo", Range( 0, 1 ) ) = 1
		_ThirdNormalValue( "Detail Normal", Range( -8, 8 ) ) = 1
		_ThirdMetallicValue( "Detail Metallic", Range( 0, 1 ) ) = 0
		_ThirdOcclusionValue( "Detail Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdOcclusionRemap( "Detail Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _ThirdMultiRemap( "Detail Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_ThirdSmoothnessValue( "Detail Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdSmoothnessRemap( "Detail Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _ThirdBlendIntensityValue( "Detail Blend Intensity", Range( 0, 1 ) ) = 1
		_ThirdBlendAlbedoValue( "Detail Blend Albedos", Range( 0, 1 ) ) = 0
		_ThirdBlendNormalValue( "Detail Blend Normals", Range( 0, 1 ) ) = 0
		_ThirdBlendShaderValue( "Detail Blend Shaders", Range( 0, 1 ) ) = 0
		[Space(10)][StyledTextureSingleLine] _ThirdMaskTex( "Detail Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)] _ThirdMaskSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _ThirdMaskCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(9)] _ThirdMaskCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		_ThirdGlobalValue( "Detail Coat Mask", Range( 0, 1 ) ) = 1
		_ThirdMaskValue( "Detail TexG Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _ThirdMaskRemap( "Detail TexG Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdLumaValue( "Detail Luma Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdLumaRemap( "Detail Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdProjValue( "Detail ProjY Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdProjRemap( "Detail ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdMeshValue( "Detail Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _ThirdMeshMode( "Detail Mesh Mask", Float ) = 1
		[StyledRemapSlider] _ThirdMeshRemap( "Detail Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _ThirdBlendRemap( "Detail Blend Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _ThirdElementMode( "Use Coat Elements", Float ) = 0
		[HideInInspector] _third_coord_value( "_third_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _third_vert_mode( "_third_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _third_mask_coord_value( "_third_mask_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _DetailEnd( "[ Detail End ]", Float ) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)] _OcclusionCategory( "[ Occlusion Category ]", Float ) = 1
		_OcclusionIntensityValue( "Occlusion Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _OcclusionBakeMode( "Occlusion Baking", Float ) = 1
		[HDR] _OcclusionColorOne( "Occlusion ColorA", Color ) = ( 1, 1, 1, 1 )
		[HDR] _OcclusionColorTwo( "Occlusion ColorB", Color ) = ( 0.25, 0.25, 0.25, 1 )
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)] _OcclusionMeshMode( "Occlusion Mesh Mask", Float ) = 1
		[StyledRemapSlider] _OcclusionMeshRemap( "Occlusion Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _OcclusionEnd( "[ Occlusion End ]", Float ) = 1
		[HideInInspector] _occlusion_vert_mode( "_occlusion_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Gradient Settings, true, 0, 10)] _GradientCategory( "[ Gradient Category ]", Float ) = 1
		_GradientIntensityValue( "Gradient Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _GradientBakeMode( "Gradient Baking", Float ) = 1
		[HDR] _GradientColorOne( "Gradient ColorA", Color ) = ( 1, 0.6135602, 0, 1 )
		[HDR] _GradientColorTwo( "Gradient ColorB", Color ) = ( 0.754717, 0.0389044, 0.03203986, 1 )
		[Space(10)] _GradientMultiValue( "Gradient Multi Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _GradientMeshMode( "Gradient Mesh Mask", Float ) = 3
		[StyledRemapSlider] _GradientMeshRemap( "Gradient Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _GradientEnd( "[ Gradient End ]", Float ) = 1
		[HideInInspector] _gradient_vert_mode( "_gradient_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Variation Settings, true, 0, 10)] _VariationCategory( "[ Variation Category ]", Float ) = 1
		_VariationIntensityValue( "Variation Intensity", Range( 0, 1 ) ) = 0
		[HDR] _VariationColorOne( "Variation ColorA", Color ) = ( 0.4573758, 0.6226415, 0.2144001, 1 )
		[HDR] _VariationColorTwo( "Variation ColorB", Color ) = ( 0.7450981, 0.5238863, 0.1098039, 1 )
		[Space(10)] _VariationMultiValue( "Variation Multi Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider()] _VariationNoiseRemap( "Variation Noise Mask", Vector ) = ( 0, 1, 0, 0 )
		_VariationNoiseTillingValue( "Variation Noise Tilling", Range( 0, 100 ) ) = 10
		_VariationNoisePivotValue( "Variation Noise Pivots", Range( 0, 1 ) ) = 0
		[StyledSpace(10)] _VariationEnd( "[ Variation End ]", Float ) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)] _TintingCategory( "[ Tinting Category ]", Float ) = 1
		_TintingIntensityValue( "Tinting Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _TintingBakeMode( "Tinting Baking", Float ) = 0
		_TintingGrayValue( "Tinting Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _TintingColor( "Tinting Color", Color ) = ( 1, 1, 1, 1 )
		[StyledSpace(10)] _TintingSpace( "[ Tinting Space ]", Float ) = 1
		_TintingGlobalValue( "Tinting Paint Mask", Range( 0, 1 ) ) = 1
		_TintingMultiValue( "Tinting Multi Mask", Range( 0, 1 ) ) = 1
		_TintingLumaValue( "Tinting Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _TintingLumaRemap( "Tinting Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_TintingMeshValue( "Tinting Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _TintingMeshMode( "Tinting Mesh Mask", Float ) = 3
		[StyledRemapSlider] _TintingMeshRemap( "Tinting Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _TintingBlendRemap( "Tinting Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _TintingElementMode( "Use Paint Elements", Float ) = 0
		[StyledSpace(10)] _TintingEnd( "[ Tinting End]", Float ) = 1
		[HideInInspector] _tinting_vert_mode( "_tinting_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Dryness Settings, true, 0, 10)] _DrynessCategory( "[ Dryness Category ]", Float ) = 1
		_DrynessIntensityValue( "Dryness Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _DrynessBakeMode( "Dryness Baking", Float ) = 0
		_DrynessGrayValue( "Dryness Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _DrynessColor( "Dryness Color", Color ) = ( 1, 0.7083712, 0.495283, 1 )
		_DrynessSubsurfaceValue( "Dryness Subsurface", Range( 0, 1 ) ) = 0.5
		_DrynessSmoothnessValue( "Dryness Smoothness", Range( 0, 1 ) ) = 0.5
		[StyledSpace(10)] _DrynessSpace( "[ Dryness Space ]", Float ) = 1
		_DrynessGlobalValue( "Dryness Atmo Mask", Range( 0, 1 ) ) = 1
		_DrynessMultiValue( "Dryness Multi Mask", Range( 0, 1 ) ) = 1
		_DrynessLumaValue( "Dryness Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _DrynessLumaRemap( "Dryness Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_DrynessMeshValue( "Dryness Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _DrynessMeshMode( "Dryness Mesh Mask", Float ) = 3
		[StyledRemapSlider] _DrynessMeshRemap( "Dryness Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _DrynessBlendRemap( "Dryness Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _DrynessElementMode( "Use Atmo Elements", Float ) = 0
		[StyledSpace(10)] _DrynessEnd( "[ Dryness End ]", Float ) = 1
		[HideInInspector] _dryness_vert_mode( "_dryness_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Overlay Settings, true, 0, 10)] _OverlayCategory( "[ Overlay Category ]", Float ) = 1
		_OverlayIntensityValue( "Overlay Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _OverlayBakeMode( "Overlay Baking", Float ) = 0
		[Enum(Off,0,On,1)] _OverlayTextureMode( "Overlay Maps", Float ) = 0
		[Space(10)][StyledTextureSingleLine] _OverlayAlbedoTex( "Overlay Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _OverlayNormalTex( "Overlay Normal", 2D ) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)] _OverlaySampleMode( "Overlay Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _OverlayCoordMode( "Overlay UV Mode", Float ) = 0
		[StyledVector(9)] _OverlayCoordValue( "Overlay UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HDR] _OverlayColor( "Overlay Color", Color ) = ( 0.2815503, 0.4009458, 0.5377358, 1 )
		_OverlayNormalValue( "Overlay Normal", Range( -8, 8 ) ) = 1
		_OverlaySubsurfaceValue( "Overlay Subsurface", Range( 0, 1 ) ) = 0.5
		_OverlaySmoothnessValue( "Overlay Smoothness", Range( 0, 1 ) ) = 0.5
		[Space(10)][StyledTextureSingleLine] _OverlayGlitterTexRT( "Overlay Glitter RT", 2D ) = "black" {}
		[Space(10)] _OverlayGlitterIntensityValue( "Overlay Glitter Intensity", Range( 0, 1 ) ) = 0
		[HDR] _OverlayGlitterColor( "Overlay Glitter Color", Color ) = ( 0.7215686, 1.913725, 2.996078, 1 )
		_OverlayGlitterTillingValue( "Overlay Glitter Tilling", Range( 0, 8 ) ) = 4
		_OverlayGlitterDistValue( "Overlay Glitter Limit", Range( 0, 200 ) ) = 100
		[StyledSpace(10)] _OverlaySpace( "[ Overlay Space ]", Float ) = 1
		_OverlayGlobalValue( "Overlay Atmo Mask", Range( 0, 1 ) ) = 1
		_OverlayLumaValue( "Overlay Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _OverlayLumaRemap( "Overlay Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayProjValue( "Overlay ProjY Mask", Range( 0, 1 ) ) = 0.5
		[StyledRemapSlider] _OverlayProjRemap( "Overlay ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayMeshValue( "Overlay Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _OverlayMeshMode( "Overlay Mesh Mask", Float ) = 1
		[StyledRemapSlider] _OverlayMeshRemap( "Overlay Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _OverlayBlendRemap( "Overlay Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _OverlayElementMode( "Use Atmo Elements", Float ) = 0
		[HideInInspector] _overlay_vert_mode( "_overlay_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _overlay_coord_value( "_overlay_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _OverlayEnd( "[ Overlay End ]", Float ) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)] _WetnessCategory( "[ Wetness Category ]", Float ) = 1
		_WetnessIntensityValue( "Wetness Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _WetnessBakeMode( "Wetness Baking", Float ) = 0
		_WetnessContrastValue( "Wetness Contrast", Range( 0, 1 ) ) = 0.2
		_WetnessSmoothnessValue( "Wetness Smoothness", Range( 0, 1 ) ) = 0.8
		[Space(10)] _WetnessGlobalValue( "Wetness Atmo Mask", Range( 0, 1 ) ) = 1
		_WetnessMeshValue( "Wetness Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessMeshMode( "Wetness Mesh Mask", Float ) = 0
		[StyledRemapSlider] _WetnessMeshRemap( "Wetness Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _WetnessWaterIntensityValue( "Wetness Water Intensity", Range( 0, 1 ) ) = 0
		[HDR] _WetnessWaterColor( "Wetness Water Color", Color ) = ( 0.5420078, 0.7924528, 0.6068289, 1 )
		_WetnessWaterBaseValue( "Wetness Water Base Mask", Range( 0, 1 ) ) = 1
		_WetnessWaterMeshValue( "Wetness Water Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessWaterMeshMode( "Wetness Water Mesh Mask", Float ) = 1
		[StyledRemapSlider] _WetnessWaterMeshRemap( "Wetness Water Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _WetnessWaterBlendRemap( "Wetness Water Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledTextureSingleLine] _WetnessDropsTexRT( "Wetness Drops RT", 2D ) = "white" {}
		[Space(10)] _WetnessDropsIntensityValue( "Wetness Drops Intensity", Range( 0, 1 ) ) = 1
		_WetnessDropsNormalValue( "Wetness Drops Normal", Range( -8, 8 ) ) = 1
		_WetnessDropsTillingValue( "Wetness Drops Tilling", Range( 0, 8 ) ) = 0.25
		_WetnessDropsDistValue( "Wetness Drops Limit", Range( 0, 200 ) ) = 50
		_WetnessDropsMeshValue( "Wetness Drops Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessDropsMeshMode( "Wetness Drops Mesh Mask", Float ) = 2
		[StyledRemapSlider] _WetnessDropsMeshRemap( "Wetness Drops Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _WetnessElementMode( "Use Atmo Elements", Float ) = 0
		[HideInInspector] _wetness_water_vert_mode( "_wetness_water_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _wetness_vert_mode( "_wetness_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _wetness_drops_vert_mode( "_wetness_drops_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _WetnessEnd( "[ Wetness End ]", Float ) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)] _CutoutCategory( "[ Cutout Category ]", Float ) = 1
		_CutoutIntensityValue( "Cutout Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Affect Shadow Pass,1)] _CutoutShadowMode( "Cutout Shadow", Float ) = 1
		[Enum(Off,0,Bake Settings To Textures,1)] _CutoutBakeMode( "Cutout Baking", Float ) = 0
		[StyledSpace(10)] _CutoutSpace( "[ Cutout Space ]", Float ) = 1
		_CutoutGlobalValue( "Cutout Fade Mask", Range( 0, 1 ) ) = 1
		_CutoutMultiValue( "Cutout Multi Mask", Range( 0, 1 ) ) = 1
		_CutoutAlphaValue( "Cutout Alpha Mask", Range( 0, 1 ) ) = 0
		_CutoutMeshValue( "Cutout Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _CutoutMeshMode( "Cutout Mesh Mask", Float ) = 0
		[StyledRemapSlider] _CutoutMeshRemap( "Cutout Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		_CutoutNoiseValue( "Cutout Noise Mask", Range( 0, 1 ) ) = 1
		_CutoutNoiseTillingValue( "Cutout Noise Tilling", Range( 0, 100 ) ) = 50
		[Space(10)][StyledToggle] _CutoutElementMode( "Use Fade Elements", Float ) = 0
		[HideInInspector] _cutout_vert_mode( "_cutout_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _CutoutEnd( "[ Cutout End ]", Float ) = 1
		[StyledCategory(Dither Settings, true, 0, 10)] _DitherCategory( "[ Dither Category ]", Float ) = 1
		_DitherConstantValue( "Dither Constant", Range( 0, 1 ) ) = 0
		_DitherProximityValue( "Dither Proximity", Range( 0, 1 ) ) = 0
		_DitherProximityMinValue( "Dither Proximity Start", Range( 0, 40 ) ) = 0
		_DitherProximityMaxValue( "Dither Proximity Limit", Range( 0, 40 ) ) = 1
		_DitherDistanceValue( "Dither Distance", Range( 0, 1 ) ) = 0
		_DitherDistanceMinValue( "Dither Distance Start", Range( 0, 1000 ) ) = 0
		_DitherDistanceMaxValue( "Dither Distance Limit", Range( 0, 1000 ) ) = 0
		_DitherGlancingValue( "Dither Glancing", Range( 0, 1 ) ) = 0
		_DitherGlancingAngleValue( "Dither Glanging Angle", Range( 0, 8 ) ) = 1
		[Enum(Off,0,Affect Shadow Pass,1)] _DitherShadowMode( "Dither Shadow", Float ) = 1
		[Space(10)] _DitherMultiValue( "Dither Multi Mask", Range( 0, 1 ) ) = 0
		_DitherNoiseTillingValue( "Dither Noise Tilling", Range( 0, 100 ) ) = 50
		[StyledSpace(10)] _DitherEnd( "[ Dither End ]", Float ) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)] _EmissiveCategory( "[ Emissive Category ]", Float ) = 1
		_EmissiveIntensityValue( "Emissive Intensity", Range( 0, 1 ) ) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)] _EmissiveFlagMode( "Emissive GI Mode", Float ) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)] _EmissiveColorMode( "Emissive Color", Float ) = 0
		[HDR] _EmissiveColor( "Emissive Color", Color ) = ( 1, 1, 1, 1 )
		[Enum(Nits,0,EV100,1)] _EmissivePowerMode( "Emissive Value", Float ) = 0
		_EmissivePowerValue( "Emissive Value", Float ) = 1
		_EmissiveExposureValue( "Emissive Weight", Range( 0, 1 ) ) = 0.5
		[Space(10)][StyledTextureSingleLine] _EmissiveMaskTex( "Emissive Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)] _EmissiveSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _EmissiveCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(18)] _EmissiveCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Space(10)] _EmissiveGlobalValue( "Emissive Glow Mask", Range( 0, 1 ) ) = 1
		_EmissiveMaskValue( "Emissive TexR Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _EmissiveMaskRemap( "Emissive TexR Mask", Vector ) = ( 0, 1, 0, 0 )
		_EmissiveMeshValue( "Emissive Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _EmissiveMeshMode( "Emissive Mesh Mask", Float ) = 0
		[StyledRemapSlider] _EmissiveMeshRemap( "Emissive Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _EmissiveElementMode( "Use Glow Elements", Float ) = 0
		[StyledSpace(10)] _EmissiveEnd( "[ Emissive End ]", Float ) = 1
		[HideInInspector] _emissive_power_value( "_emissive_power_value", Float ) = 1
		[HideInInspector] _emissive_vert_mode( "_emissive_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _emissive_coord_value( "_emissive_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledCategory(Subsurface Settings, true, 0, 10)] _SubsurfaceCategory( "[ Subsurface Category ]", Float ) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)] _SubsurfaceAproxInfo( "# Subsurface Aprox Info", Float ) = 0
		[DiffusionProfile] _SubsurfaceDiffusion( "Subsurface Diffusion", Float ) = 0
		[HideInInspector] _SubsurfaceDiffusion_Asset( "Subsurface Diffusion", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _SubsurfaceSpace( "# SubsurfaceSpace", Float ) = 0
		_SubsurfaceIntensityValue( "Subsurface Intensity", Range( 0, 1 ) ) = 0
		[HDR] _SubsurfaceColor( "Subsurface Color", Color ) = ( 1, 1, 1, 1 )
		_SubsurfaceScatteringValue( "Subsurface Value", Range( 0, 16 ) ) = 2
		_SubsurfaceAngleValue( "Subsurface Angle", Range( 1, 16 ) ) = 8
		_SubsurfaceDirectValue( "Subsurface Direct", Range( 0, 1 ) ) = 1
		_SubsurfaceNormalValue( "Subsurface Normal", Range( 0, 1 ) ) = 0
		_SubsurfaceAmbientValue( "Subsurface Ambient", Range( 0, 1 ) ) = 0.2
		_SubsurfaceShadowValue( "Subsurface Shadow", Range( 0, 1 ) ) = 1
		_SubsurfaceThicknessValue( "Subsurface Thickness", Range( 0, 1 ) ) = 0
		[Space(10)] _SubsurfaceGlobalValue( "Subsurface Glow Mask", Range( 0, 1 ) ) = 1
		_SubsurfaceMultiValue( "Subsurface Multi Mask", Range( 0, 1 ) ) = 1
		[Space(10)][StyledToggle] _SubsurfaceElementMode( "Use Glow Elements", Float ) = 0
		[StyledSpace(10)] _SubsurfaceEnd( "[ Subsurface End ]", Float ) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)] _PerspectiveCategory( "[ Perspective Category ]", Float ) = 1
		_PerspectiveIntensityValue( "Perspective Intensity", Range( 0, 10 ) ) = 0
		_PerspectivePhaseValue( "Perspective Phase", Range( 0, 1 ) ) = 0
		_PerspectiveAngleValue( "Perspective Angle", Range( 0, 8 ) ) = 1
		[StyledSpace(10)] _PerspectiveEnd( "[ Perspective End ]", Float ) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)] _SizeFadeCategory( "[ Size Fade Category ]", Float ) = 1
		_SizeFadeIntensityValue( "Size Fade Intensity", Range( 0, 1 ) ) = 0
		[Enum(All Axis,0,Up Axis,1)] _SizeFadeScaleMode( "Size Fade Mode", Float ) = 0
		_SizeFadeScaleValue( "Size Fade Value", Range( 0, 1 ) ) = 1
		_SizeFadeDistMinValue( "Size Fade Start", Range( 0, 1000 ) ) = 0
		_SizeFadeDistMaxValue( "Size Fade Limit", Range( 0, 1000 ) ) = 0
		[Space(10)] _SizeFadeGlobalValue( "Size Fade Form Mask", Range( 0, 1 ) ) = 1
		[Space(10)][StyledToggle] _SizeFadeElementMode( "Use Form Elements", Float ) = 0
		[StyledSpace(10)] _SizeFadeEnd( "[ Size Fade End ]", Float ) = 1
		[StyledCategory(Motion Settings, true, 0, 10)] _MotionCategory( "[ Motion Category ]", Float ) = 1
		[StyledMessage(Info, The Interaction features require elements to work. Use Flow elements to add interaction and use the Push Mask slider to control the interaction amount per motion layer., 0, 10)] _MotionPushInfo( "# Message Push", Float ) = 0
		[NoScaleOffset][StyledTextureSingleLine] _MotionNoiseTex( "Motion Texture", 2D ) = "white" {}
		[Space(10)] _MotionIntensityValue( "Motion Intensity", Range( 0, 1 ) ) = 1
		_MotionDistValue( "Motion Details Limit", Range( 0, 1000 ) ) = 100
		[Space(10)] _MotionBaseIntensityValue( "Motion Primary Intensity", Range( 0, 10 ) ) = 0
		_MotionBaseDelayValue( "Motion Primary Delay", Range( 0, 1 ) ) = 0
		_MotionBaseNoiseValue( "Motion Primary Noise", Range( 0, 1 ) ) = 0.5
		_MotionBasePivotValue( "Motion Primary Pivots", Range( 0, 1 ) ) = 0.8
		_MotionBasePhaseValue( "Motion Primary Phase", Range( 0, 1 ) ) = 0
		_MotionBaseTillingValue( "Motion Primary Tilling", Range( 0, 100 ) ) = 5
		_MotionBaseSpeedValue( "Motion Primary Speed", Range( 0, 50 ) ) = 5
		_MotionBasePushValue( "Motion Primary Push Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionBaseMaskMode( "Motion Primary Anim Mask", Float ) = 3
		[StyledRemapSlider] _MotionBaseMaskRemap( "Motion Primary Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionSmallIntensityValue( "Motion Second Intensity", Range( 0, 10 ) ) = 0
		_MotionSmallDelayValue( "Motion Second Delay", Range( 0, 1 ) ) = 0
		_MotionSmallNoiseValue( "Motion Second Noise", Range( 0, 1 ) ) = 0.5
		_MotionSmallPivotValue( "Motion Second Pivots", Range( 0, 1 ) ) = 0.2
		_MotionSmallPhaseValue( "Motion Second Phase", Range( 0, 1 ) ) = 0
		_MotionSmallTillingValue( "Motion Second Tilling", Range( 0, 100 ) ) = 5
		_MotionSmallSpeedValue( "Motion Second Speed", Range( 0, 50 ) ) = 5
		_MotionSmallPushValue( "Motion Second Push Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionSmallMaskMode( "Motion Second Anim Mask", Float ) = 1
		[StyledRemapSlider] _MotionSmallMaskRemap( "Motion Second Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionTinyIntensityValue( "Motion Leaves Intensity", Range( 0, 10 ) ) = 0
		_MotionTinyNoiseValue( "Motion Leaves Noise", Range( 0, 1 ) ) = 1
		_MotionTinyTillingValue( "Motion Leaves Tilling", Range( 0, 100 ) ) = 50
		_MotionTinySpeedValue( "Motion Leaves Speed", Range( 0, 50 ) ) = 10
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionTinyMaskMode( "Motion Leaves Anim Mask", Float ) = 2
		[StyledRemapSlider] _MotionTinyMaskRemap( "Motion Leaves Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionHighlightValue( "Motion Ripples Intensity", Range( 0, 1 ) ) = 0
		[HDR] _MotionHighlightColor( "Motion Ripples Color", Color ) = ( 1, 1, 1, 1 )
		[Space(10)][StyledToggle] _MotionElementMode( "Use Flow Elements", Float ) = 0
		[StyledSpace(10)] _MotionWindEnd( "[ Motion Wind End ]", Float ) = 1
		[HideInInspector] _motion_base_mask_mode( "_motion_base_mask_mode", Float ) = 0
		[HideInInspector] _motion_base_vert_mode( "_motion_base_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_base_proc_mode( "_motion_base_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_mask_mode( "_motion_small_mask_mode", Float ) = 0
		[HideInInspector] _motion_small_vert_mode( "_motion_small_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_proc_mode( "_motion_small_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_tiny_mask_mode( "_motion_tiny_mask_mode", Float ) = 0
		[HideInInspector] _motion_tiny_vert_mode( "_motion_tiny_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_tiny_proc_mode( "_motion_tiny_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_mode( "_motion_small_mode", Float ) = 0
		[StyledCategory(Normal Settings, true, 0, 10)] _NormalCategory( "[ Normal Category ]", Float ) = 1
		_NormalFlattenValue( "Normal Flattening", Range( 0, 1 ) ) = 0
		_NormalSphereValue( "Normal Spherical", Range( 0, 1 ) ) = 0
		[StyledVector(18)] _NormalSphereOffsetValue( "Normal Spherical Offset", Vector ) = ( 0, 0, 0, 0 )
		_NormalComputeValue( "Normal Compute", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _NormalBakeMode( "Normal Baking", Float ) = 1
		[StyledSpace(10)] _NormalSpace( "[ Normal Space ]", Float ) = 1
		_NormalMeshValue( "Normal Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _NormalMeshMode( "Normal Mesh Mask", Float ) = 2
		[StyledRemapSlider] _NormalMeshRemap( "Normal Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[HideInInspector] _normal_vert_mode( "_normal_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _NormalEnd( "[ Normal End ]", Float ) = 1
		[HideInInspector] _render_cull( "_render_cull", Float ) = 0
		[HideInInspector] _render_src( "_render_src", Float ) = 1
		[HideInInspector] _render_dst( "_render_dst", Float ) = 0
		[HideInInspector] _render_zw( "_render_zw", Float ) = 1
		[HideInInspector] _render_coverage( "_render_coverage", Float ) = 0
		[HideInInspector] _IsGeneralShader( "_IsGeneralShader", Float ) = 1
		[HideInInspector] _IsStandardShader( "_IsStandardShader", Float ) = 1

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _DstBlend2("__dst2", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][ToggleUI] _PerPixelSorting("_PerPixelSorting", Float) = 0.0
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		AlphaToMask Off

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
            #define _ENERGY_CONSERVING_SPECULAR 1
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #define ASE_FRAGMENT_NORMAL 0
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #define _MATERIAL_FEATURE_SPECULAR_COLOR 1
            #pragma multi_compile _ LOD_FADE_CROSSFADE
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_VERSION 19802
            #define ASE_SRP_VERSION 170004
            #if !defined(ASE_NEED_CULLFACE)
            #define ASE_NEED_CULLFACE 1
            #endif //ASE_NEED_CULLFACE
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ RENDERING_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord6.xyz = vertexToFrag73_g170196;
				output.ase_texcoord7.xyz = vertexToFrag76_g170196;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord8 = vertexToFrag24_g170575;
				
				output.ase_texcoord5 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord7.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord8;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				half3 Input_Albedo24_g170785 = Out_Albedo4_g170786;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170785 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g170785 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g170785 = staticSwitch22_g170785;
				float4 break24_g170781 = Out_Shader4_g170786;
				half Metallic95_g170781 = break24_g170781.x;
				half Input_Metallic25_g170785 = Metallic95_g170781;
				half OneMinusReflectivity31_g170785 = ( (ColorSpaceDielectricSpec23_g170785).w - ( (ColorSpaceDielectricSpec23_g170785).w * Input_Metallic25_g170785 ) );
				
				float3 appendResult23_g170781 = (float3(Out_NormalTS4_g170786 , 1.0));
				float3 temp_output_13_0_g170784 = appendResult23_g170781;
				float3 temp_output_33_0_g170784 = ( temp_output_13_0_g170784 * _render_normal );
				float3 switchResult12_g170784 = (((IsFrontFace>0)?(temp_output_13_0_g170784):(temp_output_33_0_g170784)));
				
				float3 lerpResult28_g170785 = lerp( (ColorSpaceDielectricSpec23_g170785).xyz , Input_Albedo24_g170785 , Input_Metallic25_g170785);
				half RenderSpec102_g170781 = _RenderSpecular;
				
				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g170785 * OneMinusReflectivity31_g170785 );
				surfaceDescription.Normal = switchResult12_g170784;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170785 * RenderSpec102_g170781 );
				#endif

				surfaceDescription.Smoothness = break24_g170781.w;
				surfaceDescription.Occlusion = break24_g170781.y;
				surfaceDescription.Emission = (Out_Emissive4_g170786).xyz;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );

				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);

				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.uv3.x , inputMesh.uv3.z , inputMesh.uv3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.uv0.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord4.xyz = vertexToFrag73_g170196;
				output.ase_texcoord5.xyz = vertexToFrag76_g170196;
				output.ase_texcoord6.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir( inputMesh.tangentOS.xyz );
				output.ase_texcoord7.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord8.xyz = ase_bitangentWS;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord9 = vertexToFrag24_g170575;
				output.ase_texcoord10.xyz = ase_positionWS;
				
				output.ase_texcoord2 = inputMesh.uv0;
				output.ase_texcoord3.xy = inputMesh.uv2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.zw = 0;
				output.ase_texcoord4.w = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;
				output.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;

				output.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					output.VizUV.xy = vizUV;
					output.LightCoord = lightCoord;
				#endif

				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half isFrontFace = input.isFrontFace;

				float3 V = float3(1.0, 1.0, 1.0);

				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 ase_normalWS = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord7.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord9;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				float3 ase_positionWS = packedInput.ase_texcoord10.xyz;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				half3 Input_Albedo24_g170785 = Out_Albedo4_g170786;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170785 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g170785 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g170785 = staticSwitch22_g170785;
				float4 break24_g170781 = Out_Shader4_g170786;
				half Metallic95_g170781 = break24_g170781.x;
				half Input_Metallic25_g170785 = Metallic95_g170781;
				half OneMinusReflectivity31_g170785 = ( (ColorSpaceDielectricSpec23_g170785).w - ( (ColorSpaceDielectricSpec23_g170785).w * Input_Metallic25_g170785 ) );
				
				float3 appendResult23_g170781 = (float3(Out_NormalTS4_g170786 , 1.0));
				float3 temp_output_13_0_g170784 = appendResult23_g170781;
				float3 temp_output_33_0_g170784 = ( temp_output_13_0_g170784 * _render_normal );
				float3 switchResult12_g170784 = (((isFrontFace>0)?(temp_output_13_0_g170784):(temp_output_33_0_g170784)));
				
				float3 lerpResult28_g170785 = lerp( (ColorSpaceDielectricSpec23_g170785).xyz , Input_Albedo24_g170785 , Input_Metallic25_g170785);
				half RenderSpec102_g170781 = _RenderSpecular;
				
				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g170785 * OneMinusReflectivity31_g170785 );
				surfaceDescription.Normal = switchResult12_g170784;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170785 * RenderSpec102_g170781 );
				#endif

				surfaceDescription.Smoothness = break24_g170781.w;
				surfaceDescription.Occlusion = break24_g170781.y;
				surfaceDescription.Emission = (Out_Emissive4_g170786).xyz;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = float3(0.0f, 0.0f, 1.0f);

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g170196;
				output.ase_texcoord6.xyz = vertexToFrag76_g170196;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord7 = vertexToFrag24_g170575;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord7;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;

				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
					float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
					outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					#endif
					decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = float3(0.0f, 0.0f, 1.0f);

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g170196;
				output.ase_texcoord6.xyz = vertexToFrag76_g170196;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord7 = vertexToFrag24_g170575;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];

				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord7;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;

				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER WRITE_RENDERING_LAYER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g170196;
				output.ase_texcoord6.xyz = vertexToFrag76_g170196;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord7 = vertexToFrag24_g170575;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord7;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				float3 appendResult23_g170781 = (float3(Out_NormalTS4_g170786 , 1.0));
				float3 temp_output_13_0_g170784 = appendResult23_g170781;
				float3 temp_output_33_0_g170784 = ( temp_output_13_0_g170784 * _render_normal );
				float3 switchResult12_g170784 = (((IsFrontFace>0)?(temp_output_13_0_g170784):(temp_output_33_0_g170784)));
				
				float4 break24_g170781 = Out_Shader4_g170786;
				
				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;

				surfaceDescription.Normal = switchResult12_g170784;
				surfaceDescription.Smoothness = break24_g170781.w;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    					depthColor = packedInput.positionCS.z;
    					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
    				DecalPrepassData decalPrepassData;
                    #ifdef _DISABLE_DECALS
				    ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
                    #else
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
                    #endif
    				decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif
				#endif // SCENESELECTIONPASS
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "MotionVectors"
			Tags { "LightMode"="MotionVectors" }

			Cull [_CullMode]

			ZWrite On

			Stencil
			{
				Ref [_StencilRefMV]
				WriteMask [_StencilWriteMaskMV]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER_AND_RENDERING_LAYER

			#ifdef WRITE_DECAL_BUFFER_AND_RENDERING_LAYER
			#define WRITE_DECAL_BUFFER
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_MOTION_VECTORS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
               #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			     #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 vmeshPositionCS : SV_Position;
				float3 vmeshPositionRWS : TEXCOORD0;
				float3 vpassPositionCS : TEXCOORD1;
				float3 vpassPreviousPositionCS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(inout AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g170196;
				output.ase_texcoord6.xyz = vertexToFrag76_g170196;
				output.ase_texcoord7.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir( inputMesh.tangentOS.xyz );
				output.ase_texcoord8.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord9.xyz = ase_bitangentWS;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord10 = vertexToFrag24_g170575;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;
				output.ase_texcoord7.w = 0;
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);

				float3 VMESHpositionRWS = positionRWS;
				float4 VMESHpositionCS = TransformWorldToHClip(positionRWS);

				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(VMESHpositionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						if (_TransparentCameraOnlyMotionVectors > 0)
						{
							previousPositionRWS = VMESHpositionRWS.xyz;
						}
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}

				output.vmeshPositionCS = VMESHpositionCS;
				output.vmeshPositionRWS = VMESHpositionRWS;

				output.vpassPositionCS = float3(VPASSpositionCS.xyw);
				output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				return output;
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			#if ( 0 ) // TEMPORARY: defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.previousPositionOS = v.previousPositionOS;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
				o.precomputedVelocity = v.precomputedVelocity;
				#endif
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.previousPositionOS = patch[0].previousPositionOS * bary.x + patch[1].previousPositionOS * bary.y + patch[2].previousPositionOS * bary.z;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
					o.precomputedVelocity = patch[0].precomputedVelocity * bary.x + patch[1].precomputedVelocity * bary.y + patch[2].precomputedVelocity * bary.z;
				#endif
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_DECAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target3
			#elif defined(WRITE_DECAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target2
			#else
			#define SV_TARGET_NORMAL SV_Target1
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_MSAA_DEPTH
					, out float4 depthColor : SV_Target0
					, out float4 outMotionVector : SV_Target1
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target2
						#endif
					#else
					, out float4 outMotionVector : SV_Target0
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target1
						#endif
					#endif

					#ifdef WRITE_NORMAL_BUFFER
					, out float4 outNormalBuffer : SV_TARGET_NORMAL
					#endif
					#if defined( ASE_DEPTH_WRITE_ON )
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
					, bool ase_vface : SV_IsFrontFace )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = packedInput.vmeshPositionRWS;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SurfaceData surfaceData;
				BuiltinData builtinData;

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;

				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 ase_normalWS = packedInput.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3 ase_tangentWS = packedInput.ase_texcoord8.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord10;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				float3 appendResult23_g170781 = (float3(Out_NormalTS4_g170786 , 1.0));
				float3 temp_output_13_0_g170784 = appendResult23_g170781;
				float3 temp_output_33_0_g170784 = ( temp_output_13_0_g170784 * _render_normal );
				float3 switchResult12_g170784 = (((ase_vface>0)?(temp_output_13_0_g170784):(temp_output_33_0_g170784)));
				
				float4 break24_g170781 = Out_Shader4_g170786;
				
				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				surfaceDescription.Normal = switchResult12_g170784;
				surfaceDescription.Smoothness = break24_g170781.w;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
					float3 positionOS = mul( GetWorldToObjectMatrix(),  float4( PositionRWS, 1.0 ) ).xyz;
					float3 previousPositionRWS = mul( GetPrevObjectToWorldMatrix(),  float4( positionOS, 1.0 ) ).xyz;
					packedInput.vpassPositionCS = mul( UNITY_MATRIX_UNJITTERED_VP, float4( PositionRWS, 1.0 ) ).xyw;
					packedInput.vpassPreviousPositionCS = mul( UNITY_MATRIX_PREV_VP, float4( previousPositionRWS, 1.0 ) ).xyw;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
				float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);

				#ifdef _DEPTHOFFSET_ON
				VPASSpositionCS.w += builtinData.depthOffset;
				VPASSpreviousPositionCS.w += builtinData.depthOffset;
				#endif

				float2 motionVector = CalculateMotionVector( VPASSpositionCS, VPASSpreviousPositionCS );
				EncodeMotionVector( motionVector * 0.5, outMotionVector );

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if( forceNoMotion )
					outMotionVector = float4( 2.0, 0.0, 0.0, 0.0 );

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					#endif
					decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha
			Blend 2 One [_DstBlend2]
			Blend 3 One [_DstBlend2]
			Blend 4 One OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile_fragment PUNCTUAL_SHADOW_LOW PUNCTUAL_SHADOW_MEDIUM PUNCTUAL_SHADOW_HIGH
            #pragma multi_compile_fragment DIRECTIONAL_SHADOW_LOW DIRECTIONAL_SHADOW_MEDIUM DIRECTIONAL_SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord8.xyz = vertexToFrag73_g170196;
				output.ase_texcoord9.xyz = vertexToFrag76_g170196;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord10 = vertexToFrag24_g170575;
				
				output.ase_texcoord7 = inputMesh.ase_texcoord;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord8.w = 0;
				output.ase_texcoord9.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : inputMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = inputMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(inputMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					output.vpassPositionCS = float3(VPASSpositionCS.xyw);
					output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #if defined(_TRANSPARENT_REFRACTIVE_SORT) || defined(_ENABLE_FOG_ON_TRANSPARENT)
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/Shaders/UnderWaterUtilities.hlsl"
            #endif

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
                    #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        #define BEFORE_REFRACTION_TARGET SV_Target3
                        #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target4
                #endif
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #ifdef _TRANSPARENT_REFRACTIVE_SORT
                     #define BEFORE_REFRACTION_TARGET SV_Target2
                     #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target3
                #endif
            #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
						, out float4 outColor:SV_Target0
					#ifdef UNITY_VIRTUAL_TEXTURING
						, out float4 outVTFeedback : SV_Target1
					#endif
					#ifdef OUTPUT_SPLIT_LIGHTING
						, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
						, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
					#elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
						, out float4 outMotionVec : MOTION_VECTOR_TARGET
						#ifdef _TRANSPARENT_REFRACTIVE_SORT
							, out float4 outBeforeRefractionColor : BEFORE_REFRACTION_TARGET
							, out float4 outBeforeRefractionAlpha : BEFORE_REFRACTION_ALPHA_TARGET
						#endif
					#endif
					#if defined( ASE_DEPTH_WRITE_ON )
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
					 )
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord10;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				half3 Input_Albedo24_g170785 = Out_Albedo4_g170786;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170785 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g170785 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g170785 = staticSwitch22_g170785;
				float4 break24_g170781 = Out_Shader4_g170786;
				half Metallic95_g170781 = break24_g170781.x;
				half Input_Metallic25_g170785 = Metallic95_g170781;
				half OneMinusReflectivity31_g170785 = ( (ColorSpaceDielectricSpec23_g170785).w - ( (ColorSpaceDielectricSpec23_g170785).w * Input_Metallic25_g170785 ) );
				
				float3 appendResult23_g170781 = (float3(Out_NormalTS4_g170786 , 1.0));
				float3 temp_output_13_0_g170784 = appendResult23_g170781;
				float3 temp_output_33_0_g170784 = ( temp_output_13_0_g170784 * _render_normal );
				float3 switchResult12_g170784 = (((IsFrontFace>0)?(temp_output_13_0_g170784):(temp_output_33_0_g170784)));
				
				float3 lerpResult28_g170785 = lerp( (ColorSpaceDielectricSpec23_g170785).xyz , Input_Albedo24_g170785 , Input_Metallic25_g170785);
				half RenderSpec102_g170781 = _RenderSpecular;
				
				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g170785 * OneMinusReflectivity31_g170785 );
				surfaceDescription.Normal = switchResult12_g170784;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g170785 * RenderSpec102_g170781 );
				#endif

				surfaceDescription.Smoothness = break24_g170781.w;
				surfaceDescription.Occlusion = break24_g170781.y;
				surfaceDescription.Emission = (Out_Emissive4_g170786).xyz;
				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
					#if defined( _WRITE_TRANSPARENT_MOTION_VECTOR )
						float3 positionOS = mul( GetWorldToObjectMatrix(),  float4( PositionRWS, 1.0 ) ).xyz;
						float3 previousPositionRWS = mul( GetPrevObjectToWorldMatrix(),  float4( positionOS, 1.0 ) ).xyz;
						packedInput.vpassPositionCS = mul( UNITY_MATRIX_UNJITTERED_VP, float4( PositionRWS, 1.0 ) ).xyw;
						packedInput.vpassPreviousPositionCS = mul( UNITY_MATRIX_PREV_VP, float4( previousPositionRWS, 1.0 ) ).xyw;
					#endif
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);

						#ifdef _ENABLE_FOG_ON_TRANSPARENT
                        outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                        #endif

                        #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        ComputeRefractionSplitColor(posInput, outColor, outBeforeRefractionColor, outBeforeRefractionAlpha);
                        #endif
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
				outVTFeedback.rgb *= outVTFeedback.a; // premuliplied alpha
                #endif

			}
			ENDHLSL
		}

		
		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            CBUFFER_START( UnityPerMaterial )
			half4 _SecondColor;
			half4 _MotionBaseMaskRemap;
			half4 _DrynessLumaRemap;
			half4 _normal_vert_mode;
			half4 _NormalMeshRemap;
			float4 _DrynessColor;
			half4 _TintingBlendRemap;
			half4 _TintingMeshRemap;
			half4 _tinting_vert_mode;
			half4 _TintingLumaRemap;
			float4 _TintingColor;
			half4 _VariationNoiseRemap;
			half4 _VariationColorOne;
			half4 _VariationColorTwo;
			half4 _GradientMeshRemap;
			half4 _gradient_vert_mode;
			half4 _dryness_vert_mode;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _DrynessMeshRemap;
			half4 _motion_small_proc_mode;
			half4 _OverlayMeshRemap;
			half4 _MotionSmallMaskRemap;
			half4 _overlay_vert_mode;
			half4 _OverlayLumaRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayGlitterColor;
			half4 _GradientColorOne;
			half4 _motion_tiny_vert_mode;
			half4 _OverlayCoordValue;
			half4 _MotionTinyMaskRemap;
			half4 _overlay_coord_value;
			half4 _OverlayColor;
			half4 _MotionHighlightColor;
			half4 _DrynessBlendRemap;
			half4 _second_vert_mode;
			half4 _motion_tiny_proc_mode;
			half4 _GradientColorTwo;
			half4 _OcclusionMeshRemap;
			half4 _occlusion_vert_mode;
			half4 _ThirdOcclusionRemap;
			half4 _MainSmoothnessRemap;
			half4 _MainMultiRemap;
			half4 _ThirdColor;
			half4 _ThirdColorTwo;
			half4 _second_coord_value;
			half4 _third_coord_value;
			half4 _MainOcclusionRemap;
			half4 _SecondColorTwo;
			half4 _SecondSmoothnessRemap;
			half4 _SecondMultiRemap;
			half4 _SecondBlendRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _SecondLumaRemap;
			half4 _SecondProjRemap;
			half4 _SecondOcclusionRemap;
			half4 _motion_small_vert_mode;
			half4 _MainColor;
			half4 _ThirdSmoothnessRemap;
			half4 _OcclusionColorOne;
			half4 _OcclusionColorTwo;
			half4 _ThirdBlendRemap;
			half4 _ThirdCoordValue;
			half4 _ThirdProjRemap;
			half4 _ThirdMaskCoordValue;
			half4 _ThirdMeshRemap;
			half4 _MainColorTwo;
			half4 _third_vert_mode;
			half4 _SecondCoordValue;
			half4 _ThirdMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _third_mask_coord_value;
			half4 _ThirdMultiRemap;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _ThirdLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _SecondMeshRemap;
			half4 _wetness_drops_vert_mode;
			half4 _EmissiveMeshRemap;
			half4 _object_phase_mode;
			half4 _emissive_coord_value;
			half4 _WetnessDropsMeshRemap;
			half4 _emissive_vert_mode;
			half4 _Color;
			half4 _EmissiveCoordValue;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _WetnessWaterBlendRemap;
			half4 _wetness_water_vert_mode;
			half4 _SubsurfaceColor;
			half4 _WetnessMeshRemap;
			half4 _WetnessWaterMeshRemap;
			half4 _CutoutMeshRemap;
			half4 _wetness_vert_mode;
			half4 _cutout_vert_mode;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _WetnessWaterColor;
			half3 _motion_highlight_color;
			half3 _NormalSphereOffsetValue;
			half3 _render_normal;
			half _ThirdNormalValue;
			half _DitherShadowMode;
			half _ThirdBlendShaderValue;
			half _ThirdAlphaClipValue;
			half _DitherMultiValue;
			half _DitherProximityValue;
			half _DitherProximityMinValue;
			half _DitherProximityMaxValue;
			half _ThirdMaskValue;
			half _ThirdLumaValue;
			half _DitherDistanceMinValue;
			half _ThirdBlendIntensityValue;
			half _DitherGlancingValue;
			half _ThirdMeshValue;
			half _DitherGlancingAngleValue;
			half _ThirdMeshMode;
			half _DitherDistanceValue;
			half _ThirdIntensityValue;
			half _ThirdBlendNormalValue;
			half _DitherDistanceMaxValue;
			half _ThirdProjValue;
			half _ThirdElementMode;
			half _ThirdGlobalValue;
			half _DitherNoiseTillingValue;
			half _ThirdBlendAlbedoValue;
			half _OverlayNormalValue;
			half _EmissiveMeshValue;
			half _SecondMeshMode;
			half _SubsurfaceThicknessValue;
			half _SecondElementMode;
			half _SecondGlobalValue;
			half _SubsurfaceAproxInfo;
			half _SubsurfaceMultiValue;
			half _SubsurfaceGlobalValue;
			half _SecondBlendIntensityValue;
			half _SecondBlendNormalValue;
			half _SubsurfaceElementMode;
			half _SecondNormalValue;
			half _SubsurfaceIntensityValue;
			half _SecondBlendShaderValue;
			half _SecondAlphaClipValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _EmissiveColorMode;
			half _ThirdAlbedoValue;
			half _EmissiveGlobalValue;
			half _EmissiveElementMode;
			half _ThirdMetallicValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _ThirdOcclusionValue;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _DitherConstantValue;
			half _ThirdSmoothnessValue;
			half _EmissiveMeshMode;
			half _ThirdColorMode;
			half _OcclusionMeshMode;
			half _GradientIntensityValue;
			half _CutoutShadowMode;
			half _WetnessDropsIntensityValue;
			half _DrynessMeshValue;
			half _WetnessDropsTillingValue;
			half _WetnessContrastValue;
			half _DrynessSmoothnessValue;
			half _DrynessSubsurfaceValue;
			half _MotionHighlightValue;
			half _WetnessWaterBaseValue;
			half _WetnessWaterMeshMode;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _WetnessWaterMeshValue;
			half _WetnessMeshMode;
			half _OverlayTextureMode;
			half _WetnessDropsNormalValue;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayLumaValue;
			half _WetnessGlobalValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _OverlayMeshValue;
			half _OverlayMeshMode;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _OverlaySubsurfaceValue;
			half _WetnessMeshValue;
			half _WetnessDropsDistValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _CutoutMultiValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _GradientMeshMode;
			half _OverlaySmoothnessValue;
			half _GradientMultiValue;
			half _VariationNoisePivotValue;
			half _VariationNoiseTillingValue;
			half _CutoutNoiseValue;
			half _VariationIntensityValue;
			half _VariationMultiValue;
			half _TintingElementMode;
			half _TintingGlobalValue;
			half _TintingGrayValue;
			half _CutoutNoiseTillingValue;
			half _TintingIntensityValue;
			half _TintingMultiValue;
			half _DrynessIntensityValue;
			half _WetnessDropsMeshValue;
			half _WetnessDropsMeshMode;
			half _WetnessSmoothnessValue;
			half _DrynessGrayValue;
			half _DrynessGlobalValue;
			half _OcclusionIntensityValue;
			half _DrynessElementMode;
			half _TintingMeshMode;
			half _TintingMeshValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _TintingLumaValue;
			half _CutoutAlphaValue;
			half _CutoutIntensityValue;
			half _DrynessMeshMode;
			half _SubsurfaceAngleValue;
			half _SecondProjValue;
			half _GlobalGlowPivotValue;
			half _GlobalGlowLayerValue;
			half _GlobalPaintPivotValue;
			half _GlobalPaintLayerValue;
			half _GlobalCoatPivotValue;
			half _GlobalCoatLayerValue;
			half _GlobalPivotInfo;
			half _GlobalEnd;
			half _GlobalCategory;
			half _GlobalAtmoLayerValue;
			half _SizeFadeScaleValue;
			half _SizeFadeDistMaxValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectivePhaseValue;
			half _ObjectRadiusValue;
			half _ObjectHeightValue;
			half _ObjectBoundsInfo;
			half _ObjectPhaseMode;
			half _ObjectPivotMode;
			half _SizeFadeDistMinValue;
			half _ObjectModelMode;
			half _GlobalAtmoPivotValue;
			half _GlobalFadePivotValue;
			half _MotionTinyIntensityValue;
			half _MotionSmallPushValue;
			half _MotionSmallDelayValue;
			half _MotionIntensityValue;
			half _MotionSmallNoiseValue;
			half _MotionSmallSpeedValue;
			half _MotionSmallTillingValue;
			half _MotionSmallPhaseValue;
			half _MotionSmallPivotValue;
			half _GlobalFadeLayerValue;
			half _MotionSmallMaskMode;
			half _MotionSmallIntensityValue;
			half _SizeFadeIntensityValue;
			half _SizeFadeScaleMode;
			half _SizeFadeGlobalValue;
			half _SizeFadeElementMode;
			half _GlobalFlowPivotValue;
			half _GlobalFlowLayerValue;
			half _GlobalFormPivotValue;
			half _GlobalFormLayerValue;
			half _motion_small_mask_mode;
			half _MotionDistValue;
			half _ObjectEnd;
			half _PerspectiveEnd;
			half _RenderSSR;
			half _RenderDecals;
			half _RenderBakeGI;
			half _RenderNormal;
			half _RenderCull;
			half _RenderMode;
			half _RenderEnd;
			half _RenderCategory;
			half _IsVersion;
			half _RenderPriority;
			half _RenderZWrite;
			half _IsGeneralShader;
			half _render_coverage;
			half _render_zw;
			half _render_dst;
			half _render_src;
			half _render_cull;
			half _SubsurfaceScatteringValue;
			half _SubsurfaceSpace;
			float _SubsurfaceDiffusion;
			half _IsStandardShader;
			half _ObjectCategory;
			half _RenderQueue;
			half _Cutoff;
			half _PerspectiveCategory;
			half _SizeFadeEnd;
			half _SizeFadeCategory;
			half _MotionPushInfo;
			half _MotionElementMode;
			half _MotionWindEnd;
			half _MotionCategory;
			half _NormalBakeMode;
			half _NormalSpace;
			half _RenderMotion;
			half _NormalEnd;
			half _RenderClip;
			half _RenderShadow;
			half _RenderFilter;
			half _IsIdentifier;
			half _IsConverted;
			half _IsCollected;
			half _IsShared;
			half _IsCustomShader;
			half _IsTVEShader;
			half _NormalCategory;
			half _motion_tiny_mask_mode;
			half _MotionTinyMaskMode;
			half _MotionTinyTillingValue;
			half _SecondCoordMode;
			half _SecondSampleMode;
			half _LayerEnd;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _ThirdCoordMode;
			half _ThirdSampleMode;
			half _SecondMaskSampleMode;
			half _DetailEnd;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _VariationEnd;
			half _VariationCategory;
			half _TintingBakeMode;
			half _DetailCategory;
			half _TintingSpace;
			half _SecondMaskCoordMode;
			half _MainCategory;
			half _SecondLumaValue;
			half _SecondMaskValue;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _SecondSmoothnessValue;
			half _SecondOcclusionValue;
			half _SecondMetallicValue;
			half _SecondAlbedoValue;
			half _SecondBakeMode;
			half _MainAlphaClipValue;
			half _MainColorMode;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MainAlbedoValue;
			half _MainMultiMaskInfo;
			half _MainCoordMode;
			half _MainSampleMode;
			half _MainEnd;
			half _MainNormalValue;
			half _TintingEnd;
			half _TintingCategory;
			half _DrynessBakeMode;
			half _SubsurfaceEnd;
			half _SubsurfaceCategory;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _NormalComputeValue;
			half _NormalSphereValue;
			half _NormalFlattenValue;
			half _MotionBaseMaskMode;
			half _motion_base_mask_mode;
			half _SubsurfaceDirectValue;
			half _MotionBaseIntensityValue;
			half _MotionBasePushValue;
			half _MotionBaseDelayValue;
			half _MotionBaseNoiseValue;
			half _MotionBaseSpeedValue;
			half _MotionBaseTillingValue;
			half _MotionBasePhaseValue;
			half _MotionBasePivotValue;
			half _MotionTinyNoiseValue;
			half _MotionTinySpeedValue;
			half _motion_small_mode;
			half _SubsurfaceNormalValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceShadowValue;
			half _DrynessSpace;
			half _DrynessEnd;
			half _DrynessCategory;
			half _OverlayBakeMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _WetnessBakeMode;
			half _WetnessEnd;
			half _WetnessCategory;
			half _CutoutBakeMode;
			half _CutoutSpace;
			half _CutoutEnd;
			half _CutoutCategory;
			half _DitherEnd;
			half _DitherCategory;
			half _EmissiveFlagMode;
			half _EmissivePowerValue;
			half _EmissivePowerMode;
			half _EmissiveEnd;
			half _EmissiveCategory;
			half _SecondMeshValue;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			TEXTURE2D(_NoiseTexSS);
			SAMPLER(sampler_NoiseTexSS);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_SizeFadeParams;
			half4 TVE_FormParams;
			float TVE_CoatLayers[10];
			TEXTURE2D_ARRAY(TVE_CoatBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_CoatNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			float TVE_FlowLayers[10];
			TEXTURE2D_ARRAY(TVE_FlowBaseTex);
			TEXTURE2D_ARRAY(TVE_FlowNearTex);
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			half4 TVE_MotionParams;
			TEXTURE2D(_MotionNoiseTex);
			half4 TVE_MotionParamsEditor;
			half _DisableSRPBatcher;
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			half4 TVE_DitherParams;
			TEXTURE2D(_EmissiveMaskTex);
			half3 TVE_MainLightDirection;


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
			#define ASE_NEEDS_TEXTURE_COORDINATES2
			#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_SIZEFADE
			#pragma shader_feature_local_vertex TVE_PERSPECTIVE
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
			#pragma shader_feature_local_vertex TVE_NORMAL
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_VARIATION
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma shader_feature_local_fragment TVE_DITHER
			#pragma shader_feature_local_fragment TVE_DITHER_SHADOW
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_GEOMETRY_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			half ShadowPassCheck36_g170705( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			half ShadowPassCheck36_g170718( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    surfaceDescription.Alpha = 1.0f;
                }
                #endif

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				TVEModelData Data16_g170779 = (TVEModelData)0;
				float In_Dummy16_g170779 = 0.0;
				TVEModelData Data16_g170768 = (TVEModelData)0;
				half Dummy1575_g170752 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
				float In_Dummy16_g170768 = Dummy1575_g170752;
				TVEModelData Data16_g170728 = (TVEModelData)0;
				float In_Dummy16_g170728 = 0.0;
				TVEModelData Data16_g170503 = (TVEModelData)0;
				half Dummy181_g170486 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
				float In_Dummy16_g170503 = Dummy181_g170486;
				TVEModelData Data16_g170440 = (TVEModelData)0;
				half Dummy181_g170438 = ( _SizeFadeCategory + _SizeFadeEnd );
				float In_Dummy16_g170440 = Dummy181_g170438;
				TVEModelData Data16_g170396 = (TVEModelData)0;
				half Dummy181_g170393 = ( _PerspectiveCategory + _PerspectiveEnd );
				float In_Dummy16_g170396 = Dummy181_g170393;
				TVEModelData Data16_g170370 = (TVEModelData)0;
				float In_Dummy16_g170370 = 0.0;
				TVEModelData Data16_g170200 = (TVEModelData)0;
				half Dummy207_g170196 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
				float In_Dummy16_g170200 = Dummy207_g170196;
				half3 PositionOS131_g170196 = inputMesh.positionOS;
				float3 In_PositionOS16_g170200 = PositionOS131_g170196;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g170196 = ase_positionWS;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170200 = PositionWS122_g170196;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170206 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170206 = ( localObjectPosition_UNITY_MATRIX_M14_g170206 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170206 = localObjectPosition_UNITY_MATRIX_M14_g170206;
				#endif
				float3 temp_output_340_7_g170196 = staticSwitch13_g170206;
				float3 localObjectPosition_UNITY_MATRIX_M14_g170208 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170204 = (float3(inputMesh.ase_texcoord3.x , inputMesh.ase_texcoord3.z , inputMesh.ase_texcoord3.y));
				float3 break233_g170196 = PositionOS131_g170196;
				float3 appendResult234_g170196 = (float3(break233_g170196.x , 0.0 , break233_g170196.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170196 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170196 = appendResult60_g170204;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170196 = appendResult234_g170196;
				#else
				float3 staticSwitch229_g170196 = _Vector0;
				#endif
				half3 PivotOS149_g170196 = staticSwitch229_g170196;
				float3 temp_output_122_0_g170208 = PivotOS149_g170196;
				float3 PivotsOnlyWS105_g170208 = mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g170208 , 0.0 ) ).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g170208 = ( ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g170208 = ( localObjectPosition_UNITY_MATRIX_M14_g170208 + PivotsOnlyWS105_g170208 );
				#endif
				float3 temp_output_341_7_g170196 = staticSwitch13_g170208;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170196 = temp_output_341_7_g170196;
				#else
				float3 staticSwitch236_g170196 = temp_output_340_7_g170196;
				#endif
				float3 vertexToFrag76_g170196 = staticSwitch236_g170196;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170200 = PositionWO132_g170196;
				float3 In_PositionRawOS16_g170200 = PositionOS131_g170196;
				float3 In_PositionAddOS16_g170200 = float3( 0,0,0 );
				float3 In_PivotOS16_g170200 = PivotOS149_g170196;
				float3 In_PivotWS16_g170200 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170200 = PivotWO133_g170196;
				half3 NormalOS134_g170196 = inputMesh.normalOS;
				float3 In_NormalOS16_g170200 = NormalOS134_g170196;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170200 = Normal_WS95_g170196;
				float3 In_NormalRawOS16_g170200 = NormalOS134_g170196;
				float3 objToWorldDir298_g170196 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g170196 = objToWorldDir298_g170196;
				float3 In_NormalRawWS16_g170200 = Normal_RawWS136_g170196;
				half4 TangentlOS153_g170196 = inputMesh.tangentOS;
				float4 In_TangentOS16_g170200 = TangentlOS153_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170200 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = inputMesh.ase_color;
				float4 In_VertexData16_g170200 = VertexMasks171_g170196;
				float mulTime113_g170203 = _TimeParameters.x * 0.52;
				float lerpResult128_g170203 = lerp( mulTime113_g170203 , ( ( mulTime113_g170203 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g170196 = PivotWO133_g170196;
				half Pivot_Position322_g170196 = ( break319_g170196.x + break319_g170196.z );
				float mulTime113_g170202 = _TimeParameters.x * 0.27;
				float lerpResult128_g170202 = lerp( mulTime113_g170202 , ( ( mulTime113_g170202 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g170205 = _object_phase_mode;
				float temp_output_30_0_g170205 = ( inputMesh.ase_color.r * break33_g170205.x );
				float temp_output_29_0_g170205 = ( inputMesh.ase_color.g * break33_g170205.y );
				float temp_output_31_0_g170205 = ( inputMesh.ase_color.b * break33_g170205.z );
				float temp_output_28_0_g170205 = ( temp_output_30_0_g170205 + temp_output_29_0_g170205 + temp_output_31_0_g170205 + ( inputMesh.ase_color.a * break33_g170205.w ) );
				float temp_output_315_0_g170196 = (frac( ( temp_output_28_0_g170205 + Pivot_Position322_g170196 ) )*2.0 + -1.0);
				float4 appendResult177_g170196 = (float4(sin( ( lerpResult128_g170203 + Pivot_Position322_g170196 ) ) , sin( ( lerpResult128_g170202 + Pivot_Position322_g170196 ) ) , temp_output_315_0_g170196 , 1.0));
				half4 MotionMasks176_g170196 = appendResult177_g170196;
				float4 In_PhaseData16_g170200 = MotionMasks176_g170196;
				half Object_HeightValue267_g170196 = _ObjectHeightValue;
				half Object_RadiusValue268_g170196 = _ObjectRadiusValue;
				float temp_output_270_0_g170196 = (PositionOS131_g170196).y;
				half Bounds_HeightMask274_g170196 = saturate( ( temp_output_270_0_g170196 / Object_HeightValue267_g170196 ) );
				half Bounds_SphereMask282_g170196 = saturate( ( length( PositionOS131_g170196 ) / max( Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 ) ) );
				float4 appendResult253_g170196 = (float4(Object_HeightValue267_g170196 , Object_RadiusValue268_g170196 , Bounds_HeightMask274_g170196 , Bounds_SphereMask282_g170196));
				half4 BoundsData254_g170196 = appendResult253_g170196;
				float4 In_BoundsData16_g170200 = BoundsData254_g170196;
				float4 In_RotationData16_g170200 = float4( 0,0,0,0 );
				{
				Data16_g170200.Dummy = In_Dummy16_g170200;
				Data16_g170200.PositionOS = In_PositionOS16_g170200;
				Data16_g170200.PositionWS = In_PositionWS16_g170200;
				Data16_g170200.PositionWO = In_PositionWO16_g170200;
				Data16_g170200.PositionRawOS = In_PositionRawOS16_g170200;
				Data16_g170200.PositionAddOS = In_PositionAddOS16_g170200;
				Data16_g170200.PivotOS = In_PivotOS16_g170200;
				Data16_g170200.PivotWS = In_PivotWS16_g170200;
				Data16_g170200.PivotWO = In_PivotWO16_g170200;
				Data16_g170200.NormalOS = In_NormalOS16_g170200;
				Data16_g170200.NormalWS = In_NormalWS16_g170200;
				Data16_g170200.NormalRawOS = In_NormalRawOS16_g170200;
				Data16_g170200.NormalRawWS = In_NormalRawWS16_g170200;
				Data16_g170200.TangentOS = In_TangentOS16_g170200;
				Data16_g170200.ViewDirWS = In_ViewDirWS16_g170200;
				Data16_g170200.VertexData = In_VertexData16_g170200;
				Data16_g170200.PhaseData = In_PhaseData16_g170200;
				Data16_g170200.BoundsData = In_BoundsData16_g170200;
				Data16_g170200.RotationData = In_RotationData16_g170200;
				}
				TVEModelData Data15_g170371 = Data16_g170200;
				float Out_Dummy15_g170371 = 0;
				float3 Out_PositionOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170371 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170371 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170371 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170371 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170371 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170371 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170371 = float3( 0,0,0 );
				float4 Out_VertexData15_g170371 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170371 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170371 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170371 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170371 = Data15_g170371.Dummy;
				Out_PositionOS15_g170371 = Data15_g170371.PositionOS;
				Out_PositionWS15_g170371 = Data15_g170371.PositionWS;
				Out_PositionWO15_g170371 = Data15_g170371.PositionWO;
				Out_PositionRawOS15_g170371 = Data15_g170371.PositionRawOS;
				Out_PositionAddOS15_g170371 = Data15_g170371.PositionAddOS;
				Out_PivotOS15_g170371 = Data15_g170371.PivotOS;
				Out_PivotWS15_g170371 = Data15_g170371.PivotWS;
				Out_PivotWO15_g170371 = Data15_g170371.PivotWO;
				Out_NormalOS15_g170371 = Data15_g170371.NormalOS;
				Out_NormalWS15_g170371 = Data15_g170371.NormalWS;
				Out_NormalRawOS15_g170371 = Data15_g170371.NormalRawOS;
				Out_NormalRawWS15_g170371 = Data15_g170371.NormalRawWS;
				Out_TangentOS15_g170371 = Data15_g170371.TangentOS;
				Out_ViewDirWS15_g170371 = Data15_g170371.ViewDirWS;
				Out_VertexData15_g170371 = Data15_g170371.VertexData;
				Out_PhaseData15_g170371 = Data15_g170371.PhaseData;
				Out_BoundsData15_g170371 = Data15_g170371.BoundsData;
				Out_RotationData15_g170371 = Data15_g170371.RotationData;
				}
				float3 temp_output_218_24_g170369 = Out_PivotOS15_g170371;
				float3 In_PositionOS16_g170370 = ( Out_PositionOS15_g170371 - temp_output_218_24_g170369 );
				float3 In_PositionWS16_g170370 = Out_PositionWS15_g170371;
				float3 In_PositionWO16_g170370 = Out_PositionWO15_g170371;
				float3 In_PositionRawOS16_g170370 = Out_PositionRawOS15_g170371;
				float3 In_PositionAddOS16_g170370 = Out_PositionAddOS15_g170371;
				float3 In_PivotOS16_g170370 = temp_output_218_24_g170369;
				float3 In_PivotWS16_g170370 = Out_PivotWS15_g170371;
				float3 In_PivotWO16_g170370 = Out_PivotWO15_g170371;
				float3 In_NormalOS16_g170370 = Out_NormalOS15_g170371;
				float3 In_NormalWS16_g170370 = Out_NormalWS15_g170371;
				float3 In_NormalRawOS16_g170370 = Out_NormalRawOS15_g170371;
				float3 In_NormalRawWS16_g170370 = Out_NormalRawWS15_g170371;
				float4 In_TangentOS16_g170370 = Out_TangentOS15_g170371;
				float3 In_ViewDirWS16_g170370 = Out_ViewDirWS15_g170371;
				float4 In_VertexData16_g170370 = Out_VertexData15_g170371;
				float4 In_PhaseData16_g170370 = Out_PhaseData15_g170371;
				float4 In_BoundsData16_g170370 = Out_BoundsData15_g170371;
				float4 In_RotationData16_g170370 = Out_RotationData15_g170371;
				{
				Data16_g170370.Dummy = In_Dummy16_g170370;
				Data16_g170370.PositionOS = In_PositionOS16_g170370;
				Data16_g170370.PositionWS = In_PositionWS16_g170370;
				Data16_g170370.PositionWO = In_PositionWO16_g170370;
				Data16_g170370.PositionRawOS = In_PositionRawOS16_g170370;
				Data16_g170370.PositionAddOS = In_PositionAddOS16_g170370;
				Data16_g170370.PivotOS = In_PivotOS16_g170370;
				Data16_g170370.PivotWS = In_PivotWS16_g170370;
				Data16_g170370.PivotWO = In_PivotWO16_g170370;
				Data16_g170370.NormalOS = In_NormalOS16_g170370;
				Data16_g170370.NormalWS = In_NormalWS16_g170370;
				Data16_g170370.NormalRawOS = In_NormalRawOS16_g170370;
				Data16_g170370.NormalRawWS = In_NormalRawWS16_g170370;
				Data16_g170370.TangentOS = In_TangentOS16_g170370;
				Data16_g170370.ViewDirWS = In_ViewDirWS16_g170370;
				Data16_g170370.VertexData = In_VertexData16_g170370;
				Data16_g170370.PhaseData = In_PhaseData16_g170370;
				Data16_g170370.BoundsData = In_BoundsData16_g170370;
				Data16_g170370.RotationData = In_RotationData16_g170370;
				}
				TVEModelData Data15_g170394 = Data16_g170370;
				float Out_Dummy15_g170394 = 0;
				float3 Out_PositionOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170394 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170394 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170394 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170394 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170394 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170394 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170394 = float3( 0,0,0 );
				float4 Out_VertexData15_g170394 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170394 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170394 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170394 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170394 = Data15_g170394.Dummy;
				Out_PositionOS15_g170394 = Data15_g170394.PositionOS;
				Out_PositionWS15_g170394 = Data15_g170394.PositionWS;
				Out_PositionWO15_g170394 = Data15_g170394.PositionWO;
				Out_PositionRawOS15_g170394 = Data15_g170394.PositionRawOS;
				Out_PositionAddOS15_g170394 = Data15_g170394.PositionAddOS;
				Out_PivotOS15_g170394 = Data15_g170394.PivotOS;
				Out_PivotWS15_g170394 = Data15_g170394.PivotWS;
				Out_PivotWO15_g170394 = Data15_g170394.PivotWO;
				Out_NormalOS15_g170394 = Data15_g170394.NormalOS;
				Out_NormalWS15_g170394 = Data15_g170394.NormalWS;
				Out_NormalRawOS15_g170394 = Data15_g170394.NormalRawOS;
				Out_NormalRawWS15_g170394 = Data15_g170394.NormalRawWS;
				Out_TangentOS15_g170394 = Data15_g170394.TangentOS;
				Out_ViewDirWS15_g170394 = Data15_g170394.ViewDirWS;
				Out_VertexData15_g170394 = Data15_g170394.VertexData;
				Out_PhaseData15_g170394 = Data15_g170394.PhaseData;
				Out_BoundsData15_g170394 = Data15_g170394.BoundsData;
				Out_RotationData15_g170394 = Data15_g170394.RotationData;
				}
				half3 Model_PositionOS147_g170393 = Out_PositionOS15_g170394;
				float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
				float3 ase_viewDirSafeWS = SafeNormalize( ase_viewVectorWS );
				float4x4 break117_g170395 = unity_CameraToWorld;
				float3 appendResult118_g170395 = (float3(break117_g170395[ 0 ][ 2 ] , break117_g170395[ 1 ][ 2 ] , break117_g170395[ 2 ][ 2 ]));
				float3 lerpResult209_g170393 = lerp( ase_viewDirSafeWS , -appendResult118_g170395 , unity_OrthoParams.w);
				float3 break201_g170393 = cross( lerpResult209_g170393 , half3( 0, 1, 0 ) );
				float3 appendResult196_g170393 = (float3(-break201_g170393.z , 0.0 , break201_g170393.x));
				float4 temp_output_149_27_g170393 = Out_PhaseData15_g170394;
				half4 Model_PhaseData218_g170393 = temp_output_149_27_g170393;
				float temp_output_222_0_g170393 = ( ((Model_PhaseData218_g170393).z*2.0 + -1.0) * _PerspectivePhaseValue );
				float3 appendResult224_g170393 = (float3(temp_output_222_0_g170393 , 0.0 , temp_output_222_0_g170393));
				float dotResult189_g170393 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
				float saferPower192_g170393 = abs( dotResult189_g170393 );
				#ifdef TVE_PERSPECTIVE
				float3 staticSwitch211_g170393 = ( Model_PositionOS147_g170393 + ( ( mul( GetWorldToObjectMatrix(), float4( appendResult196_g170393 , 0.0 ) ).xyz + appendResult224_g170393 ) * _PerspectiveIntensityValue * pow( saferPower192_g170393 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170393).y ) ) );
				#else
				float3 staticSwitch211_g170393 = Model_PositionOS147_g170393;
				#endif
				half3 Final_Position178_g170393 = staticSwitch211_g170393;
				float3 In_PositionOS16_g170396 = Final_Position178_g170393;
				float3 In_PositionWS16_g170396 = Out_PositionWS15_g170394;
				float3 In_PositionWO16_g170396 = Out_PositionWO15_g170394;
				float3 In_PositionRawOS16_g170396 = Out_PositionRawOS15_g170394;
				float3 In_PositionAddOS16_g170396 = Out_PositionAddOS15_g170394;
				float3 In_PivotOS16_g170396 = Out_PivotOS15_g170394;
				float3 In_PivotWS16_g170396 = Out_PivotWS15_g170394;
				float3 In_PivotWO16_g170396 = Out_PivotWO15_g170394;
				float3 In_NormalOS16_g170396 = Out_NormalOS15_g170394;
				float3 In_NormalWS16_g170396 = Out_NormalWS15_g170394;
				float3 In_NormalRawOS16_g170396 = Out_NormalRawOS15_g170394;
				float3 In_NormalRawWS16_g170396 = Out_NormalRawWS15_g170394;
				float4 In_TangentOS16_g170396 = Out_TangentOS15_g170394;
				float3 In_ViewDirWS16_g170396 = Out_ViewDirWS15_g170394;
				float4 In_VertexData16_g170396 = Out_VertexData15_g170394;
				float4 In_PhaseData16_g170396 = temp_output_149_27_g170393;
				float4 In_BoundsData16_g170396 = Out_BoundsData15_g170394;
				float4 In_RotationData16_g170396 = Out_RotationData15_g170394;
				{
				Data16_g170396.Dummy = In_Dummy16_g170396;
				Data16_g170396.PositionOS = In_PositionOS16_g170396;
				Data16_g170396.PositionWS = In_PositionWS16_g170396;
				Data16_g170396.PositionWO = In_PositionWO16_g170396;
				Data16_g170396.PositionRawOS = In_PositionRawOS16_g170396;
				Data16_g170396.PositionAddOS = In_PositionAddOS16_g170396;
				Data16_g170396.PivotOS = In_PivotOS16_g170396;
				Data16_g170396.PivotWS = In_PivotWS16_g170396;
				Data16_g170396.PivotWO = In_PivotWO16_g170396;
				Data16_g170396.NormalOS = In_NormalOS16_g170396;
				Data16_g170396.NormalWS = In_NormalWS16_g170396;
				Data16_g170396.NormalRawOS = In_NormalRawOS16_g170396;
				Data16_g170396.NormalRawWS = In_NormalRawWS16_g170396;
				Data16_g170396.TangentOS = In_TangentOS16_g170396;
				Data16_g170396.ViewDirWS = In_ViewDirWS16_g170396;
				Data16_g170396.VertexData = In_VertexData16_g170396;
				Data16_g170396.PhaseData = In_PhaseData16_g170396;
				Data16_g170396.BoundsData = In_BoundsData16_g170396;
				Data16_g170396.RotationData = In_RotationData16_g170396;
				}
				TVEModelData Data15_g170439 = Data16_g170396;
				float Out_Dummy15_g170439 = 0;
				float3 Out_PositionOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170439 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170439 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170439 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170439 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170439 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170439 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170439 = float3( 0,0,0 );
				float4 Out_VertexData15_g170439 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170439 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170439 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170439 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170439 = Data15_g170439.Dummy;
				Out_PositionOS15_g170439 = Data15_g170439.PositionOS;
				Out_PositionWS15_g170439 = Data15_g170439.PositionWS;
				Out_PositionWO15_g170439 = Data15_g170439.PositionWO;
				Out_PositionRawOS15_g170439 = Data15_g170439.PositionRawOS;
				Out_PositionAddOS15_g170439 = Data15_g170439.PositionAddOS;
				Out_PivotOS15_g170439 = Data15_g170439.PivotOS;
				Out_PivotWS15_g170439 = Data15_g170439.PivotWS;
				Out_PivotWO15_g170439 = Data15_g170439.PivotWO;
				Out_NormalOS15_g170439 = Data15_g170439.NormalOS;
				Out_NormalWS15_g170439 = Data15_g170439.NormalWS;
				Out_NormalRawOS15_g170439 = Data15_g170439.NormalRawOS;
				Out_NormalRawWS15_g170439 = Data15_g170439.NormalRawWS;
				Out_TangentOS15_g170439 = Data15_g170439.TangentOS;
				Out_ViewDirWS15_g170439 = Data15_g170439.ViewDirWS;
				Out_VertexData15_g170439 = Data15_g170439.VertexData;
				Out_PhaseData15_g170439 = Data15_g170439.PhaseData;
				Out_BoundsData15_g170439 = Data15_g170439.BoundsData;
				Out_RotationData15_g170439 = Data15_g170439.RotationData;
				}
				half3 Model_PositionOS147_g170438 = Out_PositionOS15_g170439;
				float3 temp_cast_5 = (1.0).xxx;
				float3 temp_output_210_19_g170438 = Out_PivotWO15_g170439;
				half3 Model_PivotWO162_g170438 = temp_output_210_19_g170438;
				float lerpResult216_g170438 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
				float temp_output_7_0_g170444 = _SizeFadeDistMaxValue;
				float temp_output_9_0_g170444 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170438 ) * lerpResult216_g170438 ) - temp_output_7_0_g170444 );
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170441 = Data204_g170214;
				float Out_Dummy15_g170441 = 0;
				float4 Out_CoatDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170441 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170441 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170441 = Data15_g170441.Dummy;
				Out_CoatDataRT15_g170441 = Data15_g170441.CoatDataRT;
				Out_PaintDataRT15_g170441 = Data15_g170441.PaintDataRT;
				Out_GlowDataRT15_g170441= Data15_g170441.GlowDataRT;
				Out_AtmoDataRT15_g170441= Data15_g170441.AtmoDataRT;
				Out_FadeDataRT15_g170441= Data15_g170441.FadeDataRT;
				Out_FormDataRT15_g170441 = Data15_g170441.FormDataRT;
				Out_FlowDataRT15_g170441 = Data15_g170441.FlowDataRT;
				}
				half4 Input_FormParams188_g170438 = Out_FormDataRT15_g170441;
				float temp_output_6_0_g170442 = saturate( (Input_FormParams188_g170438).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170442 = ( temp_output_6_0_g170442 + _SizeFadeElementMode );
				#else
				float staticSwitch14_g170442 = temp_output_6_0_g170442;
				#endif
				#ifdef TVE_SIZEFADE_ELEMENT
				float staticSwitch194_g170438 = staticSwitch14_g170442;
				#else
				float staticSwitch194_g170438 = TVE_FormParams.w;
				#endif
				float lerpResult213_g170438 = lerp( 1.0 , staticSwitch194_g170438 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
				half SizeFade_MaskGlobal192_g170438 = lerpResult213_g170438;
				half User_Mask232_g170438 = 1.0;
				float temp_output_189_0_g170438 = ( saturate( ( ( temp_output_9_0_g170444 / ( _SizeFadeDistMinValue - temp_output_7_0_g170444 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170438 * User_Mask232_g170438 );
				float3 appendResult200_g170438 = (float3(temp_output_189_0_g170438 , temp_output_189_0_g170438 , temp_output_189_0_g170438));
				float3 appendResult201_g170438 = (float3(1.0 , temp_output_189_0_g170438 , 1.0));
				float3 lerpResult202_g170438 = lerp( appendResult200_g170438 , appendResult201_g170438 , _SizeFadeScaleMode);
				float3 lerpResult184_g170438 = lerp( temp_cast_5 , lerpResult202_g170438 , _SizeFadeIntensityValue);
				#ifdef TVE_SIZEFADE
				float3 staticSwitch199_g170438 = ( lerpResult184_g170438 * Model_PositionOS147_g170438 );
				#else
				float3 staticSwitch199_g170438 = Model_PositionOS147_g170438;
				#endif
				half3 Final_Position178_g170438 = staticSwitch199_g170438;
				float3 In_PositionOS16_g170440 = Final_Position178_g170438;
				float3 In_PositionWS16_g170440 = Out_PositionWS15_g170439;
				float3 In_PositionWO16_g170440 = Out_PositionWO15_g170439;
				float3 In_PositionRawOS16_g170440 = Out_PositionRawOS15_g170439;
				float3 In_PositionAddOS16_g170440 = Out_PositionAddOS15_g170439;
				float3 temp_output_210_24_g170438 = Out_PivotOS15_g170439;
				float3 In_PivotOS16_g170440 = temp_output_210_24_g170438;
				float3 In_PivotWS16_g170440 = Out_PivotWS15_g170439;
				float3 In_PivotWO16_g170440 = temp_output_210_19_g170438;
				float3 In_NormalOS16_g170440 = Out_NormalOS15_g170439;
				float3 In_NormalWS16_g170440 = Out_NormalWS15_g170439;
				float3 In_NormalRawOS16_g170440 = Out_NormalRawOS15_g170439;
				float3 In_NormalRawWS16_g170440 = Out_NormalRawWS15_g170439;
				float4 In_TangentOS16_g170440 = Out_TangentOS15_g170439;
				float3 In_ViewDirWS16_g170440 = Out_ViewDirWS15_g170439;
				float4 In_VertexData16_g170440 = Out_VertexData15_g170439;
				float4 In_PhaseData16_g170440 = Out_PhaseData15_g170439;
				float4 In_BoundsData16_g170440 = Out_BoundsData15_g170439;
				float4 In_RotationData16_g170440 = Out_RotationData15_g170439;
				{
				Data16_g170440.Dummy = In_Dummy16_g170440;
				Data16_g170440.PositionOS = In_PositionOS16_g170440;
				Data16_g170440.PositionWS = In_PositionWS16_g170440;
				Data16_g170440.PositionWO = In_PositionWO16_g170440;
				Data16_g170440.PositionRawOS = In_PositionRawOS16_g170440;
				Data16_g170440.PositionAddOS = In_PositionAddOS16_g170440;
				Data16_g170440.PivotOS = In_PivotOS16_g170440;
				Data16_g170440.PivotWS = In_PivotWS16_g170440;
				Data16_g170440.PivotWO = In_PivotWO16_g170440;
				Data16_g170440.NormalOS = In_NormalOS16_g170440;
				Data16_g170440.NormalWS = In_NormalWS16_g170440;
				Data16_g170440.NormalRawOS = In_NormalRawOS16_g170440;
				Data16_g170440.NormalRawWS = In_NormalRawWS16_g170440;
				Data16_g170440.TangentOS = In_TangentOS16_g170440;
				Data16_g170440.ViewDirWS = In_ViewDirWS16_g170440;
				Data16_g170440.VertexData = In_VertexData16_g170440;
				Data16_g170440.PhaseData = In_PhaseData16_g170440;
				Data16_g170440.BoundsData = In_BoundsData16_g170440;
				Data16_g170440.RotationData = In_RotationData16_g170440;
				}
				TVEModelData Data15_g170502 = Data16_g170440;
				float Out_Dummy15_g170502 = 0;
				float3 Out_PositionOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170502 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170502 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170502 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170502 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170502 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170502 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170502 = float3( 0,0,0 );
				float4 Out_VertexData15_g170502 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170502 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170502 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170502 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170502 = Data15_g170502.Dummy;
				Out_PositionOS15_g170502 = Data15_g170502.PositionOS;
				Out_PositionWS15_g170502 = Data15_g170502.PositionWS;
				Out_PositionWO15_g170502 = Data15_g170502.PositionWO;
				Out_PositionRawOS15_g170502 = Data15_g170502.PositionRawOS;
				Out_PositionAddOS15_g170502 = Data15_g170502.PositionAddOS;
				Out_PivotOS15_g170502 = Data15_g170502.PivotOS;
				Out_PivotWS15_g170502 = Data15_g170502.PivotWS;
				Out_PivotWO15_g170502 = Data15_g170502.PivotWO;
				Out_NormalOS15_g170502 = Data15_g170502.NormalOS;
				Out_NormalWS15_g170502 = Data15_g170502.NormalWS;
				Out_NormalRawOS15_g170502 = Data15_g170502.NormalRawOS;
				Out_NormalRawWS15_g170502 = Data15_g170502.NormalRawWS;
				Out_TangentOS15_g170502 = Data15_g170502.TangentOS;
				Out_ViewDirWS15_g170502 = Data15_g170502.ViewDirWS;
				Out_VertexData15_g170502 = Data15_g170502.VertexData;
				Out_PhaseData15_g170502 = Data15_g170502.PhaseData;
				Out_BoundsData15_g170502 = Data15_g170502.BoundsData;
				Out_RotationData15_g170502 = Data15_g170502.RotationData;
				}
				float3 temp_output_2503_0_g170486 = Out_PositionOS15_g170502;
				float3 In_PositionOS16_g170503 = temp_output_2503_0_g170486;
				float3 temp_output_2503_16_g170486 = Out_PositionWS15_g170502;
				float3 In_PositionWS16_g170503 = temp_output_2503_16_g170486;
				float3 temp_output_2503_17_g170486 = Out_PositionWO15_g170502;
				float3 In_PositionWO16_g170503 = temp_output_2503_17_g170486;
				float3 In_PositionRawOS16_g170503 = Out_PositionRawOS15_g170502;
				float3 temp_cast_35 = (0.0).xxx;
				float4 temp_output_2503_29_g170486 = Out_VertexData15_g170502;
				half4 Model_VertexMasks518_g170486 = temp_output_2503_29_g170486;
				float4 break1689_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170487 = _motion_small_vert_mode;
				float temp_output_30_0_g170487 = ( break1689_g170486.x * break33_g170487.x );
				float temp_output_29_0_g170487 = ( break1689_g170486.y * break33_g170487.y );
				float temp_output_31_0_g170487 = ( break1689_g170486.z * break33_g170487.z );
				float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( break1689_g170486.w * break33_g170487.w ) );
				float temp_output_1727_0_g170486 = temp_output_28_0_g170487;
				float4 temp_output_2503_30_g170486 = Out_BoundsData15_g170502;
				half4 Model_BoundsData1322_g170486 = temp_output_2503_30_g170486;
				float4 break33_g170489 = _motion_small_proc_mode;
				float temp_output_30_0_g170489 = ( (Model_BoundsData1322_g170486).z * break33_g170489.x );
				float temp_output_29_0_g170489 = ( (Model_BoundsData1322_g170486).w * break33_g170489.y );
				float temp_output_1734_0_g170486 = ( temp_output_30_0_g170489 + temp_output_29_0_g170489 );
				float lerpResult1906_g170486 = lerp( temp_output_1727_0_g170486 , temp_output_1734_0_g170486 , _motion_small_mask_mode);
				float enc1805_g170486 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170486 = DecodeFloatToVector2( enc1805_g170486 );
				float2 break1804_g170486 = localDecodeFloatToVector21805_g170486;
				half Small_Mask_Legacy1806_g170486 = break1804_g170486.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170486 = Small_Mask_Legacy1806_g170486;
				#else
				float staticSwitch1800_g170486 = lerpResult1906_g170486;
				#endif
				float clampResult17_g170491 = clamp( staticSwitch1800_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _MotionSmallMaskRemap.x;
				float temp_output_9_0_g170500 = ( clampResult17_g170491 - temp_output_7_0_g170500 );
				float temp_output_6_0_g170498 = saturate( ( ( temp_output_9_0_g170500 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170498 = ( temp_output_6_0_g170498 + _MotionSmallMaskMode );
				#else
				float staticSwitch14_g170498 = temp_output_6_0_g170498;
				#endif
				half Small_Mask640_g170486 = staticSwitch14_g170498;
				float4 lerpResult836_g170511 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
				float2 Global_WindDirWS2542_g170486 = (lerpResult836_g170511).xy;
				half2 Input_WindDirWS803_g170512 = Global_WindDirWS2542_g170486;
				half3 Model_PositionWO162_g170486 = temp_output_2503_17_g170486;
				half3 Input_ModelPositionWO761_g170504 = Model_PositionWO162_g170486;
				float3 temp_output_2503_19_g170486 = Out_PivotWO15_g170502;
				half3 Model_PivotWO402_g170486 = temp_output_2503_19_g170486;
				half3 Input_ModelPivotsWO419_g170504 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170504 = _MotionSmallPivotValue;
				float3 lerpResult771_g170504 = lerp( Input_ModelPositionWO761_g170504 , Input_ModelPivotsWO419_g170504 , Input_MotionPivots629_g170504);
				float4 temp_output_2503_27_g170486 = Out_PhaseData15_g170502;
				half4 Model_PhaseData489_g170486 = temp_output_2503_27_g170486;
				half4 Input_ModelMotionData763_g170504 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170504 = _MotionSmallPhaseValue;
				half3 Small_Position1421_g170486 = ( lerpResult771_g170504 + ( (Input_ModelMotionData763_g170504).z * Input_MotionPhase764_g170504 * 5.0 ) );
				half3 Input_PositionWO419_g170512 = Small_Position1421_g170486;
				half Input_MotionTilling321_g170512 = ( _MotionSmallTillingValue + 0.2 );
				half2 Noise_Coord515_g170512 = ( -(Input_PositionWO419_g170512).xz * Input_MotionTilling321_g170512 * 0.005 );
				float2 temp_output_3_0_g170514 = Noise_Coord515_g170512;
				float2 temp_output_21_0_g170514 = Input_WindDirWS803_g170512;
				float lerpResult128_g170513 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170512 = _MotionSmallSpeedValue;
				half Noise_Speed516_g170512 = ( lerpResult128_g170513 * 0.02 * Input_MotionSpeed62_g170512 );
				float temp_output_15_0_g170514 = Noise_Speed516_g170512;
				float temp_output_23_0_g170514 = frac( temp_output_15_0_g170514 );
				float4 lerpResult39_g170514 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * temp_output_23_0_g170514 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170514 + ( temp_output_21_0_g170514 * frac( ( temp_output_15_0_g170514 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170514 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170512 = lerpResult39_g170514;
				half2 Noise_DirWS858_g170512 = ((temp_output_635_0_g170512).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170512 = _MotionSmallNoiseValue;
				half Global_WInd769_g170511 = (lerpResult836_g170511).z;
				TVEGlobalData Data15_g170510 = Data204_g170214;
				float Out_Dummy15_g170510 = 0;
				float4 Out_CoatDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170510 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170510 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170510 = Data15_g170510.Dummy;
				Out_CoatDataRT15_g170510 = Data15_g170510.CoatDataRT;
				Out_PaintDataRT15_g170510 = Data15_g170510.PaintDataRT;
				Out_GlowDataRT15_g170510= Data15_g170510.GlowDataRT;
				Out_AtmoDataRT15_g170510= Data15_g170510.AtmoDataRT;
				Out_FadeDataRT15_g170510= Data15_g170510.FadeDataRT;
				Out_FormDataRT15_g170510 = Data15_g170510.FormDataRT;
				Out_FlowDataRT15_g170510 = Data15_g170510.FlowDataRT;
				}
				half4 Global_FlowParams2668_g170486 = Out_FlowDataRT15_g170510;
				half4 Input_GlobalFlow826_g170511 = Global_FlowParams2668_g170486;
				float temp_output_764_0_g170511 = (Input_GlobalFlow826_g170511).w;
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch612_g170511 = saturate( temp_output_764_0_g170511 );
				#else
				float staticSwitch612_g170511 = Global_WInd769_g170511;
				#endif
				float lerpResult853_g170511 = lerp( staticSwitch612_g170511 , saturate( (staticSwitch612_g170511*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
				half Input_MotionValue629_g170511 = _MotionIntensityValue;
				half Global_WindValue1855_g170486 = ( lerpResult853_g170511 * Input_MotionValue629_g170511 );
				half Input_WindValue881_g170512 = Global_WindValue1855_g170486;
				float lerpResult701_g170512 = lerp( 1.0 , Input_MotionNoise552_g170512 , Input_WindValue881_g170512);
				float2 lerpResult646_g170512 = lerp( Input_WindDirWS803_g170512 , Noise_DirWS858_g170512 , lerpResult701_g170512);
				half2 Small_DirWS817_g170512 = lerpResult646_g170512;
				float2 break823_g170512 = Small_DirWS817_g170512;
				half4 Noise_Params685_g170512 = temp_output_635_0_g170512;
				half Wind_Sinus820_g170512 = ( ((Noise_Params685_g170512).b*2.0 + -1.0) * Input_MotionNoise552_g170512 * 0.6 );
				float3 appendResult824_g170512 = (float3(break823_g170512.x , Wind_Sinus820_g170512 , break823_g170512.y));
				half Input_MotionDelay753_g170512 = _MotionSmallDelayValue;
				float lerpResult756_g170512 = lerp( 1.0 , ( Input_WindValue881_g170512 * Input_WindValue881_g170512 ) , Input_MotionDelay753_g170512);
				half Wind_Delay815_g170512 = lerpResult756_g170512;
				float3 appendResult825_g170512 = (float3(Wind_Delay815_g170512 , 1.0 , Wind_Delay815_g170512));
				float3 temp_output_827_0_g170512 = ( ( appendResult824_g170512 * Input_WindValue881_g170512 ) * appendResult825_g170512 );
				float2 break857_g170512 = Noise_DirWS858_g170512;
				float3 appendResult833_g170512 = (float3(break857_g170512.x , Wind_Sinus820_g170512 , break857_g170512.y));
				half Global_PushWave2675_g170486 = (Input_GlobalFlow826_g170511).z;
				half Input_PushWave890_g170512 = Global_PushWave2675_g170486;
				float2 temp_output_790_0_g170511 = (Input_GlobalFlow826_g170511).xy;
				half Global_PushAlpha1504_g170486 = saturate( length( temp_output_790_0_g170511 ) );
				half Input_PushAlpha806_g170512 = ( Global_PushAlpha1504_g170486 * _MotionSmallPushValue );
				float3 lerpResult840_g170512 = lerp( temp_output_827_0_g170512 , ( appendResult833_g170512 * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float3 staticSwitch829_g170512 = lerpResult840_g170512;
				#else
				float3 staticSwitch829_g170512 = temp_output_827_0_g170512;
				#endif
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				float3 temp_output_847_0_g170512 = ( mul( GetWorldToObjectMatrix(), float4( staticSwitch829_g170512 , 0.0 ) ).xyz * ase_parentObjectScale );
				half3 Small_Squash1489_g170486 = temp_output_847_0_g170512;
				half3 Small_Motion789_g170486 = ( _MotionSmallIntensityValue * Small_Mask640_g170486 * Small_Squash1489_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch495_g170486 = Small_Motion789_g170486;
				#else
				float3 staticSwitch495_g170486 = temp_cast_35;
				#endif
				float3 temp_cast_38 = (0.0).xxx;
				half3 Model_PositionWS1819_g170486 = temp_output_2503_16_g170486;
				half Global_DistMask1820_g170486 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170486 ) / _MotionDistValue ) ) );
				float4 break1710_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170488 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170488 = ( break1710_g170486.x * break33_g170488.x );
				float temp_output_29_0_g170488 = ( break1710_g170486.y * break33_g170488.y );
				float temp_output_31_0_g170488 = ( break1710_g170486.z * break33_g170488.z );
				float temp_output_28_0_g170488 = ( temp_output_30_0_g170488 + temp_output_29_0_g170488 + temp_output_31_0_g170488 + ( break1710_g170486.w * break33_g170488.w ) );
				float temp_output_1729_0_g170486 = temp_output_28_0_g170488;
				float4 break33_g170490 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170490 = ( (Model_BoundsData1322_g170486).z * break33_g170490.x );
				float temp_output_29_0_g170490 = ( (Model_BoundsData1322_g170486).w * break33_g170490.y );
				float temp_output_1735_0_g170486 = ( temp_output_30_0_g170490 + temp_output_29_0_g170490 );
				float lerpResult1908_g170486 = lerp( temp_output_1729_0_g170486 , temp_output_1735_0_g170486 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170486 = break1804_g170486.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170486 = Tiny_Mask_Legacy1807_g170486;
				#else
				float staticSwitch1810_g170486 = lerpResult1908_g170486;
				#endif
				float clampResult17_g170492 = clamp( staticSwitch1810_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170501 = _MotionTinyMaskRemap.x;
				float temp_output_9_0_g170501 = ( clampResult17_g170492 - temp_output_7_0_g170501 );
				float temp_output_6_0_g170493 = saturate( ( ( temp_output_9_0_g170501 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170493 = ( temp_output_6_0_g170493 + _MotionTinyMaskMode );
				#else
				float staticSwitch14_g170493 = temp_output_6_0_g170493;
				#endif
				half Tiny_Mask218_g170486 = staticSwitch14_g170493;
				float3 temp_output_2503_20_g170486 = Out_NormalOS15_g170502;
				half3 Model_NormalOS554_g170486 = temp_output_2503_20_g170486;
				half3 Input_NormalOS533_g170506 = Model_NormalOS554_g170486;
				half3 Tiny_Position2469_g170486 = Model_PositionWO162_g170486;
				half3 Input_PositionWO500_g170506 = Tiny_Position2469_g170486;
				half Input_MotionTilling321_g170506 = ( _MotionTinyTillingValue + 0.1 );
				float lerpResult128_g170508 = lerp( _TimeParameters.x , ( ( _TimeParameters.x * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170506 = _MotionTinySpeedValue;
				half3 Flutter_Noise535_g170506 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170506).xz * Input_MotionTilling321_g170506 * 0.005 ) + ( lerpResult128_g170508 * Input_MotionSpeed62_g170506 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
				half Input_MotionNoise542_g170506 = _MotionTinyNoiseValue;
				float3 lerpResult537_g170506 = lerp( ( Input_NormalOS533_g170506 * Flutter_Noise535_g170506 ) , Flutter_Noise535_g170506 , Input_MotionNoise542_g170506);
				half2 Input_WindDirWS803_g170517 = Global_WindDirWS2542_g170486;
				half3 Input_ModelPositionWO761_g170505 = Model_PositionWO162_g170486;
				half3 Input_ModelPivotsWO419_g170505 = Model_PivotWO402_g170486;
				half Input_MotionPivots629_g170505 = _MotionBasePivotValue;
				float3 lerpResult771_g170505 = lerp( Input_ModelPositionWO761_g170505 , Input_ModelPivotsWO419_g170505 , Input_MotionPivots629_g170505);
				half4 Input_ModelMotionData763_g170505 = Model_PhaseData489_g170486;
				half Input_MotionPhase764_g170505 = _MotionBasePhaseValue;
				half3 Base_Position1394_g170486 = ( lerpResult771_g170505 + ( (Input_ModelMotionData763_g170505).z * Input_MotionPhase764_g170505 * 5.0 ) );
				half3 Input_PositionWO419_g170517 = Base_Position1394_g170486;
				half Input_MotionTilling321_g170517 = ( _MotionBaseTillingValue + 0.2 );
				half2 Noise_Coord515_g170517 = ( -(Input_PositionWO419_g170517).xz * Input_MotionTilling321_g170517 * 0.005 );
				float2 temp_output_3_0_g170521 = Noise_Coord515_g170517;
				float2 temp_output_21_0_g170521 = Input_WindDirWS803_g170517;
				float mulTime113_g170520 = _TimeParameters.x * 0.02;
				float lerpResult128_g170520 = lerp( mulTime113_g170520 , ( ( mulTime113_g170520 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				half Input_MotionSpeed62_g170517 = _MotionBaseSpeedValue;
				half Noise_Speed516_g170517 = ( lerpResult128_g170520 * Input_MotionSpeed62_g170517 );
				float temp_output_15_0_g170521 = Noise_Speed516_g170517;
				float temp_output_23_0_g170521 = frac( temp_output_15_0_g170521 );
				float4 lerpResult39_g170521 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * temp_output_23_0_g170521 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170521 + ( temp_output_21_0_g170521 * frac( ( temp_output_15_0_g170521 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170521 - 0.5 ) ) / 0.5 ));
				float4 temp_output_635_0_g170517 = lerpResult39_g170521;
				half2 Noise_DirWS825_g170517 = ((temp_output_635_0_g170517).rg*2.0 + -1.0);
				half Input_MotionNoise552_g170517 = _MotionBaseNoiseValue;
				half Input_WindValue853_g170517 = Global_WindValue1855_g170486;
				float lerpResult701_g170517 = lerp( 1.0 , Input_MotionNoise552_g170517 , Input_WindValue853_g170517);
				float2 lerpResult646_g170517 = lerp( Input_WindDirWS803_g170517 , Noise_DirWS825_g170517 , lerpResult701_g170517);
				half Input_MotionDelay753_g170517 = _MotionBaseDelayValue;
				float lerpResult756_g170517 = lerp( 1.0 , ( Input_WindValue853_g170517 * Input_WindValue853_g170517 ) , Input_MotionDelay753_g170517);
				half Wind_Delay815_g170517 = lerpResult756_g170517;
				float2 temp_output_809_0_g170517 = ( lerpResult646_g170517 * Input_WindValue853_g170517 * Wind_Delay815_g170517 );
				half2 Bend_Dir859_g170517 = temp_output_809_0_g170517;
				float temp_output_862_0_g170517 = ( length( Bend_Dir859_g170517 ) * Input_MotionNoise552_g170517 );
				float2 Global_PushDirWS1972_g170486 = temp_output_790_0_g170511;
				half2 Input_PushDirWS807_g170517 = Global_PushDirWS1972_g170486;
				half Input_PushWave858_g170517 = Global_PushWave2675_g170486;
				half Input_PushAlpha806_g170517 = ( Global_PushAlpha1504_g170486 * _MotionBasePushValue );
				float lerpResult831_g170517 = lerp( temp_output_862_0_g170517 , ( saturate( length( Input_PushDirWS807_g170517 ) ) * Input_PushWave858_g170517 ) , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch828_g170517 = lerpResult831_g170517;
				#else
				float staticSwitch828_g170517 = temp_output_862_0_g170517;
				#endif
				half Base_Wave1159_g170486 = staticSwitch828_g170517;
				float temp_output_888_0_g170512 = ( (Noise_Params685_g170512).b * Input_WindValue881_g170512 );
				float lerpResult867_g170512 = lerp( temp_output_888_0_g170512 , ( (Noise_Params685_g170512).b * Input_PushWave890_g170512 ) , Input_PushAlpha806_g170512);
				#ifdef TVE_MOTION_ELEMENT
				float staticSwitch886_g170512 = lerpResult867_g170512;
				#else
				float staticSwitch886_g170512 = temp_output_888_0_g170512;
				#endif
				half Small_Wave1427_g170486 = staticSwitch886_g170512;
				float lerpResult2422_g170486 = lerp( Base_Wave1159_g170486 , Small_Wave1427_g170486 , _motion_small_mode);
				half Global_Wave1475_g170486 = lerpResult2422_g170486;
				half Input_GlobalWave546_g170506 = Global_Wave1475_g170486;
				float temp_output_548_0_g170506 = ( Input_GlobalWave546_g170506 * Input_GlobalWave546_g170506 );
				half Flutter_Wave556_g170506 = temp_output_548_0_g170506;
				half3 Tiny_Noise859_g170486 = ( lerpResult537_g170506 * Flutter_Wave556_g170506 );
				half3 Tiny_Flutter1451_g170486 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170486 * Tiny_Mask218_g170486 * Tiny_Noise859_g170486 );
				#ifdef TVE_MOTION
				float3 staticSwitch414_g170486 = Tiny_Flutter1451_g170486;
				#else
				float3 staticSwitch414_g170486 = temp_cast_38;
				#endif
				half3 Final_PositionADD1569_g170486 = ( staticSwitch495_g170486 + staticSwitch414_g170486 );
				float3 In_PositionAddOS16_g170503 = Final_PositionADD1569_g170486;
				float3 temp_output_2503_24_g170486 = Out_PivotOS15_g170502;
				float3 In_PivotOS16_g170503 = temp_output_2503_24_g170486;
				float3 In_PivotWS16_g170503 = Out_PivotWS15_g170502;
				float3 In_PivotWO16_g170503 = temp_output_2503_19_g170486;
				float3 In_NormalOS16_g170503 = temp_output_2503_20_g170486;
				float3 In_NormalWS16_g170503 = Out_NormalWS15_g170502;
				float3 In_NormalRawOS16_g170503 = Out_NormalRawOS15_g170502;
				float3 In_NormalRawWS16_g170503 = Out_NormalRawWS15_g170502;
				float4 In_TangentOS16_g170503 = Out_TangentOS15_g170502;
				float3 In_ViewDirWS16_g170503 = Out_ViewDirWS15_g170502;
				float4 In_VertexData16_g170503 = temp_output_2503_29_g170486;
				float4 In_PhaseData16_g170503 = temp_output_2503_27_g170486;
				float4 In_BoundsData16_g170503 = temp_output_2503_30_g170486;
				float4 break748_g170486 = Model_VertexMasks518_g170486;
				float4 break33_g170495 = _motion_base_vert_mode;
				float temp_output_30_0_g170495 = ( break748_g170486.x * break33_g170495.x );
				float temp_output_29_0_g170495 = ( break748_g170486.y * break33_g170495.y );
				float temp_output_31_0_g170495 = ( break748_g170486.z * break33_g170495.z );
				float temp_output_28_0_g170495 = ( temp_output_30_0_g170495 + temp_output_29_0_g170495 + temp_output_31_0_g170495 + ( break748_g170486.w * break33_g170495.w ) );
				float temp_output_1731_0_g170486 = temp_output_28_0_g170495;
				float4 break33_g170496 = _motion_base_proc_mode;
				float temp_output_30_0_g170496 = ( (Model_BoundsData1322_g170486).z * break33_g170496.x );
				float temp_output_29_0_g170496 = ( (Model_BoundsData1322_g170486).w * break33_g170496.y );
				float temp_output_1733_0_g170486 = ( temp_output_30_0_g170496 + temp_output_29_0_g170496 );
				float lerpResult1904_g170486 = lerp( temp_output_1731_0_g170486 , temp_output_1733_0_g170486 , _motion_base_mask_mode);
				float clampResult17_g170494 = clamp( lerpResult1904_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170499 = _MotionBaseMaskRemap.x;
				float temp_output_9_0_g170499 = ( clampResult17_g170494 - temp_output_7_0_g170499 );
				float temp_output_6_0_g170497 = saturate( ( ( temp_output_9_0_g170499 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170497 = ( temp_output_6_0_g170497 + _MotionBaseMaskMode );
				#else
				float staticSwitch14_g170497 = temp_output_6_0_g170497;
				#endif
				half Base_Mask217_g170486 = staticSwitch14_g170497;
				float2 lerpResult811_g170517 = lerp( temp_output_809_0_g170517 , Input_PushDirWS807_g170517 , Input_PushAlpha806_g170517);
				#ifdef TVE_MOTION_ELEMENT
				float2 staticSwitch808_g170517 = lerpResult811_g170517;
				#else
				float2 staticSwitch808_g170517 = temp_output_809_0_g170517;
				#endif
				float2 temp_output_38_0_g170518 = staticSwitch808_g170517;
				float2 break83_g170518 = temp_output_38_0_g170518;
				float3 appendResult79_g170518 = (float3(break83_g170518.x , 0.0 , break83_g170518.y));
				half2 Base_Bending893_g170486 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170518 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				half2 Base_Motion1440_g170486 = ( _MotionBaseIntensityValue * Base_Mask217_g170486 * Base_Bending893_g170486 );
				#ifdef TVE_MOTION
				float2 staticSwitch2384_g170486 = Base_Motion1440_g170486;
				#else
				float2 staticSwitch2384_g170486 = float2( 0,0 );
				#endif
				float4 appendResult2023_g170486 = (float4(staticSwitch2384_g170486 , 0.0 , 0.0));
				half4 Final_RotationData1570_g170486 = appendResult2023_g170486;
				float4 In_RotationData16_g170503 = Final_RotationData1570_g170486;
				{
				Data16_g170503.Dummy = In_Dummy16_g170503;
				Data16_g170503.PositionOS = In_PositionOS16_g170503;
				Data16_g170503.PositionWS = In_PositionWS16_g170503;
				Data16_g170503.PositionWO = In_PositionWO16_g170503;
				Data16_g170503.PositionRawOS = In_PositionRawOS16_g170503;
				Data16_g170503.PositionAddOS = In_PositionAddOS16_g170503;
				Data16_g170503.PivotOS = In_PivotOS16_g170503;
				Data16_g170503.PivotWS = In_PivotWS16_g170503;
				Data16_g170503.PivotWO = In_PivotWO16_g170503;
				Data16_g170503.NormalOS = In_NormalOS16_g170503;
				Data16_g170503.NormalWS = In_NormalWS16_g170503;
				Data16_g170503.NormalRawOS = In_NormalRawOS16_g170503;
				Data16_g170503.NormalRawWS = In_NormalRawWS16_g170503;
				Data16_g170503.TangentOS = In_TangentOS16_g170503;
				Data16_g170503.ViewDirWS = In_ViewDirWS16_g170503;
				Data16_g170503.VertexData = In_VertexData16_g170503;
				Data16_g170503.PhaseData = In_PhaseData16_g170503;
				Data16_g170503.BoundsData = In_BoundsData16_g170503;
				Data16_g170503.RotationData = In_RotationData16_g170503;
				}
				TVEModelData Data15_g170727 = Data16_g170503;
				float Out_Dummy15_g170727 = 0;
				float3 Out_PositionOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170727 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170727 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170727 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170727 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170727 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170727 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170727 = float3( 0,0,0 );
				float4 Out_VertexData15_g170727 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170727 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170727 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170727 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170727 = Data15_g170727.Dummy;
				Out_PositionOS15_g170727 = Data15_g170727.PositionOS;
				Out_PositionWS15_g170727 = Data15_g170727.PositionWS;
				Out_PositionWO15_g170727 = Data15_g170727.PositionWO;
				Out_PositionRawOS15_g170727 = Data15_g170727.PositionRawOS;
				Out_PositionAddOS15_g170727 = Data15_g170727.PositionAddOS;
				Out_PivotOS15_g170727 = Data15_g170727.PivotOS;
				Out_PivotWS15_g170727 = Data15_g170727.PivotWS;
				Out_PivotWO15_g170727 = Data15_g170727.PivotWO;
				Out_NormalOS15_g170727 = Data15_g170727.NormalOS;
				Out_NormalWS15_g170727 = Data15_g170727.NormalWS;
				Out_NormalRawOS15_g170727 = Data15_g170727.NormalRawOS;
				Out_NormalRawWS15_g170727 = Data15_g170727.NormalRawWS;
				Out_TangentOS15_g170727 = Data15_g170727.TangentOS;
				Out_ViewDirWS15_g170727 = Data15_g170727.ViewDirWS;
				Out_VertexData15_g170727 = Data15_g170727.VertexData;
				Out_PhaseData15_g170727 = Data15_g170727.PhaseData;
				Out_BoundsData15_g170727 = Data15_g170727.BoundsData;
				Out_RotationData15_g170727 = Data15_g170727.RotationData;
				}
				half3 Model_PositionOS147_g170726 = Out_PositionOS15_g170727;
				half3 VertexPos40_g170730 = Model_PositionOS147_g170726;
				float3 appendResult74_g170730 = (float3(VertexPos40_g170730.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170730 = appendResult74_g170730;
				float3 break84_g170730 = VertexPos40_g170730;
				float3 appendResult81_g170730 = (float3(0.0 , break84_g170730.y , break84_g170730.z));
				half3 VertexPosOtherAxis82_g170730 = appendResult81_g170730;
				float4 temp_output_1567_33_g170726 = Out_RotationData15_g170727;
				half4 Model_VertexBend1569_g170726 = temp_output_1567_33_g170726;
				float2 break1582_g170726 = (Model_VertexBend1569_g170726).xy;
				half Angle44_g170730 = break1582_g170726.y;
				half3 VertexPos40_g170733 = ( VertexPosRotationAxis50_g170730 + ( VertexPosOtherAxis82_g170730 * cos( Angle44_g170730 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170730 ) * sin( Angle44_g170730 ) ) );
				float3 appendResult74_g170733 = (float3(0.0 , 0.0 , VertexPos40_g170733.z));
				half3 VertexPosRotationAxis50_g170733 = appendResult74_g170733;
				float3 break84_g170733 = VertexPos40_g170733;
				float3 appendResult81_g170733 = (float3(break84_g170733.x , break84_g170733.y , 0.0));
				half3 VertexPosOtherAxis82_g170733 = appendResult81_g170733;
				half Angle44_g170733 = -break1582_g170726.x;
				float3 temp_output_1584_19_g170726 = ( VertexPosRotationAxis50_g170733 + ( VertexPosOtherAxis82_g170733 * cos( Angle44_g170733 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170733 ) * sin( Angle44_g170733 ) ) );
				float3 temp_output_6_0_g170732 = temp_output_1584_19_g170726;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch65_g170732 = Model_PositionOS147_g170726;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170732 = temp_output_6_0_g170732;
				#else
				float3 staticSwitch69_g170732 = staticSwitch65_g170732;
				#endif
				float3 temp_output_1585_0_g170726 = staticSwitch69_g170732;
				float3 temp_output_1567_31_g170726 = Out_PositionAddOS15_g170727;
				half3 Model_PositionADD1568_g170726 = temp_output_1567_31_g170726;
				half3 Final_PositionOS178_g170726 = ( temp_output_1585_0_g170726 + Model_PositionADD1568_g170726 );
				float3 In_PositionOS16_g170728 = Final_PositionOS178_g170726;
				float3 In_PositionWS16_g170728 = Out_PositionWS15_g170727;
				float3 In_PositionWO16_g170728 = Out_PositionWO15_g170727;
				float3 In_PositionRawOS16_g170728 = Out_PositionRawOS15_g170727;
				float3 In_PositionAddOS16_g170728 = temp_output_1567_31_g170726;
				float3 In_PivotOS16_g170728 = Out_PivotOS15_g170727;
				float3 In_PivotWS16_g170728 = Out_PivotWS15_g170727;
				float3 In_PivotWO16_g170728 = Out_PivotWO15_g170727;
				float3 In_NormalOS16_g170728 = Out_NormalOS15_g170727;
				float3 In_NormalWS16_g170728 = Out_NormalWS15_g170727;
				float3 In_NormalRawOS16_g170728 = Out_NormalRawOS15_g170727;
				float3 In_NormalRawWS16_g170728 = Out_NormalRawWS15_g170727;
				float4 In_TangentOS16_g170728 = Out_TangentOS15_g170727;
				float3 In_ViewDirWS16_g170728 = Out_ViewDirWS15_g170727;
				float4 In_VertexData16_g170728 = Out_VertexData15_g170727;
				float4 In_PhaseData16_g170728 = Out_PhaseData15_g170727;
				float4 In_BoundsData16_g170728 = Out_BoundsData15_g170727;
				float4 In_RotationData16_g170728 = temp_output_1567_33_g170726;
				{
				Data16_g170728.Dummy = In_Dummy16_g170728;
				Data16_g170728.PositionOS = In_PositionOS16_g170728;
				Data16_g170728.PositionWS = In_PositionWS16_g170728;
				Data16_g170728.PositionWO = In_PositionWO16_g170728;
				Data16_g170728.PositionRawOS = In_PositionRawOS16_g170728;
				Data16_g170728.PositionAddOS = In_PositionAddOS16_g170728;
				Data16_g170728.PivotOS = In_PivotOS16_g170728;
				Data16_g170728.PivotWS = In_PivotWS16_g170728;
				Data16_g170728.PivotWO = In_PivotWO16_g170728;
				Data16_g170728.NormalOS = In_NormalOS16_g170728;
				Data16_g170728.NormalWS = In_NormalWS16_g170728;
				Data16_g170728.NormalRawOS = In_NormalRawOS16_g170728;
				Data16_g170728.NormalRawWS = In_NormalRawWS16_g170728;
				Data16_g170728.TangentOS = In_TangentOS16_g170728;
				Data16_g170728.ViewDirWS = In_ViewDirWS16_g170728;
				Data16_g170728.VertexData = In_VertexData16_g170728;
				Data16_g170728.PhaseData = In_PhaseData16_g170728;
				Data16_g170728.BoundsData = In_BoundsData16_g170728;
				Data16_g170728.RotationData = In_RotationData16_g170728;
				}
				TVEModelData Data15_g170753 = Data16_g170728;
				float Out_Dummy15_g170753 = 0;
				float3 Out_PositionOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170753 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170753 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170753 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170753 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170753 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170753 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170753 = float3( 0,0,0 );
				float4 Out_VertexData15_g170753 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170753 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170753 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170753 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170753 = Data15_g170753.Dummy;
				Out_PositionOS15_g170753 = Data15_g170753.PositionOS;
				Out_PositionWS15_g170753 = Data15_g170753.PositionWS;
				Out_PositionWO15_g170753 = Data15_g170753.PositionWO;
				Out_PositionRawOS15_g170753 = Data15_g170753.PositionRawOS;
				Out_PositionAddOS15_g170753 = Data15_g170753.PositionAddOS;
				Out_PivotOS15_g170753 = Data15_g170753.PivotOS;
				Out_PivotWS15_g170753 = Data15_g170753.PivotWS;
				Out_PivotWO15_g170753 = Data15_g170753.PivotWO;
				Out_NormalOS15_g170753 = Data15_g170753.NormalOS;
				Out_NormalWS15_g170753 = Data15_g170753.NormalWS;
				Out_NormalRawOS15_g170753 = Data15_g170753.NormalRawOS;
				Out_NormalRawWS15_g170753 = Data15_g170753.NormalRawWS;
				Out_TangentOS15_g170753 = Data15_g170753.TangentOS;
				Out_ViewDirWS15_g170753 = Data15_g170753.ViewDirWS;
				Out_VertexData15_g170753 = Data15_g170753.VertexData;
				Out_PhaseData15_g170753 = Data15_g170753.PhaseData;
				Out_BoundsData15_g170753 = Data15_g170753.BoundsData;
				Out_RotationData15_g170753 = Data15_g170753.RotationData;
				}
				float3 In_PositionOS16_g170768 = Out_PositionOS15_g170753;
				float3 In_PositionWS16_g170768 = Out_PositionWS15_g170753;
				float3 temp_output_1567_17_g170752 = Out_PositionWO15_g170753;
				float3 In_PositionWO16_g170768 = temp_output_1567_17_g170752;
				float3 temp_output_1567_26_g170752 = Out_PositionRawOS15_g170753;
				float3 In_PositionRawOS16_g170768 = temp_output_1567_26_g170752;
				float3 In_PositionAddOS16_g170768 = Out_PositionAddOS15_g170753;
				float3 In_PivotOS16_g170768 = Out_PivotOS15_g170753;
				float3 In_PivotWS16_g170768 = Out_PivotWS15_g170753;
				float3 In_PivotWO16_g170768 = Out_PivotWO15_g170753;
				half3 Model_NormalOS1568_g170752 = Out_NormalOS15_g170753;
				half3 _Vector1 = half3(0,1,0);
				float3 lerpResult1589_g170752 = lerp( Model_NormalOS1568_g170752 , _Vector1 , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170752 = temp_output_1567_26_g170752;
				float3 normalizeResult1594_g170752 = ASESafeNormalize( ( Model_PositionRAW1592_g170752 + _NormalSphereOffsetValue ) );
				float3 lerpResult1585_g170752 = lerp( lerpResult1589_g170752 , normalizeResult1594_g170752 , _NormalSphereValue);
				half3 VertexPos40_g170755 = lerpResult1585_g170752;
				half3 VertexPos40_g170756 = VertexPos40_g170755;
				float3 appendResult74_g170756 = (float3(VertexPos40_g170756.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170756 = appendResult74_g170756;
				float3 break84_g170756 = VertexPos40_g170756;
				float3 appendResult81_g170756 = (float3(0.0 , break84_g170756.y , break84_g170756.z));
				half3 VertexPosOtherAxis82_g170756 = appendResult81_g170756;
				float4 temp_output_1567_33_g170752 = Out_RotationData15_g170753;
				half4 Model_RotationData1583_g170752 = temp_output_1567_33_g170752;
				half2 Angle44_g170755 = Model_RotationData1583_g170752.xy;
				half Angle44_g170756 = (Angle44_g170755).y;
				half3 VertexPos40_g170757 = ( VertexPosRotationAxis50_g170756 + ( VertexPosOtherAxis82_g170756 * cos( Angle44_g170756 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170756 ) * sin( Angle44_g170756 ) ) );
				float3 appendResult74_g170757 = (float3(0.0 , 0.0 , VertexPos40_g170757.z));
				half3 VertexPosRotationAxis50_g170757 = appendResult74_g170757;
				float3 break84_g170757 = VertexPos40_g170757;
				float3 appendResult81_g170757 = (float3(break84_g170757.x , break84_g170757.y , 0.0));
				half3 VertexPosOtherAxis82_g170757 = appendResult81_g170757;
				half Angle44_g170757 = -(Angle44_g170755).x;
				float3 lerpResult1591_g170752 = lerp( lerpResult1585_g170752 , ( VertexPosRotationAxis50_g170757 + ( VertexPosOtherAxis82_g170757 * cos( Angle44_g170757 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170757 ) * sin( Angle44_g170757 ) ) ) , _NormalComputeValue);
				float3 temp_output_6_0_g170767 = lerpResult1591_g170752;
				#ifdef TVE_MOTION
				float3 staticSwitch65_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch65_g170767 = lerpResult1585_g170752;
				#endif
				#ifdef TVE_CONFORM
				float3 staticSwitch69_g170767 = temp_output_6_0_g170767;
				#else
				float3 staticSwitch69_g170767 = staticSwitch65_g170767;
				#endif
				float4 temp_output_1567_29_g170752 = Out_VertexData15_g170753;
				half4 Model_VertexData1608_g170752 = temp_output_1567_29_g170752;
				float4 break1683_g170752 = Model_VertexData1608_g170752;
				float4 break33_g170758 = _normal_vert_mode;
				float temp_output_30_0_g170758 = ( break1683_g170752.x * break33_g170758.x );
				float temp_output_29_0_g170758 = ( break1683_g170752.y * break33_g170758.y );
				float temp_output_31_0_g170758 = ( break1683_g170752.z * break33_g170758.z );
				float temp_output_28_0_g170758 = ( temp_output_30_0_g170758 + temp_output_29_0_g170758 + temp_output_31_0_g170758 + ( break1683_g170752.w * break33_g170758.w ) );
				float clampResult17_g170759 = clamp( temp_output_28_0_g170758 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170763 = _NormalMeshRemap.x;
				float temp_output_9_0_g170763 = ( clampResult17_g170759 - temp_output_7_0_g170763 );
				float lerpResult1695_g170752 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170763 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
				float temp_output_6_0_g170760 = lerpResult1695_g170752;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170760 = ( temp_output_6_0_g170760 + _NormalMeshMode );
				#else
				float staticSwitch14_g170760 = temp_output_6_0_g170760;
				#endif
				float temp_output_1690_0_g170752 = staticSwitch14_g170760;
				half Normal_MeskMask1691_g170752 = temp_output_1690_0_g170752;
				half Normal_Proj_Mask1647_g170752 = 1.0;
				float temp_output_1699_0_g170752 = ( Normal_MeskMask1691_g170752 * Normal_Proj_Mask1647_g170752 );
				float3 lerpResult1670_g170752 = lerp( Model_NormalOS1568_g170752 , staticSwitch69_g170767 , temp_output_1699_0_g170752);
				#ifdef TVE_NORMAL
				float3 staticSwitch1716_g170752 = lerpResult1670_g170752;
				#else
				float3 staticSwitch1716_g170752 = Model_NormalOS1568_g170752;
				#endif
				half3 Final_NormalOS178_g170752 = staticSwitch1716_g170752;
				float3 In_NormalOS16_g170768 = Final_NormalOS178_g170752;
				float3 temp_output_1567_21_g170752 = Out_NormalWS15_g170753;
				float3 In_NormalWS16_g170768 = temp_output_1567_21_g170752;
				float3 In_NormalRawOS16_g170768 = Out_NormalRawOS15_g170753;
				float3 In_NormalRawWS16_g170768 = Out_NormalRawWS15_g170753;
				float4 In_TangentOS16_g170768 = Out_TangentOS15_g170753;
				float3 In_ViewDirWS16_g170768 = Out_ViewDirWS15_g170753;
				float4 In_VertexData16_g170768 = temp_output_1567_29_g170752;
				float4 In_PhaseData16_g170768 = Out_PhaseData15_g170753;
				float4 In_BoundsData16_g170768 = Out_BoundsData15_g170753;
				float4 In_RotationData16_g170768 = temp_output_1567_33_g170752;
				{
				Data16_g170768.Dummy = In_Dummy16_g170768;
				Data16_g170768.PositionOS = In_PositionOS16_g170768;
				Data16_g170768.PositionWS = In_PositionWS16_g170768;
				Data16_g170768.PositionWO = In_PositionWO16_g170768;
				Data16_g170768.PositionRawOS = In_PositionRawOS16_g170768;
				Data16_g170768.PositionAddOS = In_PositionAddOS16_g170768;
				Data16_g170768.PivotOS = In_PivotOS16_g170768;
				Data16_g170768.PivotWS = In_PivotWS16_g170768;
				Data16_g170768.PivotWO = In_PivotWO16_g170768;
				Data16_g170768.NormalOS = In_NormalOS16_g170768;
				Data16_g170768.NormalWS = In_NormalWS16_g170768;
				Data16_g170768.NormalRawOS = In_NormalRawOS16_g170768;
				Data16_g170768.NormalRawWS = In_NormalRawWS16_g170768;
				Data16_g170768.TangentOS = In_TangentOS16_g170768;
				Data16_g170768.ViewDirWS = In_ViewDirWS16_g170768;
				Data16_g170768.VertexData = In_VertexData16_g170768;
				Data16_g170768.PhaseData = In_PhaseData16_g170768;
				Data16_g170768.BoundsData = In_BoundsData16_g170768;
				Data16_g170768.RotationData = In_RotationData16_g170768;
				}
				TVEModelData Data15_g170778 = Data16_g170768;
				float Out_Dummy15_g170778 = 0;
				float3 Out_PositionOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170778 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170778 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170778 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170778 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170778 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170778 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170778 = float3( 0,0,0 );
				float4 Out_VertexData15_g170778 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170778 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170778 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170778 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170778 = Data15_g170778.Dummy;
				Out_PositionOS15_g170778 = Data15_g170778.PositionOS;
				Out_PositionWS15_g170778 = Data15_g170778.PositionWS;
				Out_PositionWO15_g170778 = Data15_g170778.PositionWO;
				Out_PositionRawOS15_g170778 = Data15_g170778.PositionRawOS;
				Out_PositionAddOS15_g170778 = Data15_g170778.PositionAddOS;
				Out_PivotOS15_g170778 = Data15_g170778.PivotOS;
				Out_PivotWS15_g170778 = Data15_g170778.PivotWS;
				Out_PivotWO15_g170778 = Data15_g170778.PivotWO;
				Out_NormalOS15_g170778 = Data15_g170778.NormalOS;
				Out_NormalWS15_g170778 = Data15_g170778.NormalWS;
				Out_NormalRawOS15_g170778 = Data15_g170778.NormalRawOS;
				Out_NormalRawWS15_g170778 = Data15_g170778.NormalRawWS;
				Out_TangentOS15_g170778 = Data15_g170778.TangentOS;
				Out_ViewDirWS15_g170778 = Data15_g170778.ViewDirWS;
				Out_VertexData15_g170778 = Data15_g170778.VertexData;
				Out_PhaseData15_g170778 = Data15_g170778.PhaseData;
				Out_BoundsData15_g170778 = Data15_g170778.BoundsData;
				Out_RotationData15_g170778 = Data15_g170778.RotationData;
				}
				float3 temp_output_217_24_g170777 = Out_PivotOS15_g170778;
				float3 In_PositionOS16_g170779 = ( Out_PositionOS15_g170778 + temp_output_217_24_g170777 );
				float3 In_PositionWS16_g170779 = Out_PositionWS15_g170778;
				float3 In_PositionWO16_g170779 = Out_PositionWO15_g170778;
				float3 In_PositionRawOS16_g170779 = Out_PositionRawOS15_g170778;
				float3 In_PositionAddOS16_g170779 = Out_PositionAddOS15_g170778;
				float3 In_PivotOS16_g170779 = temp_output_217_24_g170777;
				float3 In_PivotWS16_g170779 = Out_PivotWS15_g170778;
				float3 In_PivotWO16_g170779 = Out_PivotWO15_g170778;
				float3 In_NormalOS16_g170779 = Out_NormalOS15_g170778;
				float3 In_NormalWS16_g170779 = Out_NormalWS15_g170778;
				float3 In_NormalRawOS16_g170779 = Out_NormalRawOS15_g170778;
				float3 In_NormalRawWS16_g170779 = Out_NormalRawWS15_g170778;
				float4 In_TangentOS16_g170779 = Out_TangentOS15_g170778;
				float3 In_ViewDirWS16_g170779 = Out_ViewDirWS15_g170778;
				float4 In_VertexData16_g170779 = Out_VertexData15_g170778;
				float4 In_PhaseData16_g170779 = Out_PhaseData15_g170778;
				float4 In_BoundsData16_g170779 = Out_BoundsData15_g170778;
				float4 In_RotationData16_g170779 = Out_RotationData15_g170778;
				{
				Data16_g170779.Dummy = In_Dummy16_g170779;
				Data16_g170779.PositionOS = In_PositionOS16_g170779;
				Data16_g170779.PositionWS = In_PositionWS16_g170779;
				Data16_g170779.PositionWO = In_PositionWO16_g170779;
				Data16_g170779.PositionRawOS = In_PositionRawOS16_g170779;
				Data16_g170779.PositionAddOS = In_PositionAddOS16_g170779;
				Data16_g170779.PivotOS = In_PivotOS16_g170779;
				Data16_g170779.PivotWS = In_PivotWS16_g170779;
				Data16_g170779.PivotWO = In_PivotWO16_g170779;
				Data16_g170779.NormalOS = In_NormalOS16_g170779;
				Data16_g170779.NormalWS = In_NormalWS16_g170779;
				Data16_g170779.NormalRawOS = In_NormalRawOS16_g170779;
				Data16_g170779.NormalRawWS = In_NormalRawWS16_g170779;
				Data16_g170779.TangentOS = In_TangentOS16_g170779;
				Data16_g170779.ViewDirWS = In_ViewDirWS16_g170779;
				Data16_g170779.VertexData = In_VertexData16_g170779;
				Data16_g170779.PhaseData = In_PhaseData16_g170779;
				Data16_g170779.BoundsData = In_BoundsData16_g170779;
				Data16_g170779.RotationData = In_RotationData16_g170779;
				}
				TVEModelData Data15_g170783 = Data16_g170779;
				float Out_Dummy15_g170783 = 0;
				float3 Out_PositionOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170783 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170783 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170783 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170783 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170783 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170783 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170783 = float3( 0,0,0 );
				float4 Out_VertexData15_g170783 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g170783 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170783 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170783 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170783 = Data15_g170783.Dummy;
				Out_PositionOS15_g170783 = Data15_g170783.PositionOS;
				Out_PositionWS15_g170783 = Data15_g170783.PositionWS;
				Out_PositionWO15_g170783 = Data15_g170783.PositionWO;
				Out_PositionRawOS15_g170783 = Data15_g170783.PositionRawOS;
				Out_PositionAddOS15_g170783 = Data15_g170783.PositionAddOS;
				Out_PivotOS15_g170783 = Data15_g170783.PivotOS;
				Out_PivotWS15_g170783 = Data15_g170783.PivotWS;
				Out_PivotWO15_g170783 = Data15_g170783.PivotWO;
				Out_NormalOS15_g170783 = Data15_g170783.NormalOS;
				Out_NormalWS15_g170783 = Data15_g170783.NormalWS;
				Out_NormalRawOS15_g170783 = Data15_g170783.NormalRawOS;
				Out_NormalRawWS15_g170783 = Data15_g170783.NormalRawWS;
				Out_TangentOS15_g170783 = Data15_g170783.TangentOS;
				Out_ViewDirWS15_g170783 = Data15_g170783.ViewDirWS;
				Out_VertexData15_g170783 = Data15_g170783.VertexData;
				Out_PhaseData15_g170783 = Data15_g170783.PhaseData;
				Out_BoundsData15_g170783 = Data15_g170783.BoundsData;
				Out_RotationData15_g170783 = Data15_g170783.RotationData;
				}
				float3 temp_output_6_0_g170796 = ( Out_PositionOS15_g170783 + _DisableSRPBatcher );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170796 = ( temp_output_6_0_g170796 + 0.0 );
				#else
				float3 staticSwitch14_g170796 = temp_output_6_0_g170796;
				#endif
				float3 temp_output_154_0_g170781 = staticSwitch14_g170796;
				
				output.ase_texcoord5.xyz = vertexToFrag73_g170196;
				output.ase_texcoord6.xyz = vertexToFrag76_g170196;
				float temp_output_6_0_g170509 = ( _MotionHighlightValue * Global_DistMask1820_g170486 * ( Tiny_Mask218_g170486 * Tiny_Mask218_g170486 ) * ( Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 * Global_Wave1475_g170486 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170509 = ( temp_output_6_0_g170509 + _MotionHighlightColor.r );
				#else
				float staticSwitch14_g170509 = temp_output_6_0_g170509;
				#endif
				half Wave_Mask1044 = staticSwitch14_g170509;
				float4 appendResult23_g170575 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1044));
				float4 vertexToFrag24_g170575 = appendResult23_g170575;
				output.ase_texcoord7 = vertexToFrag24_g170575;
				
				output.ase_texcoord3 = inputMesh.ase_texcoord;
				output.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				output.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord4.zw = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_154_0_g170781;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170783;
				inputMesh.tangentOS = Out_TangentOS15_g170783;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half isFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];

				float localCustomAlphaClip21_g170791 = ( 0.0 );
				float localBreakData4_g170786 = ( 0.0 );
				float localCompData3_g170771 = ( 0.0 );
				TVEVisualData Data3_g170771 = (TVEVisualData)0;
				half Dummy145_g170769 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
				float In_Dummy3_g170771 = Dummy145_g170769;
				float localBreakData4_g170770 = ( 0.0 );
				float localCompData3_g170751 = ( 0.0 );
				TVEVisualData Data3_g170751 = (TVEVisualData)0;
				half Dummy145_g170736 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g170751 = Dummy145_g170736;
				float localBreakData4_g170740 = ( 0.0 );
				float localCompData3_g170714 = ( 0.0 );
				TVEVisualData Data3_g170714 = (TVEVisualData)0;
				half Dummy594_g170711 = ( _DitherCategory + _DitherEnd );
				float In_Dummy3_g170714 = Dummy594_g170711;
				float localBreakData4_g170713 = ( 0.0 );
				float localCompData3_g170695 = ( 0.0 );
				TVEVisualData Data3_g170695 = (TVEVisualData)0;
				half Dummy594_g170694 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
				float In_Dummy3_g170695 = Dummy594_g170694;
				float localBreakData4_g170697 = ( 0.0 );
				float localCompData3_g170667 = ( 0.0 );
				TVEVisualData Data3_g170667 = (TVEVisualData)0;
				half Dummy594_g170665 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
				float In_Dummy3_g170667 = Dummy594_g170665;
				float localBreakData4_g170666 = ( 0.0 );
				float localCompData3_g170631 = ( 0.0 );
				TVEVisualData Data3_g170631 = (TVEVisualData)0;
				half Dummy594_g170628 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
				float In_Dummy3_g170631 = Dummy594_g170628;
				float localBreakData4_g170629 = ( 0.0 );
				float localCompData3_g170627 = ( 0.0 );
				TVEVisualData Data3_g170627 = (TVEVisualData)0;
				float In_Dummy3_g170627 = 0.0;
				float localBreakData4_g170626 = ( 0.0 );
				float localCompData3_g170604 = ( 0.0 );
				TVEVisualData Data3_g170604 = (TVEVisualData)0;
				half Dummy205_g170601 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
				float In_Dummy3_g170604 = Dummy205_g170601;
				float localBreakData4_g170603 = ( 0.0 );
				float localCompData3_g170596 = ( 0.0 );
				TVEVisualData Data3_g170596 = (TVEVisualData)0;
				half Dummy205_g170576 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
				float In_Dummy3_g170596 = Dummy205_g170576;
				float localBreakData4_g170580 = ( 0.0 );
				float localCompData3_g170566 = ( 0.0 );
				TVEVisualData Data3_g170566 = (TVEVisualData)0;
				half Dummy220_g170564 = ( _VariationCategory + _VariationEnd );
				float In_Dummy3_g170566 = Dummy220_g170564;
				float localBreakData4_g170565 = ( 0.0 );
				float localCompData3_g170557 = ( 0.0 );
				TVEVisualData Data3_g170557 = (TVEVisualData)0;
				half Dummy220_g170554 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170557 = Dummy220_g170554;
				float localBreakData4_g170556 = ( 0.0 );
				float localCompData3_g170546 = ( 0.0 );
				TVEVisualData Data3_g170546 = (TVEVisualData)0;
				half Dummy202_g170544 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170546 = Dummy202_g170544;
				float localBreakData4_g170545 = ( 0.0 );
				float localCompData3_g170454 = ( 0.0 );
				TVEVisualData Data3_g170454 = (TVEVisualData)0;
				half4 Dummy944_g170446 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
				float In_Dummy3_g170454 = Dummy944_g170446.x;
				float localBreakData4_g170453 = ( 0.0 );
				float localCompData3_g170415 = ( 0.0 );
				TVEVisualData Data3_g170415 = (TVEVisualData)0;
				half4 Dummy946_g170397 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
				float In_Dummy3_g170415 = Dummy946_g170397.x;
				float localBreakData4_g170405 = ( 0.0 );
				float localCompData3_g170383 = ( 0.0 );
				TVEVisualData Data3_g170383 = (TVEVisualData)0;
				half4 Dummy130_g170372 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
				float In_Dummy3_g170383 = Dummy130_g170372.x;
				TEXTURE2D(Texture276_g170376) = _MainAlbedoTex;
				float localFilterTexture19_g170379 = ( 0.0 );
				SamplerState SS19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170379 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170379 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170379 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170379 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170379 = SamplerDefault19_g170379;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170379 = SamplerDefault19_g170379;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170379 = SamplerPoint19_g170379;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170379 = SamplerLow19_g170379;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170379 = SamplerMedium19_g170379;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170379 = SamplerHigh19_g170379;
				#endif
				}
				SamplerState Sampler276_g170376 = SS19_g170379;
				half4 Local_Coords180_g170372 = _main_coord_value;
				float4 temp_output_37_0_g170376 = Local_Coords180_g170372;
				half4 Coords276_g170376 = temp_output_37_0_g170376;
				half2 TexCoord276_g170376 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170376 = SampleMain( Texture276_g170376 , Sampler276_g170376 , Coords276_g170376 , TexCoord276_g170376 );
				TEXTURE2D(Texture275_g170376) = _MainAlbedoTex;
				SamplerState Sampler275_g170376 = SS19_g170379;
				half4 Coords275_g170376 = temp_output_37_0_g170376;
				half2 TexCoord275_g170376 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170376 = SampleExtra( Texture275_g170376 , Sampler275_g170376 , Coords275_g170376 , TexCoord275_g170376 );
				TEXTURE2D(Texture238_g170376) = _MainAlbedoTex;
				SamplerState Sampler238_g170376 = SS19_g170379;
				half4 Coords238_g170376 = temp_output_37_0_g170376;
				TVEModelData Data16_g170201 = (TVEModelData)0;
				float In_Dummy16_g170201 = 0.0;
				float3 vertexToFrag73_g170196 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g170196 = vertexToFrag73_g170196;
				float3 In_PositionWS16_g170201 = PositionWS122_g170196;
				float3 vertexToFrag76_g170196 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g170196 = vertexToFrag76_g170196;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170196 = ( PositionWS122_g170196 - PivotWS121_g170196 );
				#else
				float3 staticSwitch204_g170196 = PositionWS122_g170196;
				#endif
				half3 PositionWO132_g170196 = ( staticSwitch204_g170196 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170201 = PositionWO132_g170196;
				float3 In_PivotWS16_g170201 = PivotWS121_g170196;
				half3 PivotWO133_g170196 = ( PivotWS121_g170196 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170201 = PivotWO133_g170196;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g170196 = normalizedWorldNormal;
				float3 In_NormalWS16_g170201 = Normal_WS95_g170196;
				float3 normalizeResult296_g170196 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170196 ) );
				half3 ViewDirWS169_g170196 = normalizeResult296_g170196;
				float3 In_ViewDirWS16_g170201 = ViewDirWS169_g170196;
				half4 VertexMasks171_g170196 = packedInput.ase_color;
				float4 In_VertexData16_g170201 = VertexMasks171_g170196;
				float4 In_BoundsData16_g170201 = float4( 1,1,1,1 );
				{
				Data16_g170201.Dummy = In_Dummy16_g170201;
				Data16_g170201.PositionWS = In_PositionWS16_g170201;
				Data16_g170201.PositionWO = In_PositionWO16_g170201;
				Data16_g170201.PivotWS = In_PivotWS16_g170201;
				Data16_g170201.PivotWO = In_PivotWO16_g170201;
				Data16_g170201.NormalWS = In_NormalWS16_g170201;
				Data16_g170201.ViewDirWS = In_ViewDirWS16_g170201;
				Data16_g170201.VertexData = In_VertexData16_g170201;
				Data16_g170201.BoundsData = In_BoundsData16_g170201;
				}
				TVEModelData Data15_g170382 = Data16_g170201;
				float Out_Dummy15_g170382 = 0;
				float3 Out_PositionWS15_g170382 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170382 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170382 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170382 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170382 = float3( 0,0,0 );
				float4 Out_VertexData15_g170382 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170382 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170382 = Data15_g170382.Dummy;
				Out_PositionWS15_g170382 = Data15_g170382.PositionWS;
				Out_PositionWO15_g170382 = Data15_g170382.PositionWO;
				Out_PivotWS15_g170382 = Data15_g170382.PivotWS;
				Out_PivotWO15_g170382 = Data15_g170382.PivotWO;
				Out_NormalWS15_g170382 = Data15_g170382.NormalWS;
				Out_ViewDirWS15_g170382 = Data15_g170382.ViewDirWS;
				Out_VertexData15_g170382 = Data15_g170382.VertexData;
				Out_BoundsData15_g170382 = Data15_g170382.BoundsData;
				}
				half3 Model_PositionWO222_g170372 = Out_PositionWO15_g170382;
				float3 temp_output_279_0_g170376 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170376 = temp_output_279_0_g170376;
				half4 localSamplePlanar2D238_g170376 = SamplePlanar2D( Texture238_g170376 , Sampler238_g170376 , Coords238_g170376 , WorldPosition238_g170376 );
				TEXTURE2D(Texture246_g170376) = _MainAlbedoTex;
				SamplerState Sampler246_g170376 = SS19_g170379;
				half4 Coords246_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition246_g170376 = temp_output_279_0_g170376;
				half3 Model_NormalWS226_g170372 = Out_NormalWS15_g170382;
				float3 temp_output_280_0_g170376 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170376 = temp_output_280_0_g170376;
				half4 localSamplePlanar3D246_g170376 = SamplePlanar3D( Texture246_g170376 , Sampler246_g170376 , Coords246_g170376 , WorldPosition246_g170376 , WorldNormal246_g170376 );
				TEXTURE2D(Texture234_g170376) = _MainAlbedoTex;
				SamplerState Sampler234_g170376 = SS19_g170379;
				float4 Coords234_g170376 = temp_output_37_0_g170376;
				float3 WorldPosition234_g170376 = temp_output_279_0_g170376;
				float4 localSampleStochastic2D234_g170376 = SampleStochastic2D( Texture234_g170376 , Sampler234_g170376 , Coords234_g170376 , WorldPosition234_g170376 );
				TEXTURE2D(Texture263_g170376) = _MainAlbedoTex;
				SamplerState Sampler263_g170376 = SS19_g170379;
				half4 Coords263_g170376 = temp_output_37_0_g170376;
				half3 WorldPosition263_g170376 = temp_output_279_0_g170376;
				half3 WorldNormal263_g170376 = temp_output_280_0_g170376;
				half4 localSampleStochastic3D263_g170376 = SampleStochastic3D( Texture263_g170376 , Sampler263_g170376 , Coords263_g170376 , WorldPosition263_g170376 , WorldNormal263_g170376 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170372 = localSampleExtra275_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170372 = localSamplePlanar2D238_g170376;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170372 = localSamplePlanar3D246_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170372 = localSampleStochastic2D234_g170376;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170372 = localSampleStochastic3D263_g170376;
				#else
				float4 staticSwitch184_g170372 = localSampleMain276_g170376;
				#endif
				half4 Local_AlbedoTex185_g170372 = staticSwitch184_g170372;
				float3 lerpResult53_g170372 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170372).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170372 = lerpResult53_g170372;
				TEXTURE2D(Texture276_g170378) = _MainShaderTex;
				float localFilterTexture30_g170381 = ( 0.0 );
				SamplerState SS30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170381 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170381 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170381 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170381 = SamplerDefault30_g170381;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170381 = SamplerDefault30_g170381;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170381 = SamplerPoint30_g170381;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170381 = SamplerLow30_g170381;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170381 = SamplerMedium30_g170381;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170381 = SamplerHigh30_g170381;
				#endif
				}
				SamplerState Sampler276_g170378 = SS30_g170381;
				float4 temp_output_37_0_g170378 = Local_Coords180_g170372;
				half4 Coords276_g170378 = temp_output_37_0_g170378;
				half2 TexCoord276_g170378 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170378 = SampleMain( Texture276_g170378 , Sampler276_g170378 , Coords276_g170378 , TexCoord276_g170378 );
				TEXTURE2D(Texture275_g170378) = _MainShaderTex;
				SamplerState Sampler275_g170378 = SS30_g170381;
				half4 Coords275_g170378 = temp_output_37_0_g170378;
				half2 TexCoord275_g170378 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170378 = SampleExtra( Texture275_g170378 , Sampler275_g170378 , Coords275_g170378 , TexCoord275_g170378 );
				TEXTURE2D(Texture238_g170378) = _MainShaderTex;
				SamplerState Sampler238_g170378 = SS30_g170381;
				half4 Coords238_g170378 = temp_output_37_0_g170378;
				float3 temp_output_279_0_g170378 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170378 = temp_output_279_0_g170378;
				half4 localSamplePlanar2D238_g170378 = SamplePlanar2D( Texture238_g170378 , Sampler238_g170378 , Coords238_g170378 , WorldPosition238_g170378 );
				TEXTURE2D(Texture246_g170378) = _MainShaderTex;
				SamplerState Sampler246_g170378 = SS30_g170381;
				half4 Coords246_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition246_g170378 = temp_output_279_0_g170378;
				float3 temp_output_280_0_g170378 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170378 = temp_output_280_0_g170378;
				half4 localSamplePlanar3D246_g170378 = SamplePlanar3D( Texture246_g170378 , Sampler246_g170378 , Coords246_g170378 , WorldPosition246_g170378 , WorldNormal246_g170378 );
				TEXTURE2D(Texture234_g170378) = _MainShaderTex;
				SamplerState Sampler234_g170378 = SS30_g170381;
				float4 Coords234_g170378 = temp_output_37_0_g170378;
				float3 WorldPosition234_g170378 = temp_output_279_0_g170378;
				float4 localSampleStochastic2D234_g170378 = SampleStochastic2D( Texture234_g170378 , Sampler234_g170378 , Coords234_g170378 , WorldPosition234_g170378 );
				TEXTURE2D(Texture263_g170378) = _MainShaderTex;
				SamplerState Sampler263_g170378 = SS30_g170381;
				half4 Coords263_g170378 = temp_output_37_0_g170378;
				half3 WorldPosition263_g170378 = temp_output_279_0_g170378;
				half3 WorldNormal263_g170378 = temp_output_280_0_g170378;
				half4 localSampleStochastic3D263_g170378 = SampleStochastic3D( Texture263_g170378 , Sampler263_g170378 , Coords263_g170378 , WorldPosition263_g170378 , WorldNormal263_g170378 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170372 = localSampleExtra275_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170372 = localSamplePlanar2D238_g170378;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170372 = localSamplePlanar3D246_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170372 = localSampleStochastic2D234_g170378;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170372 = localSampleStochastic3D263_g170378;
				#else
				float4 staticSwitch198_g170372 = localSampleMain276_g170378;
				#endif
				half4 Local_ShaderTex199_g170372 = staticSwitch198_g170372;
				float clampResult17_g170390 = clamp( (Local_ShaderTex199_g170372).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170389 = _MainOcclusionRemap.x;
				float temp_output_9_0_g170389 = ( clampResult17_g170390 - temp_output_7_0_g170389 );
				float lerpResult23_g170372 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170389 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
				half Local_Occlusion313_g170372 = lerpResult23_g170372;
				float clampResult17_g170392 = clamp( (Local_ShaderTex199_g170372).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170391 = _MainSmoothnessRemap.x;
				float temp_output_9_0_g170391 = ( clampResult17_g170392 - temp_output_7_0_g170391 );
				half Local_Smoothness317_g170372 = ( saturate( ( ( temp_output_9_0_g170391 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
				float4 appendResult73_g170372 = (float4(( (Local_ShaderTex199_g170372).x * _MainMetallicValue ) , Local_Occlusion313_g170372 , (Local_ShaderTex199_g170372).z , Local_Smoothness317_g170372));
				half4 Local_Masks109_g170372 = appendResult73_g170372;
				float clampResult17_g170387 = clamp( (Local_Masks109_g170372).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170388 = _MainMultiRemap.x;
				float temp_output_9_0_g170388 = ( clampResult17_g170387 - temp_output_7_0_g170388 );
				half Local_MultiMask78_g170372 = saturate( ( ( temp_output_9_0_g170388 * _MainMultiRemap.z ) + 0.0001 ) );
				float lerpResult58_g170372 = lerp( 1.0 , Local_MultiMask78_g170372 , _MainColorMode);
				float4 lerpResult62_g170372 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170372);
				half3 Local_ColorRGB93_g170372 = (lerpResult62_g170372).rgb;
				half3 Local_Albedo139_g170372 = ( Local_AlbedoRGB107_g170372 * Local_ColorRGB93_g170372 );
				float3 In_Albedo3_g170383 = Local_Albedo139_g170372;
				float3 In_AlbedoRaw3_g170383 = Local_Albedo139_g170372;
				TEXTURE2D(Texture276_g170377) = _MainNormalTex;
				float localFilterTexture29_g170380 = ( 0.0 );
				SamplerState SS29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170380 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170380 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170380 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170380 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170380 = SamplerDefault29_g170380;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170380 = SamplerDefault29_g170380;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170380 = SamplerPoint29_g170380;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170380 = SamplerLow29_g170380;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170380 = SamplerMedium29_g170380;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170380 = SamplerHigh29_g170380;
				#endif
				}
				SamplerState Sampler276_g170377 = SS29_g170380;
				float4 temp_output_37_0_g170377 = Local_Coords180_g170372;
				half4 Coords276_g170377 = temp_output_37_0_g170377;
				half2 TexCoord276_g170377 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170377 = SampleMain( Texture276_g170377 , Sampler276_g170377 , Coords276_g170377 , TexCoord276_g170377 );
				TEXTURE2D(Texture275_g170377) = _MainNormalTex;
				SamplerState Sampler275_g170377 = SS29_g170380;
				half4 Coords275_g170377 = temp_output_37_0_g170377;
				half2 TexCoord275_g170377 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170377 = SampleExtra( Texture275_g170377 , Sampler275_g170377 , Coords275_g170377 , TexCoord275_g170377 );
				TEXTURE2D(Texture238_g170377) = _MainNormalTex;
				SamplerState Sampler238_g170377 = SS29_g170380;
				half4 Coords238_g170377 = temp_output_37_0_g170377;
				float3 temp_output_279_0_g170377 = Model_PositionWO222_g170372;
				half3 WorldPosition238_g170377 = temp_output_279_0_g170377;
				half4 localSamplePlanar2D238_g170377 = SamplePlanar2D( Texture238_g170377 , Sampler238_g170377 , Coords238_g170377 , WorldPosition238_g170377 );
				TEXTURE2D(Texture246_g170377) = _MainNormalTex;
				SamplerState Sampler246_g170377 = SS29_g170380;
				half4 Coords246_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition246_g170377 = temp_output_279_0_g170377;
				float3 temp_output_280_0_g170377 = Model_NormalWS226_g170372;
				half3 WorldNormal246_g170377 = temp_output_280_0_g170377;
				half4 localSamplePlanar3D246_g170377 = SamplePlanar3D( Texture246_g170377 , Sampler246_g170377 , Coords246_g170377 , WorldPosition246_g170377 , WorldNormal246_g170377 );
				TEXTURE2D(Texture234_g170377) = _MainNormalTex;
				SamplerState Sampler234_g170377 = SS29_g170380;
				float4 Coords234_g170377 = temp_output_37_0_g170377;
				float3 WorldPosition234_g170377 = temp_output_279_0_g170377;
				float4 localSampleStochastic2D234_g170377 = SampleStochastic2D( Texture234_g170377 , Sampler234_g170377 , Coords234_g170377 , WorldPosition234_g170377 );
				TEXTURE2D(Texture263_g170377) = _MainNormalTex;
				SamplerState Sampler263_g170377 = SS29_g170380;
				half4 Coords263_g170377 = temp_output_37_0_g170377;
				half3 WorldPosition263_g170377 = temp_output_279_0_g170377;
				half3 WorldNormal263_g170377 = temp_output_280_0_g170377;
				half4 localSampleStochastic3D263_g170377 = SampleStochastic3D( Texture263_g170377 , Sampler263_g170377 , Coords263_g170377 , WorldPosition263_g170377 , WorldNormal263_g170377 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170372 = localSampleExtra275_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170372 = localSamplePlanar2D238_g170377;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170372 = localSamplePlanar3D246_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170372 = localSampleStochastic2D234_g170377;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170372 = localSampleStochastic3D263_g170377;
				#else
				float4 staticSwitch193_g170372 = localSampleMain276_g170377;
				#endif
				half4 Local_NormaTex191_g170372 = staticSwitch193_g170372;
				half4 Normal_Packed45_g170373 = Local_NormaTex191_g170372;
				float2 appendResult58_g170373 = (float2(( (Normal_Packed45_g170373).x * (Normal_Packed45_g170373).w ) , (Normal_Packed45_g170373).y));
				half2 Normal_Default50_g170373 = appendResult58_g170373;
				half2 Normal_ASTC41_g170373 = (Normal_Packed45_g170373).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170373 = Normal_ASTC41_g170373;
				#else
				float2 staticSwitch38_g170373 = Normal_Default50_g170373;
				#endif
				half2 Normal_NO_DTX544_g170373 = (Normal_Packed45_g170373).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170373 = Normal_NO_DTX544_g170373;
				#else
				float2 staticSwitch37_g170373 = staticSwitch38_g170373;
				#endif
				float2 temp_output_26_0_g170372 = ( (staticSwitch37_g170373*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half2 Normal_Planar45_g170374 = temp_output_26_0_g170372;
				float2 break71_g170374 = Normal_Planar45_g170374;
				float3 appendResult72_g170374 = (float3(break71_g170374.x , 0.0 , break71_g170374.y));
				float2 temp_output_205_0_g170372 = (mul( ase_worldToTangent, appendResult72_g170374 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170372 = temp_output_205_0_g170372;
				#else
				float2 staticSwitch204_g170372 = temp_output_26_0_g170372;
				#endif
				half2 Local_NormalTS108_g170372 = staticSwitch204_g170372;
				float2 In_NormalTS3_g170383 = Local_NormalTS108_g170372;
				float3 appendResult68_g170375 = (float3(Local_NormalTS108_g170372 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g170375 = appendResult68_g170375;
				float3 worldNormal74_g170375 = normalize( float3( dot( tanToWorld0, tanNormal74_g170375 ), dot( tanToWorld1, tanNormal74_g170375 ), dot( tanToWorld2, tanNormal74_g170375 ) ) );
				half3 Local_NormalWS250_g170372 = worldNormal74_g170375;
				float3 In_NormalWS3_g170383 = Local_NormalWS250_g170372;
				float4 In_Shader3_g170383 = Local_Masks109_g170372;
				float4 In_Emissive3_g170383 = half4( 1, 1, 1, 1 );
				float3 temp_output_3_0_g170384 = Local_Albedo139_g170372;
				float dotResult20_g170384 = dot( temp_output_3_0_g170384 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Local_Grayscale110_g170372 = dotResult20_g170384;
				float In_Grayscale3_g170383 = Local_Grayscale110_g170372;
				float clampResult144_g170372 = clamp( saturate( ( Local_Grayscale110_g170372 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170372 = clampResult144_g170372;
				float In_Luminosity3_g170383 = Local_Luminosity145_g170372;
				float In_MultiMask3_g170383 = Local_MultiMask78_g170372;
				float temp_output_187_0_g170372 = (Local_AlbedoTex185_g170372).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170372 = ( temp_output_187_0_g170372 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170372 = temp_output_187_0_g170372;
				#endif
				half Local_AlphaClip111_g170372 = staticSwitch236_g170372;
				float In_AlphaClip3_g170383 = Local_AlphaClip111_g170372;
				half Local_AlphaFade246_g170372 = (lerpResult62_g170372).a;
				float In_AlphaFade3_g170383 = Local_AlphaFade246_g170372;
				float3 temp_cast_4 = (1.0).xxx;
				float3 In_Translucency3_g170383 = temp_cast_4;
				float In_Transmission3_g170383 = 1.0;
				float In_Thickness3_g170383 = 0.0;
				float In_Diffusion3_g170383 = 0.0;
				float In_Depth3_g170383 = 0.0;
				{
				Data3_g170383.Dummy = In_Dummy3_g170383;
				Data3_g170383.Albedo = In_Albedo3_g170383;
				Data3_g170383.AlbedoRaw = In_AlbedoRaw3_g170383;
				Data3_g170383.NormalTS = In_NormalTS3_g170383;
				Data3_g170383.NormalWS = In_NormalWS3_g170383;
				Data3_g170383.Shader = In_Shader3_g170383;
				Data3_g170383.Emissive= In_Emissive3_g170383;
				Data3_g170383.MultiMask = In_MultiMask3_g170383;
				Data3_g170383.Grayscale = In_Grayscale3_g170383;
				Data3_g170383.Luminosity = In_Luminosity3_g170383;
				Data3_g170383.AlphaClip = In_AlphaClip3_g170383;
				Data3_g170383.AlphaFade = In_AlphaFade3_g170383;
				Data3_g170383.Translucency = In_Translucency3_g170383;
				Data3_g170383.Transmission = In_Transmission3_g170383;
				Data3_g170383.Thickness = In_Thickness3_g170383;
				Data3_g170383.Diffusion = In_Diffusion3_g170383;
				Data3_g170383.Depth = In_Depth3_g170383;
				}
				TVEVisualData Data4_g170405 = Data3_g170383;
				float Out_Dummy4_g170405 = 0;
				float3 Out_Albedo4_g170405 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170405 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170405 = float2( 0,0 );
				float3 Out_NormalWS4_g170405 = float3( 0,0,0 );
				float4 Out_Shader4_g170405 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170405 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170405 = 0;
				float Out_Grayscale4_g170405 = 0;
				float Out_Luminosity4_g170405 = 0;
				float Out_AlphaClip4_g170405 = 0;
				float Out_AlphaFade4_g170405 = 0;
				float3 Out_Translucency4_g170405 = float3( 0,0,0 );
				float Out_Transmission4_g170405 = 0;
				float Out_Thickness4_g170405 = 0;
				float Out_Diffusion4_g170405 = 0;
				float Out_Depth4_g170405 = 0;
				{
				Out_Dummy4_g170405 = Data4_g170405.Dummy;
				Out_Albedo4_g170405 = Data4_g170405.Albedo;
				Out_AlbedoRaw4_g170405 = Data4_g170405.AlbedoRaw;
				Out_NormalTS4_g170405 = Data4_g170405.NormalTS;
				Out_NormalWS4_g170405 = Data4_g170405.NormalWS;
				Out_Shader4_g170405 = Data4_g170405.Shader;
				Out_Emissive4_g170405= Data4_g170405.Emissive;
				Out_MultiMask4_g170405 = Data4_g170405.MultiMask;
				Out_Grayscale4_g170405 = Data4_g170405.Grayscale;
				Out_Luminosity4_g170405= Data4_g170405.Luminosity;
				Out_AlphaClip4_g170405 = Data4_g170405.AlphaClip;
				Out_AlphaFade4_g170405 = Data4_g170405.AlphaFade;
				Out_Translucency4_g170405 = Data4_g170405.Translucency;
				Out_Transmission4_g170405 = Data4_g170405.Transmission;
				Out_Thickness4_g170405 = Data4_g170405.Thickness;
				Out_Diffusion4_g170405 = Data4_g170405.Diffusion;
				Out_Depth4_g170405= Data4_g170405.Depth;
				}
				half3 Visual_Albedo527_g170397 = Out_Albedo4_g170405;
				TEXTURE2D(Texture276_g170398) = _SecondAlbedoTex;
				float localFilterTexture19_g170411 = ( 0.0 );
				SamplerState SS19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170411 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170411 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170411 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170411 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170411 = SamplerDefault19_g170411;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170411 = SamplerDefault19_g170411;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170411 = SamplerPoint19_g170411;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170411 = SamplerLow19_g170411;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170411 = SamplerMedium19_g170411;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170411 = SamplerHigh19_g170411;
				#endif
				}
				SamplerState Sampler276_g170398 = SS19_g170411;
				half4 Local_LayerCoords790_g170397 = _second_coord_value;
				float4 temp_output_37_0_g170398 = Local_LayerCoords790_g170397;
				half4 Coords276_g170398 = temp_output_37_0_g170398;
				half2 TexCoord276_g170398 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170398 = SampleMain( Texture276_g170398 , Sampler276_g170398 , Coords276_g170398 , TexCoord276_g170398 );
				TEXTURE2D(Texture275_g170398) = _SecondAlbedoTex;
				SamplerState Sampler275_g170398 = SS19_g170411;
				half4 Coords275_g170398 = temp_output_37_0_g170398;
				half2 TexCoord275_g170398 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170398 = SampleExtra( Texture275_g170398 , Sampler275_g170398 , Coords275_g170398 , TexCoord275_g170398 );
				TEXTURE2D(Texture238_g170398) = _SecondAlbedoTex;
				SamplerState Sampler238_g170398 = SS19_g170411;
				half4 Coords238_g170398 = temp_output_37_0_g170398;
				TVEModelData Data15_g170414 = Data16_g170201;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				}
				half3 Model_PositionWO636_g170397 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170398 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170398 = temp_output_279_0_g170398;
				half4 localSamplePlanar2D238_g170398 = SamplePlanar2D( Texture238_g170398 , Sampler238_g170398 , Coords238_g170398 , WorldPosition238_g170398 );
				TEXTURE2D(Texture246_g170398) = _SecondAlbedoTex;
				SamplerState Sampler246_g170398 = SS19_g170411;
				half4 Coords246_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition246_g170398 = temp_output_279_0_g170398;
				half3 Model_NormalWS869_g170397 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170398 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170398 = temp_output_280_0_g170398;
				half4 localSamplePlanar3D246_g170398 = SamplePlanar3D( Texture246_g170398 , Sampler246_g170398 , Coords246_g170398 , WorldPosition246_g170398 , WorldNormal246_g170398 );
				TEXTURE2D(Texture234_g170398) = _SecondAlbedoTex;
				SamplerState Sampler234_g170398 = SS19_g170411;
				float4 Coords234_g170398 = temp_output_37_0_g170398;
				float3 WorldPosition234_g170398 = temp_output_279_0_g170398;
				float4 localSampleStochastic2D234_g170398 = SampleStochastic2D( Texture234_g170398 , Sampler234_g170398 , Coords234_g170398 , WorldPosition234_g170398 );
				TEXTURE2D(Texture263_g170398) = _SecondAlbedoTex;
				SamplerState Sampler263_g170398 = SS19_g170411;
				half4 Coords263_g170398 = temp_output_37_0_g170398;
				half3 WorldPosition263_g170398 = temp_output_279_0_g170398;
				half3 WorldNormal263_g170398 = temp_output_280_0_g170398;
				half4 localSampleStochastic3D263_g170398 = SampleStochastic3D( Texture263_g170398 , Sampler263_g170398 , Coords263_g170398 , WorldPosition263_g170398 , WorldNormal263_g170398 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170397 = localSampleExtra275_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170397 = localSamplePlanar2D238_g170398;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170397 = localSamplePlanar3D246_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170397 = localSampleStochastic2D234_g170398;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170397 = localSampleStochastic3D263_g170398;
				#else
				float4 staticSwitch693_g170397 = localSampleMain276_g170398;
				#endif
				half4 Local_AlbedoTex777_g170397 = staticSwitch693_g170397;
				float3 lerpResult716_g170397 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170397).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170397 = lerpResult716_g170397;
				TEXTURE2D(Texture276_g170400) = _SecondShaderTex;
				float localFilterTexture30_g170413 = ( 0.0 );
				SamplerState SS30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170413 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170413 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170413 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170413 = SamplerDefault30_g170413;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170413 = SamplerDefault30_g170413;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170413 = SamplerPoint30_g170413;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170413 = SamplerLow30_g170413;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170413 = SamplerMedium30_g170413;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170413 = SamplerHigh30_g170413;
				#endif
				}
				SamplerState Sampler276_g170400 = SS30_g170413;
				float4 temp_output_37_0_g170400 = Local_LayerCoords790_g170397;
				half4 Coords276_g170400 = temp_output_37_0_g170400;
				half2 TexCoord276_g170400 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170400 = SampleMain( Texture276_g170400 , Sampler276_g170400 , Coords276_g170400 , TexCoord276_g170400 );
				TEXTURE2D(Texture275_g170400) = _SecondShaderTex;
				SamplerState Sampler275_g170400 = SS30_g170413;
				half4 Coords275_g170400 = temp_output_37_0_g170400;
				half2 TexCoord275_g170400 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170400 = SampleExtra( Texture275_g170400 , Sampler275_g170400 , Coords275_g170400 , TexCoord275_g170400 );
				TEXTURE2D(Texture238_g170400) = _SecondShaderTex;
				SamplerState Sampler238_g170400 = SS30_g170413;
				half4 Coords238_g170400 = temp_output_37_0_g170400;
				float3 temp_output_279_0_g170400 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170400 = temp_output_279_0_g170400;
				half4 localSamplePlanar2D238_g170400 = SamplePlanar2D( Texture238_g170400 , Sampler238_g170400 , Coords238_g170400 , WorldPosition238_g170400 );
				TEXTURE2D(Texture246_g170400) = _SecondShaderTex;
				SamplerState Sampler246_g170400 = SS30_g170413;
				half4 Coords246_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition246_g170400 = temp_output_279_0_g170400;
				float3 temp_output_280_0_g170400 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170400 = temp_output_280_0_g170400;
				half4 localSamplePlanar3D246_g170400 = SamplePlanar3D( Texture246_g170400 , Sampler246_g170400 , Coords246_g170400 , WorldPosition246_g170400 , WorldNormal246_g170400 );
				TEXTURE2D(Texture234_g170400) = _SecondShaderTex;
				SamplerState Sampler234_g170400 = SS30_g170413;
				float4 Coords234_g170400 = temp_output_37_0_g170400;
				float3 WorldPosition234_g170400 = temp_output_279_0_g170400;
				float4 localSampleStochastic2D234_g170400 = SampleStochastic2D( Texture234_g170400 , Sampler234_g170400 , Coords234_g170400 , WorldPosition234_g170400 );
				TEXTURE2D(Texture263_g170400) = _SecondShaderTex;
				SamplerState Sampler263_g170400 = SS30_g170413;
				half4 Coords263_g170400 = temp_output_37_0_g170400;
				half3 WorldPosition263_g170400 = temp_output_279_0_g170400;
				half3 WorldNormal263_g170400 = temp_output_280_0_g170400;
				half4 localSampleStochastic3D263_g170400 = SampleStochastic3D( Texture263_g170400 , Sampler263_g170400 , Coords263_g170400 , WorldPosition263_g170400 , WorldNormal263_g170400 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170397 = localSampleExtra275_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170397 = localSamplePlanar2D238_g170400;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170397 = localSamplePlanar3D246_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170397 = localSampleStochastic2D234_g170400;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170397 = localSampleStochastic3D263_g170400;
				#else
				float4 staticSwitch722_g170397 = localSampleMain276_g170400;
				#endif
				half4 Local_ShaderTex775_g170397 = staticSwitch722_g170397;
				float clampResult17_g170431 = clamp( (Local_ShaderTex775_g170397).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170430 = _SecondOcclusionRemap.x;
				float temp_output_9_0_g170430 = ( clampResult17_g170431 - temp_output_7_0_g170430 );
				float lerpResult1058_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170430 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
				half Local_Occlusion1067_g170397 = lerpResult1058_g170397;
				float clampResult17_g170433 = clamp( (Local_ShaderTex775_g170397).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170432 = _SecondSmoothnessRemap.x;
				float temp_output_9_0_g170432 = ( clampResult17_g170433 - temp_output_7_0_g170432 );
				half Local_Smoothness1068_g170397 = ( saturate( ( ( temp_output_9_0_g170432 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
				float4 appendResult749_g170397 = (float4(( (Local_ShaderTex775_g170397).x * _SecondMetallicValue ) , Local_Occlusion1067_g170397 , (Local_ShaderTex775_g170397).z , Local_Smoothness1068_g170397));
				half4 Local_Masks750_g170397 = appendResult749_g170397;
				float clampResult17_g170434 = clamp( (Local_Masks750_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170437 = _SecondMultiRemap.x;
				float temp_output_9_0_g170437 = ( clampResult17_g170434 - temp_output_7_0_g170437 );
				float temp_output_765_0_g170397 = saturate( ( ( temp_output_9_0_g170437 * _SecondMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170397 = temp_output_765_0_g170397;
				float lerpResult705_g170397 = lerp( 1.0 , Local_MultiMask767_g170397 , _SecondColorMode);
				float4 lerpResult706_g170397 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170397);
				half3 Local_ColorRGB774_g170397 = (lerpResult706_g170397).rgb;
				half3 Local_Albedo768_g170397 = ( Local_AlbedoRGB771_g170397 * Local_ColorRGB774_g170397 );
				float3 lerpResult985_g170397 = lerp( Local_Albedo768_g170397 , ( Visual_Albedo527_g170397 * Local_Albedo768_g170397 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170401) = _SecondMaskTex;
				SamplerState Sampler276_g170401 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170397 = _second_mask_coord_value;
				float4 temp_output_37_0_g170401 = Local_BlendCoords813_g170397;
				half4 Coords276_g170401 = temp_output_37_0_g170401;
				half2 TexCoord276_g170401 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170401 = SampleMain( Texture276_g170401 , Sampler276_g170401 , Coords276_g170401 , TexCoord276_g170401 );
				TEXTURE2D(Texture275_g170401) = _SecondMaskTex;
				SamplerState Sampler275_g170401 = sampler_Linear_Repeat;
				half4 Coords275_g170401 = temp_output_37_0_g170401;
				half2 TexCoord275_g170401 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170401 = SampleExtra( Texture275_g170401 , Sampler275_g170401 , Coords275_g170401 , TexCoord275_g170401 );
				TEXTURE2D(Texture238_g170401) = _SecondMaskTex;
				SamplerState Sampler238_g170401 = sampler_Linear_Repeat;
				half4 Coords238_g170401 = temp_output_37_0_g170401;
				float3 temp_output_279_0_g170401 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170401 = temp_output_279_0_g170401;
				half4 localSamplePlanar2D238_g170401 = SamplePlanar2D( Texture238_g170401 , Sampler238_g170401 , Coords238_g170401 , WorldPosition238_g170401 );
				TEXTURE2D(Texture246_g170401) = _SecondMaskTex;
				SamplerState Sampler246_g170401 = sampler_Linear_Repeat;
				half4 Coords246_g170401 = temp_output_37_0_g170401;
				half3 WorldPosition246_g170401 = temp_output_279_0_g170401;
				float3 temp_output_280_0_g170401 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170401 = temp_output_280_0_g170401;
				half4 localSamplePlanar3D246_g170401 = SamplePlanar3D( Texture246_g170401 , Sampler246_g170401 , Coords246_g170401 , WorldPosition246_g170401 , WorldNormal246_g170401 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170397 = localSampleExtra275_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170397 = localSamplePlanar2D238_g170401;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170397 = localSamplePlanar3D246_g170401;
				#else
				float4 staticSwitch817_g170397 = localSampleMain276_g170401;
				#endif
				half4 Local_MaskTex861_g170397 = staticSwitch817_g170397;
				float clampResult17_g170417 = clamp( (Local_MaskTex861_g170397).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170421 = _SecondMaskRemap.x;
				float temp_output_9_0_g170421 = ( clampResult17_g170417 - temp_output_7_0_g170421 );
				float lerpResult1015_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170421 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170397 = lerpResult1015_g170397;
				half Visual_Luminosity1041_g170397 = Out_Luminosity4_g170405;
				float clampResult17_g170426 = clamp( Visual_Luminosity1041_g170397 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170427 = _SecondLumaRemap.x;
				float temp_output_9_0_g170427 = ( clampResult17_g170426 - temp_output_7_0_g170427 );
				float lerpResult1036_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170427 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
				half Blend_LumaMask1033_g170397 = lerpResult1036_g170397;
				half3 Visual_NormalWS951_g170397 = Out_NormalWS4_g170405;
				float clampResult17_g170422 = clamp( saturate( (Visual_NormalWS951_g170397).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170424 = _SecondProjRemap.x;
				float temp_output_9_0_g170424 = ( clampResult17_g170422 - temp_output_7_0_g170424 );
				float lerpResult996_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170424 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170397 = lerpResult996_g170397;
				half4 Model_VertexMasks964_g170397 = Out_VertexData15_g170414;
				float4 break965_g170397 = Model_VertexMasks964_g170397;
				float4 break33_g170418 = _second_vert_mode;
				float temp_output_30_0_g170418 = ( break965_g170397.x * break33_g170418.x );
				float temp_output_29_0_g170418 = ( break965_g170397.y * break33_g170418.y );
				float temp_output_31_0_g170418 = ( break965_g170397.z * break33_g170418.z );
				float temp_output_28_0_g170418 = ( temp_output_30_0_g170418 + temp_output_29_0_g170418 + temp_output_31_0_g170418 + ( break965_g170397.w * break33_g170418.w ) );
				float clampResult17_g170416 = clamp( temp_output_28_0_g170418 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170420 = _SecondMeshRemap.x;
				float temp_output_9_0_g170420 = ( clampResult17_g170416 - temp_output_7_0_g170420 );
				float lerpResult1017_g170397 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170420 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
				float temp_output_6_0_g170419 = lerpResult1017_g170397;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170419 = ( temp_output_6_0_g170419 + _SecondMeshMode );
				#else
				float staticSwitch14_g170419 = temp_output_6_0_g170419;
				#endif
				half Blend_VertMask918_g170397 = staticSwitch14_g170419;
				float localBuildGlobalData204_g170214 = ( 0.0 );
				TVEGlobalData Data204_g170214 = (TVEGlobalData)0;
				half Dummy211_g170214 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
				float In_Dummy204_g170214 = Dummy211_g170214;
				float temp_output_82_0_g170224 = _GlobalCoatLayerValue;
				float temp_output_19_0_g170226 = TVE_CoatLayers[(int)temp_output_82_0_g170224];
				TVEModelData Data15_g170260 = Data16_g170201;
				float Out_Dummy15_g170260 = 0;
				float3 Out_PositionWS15_g170260 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170260 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170260 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170260 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170260 = float3( 0,0,0 );
				float4 Out_VertexData15_g170260 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170260 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170260 = Data15_g170260.Dummy;
				Out_PositionWS15_g170260 = Data15_g170260.PositionWS;
				Out_PositionWO15_g170260 = Data15_g170260.PositionWO;
				Out_PivotWS15_g170260 = Data15_g170260.PivotWS;
				Out_PivotWO15_g170260 = Data15_g170260.PivotWO;
				Out_NormalWS15_g170260 = Data15_g170260.NormalWS;
				Out_ViewDirWS15_g170260 = Data15_g170260.ViewDirWS;
				Out_VertexData15_g170260 = Data15_g170260.VertexData;
				Out_BoundsData15_g170260 = Data15_g170260.BoundsData;
				}
				half3 Model_PositionWS143_g170214 = Out_PositionWS15_g170260;
				half3 Model_PivotWS145_g170214 = Out_PivotWS15_g170260;
				float3 lerpResult300_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalCoatPivotValue);
				half3 Input_Position180_g170227 = lerpResult300_g170214;
				float2 temp_output_75_0_g170227 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_82_0_g170227 = temp_output_82_0_g170224;
				float2 temp_output_119_0_g170227 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170227).xz ) );
				float temp_output_7_0_g170232 = 1.0;
				float temp_output_9_0_g170232 = ( saturate( ( distance( Input_Position180_g170227 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170232 );
				float4 lerpResult131_g170227 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170227,temp_output_82_0_g170227, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, temp_output_119_0_g170227,temp_output_82_0_g170227, 0.0 ) , saturate( ( temp_output_9_0_g170232 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170232 ) ) ));
				float4 temp_output_17_0_g170226 = lerpResult131_g170227;
				float4 temp_output_3_0_g170226 = TVE_CoatParams;
				float4 ifLocalVar18_g170226 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170226 >= 0.5 )
				ifLocalVar18_g170226 = temp_output_17_0_g170226;
				else
				ifLocalVar18_g170226 = temp_output_3_0_g170226;
				float4 lerpResult22_g170226 = lerp( temp_output_3_0_g170226 , temp_output_17_0_g170226 , temp_output_19_0_g170226);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170226 = lerpResult22_g170226;
				#else
				float4 staticSwitch24_g170226 = ifLocalVar18_g170226;
				#endif
				half4 Coat_Params302_g170214 = staticSwitch24_g170226;
				float4 In_CoatDataRT204_g170214 = Coat_Params302_g170214;
				float temp_output_82_0_g170215 = _GlobalPaintLayerValue;
				float temp_output_19_0_g170217 = TVE_PaintLayers[(int)temp_output_82_0_g170215];
				float3 lerpResult85_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalPaintPivotValue);
				half3 Input_Position180_g170218 = lerpResult85_g170214;
				float2 temp_output_75_0_g170218 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_82_0_g170218 = temp_output_82_0_g170215;
				float2 temp_output_119_0_g170218 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170218).xz ) );
				float temp_output_7_0_g170223 = 1.0;
				float temp_output_9_0_g170223 = ( saturate( ( distance( Input_Position180_g170218 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170223 );
				float4 lerpResult131_g170218 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170218,temp_output_82_0_g170218, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g170218,temp_output_82_0_g170218, 0.0 ) , saturate( ( temp_output_9_0_g170223 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170223 ) ) ));
				float4 temp_output_17_0_g170217 = lerpResult131_g170218;
				float4 temp_output_3_0_g170217 = TVE_PaintParams;
				float4 ifLocalVar18_g170217 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170217 >= 0.5 )
				ifLocalVar18_g170217 = temp_output_17_0_g170217;
				else
				ifLocalVar18_g170217 = temp_output_3_0_g170217;
				float4 lerpResult22_g170217 = lerp( temp_output_3_0_g170217 , temp_output_17_0_g170217 , temp_output_19_0_g170217);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170217 = lerpResult22_g170217;
				#else
				float4 staticSwitch24_g170217 = ifLocalVar18_g170217;
				#endif
				half4 Paint_Params71_g170214 = staticSwitch24_g170217;
				float4 In_PaintDataRT204_g170214 = Paint_Params71_g170214;
				float temp_output_82_0_g170261 = _GlobalGlowLayerValue;
				float temp_output_19_0_g170263 = TVE_GlowLayers[(int)temp_output_82_0_g170261];
				float3 lerpResult247_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalGlowPivotValue);
				half3 Input_Position180_g170264 = lerpResult247_g170214;
				float2 temp_output_75_0_g170264 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_82_0_g170264 = temp_output_82_0_g170261;
				float2 temp_output_119_0_g170264 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170264).xz ) );
				float temp_output_7_0_g170269 = 1.0;
				float temp_output_9_0_g170269 = ( saturate( ( distance( Input_Position180_g170264 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170269 );
				float4 lerpResult131_g170264 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170264,temp_output_82_0_g170264, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170264,temp_output_82_0_g170264, 0.0 ) , saturate( ( temp_output_9_0_g170269 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170269 ) ) ));
				float4 temp_output_17_0_g170263 = lerpResult131_g170264;
				float4 temp_output_3_0_g170263 = TVE_GlowParams;
				float4 ifLocalVar18_g170263 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170263 >= 0.5 )
				ifLocalVar18_g170263 = temp_output_17_0_g170263;
				else
				ifLocalVar18_g170263 = temp_output_3_0_g170263;
				float4 lerpResult22_g170263 = lerp( temp_output_3_0_g170263 , temp_output_17_0_g170263 , temp_output_19_0_g170263);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170263 = lerpResult22_g170263;
				#else
				float4 staticSwitch24_g170263 = ifLocalVar18_g170263;
				#endif
				half4 Glow_Params248_g170214 = staticSwitch24_g170263;
				float4 In_GlowDataRT204_g170214 = Glow_Params248_g170214;
				float temp_output_132_0_g170242 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g170244 = TVE_AtmoLayers[(int)temp_output_132_0_g170242];
				float3 lerpResult104_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalAtmoPivotValue);
				half3 Input_Position180_g170245 = lerpResult104_g170214;
				float2 temp_output_75_0_g170245 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_82_0_g170245 = temp_output_132_0_g170242;
				float2 temp_output_119_0_g170245 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170245).xz ) );
				float temp_output_7_0_g170250 = 1.0;
				float temp_output_9_0_g170250 = ( saturate( ( distance( Input_Position180_g170245 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170250 );
				float4 lerpResult131_g170245 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170245,temp_output_82_0_g170245, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g170245,temp_output_82_0_g170245, 0.0 ) , saturate( ( temp_output_9_0_g170250 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170250 ) ) ));
				float4 temp_output_17_0_g170244 = lerpResult131_g170245;
				float4 temp_output_3_0_g170244 = TVE_AtmoParams;
				float4 ifLocalVar18_g170244 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170244 >= 0.5 )
				ifLocalVar18_g170244 = temp_output_17_0_g170244;
				else
				ifLocalVar18_g170244 = temp_output_3_0_g170244;
				float4 lerpResult22_g170244 = lerp( temp_output_3_0_g170244 , temp_output_17_0_g170244 , temp_output_19_0_g170244);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170244 = lerpResult22_g170244;
				#else
				float4 staticSwitch24_g170244 = ifLocalVar18_g170244;
				#endif
				half4 Atmo_Params80_g170214 = staticSwitch24_g170244;
				float4 In_AtmoDataRT204_g170214 = Atmo_Params80_g170214;
				float temp_output_132_0_g170251 = _GlobalFadeLayerValue;
				float temp_output_19_0_g170253 = TVE_FadeLayers[(int)temp_output_132_0_g170251];
				float3 lerpResult382_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFadePivotValue);
				half3 Input_Position180_g170254 = lerpResult382_g170214;
				float2 temp_output_75_0_g170254 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_82_0_g170254 = temp_output_132_0_g170251;
				float2 temp_output_119_0_g170254 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170254).xz ) );
				float temp_output_7_0_g170259 = 1.0;
				float temp_output_9_0_g170259 = ( saturate( ( distance( Input_Position180_g170254 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170259 );
				float4 lerpResult131_g170254 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170254,temp_output_82_0_g170254, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g170254,temp_output_82_0_g170254, 0.0 ) , saturate( ( temp_output_9_0_g170259 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170259 ) ) ));
				float4 temp_output_17_0_g170253 = lerpResult131_g170254;
				float4 temp_output_3_0_g170253 = TVE_FadeParams;
				float4 ifLocalVar18_g170253 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170253 >= 0.5 )
				ifLocalVar18_g170253 = temp_output_17_0_g170253;
				else
				ifLocalVar18_g170253 = temp_output_3_0_g170253;
				float4 lerpResult22_g170253 = lerp( temp_output_3_0_g170253 , temp_output_17_0_g170253 , temp_output_19_0_g170253);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170253 = lerpResult22_g170253;
				#else
				float4 staticSwitch24_g170253 = ifLocalVar18_g170253;
				#endif
				half4 Fade_Params387_g170214 = staticSwitch24_g170253;
				float4 In_FadeDataRT204_g170214 = Fade_Params387_g170214;
				float temp_output_130_0_g170233 = _GlobalFormLayerValue;
				float temp_output_19_0_g170235 = TVE_FormLayers[(int)temp_output_130_0_g170233];
				float3 lerpResult168_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFormPivotValue);
				half3 Input_Position180_g170236 = lerpResult168_g170214;
				float2 temp_output_75_0_g170236 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_82_0_g170236 = temp_output_130_0_g170233;
				float2 temp_output_119_0_g170236 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170236).xz ) );
				float temp_output_7_0_g170241 = 1.0;
				float temp_output_9_0_g170241 = ( saturate( ( distance( Input_Position180_g170236 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170241 );
				float4 lerpResult131_g170236 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170236,temp_output_82_0_g170236, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g170236,temp_output_82_0_g170236, 0.0 ) , saturate( ( temp_output_9_0_g170241 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170241 ) ) ));
				float4 temp_output_17_0_g170235 = lerpResult131_g170236;
				float4 temp_output_3_0_g170235 = TVE_FormParams;
				float4 ifLocalVar18_g170235 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170235 >= 0.5 )
				ifLocalVar18_g170235 = temp_output_17_0_g170235;
				else
				ifLocalVar18_g170235 = temp_output_3_0_g170235;
				float4 lerpResult22_g170235 = lerp( temp_output_3_0_g170235 , temp_output_17_0_g170235 , temp_output_19_0_g170235);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170235 = lerpResult22_g170235;
				#else
				float4 staticSwitch24_g170235 = ifLocalVar18_g170235;
				#endif
				half4 Form_Params112_g170214 = staticSwitch24_g170235;
				float4 In_FormDataRT204_g170214 = Form_Params112_g170214;
				float temp_output_136_0_g170279 = _GlobalFlowLayerValue;
				float temp_output_19_0_g170281 = TVE_FlowLayers[(int)temp_output_136_0_g170279];
				float3 lerpResult400_g170214 = lerp( Model_PositionWS143_g170214 , Model_PivotWS145_g170214 , _GlobalFlowPivotValue);
				half3 Input_Position180_g170282 = lerpResult400_g170214;
				float2 temp_output_75_0_g170282 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_82_0_g170282 = temp_output_136_0_g170279;
				float2 temp_output_119_0_g170282 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170282).xz ) );
				float temp_output_7_0_g170287 = 1.0;
				float temp_output_9_0_g170287 = ( saturate( ( distance( Input_Position180_g170282 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170287 );
				float4 lerpResult131_g170282 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170282,temp_output_82_0_g170282, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g170282,temp_output_82_0_g170282, 0.0 ) , saturate( ( temp_output_9_0_g170287 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170287 ) ) ));
				float4 temp_output_17_0_g170281 = lerpResult131_g170282;
				float4 temp_output_3_0_g170281 = TVE_FlowParams;
				float4 ifLocalVar18_g170281 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170281 >= 0.5 )
				ifLocalVar18_g170281 = temp_output_17_0_g170281;
				else
				ifLocalVar18_g170281 = temp_output_3_0_g170281;
				float4 lerpResult22_g170281 = lerp( temp_output_3_0_g170281 , temp_output_17_0_g170281 , temp_output_19_0_g170281);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170281 = lerpResult22_g170281;
				#else
				float4 staticSwitch24_g170281 = ifLocalVar18_g170281;
				#endif
				half4 Flow_Params405_g170214 = staticSwitch24_g170281;
				float4 In_FlowDataRT204_g170214 = Flow_Params405_g170214;
				{
				Data204_g170214.Dummy = In_Dummy204_g170214;
				Data204_g170214.CoatDataRT = In_CoatDataRT204_g170214;
				Data204_g170214.PaintDataRT = In_PaintDataRT204_g170214;
				Data204_g170214.GlowDataRT = In_GlowDataRT204_g170214;
				Data204_g170214.AtmoDataRT= In_AtmoDataRT204_g170214;
				Data204_g170214.FadeDataRT = In_FadeDataRT204_g170214;
				Data204_g170214.FormDataRT= In_FormDataRT204_g170214;
				Data204_g170214.FlowDataRT = In_FlowDataRT204_g170214;
				}
				TVEGlobalData Data15_g170404 = Data204_g170214;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170404 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170404 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatDataRT15_g170404 = Data15_g170404.CoatDataRT;
				Out_PaintDataRT15_g170404 = Data15_g170404.PaintDataRT;
				Out_GlowDataRT15_g170404= Data15_g170404.GlowDataRT;
				Out_AtmoDataRT15_g170404= Data15_g170404.AtmoDataRT;
				Out_FadeDataRT15_g170404= Data15_g170404.FadeDataRT;
				Out_FormDataRT15_g170404 = Data15_g170404.FormDataRT;
				Out_FlowDataRT15_g170404 = Data15_g170404.FlowDataRT;
				}
				half4 Global_CoatParams975_g170397 = Out_CoatDataRT15_g170404;
				float temp_output_6_0_g170428 = (Global_CoatParams975_g170397).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170428 = ( temp_output_6_0_g170428 + _SecondElementMode );
				#else
				float staticSwitch14_g170428 = temp_output_6_0_g170428;
				#endif
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170397 = staticSwitch14_g170428;
				#else
				float staticSwitch971_g170397 = TVE_CoatParams.z;
				#endif
				float lerpResult1013_g170397 = lerp( 1.0 , staticSwitch971_g170397 , ( _SecondGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask972_g170397 = lerpResult1013_g170397;
				float clampResult17_g170423 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170397 * Blend_LumaMask1033_g170397 * Blend_ProjMask434_g170397 * Blend_VertMask918_g170397 * Blend_GlobalMask972_g170397 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _SecondBlendRemap.x;
				float temp_output_9_0_g170425 = ( clampResult17_g170423 - temp_output_7_0_g170425 );
				half Blend_Mask412_g170397 = ( saturate( ( ( temp_output_9_0_g170425 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170397 = lerp( Visual_Albedo527_g170397 , lerpResult985_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170397 = lerpResult403_g170397;
				#else
				float3 staticSwitch415_g170397 = Visual_Albedo527_g170397;
				#endif
				half3 Final_Albedo601_g170397 = staticSwitch415_g170397;
				float3 In_Albedo3_g170415 = Final_Albedo601_g170397;
				float3 In_AlbedoRaw3_g170415 = Final_Albedo601_g170397;
				half2 Visual_NormalTS529_g170397 = Out_NormalTS4_g170405;
				float2 lerpResult40_g170406 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170397 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170399) = _SecondNormalTex;
				float localFilterTexture29_g170412 = ( 0.0 );
				SamplerState SS29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170412 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170412 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170412 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170412 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170412 = SamplerDefault29_g170412;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170412 = SamplerDefault29_g170412;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170412 = SamplerPoint29_g170412;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170412 = SamplerLow29_g170412;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170412 = SamplerMedium29_g170412;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170412 = SamplerHigh29_g170412;
				#endif
				}
				SamplerState Sampler276_g170399 = SS29_g170412;
				float4 temp_output_37_0_g170399 = Local_LayerCoords790_g170397;
				half4 Coords276_g170399 = temp_output_37_0_g170399;
				half2 TexCoord276_g170399 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170399 = SampleMain( Texture276_g170399 , Sampler276_g170399 , Coords276_g170399 , TexCoord276_g170399 );
				TEXTURE2D(Texture275_g170399) = _SecondNormalTex;
				SamplerState Sampler275_g170399 = SS29_g170412;
				half4 Coords275_g170399 = temp_output_37_0_g170399;
				half2 TexCoord275_g170399 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170399 = SampleExtra( Texture275_g170399 , Sampler275_g170399 , Coords275_g170399 , TexCoord275_g170399 );
				TEXTURE2D(Texture238_g170399) = _SecondNormalTex;
				SamplerState Sampler238_g170399 = SS29_g170412;
				half4 Coords238_g170399 = temp_output_37_0_g170399;
				float3 temp_output_279_0_g170399 = Model_PositionWO636_g170397;
				half3 WorldPosition238_g170399 = temp_output_279_0_g170399;
				half4 localSamplePlanar2D238_g170399 = SamplePlanar2D( Texture238_g170399 , Sampler238_g170399 , Coords238_g170399 , WorldPosition238_g170399 );
				TEXTURE2D(Texture246_g170399) = _SecondNormalTex;
				SamplerState Sampler246_g170399 = SS29_g170412;
				half4 Coords246_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition246_g170399 = temp_output_279_0_g170399;
				float3 temp_output_280_0_g170399 = Model_NormalWS869_g170397;
				half3 WorldNormal246_g170399 = temp_output_280_0_g170399;
				half4 localSamplePlanar3D246_g170399 = SamplePlanar3D( Texture246_g170399 , Sampler246_g170399 , Coords246_g170399 , WorldPosition246_g170399 , WorldNormal246_g170399 );
				TEXTURE2D(Texture234_g170399) = _SecondNormalTex;
				SamplerState Sampler234_g170399 = SS29_g170412;
				float4 Coords234_g170399 = temp_output_37_0_g170399;
				float3 WorldPosition234_g170399 = temp_output_279_0_g170399;
				float4 localSampleStochastic2D234_g170399 = SampleStochastic2D( Texture234_g170399 , Sampler234_g170399 , Coords234_g170399 , WorldPosition234_g170399 );
				TEXTURE2D(Texture263_g170399) = _SecondNormalTex;
				SamplerState Sampler263_g170399 = SS29_g170412;
				half4 Coords263_g170399 = temp_output_37_0_g170399;
				half3 WorldPosition263_g170399 = temp_output_279_0_g170399;
				half3 WorldNormal263_g170399 = temp_output_280_0_g170399;
				half4 localSampleStochastic3D263_g170399 = SampleStochastic3D( Texture263_g170399 , Sampler263_g170399 , Coords263_g170399 , WorldPosition263_g170399 , WorldNormal263_g170399 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170397 = localSampleExtra275_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170397 = localSamplePlanar2D238_g170399;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170397 = localSamplePlanar3D246_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170397 = localSampleStochastic2D234_g170399;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170397 = localSampleStochastic3D263_g170399;
				#else
				float4 staticSwitch698_g170397 = localSampleMain276_g170399;
				#endif
				half4 Local_NormalTex776_g170397 = staticSwitch698_g170397;
				half4 Normal_Packed45_g170402 = Local_NormalTex776_g170397;
				float2 appendResult58_g170402 = (float2(( (Normal_Packed45_g170402).x * (Normal_Packed45_g170402).w ) , (Normal_Packed45_g170402).y));
				half2 Normal_Default50_g170402 = appendResult58_g170402;
				half2 Normal_ASTC41_g170402 = (Normal_Packed45_g170402).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170402 = Normal_ASTC41_g170402;
				#else
				float2 staticSwitch38_g170402 = Normal_Default50_g170402;
				#endif
				half2 Normal_NO_DTX544_g170402 = (Normal_Packed45_g170402).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170402 = Normal_NO_DTX544_g170402;
				#else
				float2 staticSwitch37_g170402 = staticSwitch38_g170402;
				#endif
				float2 temp_output_724_0_g170397 = ( (staticSwitch37_g170402*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170403 = temp_output_724_0_g170397;
				float2 break71_g170403 = Normal_Planar45_g170403;
				float3 appendResult72_g170403 = (float3(break71_g170403.x , 0.0 , break71_g170403.y));
				float2 temp_output_858_0_g170397 = (mul( ase_worldToTangent, appendResult72_g170403 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170397 = temp_output_858_0_g170397;
				#else
				float2 staticSwitch727_g170397 = temp_output_724_0_g170397;
				#endif
				half2 Local_NormalTS729_g170397 = staticSwitch727_g170397;
				float2 temp_output_36_0_g170406 = ( lerpResult40_g170406 + Local_NormalTS729_g170397 );
				float2 lerpResult405_g170397 = lerp( Visual_NormalTS529_g170397 , temp_output_36_0_g170406 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170397 = lerpResult405_g170397;
				#else
				float2 staticSwitch418_g170397 = Visual_NormalTS529_g170397;
				#endif
				half2 Final_NormalTS612_g170397 = staticSwitch418_g170397;
				float2 In_NormalTS3_g170415 = Final_NormalTS612_g170397;
				float3 appendResult68_g170407 = (float3(Final_NormalTS612_g170397 , 1.0));
				float3 tanNormal74_g170407 = appendResult68_g170407;
				float3 worldNormal74_g170407 = normalize( float3( dot( tanToWorld0, tanNormal74_g170407 ), dot( tanToWorld1, tanNormal74_g170407 ), dot( tanToWorld2, tanNormal74_g170407 ) ) );
				half3 Final_NormalWS950_g170397 = worldNormal74_g170407;
				float3 In_NormalWS3_g170415 = Final_NormalWS950_g170397;
				half4 Visual_Shader531_g170397 = Out_Shader4_g170405;
				float4 lerpResult994_g170397 = lerp( Local_Masks750_g170397 , ( Visual_Shader531_g170397 * Local_Masks750_g170397 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170397 = lerp( Visual_Shader531_g170397 , lerpResult994_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170397 = lerpResult440_g170397;
				#else
				float4 staticSwitch451_g170397 = Visual_Shader531_g170397;
				#endif
				half4 Final_Masks613_g170397 = staticSwitch451_g170397;
				float4 In_Shader3_g170415 = Final_Masks613_g170397;
				float4 In_Emissive3_g170415 = Out_Emissive4_g170405;
				float3 temp_output_3_0_g170409 = Final_Albedo601_g170397;
				float dotResult20_g170409 = dot( temp_output_3_0_g170409 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170397 = dotResult20_g170409;
				float In_Grayscale3_g170415 = Final_Grayscale615_g170397;
				float clampResult651_g170397 = clamp( saturate( ( Final_Grayscale615_g170397 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170397 = clampResult651_g170397;
				float In_Luminosity3_g170415 = Final_Luminosity652_g170397;
				half Visual_MultiMask547_g170397 = Out_MultiMask4_g170405;
				float lerpResult477_g170397 = lerp( Visual_MultiMask547_g170397 , Local_MultiMask767_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch482_g170397 = lerpResult477_g170397;
				#else
				float staticSwitch482_g170397 = Visual_MultiMask547_g170397;
				#endif
				half Final_MultiMask572_g170397 = staticSwitch482_g170397;
				float In_MultiMask3_g170415 = Final_MultiMask572_g170397;
				half Visual_AlphaClip559_g170397 = Out_AlphaClip4_g170405;
				float temp_output_718_0_g170397 = (Local_AlbedoTex777_g170397).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170397 = ( temp_output_718_0_g170397 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170397 = temp_output_718_0_g170397;
				#endif
				half Local_AlphaClip772_g170397 = staticSwitch932_g170397;
				float lerpResult448_g170397 = lerp( Visual_AlphaClip559_g170397 , Local_AlphaClip772_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch564_g170397 = lerpResult448_g170397;
				#else
				float staticSwitch564_g170397 = Visual_AlphaClip559_g170397;
				#endif
				half Final_AlphaClip602_g170397 = staticSwitch564_g170397;
				float In_AlphaClip3_g170415 = Final_AlphaClip602_g170397;
				half Visual_AlphaFade588_g170397 = Out_AlphaFade4_g170405;
				half Local_AlphaFade773_g170397 = (lerpResult706_g170397).a;
				float lerpResult604_g170397 = lerp( Visual_AlphaFade588_g170397 , Local_AlphaFade773_g170397 , Blend_Mask412_g170397);
				#ifdef TVE_SECOND
				float staticSwitch608_g170397 = lerpResult604_g170397;
				#else
				float staticSwitch608_g170397 = Visual_AlphaFade588_g170397;
				#endif
				half Final_AlphaFade611_g170397 = staticSwitch608_g170397;
				float In_AlphaFade3_g170415 = Final_AlphaFade611_g170397;
				float3 In_Translucency3_g170415 = Out_Translucency4_g170405;
				float In_Transmission3_g170415 = Out_Transmission4_g170405;
				float In_Thickness3_g170415 = Out_Thickness4_g170405;
				float In_Diffusion3_g170415 = Out_Diffusion4_g170405;
				float In_Depth3_g170415 = Out_Depth4_g170405;
				{
				Data3_g170415.Dummy = In_Dummy3_g170415;
				Data3_g170415.Albedo = In_Albedo3_g170415;
				Data3_g170415.AlbedoRaw = In_AlbedoRaw3_g170415;
				Data3_g170415.NormalTS = In_NormalTS3_g170415;
				Data3_g170415.NormalWS = In_NormalWS3_g170415;
				Data3_g170415.Shader = In_Shader3_g170415;
				Data3_g170415.Emissive= In_Emissive3_g170415;
				Data3_g170415.MultiMask = In_MultiMask3_g170415;
				Data3_g170415.Grayscale = In_Grayscale3_g170415;
				Data3_g170415.Luminosity = In_Luminosity3_g170415;
				Data3_g170415.AlphaClip = In_AlphaClip3_g170415;
				Data3_g170415.AlphaFade = In_AlphaFade3_g170415;
				Data3_g170415.Translucency = In_Translucency3_g170415;
				Data3_g170415.Transmission = In_Transmission3_g170415;
				Data3_g170415.Thickness = In_Thickness3_g170415;
				Data3_g170415.Diffusion = In_Diffusion3_g170415;
				Data3_g170415.Depth = In_Depth3_g170415;
				}
				TVEVisualData Data4_g170453 = Data3_g170415;
				float Out_Dummy4_g170453 = 0;
				float3 Out_Albedo4_g170453 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170453 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170453 = float2( 0,0 );
				float3 Out_NormalWS4_g170453 = float3( 0,0,0 );
				float4 Out_Shader4_g170453 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170453 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170453 = 0;
				float Out_Grayscale4_g170453 = 0;
				float Out_Luminosity4_g170453 = 0;
				float Out_AlphaClip4_g170453 = 0;
				float Out_AlphaFade4_g170453 = 0;
				float3 Out_Translucency4_g170453 = float3( 0,0,0 );
				float Out_Transmission4_g170453 = 0;
				float Out_Thickness4_g170453 = 0;
				float Out_Diffusion4_g170453 = 0;
				float Out_Depth4_g170453 = 0;
				{
				Out_Dummy4_g170453 = Data4_g170453.Dummy;
				Out_Albedo4_g170453 = Data4_g170453.Albedo;
				Out_AlbedoRaw4_g170453 = Data4_g170453.AlbedoRaw;
				Out_NormalTS4_g170453 = Data4_g170453.NormalTS;
				Out_NormalWS4_g170453 = Data4_g170453.NormalWS;
				Out_Shader4_g170453 = Data4_g170453.Shader;
				Out_Emissive4_g170453= Data4_g170453.Emissive;
				Out_MultiMask4_g170453 = Data4_g170453.MultiMask;
				Out_Grayscale4_g170453 = Data4_g170453.Grayscale;
				Out_Luminosity4_g170453= Data4_g170453.Luminosity;
				Out_AlphaClip4_g170453 = Data4_g170453.AlphaClip;
				Out_AlphaFade4_g170453 = Data4_g170453.AlphaFade;
				Out_Translucency4_g170453 = Data4_g170453.Translucency;
				Out_Transmission4_g170453 = Data4_g170453.Transmission;
				Out_Thickness4_g170453 = Data4_g170453.Thickness;
				Out_Diffusion4_g170453 = Data4_g170453.Diffusion;
				Out_Depth4_g170453= Data4_g170453.Depth;
				}
				half3 Visual_Albedo527_g170446 = Out_Albedo4_g170453;
				TEXTURE2D(Texture276_g170447) = _ThirdAlbedoTex;
				float localFilterTexture19_g170462 = ( 0.0 );
				SamplerState SS19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170462 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170462 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170462 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170462 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170462 = SamplerDefault19_g170462;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170462 = SamplerDefault19_g170462;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170462 = SamplerPoint19_g170462;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170462 = SamplerLow19_g170462;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170462 = SamplerMedium19_g170462;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170462 = SamplerHigh19_g170462;
				#endif
				}
				SamplerState Sampler276_g170447 = SS19_g170462;
				half4 Local_LayerCoords790_g170446 = _third_coord_value;
				float4 temp_output_37_0_g170447 = Local_LayerCoords790_g170446;
				half4 Coords276_g170447 = temp_output_37_0_g170447;
				half2 TexCoord276_g170447 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170447 = SampleMain( Texture276_g170447 , Sampler276_g170447 , Coords276_g170447 , TexCoord276_g170447 );
				TEXTURE2D(Texture275_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170447 = SS19_g170462;
				half4 Coords275_g170447 = temp_output_37_0_g170447;
				half2 TexCoord275_g170447 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170447 = SampleExtra( Texture275_g170447 , Sampler275_g170447 , Coords275_g170447 , TexCoord275_g170447 );
				TEXTURE2D(Texture238_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170447 = SS19_g170462;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170465 = Data16_g170201;
				float Out_Dummy15_g170465 = 0;
				float3 Out_PositionWS15_g170465 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170465 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170465 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170465 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170465 = float3( 0,0,0 );
				float4 Out_VertexData15_g170465 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170465 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170465 = Data15_g170465.Dummy;
				Out_PositionWS15_g170465 = Data15_g170465.PositionWS;
				Out_PositionWO15_g170465 = Data15_g170465.PositionWO;
				Out_PivotWS15_g170465 = Data15_g170465.PivotWS;
				Out_PivotWO15_g170465 = Data15_g170465.PivotWO;
				Out_NormalWS15_g170465 = Data15_g170465.NormalWS;
				Out_ViewDirWS15_g170465 = Data15_g170465.ViewDirWS;
				Out_VertexData15_g170465 = Data15_g170465.VertexData;
				Out_BoundsData15_g170465 = Data15_g170465.BoundsData;
				}
				half3 Model_PositionWO636_g170446 = Out_PositionWO15_g170465;
				float3 temp_output_279_0_g170447 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				TEXTURE2D(Texture246_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170462;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS869_g170446 = Out_NormalWS15_g170465;
				float3 temp_output_280_0_g170447 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				TEXTURE2D(Texture234_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170462;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				TEXTURE2D(Texture263_g170447) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170462;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170446 = localSampleExtra275_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170446 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170446 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170446 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170446 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch693_g170446 = localSampleMain276_g170447;
				#endif
				half4 Local_AlbedoTex777_g170446 = staticSwitch693_g170446;
				float3 lerpResult716_g170446 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170446).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170446 = lerpResult716_g170446;
				TEXTURE2D(Texture276_g170449) = _ThirdShaderTex;
				float localFilterTexture30_g170464 = ( 0.0 );
				SamplerState SS30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170464 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170464 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170464 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g170464 = SamplerDefault30_g170464;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170464 = SamplerDefault30_g170464;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170464 = SamplerPoint30_g170464;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170464 = SamplerLow30_g170464;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170464 = SamplerMedium30_g170464;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170464 = SamplerHigh30_g170464;
				#endif
				}
				SamplerState Sampler276_g170449 = SS30_g170464;
				float4 temp_output_37_0_g170449 = Local_LayerCoords790_g170446;
				half4 Coords276_g170449 = temp_output_37_0_g170449;
				half2 TexCoord276_g170449 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170449 = SampleMain( Texture276_g170449 , Sampler276_g170449 , Coords276_g170449 , TexCoord276_g170449 );
				TEXTURE2D(Texture275_g170449) = _ThirdShaderTex;
				SamplerState Sampler275_g170449 = SS30_g170464;
				half4 Coords275_g170449 = temp_output_37_0_g170449;
				half2 TexCoord275_g170449 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170449 = SampleExtra( Texture275_g170449 , Sampler275_g170449 , Coords275_g170449 , TexCoord275_g170449 );
				TEXTURE2D(Texture238_g170449) = _ThirdShaderTex;
				SamplerState Sampler238_g170449 = SS30_g170464;
				half4 Coords238_g170449 = temp_output_37_0_g170449;
				float3 temp_output_279_0_g170449 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170449 = temp_output_279_0_g170449;
				half4 localSamplePlanar2D238_g170449 = SamplePlanar2D( Texture238_g170449 , Sampler238_g170449 , Coords238_g170449 , WorldPosition238_g170449 );
				TEXTURE2D(Texture246_g170449) = _ThirdShaderTex;
				SamplerState Sampler246_g170449 = SS30_g170464;
				half4 Coords246_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition246_g170449 = temp_output_279_0_g170449;
				float3 temp_output_280_0_g170449 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170449 = temp_output_280_0_g170449;
				half4 localSamplePlanar3D246_g170449 = SamplePlanar3D( Texture246_g170449 , Sampler246_g170449 , Coords246_g170449 , WorldPosition246_g170449 , WorldNormal246_g170449 );
				TEXTURE2D(Texture234_g170449) = _ThirdShaderTex;
				SamplerState Sampler234_g170449 = SS30_g170464;
				float4 Coords234_g170449 = temp_output_37_0_g170449;
				float3 WorldPosition234_g170449 = temp_output_279_0_g170449;
				float4 localSampleStochastic2D234_g170449 = SampleStochastic2D( Texture234_g170449 , Sampler234_g170449 , Coords234_g170449 , WorldPosition234_g170449 );
				TEXTURE2D(Texture263_g170449) = _ThirdShaderTex;
				SamplerState Sampler263_g170449 = SS30_g170464;
				half4 Coords263_g170449 = temp_output_37_0_g170449;
				half3 WorldPosition263_g170449 = temp_output_279_0_g170449;
				half3 WorldNormal263_g170449 = temp_output_280_0_g170449;
				half4 localSampleStochastic3D263_g170449 = SampleStochastic3D( Texture263_g170449 , Sampler263_g170449 , Coords263_g170449 , WorldPosition263_g170449 , WorldNormal263_g170449 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170446 = localSampleExtra275_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170446 = localSamplePlanar2D238_g170449;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170446 = localSamplePlanar3D246_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170446 = localSampleStochastic2D234_g170449;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170446 = localSampleStochastic3D263_g170449;
				#else
				float4 staticSwitch722_g170446 = localSampleMain276_g170449;
				#endif
				half4 Local_ShaderTex775_g170446 = staticSwitch722_g170446;
				float clampResult17_g170483 = clamp( (Local_ShaderTex775_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170482 = _ThirdOcclusionRemap.x;
				float temp_output_9_0_g170482 = ( clampResult17_g170483 - temp_output_7_0_g170482 );
				float lerpResult1072_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170482 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
				half Local_Occlusion1084_g170446 = lerpResult1072_g170446;
				float clampResult17_g170485 = clamp( (Local_ShaderTex775_g170446).w , 0.0001 , 0.9999 );
				float temp_output_7_0_g170484 = _ThirdSmoothnessRemap.x;
				float temp_output_9_0_g170484 = ( clampResult17_g170485 - temp_output_7_0_g170484 );
				half Local_Smoothness1085_g170446 = ( saturate( ( ( temp_output_9_0_g170484 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
				float4 appendResult749_g170446 = (float4(( (Local_ShaderTex775_g170446).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170446 , (Local_ShaderTex775_g170446).z , Local_Smoothness1085_g170446));
				half4 Local_Masks750_g170446 = appendResult749_g170446;
				float clampResult17_g170480 = clamp( (Local_Masks750_g170446).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170481 = _ThirdMultiRemap.x;
				float temp_output_9_0_g170481 = ( clampResult17_g170480 - temp_output_7_0_g170481 );
				float temp_output_765_0_g170446 = saturate( ( ( temp_output_9_0_g170481 * _ThirdMultiRemap.z ) + 0.0001 ) );
				half Local_MultiMask767_g170446 = temp_output_765_0_g170446;
				float lerpResult705_g170446 = lerp( 1.0 , Local_MultiMask767_g170446 , _ThirdColorMode);
				float4 lerpResult706_g170446 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170446);
				half3 Local_ColorRGB774_g170446 = (lerpResult706_g170446).rgb;
				half3 Local_Albedo768_g170446 = ( Local_AlbedoRGB771_g170446 * Local_ColorRGB774_g170446 );
				float3 lerpResult985_g170446 = lerp( Local_Albedo768_g170446 , ( Visual_Albedo527_g170446 * Local_Albedo768_g170446 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170460) = _ThirdMaskTex;
				SamplerState Sampler276_g170460 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170446 = _third_mask_coord_value;
				float4 temp_output_37_0_g170460 = Local_MaskCoords813_g170446;
				half4 Coords276_g170460 = temp_output_37_0_g170460;
				half2 TexCoord276_g170460 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170460 = SampleMain( Texture276_g170460 , Sampler276_g170460 , Coords276_g170460 , TexCoord276_g170460 );
				TEXTURE2D(Texture275_g170460) = _ThirdMaskTex;
				SamplerState Sampler275_g170460 = sampler_Linear_Repeat;
				half4 Coords275_g170460 = temp_output_37_0_g170460;
				half2 TexCoord275_g170460 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170460 = SampleExtra( Texture275_g170460 , Sampler275_g170460 , Coords275_g170460 , TexCoord275_g170460 );
				TEXTURE2D(Texture238_g170460) = _ThirdMaskTex;
				SamplerState Sampler238_g170460 = sampler_Linear_Repeat;
				half4 Coords238_g170460 = temp_output_37_0_g170460;
				float3 temp_output_279_0_g170460 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170460 = temp_output_279_0_g170460;
				half4 localSamplePlanar2D238_g170460 = SamplePlanar2D( Texture238_g170460 , Sampler238_g170460 , Coords238_g170460 , WorldPosition238_g170460 );
				TEXTURE2D(Texture246_g170460) = _ThirdMaskTex;
				SamplerState Sampler246_g170460 = sampler_Linear_Repeat;
				half4 Coords246_g170460 = temp_output_37_0_g170460;
				half3 WorldPosition246_g170460 = temp_output_279_0_g170460;
				float3 temp_output_280_0_g170460 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170460 = temp_output_280_0_g170460;
				half4 localSamplePlanar3D246_g170460 = SamplePlanar3D( Texture246_g170460 , Sampler246_g170460 , Coords246_g170460 , WorldPosition246_g170460 , WorldNormal246_g170460 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170446 = localSampleExtra275_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170446 = localSamplePlanar2D238_g170460;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170446 = localSamplePlanar3D246_g170460;
				#else
				float4 staticSwitch817_g170446 = localSampleMain276_g170460;
				#endif
				half4 Local_MaskTex861_g170446 = staticSwitch817_g170446;
				float clampResult17_g170467 = clamp( (Local_MaskTex861_g170446).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170471 = _ThirdMaskRemap.x;
				float temp_output_9_0_g170471 = ( clampResult17_g170467 - temp_output_7_0_g170471 );
				float lerpResult1028_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170471 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170446 = lerpResult1028_g170446;
				half Visual_Luminosity1049_g170446 = Out_Luminosity4_g170453;
				float clampResult17_g170476 = clamp( Visual_Luminosity1049_g170446 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170477 = _ThirdLumaRemap.x;
				float temp_output_9_0_g170477 = ( clampResult17_g170476 - temp_output_7_0_g170477 );
				float lerpResult1040_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170477 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
				half Blend_LumaMask1046_g170446 = lerpResult1040_g170446;
				half4 Model_VertexMasks960_g170446 = Out_VertexData15_g170465;
				float4 break961_g170446 = Model_VertexMasks960_g170446;
				float4 break33_g170468 = _third_vert_mode;
				float temp_output_30_0_g170468 = ( break961_g170446.x * break33_g170468.x );
				float temp_output_29_0_g170468 = ( break961_g170446.y * break33_g170468.y );
				float temp_output_31_0_g170468 = ( break961_g170446.z * break33_g170468.z );
				float temp_output_28_0_g170468 = ( temp_output_30_0_g170468 + temp_output_29_0_g170468 + temp_output_31_0_g170468 + ( break961_g170446.w * break33_g170468.w ) );
				float clampResult17_g170466 = clamp( temp_output_28_0_g170468 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170470 = _ThirdMeshRemap.x;
				float temp_output_9_0_g170470 = ( clampResult17_g170466 - temp_output_7_0_g170470 );
				float lerpResult1026_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170470 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170469 = lerpResult1026_g170446;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170469 = ( temp_output_6_0_g170469 + _ThirdMeshMode );
				#else
				float staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half Blend_VertMask913_g170446 = staticSwitch14_g170469;
				half3 Visual_NormalWS953_g170446 = Out_NormalWS4_g170453;
				float clampResult17_g170472 = clamp( saturate( (Visual_NormalWS953_g170446).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170474 = _ThirdProjRemap.x;
				float temp_output_9_0_g170474 = ( clampResult17_g170472 - temp_output_7_0_g170474 );
				float lerpResult1004_g170446 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170474 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170446 = lerpResult1004_g170446;
				TVEGlobalData Data15_g170455 = Data204_g170214;
				float Out_Dummy15_g170455 = 0;
				float4 Out_CoatDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170455 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170455 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170455 = Data15_g170455.Dummy;
				Out_CoatDataRT15_g170455 = Data15_g170455.CoatDataRT;
				Out_PaintDataRT15_g170455 = Data15_g170455.PaintDataRT;
				Out_GlowDataRT15_g170455= Data15_g170455.GlowDataRT;
				Out_AtmoDataRT15_g170455= Data15_g170455.AtmoDataRT;
				Out_FadeDataRT15_g170455= Data15_g170455.FadeDataRT;
				Out_FormDataRT15_g170455 = Data15_g170455.FormDataRT;
				Out_FlowDataRT15_g170455 = Data15_g170455.FlowDataRT;
				}
				half4 Global_CoatParams972_g170446 = Out_CoatDataRT15_g170455;
				float temp_output_6_0_g170478 = (Global_CoatParams972_g170446).y;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170478 = ( temp_output_6_0_g170478 + _ThirdElementMode );
				#else
				float staticSwitch14_g170478 = temp_output_6_0_g170478;
				#endif
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch1056_g170446 = staticSwitch14_g170478;
				#else
				float staticSwitch1056_g170446 = TVE_CoatParams.y;
				#endif
				float lerpResult1060_g170446 = lerp( 1.0 , staticSwitch1056_g170446 , ( _ThirdGlobalValue * TVE_IsEnabled ));
				half Blend_GlobalMask968_g170446 = lerpResult1060_g170446;
				float clampResult17_g170473 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170446 * Blend_LumaMask1046_g170446 * Blend_VertMask913_g170446 * Blend_ProjMask912_g170446 * Blend_GlobalMask968_g170446 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170475 = _ThirdBlendRemap.x;
				float temp_output_9_0_g170475 = ( clampResult17_g170473 - temp_output_7_0_g170475 );
				half Detail_Mask412_g170446 = ( saturate( ( ( temp_output_9_0_g170475 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170446 = lerp( Visual_Albedo527_g170446 , lerpResult985_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170446 = lerpResult989_g170446;
				#else
				float3 staticSwitch415_g170446 = Visual_Albedo527_g170446;
				#endif
				half3 Final_Albedo601_g170446 = staticSwitch415_g170446;
				float3 In_Albedo3_g170454 = Final_Albedo601_g170446;
				float3 In_AlbedoRaw3_g170454 = Final_Albedo601_g170446;
				half2 Visual_NormalTS529_g170446 = Out_NormalTS4_g170453;
				float2 lerpResult40_g170456 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170446 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170448) = _ThirdNormalTex;
				float localFilterTexture29_g170463 = ( 0.0 );
				SamplerState SS29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170463 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170463 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170463 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170463 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170463 = SamplerDefault29_g170463;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170463 = SamplerDefault29_g170463;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170463 = SamplerPoint29_g170463;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170463 = SamplerLow29_g170463;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170463 = SamplerMedium29_g170463;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170463 = SamplerHigh29_g170463;
				#endif
				}
				SamplerState Sampler276_g170448 = SS29_g170463;
				float4 temp_output_37_0_g170448 = Local_LayerCoords790_g170446;
				half4 Coords276_g170448 = temp_output_37_0_g170448;
				half2 TexCoord276_g170448 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170448 = SampleMain( Texture276_g170448 , Sampler276_g170448 , Coords276_g170448 , TexCoord276_g170448 );
				TEXTURE2D(Texture275_g170448) = _ThirdNormalTex;
				SamplerState Sampler275_g170448 = SS29_g170463;
				half4 Coords275_g170448 = temp_output_37_0_g170448;
				half2 TexCoord275_g170448 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170448 = SampleExtra( Texture275_g170448 , Sampler275_g170448 , Coords275_g170448 , TexCoord275_g170448 );
				TEXTURE2D(Texture238_g170448) = _ThirdNormalTex;
				SamplerState Sampler238_g170448 = SS29_g170463;
				half4 Coords238_g170448 = temp_output_37_0_g170448;
				float3 temp_output_279_0_g170448 = Model_PositionWO636_g170446;
				half3 WorldPosition238_g170448 = temp_output_279_0_g170448;
				half4 localSamplePlanar2D238_g170448 = SamplePlanar2D( Texture238_g170448 , Sampler238_g170448 , Coords238_g170448 , WorldPosition238_g170448 );
				TEXTURE2D(Texture246_g170448) = _ThirdNormalTex;
				SamplerState Sampler246_g170448 = SS29_g170463;
				half4 Coords246_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition246_g170448 = temp_output_279_0_g170448;
				float3 temp_output_280_0_g170448 = Model_NormalWS869_g170446;
				half3 WorldNormal246_g170448 = temp_output_280_0_g170448;
				half4 localSamplePlanar3D246_g170448 = SamplePlanar3D( Texture246_g170448 , Sampler246_g170448 , Coords246_g170448 , WorldPosition246_g170448 , WorldNormal246_g170448 );
				TEXTURE2D(Texture234_g170448) = _ThirdNormalTex;
				SamplerState Sampler234_g170448 = SS29_g170463;
				float4 Coords234_g170448 = temp_output_37_0_g170448;
				float3 WorldPosition234_g170448 = temp_output_279_0_g170448;
				float4 localSampleStochastic2D234_g170448 = SampleStochastic2D( Texture234_g170448 , Sampler234_g170448 , Coords234_g170448 , WorldPosition234_g170448 );
				TEXTURE2D(Texture263_g170448) = _ThirdNormalTex;
				SamplerState Sampler263_g170448 = SS29_g170463;
				half4 Coords263_g170448 = temp_output_37_0_g170448;
				half3 WorldPosition263_g170448 = temp_output_279_0_g170448;
				half3 WorldNormal263_g170448 = temp_output_280_0_g170448;
				half4 localSampleStochastic3D263_g170448 = SampleStochastic3D( Texture263_g170448 , Sampler263_g170448 , Coords263_g170448 , WorldPosition263_g170448 , WorldNormal263_g170448 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170446 = localSampleExtra275_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170446 = localSamplePlanar2D238_g170448;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170446 = localSamplePlanar3D246_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170446 = localSampleStochastic2D234_g170448;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170446 = localSampleStochastic3D263_g170448;
				#else
				float4 staticSwitch698_g170446 = localSampleMain276_g170448;
				#endif
				half4 Local_NormalTex776_g170446 = staticSwitch698_g170446;
				half4 Normal_Packed45_g170450 = Local_NormalTex776_g170446;
				float2 appendResult58_g170450 = (float2(( (Normal_Packed45_g170450).x * (Normal_Packed45_g170450).w ) , (Normal_Packed45_g170450).y));
				half2 Normal_Default50_g170450 = appendResult58_g170450;
				half2 Normal_ASTC41_g170450 = (Normal_Packed45_g170450).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170450 = Normal_ASTC41_g170450;
				#else
				float2 staticSwitch38_g170450 = Normal_Default50_g170450;
				#endif
				half2 Normal_NO_DTX544_g170450 = (Normal_Packed45_g170450).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170450 = Normal_NO_DTX544_g170450;
				#else
				float2 staticSwitch37_g170450 = staticSwitch38_g170450;
				#endif
				float2 temp_output_724_0_g170446 = ( (staticSwitch37_g170450*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170451 = temp_output_724_0_g170446;
				float2 break71_g170451 = Normal_Planar45_g170451;
				float3 appendResult72_g170451 = (float3(break71_g170451.x , 0.0 , break71_g170451.y));
				float2 temp_output_858_0_g170446 = (mul( ase_worldToTangent, appendResult72_g170451 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170446 = temp_output_858_0_g170446;
				#else
				float2 staticSwitch727_g170446 = temp_output_724_0_g170446;
				#endif
				half2 Local_NormalTS729_g170446 = staticSwitch727_g170446;
				float2 temp_output_36_0_g170456 = ( lerpResult40_g170456 + Local_NormalTS729_g170446 );
				float2 lerpResult405_g170446 = lerp( Visual_NormalTS529_g170446 , temp_output_36_0_g170456 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170446 = lerpResult405_g170446;
				#else
				float2 staticSwitch418_g170446 = Visual_NormalTS529_g170446;
				#endif
				half2 Final_NormalTS612_g170446 = staticSwitch418_g170446;
				float2 In_NormalTS3_g170454 = Final_NormalTS612_g170446;
				float3 appendResult68_g170457 = (float3(Final_NormalTS612_g170446 , 1.0));
				float3 tanNormal74_g170457 = appendResult68_g170457;
				float3 worldNormal74_g170457 = normalize( float3( dot( tanToWorld0, tanNormal74_g170457 ), dot( tanToWorld1, tanNormal74_g170457 ), dot( tanToWorld2, tanNormal74_g170457 ) ) );
				half3 Final_NormalWS956_g170446 = worldNormal74_g170457;
				float3 In_NormalWS3_g170454 = Final_NormalWS956_g170446;
				half4 Visual_Shader531_g170446 = Out_Shader4_g170453;
				float4 lerpResult1000_g170446 = lerp( Local_Masks750_g170446 , ( Visual_Shader531_g170446 * Local_Masks750_g170446 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170446 = lerp( Visual_Shader531_g170446 , lerpResult1000_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170446 = lerpResult998_g170446;
				#else
				float4 staticSwitch451_g170446 = Visual_Shader531_g170446;
				#endif
				half4 Final_Masks613_g170446 = staticSwitch451_g170446;
				float4 In_Shader3_g170454 = Final_Masks613_g170446;
				float4 In_Emissive3_g170454 = Out_Emissive4_g170453;
				float3 temp_output_3_0_g170459 = Final_Albedo601_g170446;
				float dotResult20_g170459 = dot( temp_output_3_0_g170459 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale615_g170446 = dotResult20_g170459;
				float In_Grayscale3_g170454 = Final_Grayscale615_g170446;
				float clampResult651_g170446 = clamp( saturate( ( Final_Grayscale615_g170446 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170446 = clampResult651_g170446;
				float In_Luminosity3_g170454 = Final_Luminosity652_g170446;
				half Visual_MultiMask547_g170446 = Out_MultiMask4_g170453;
				float lerpResult477_g170446 = lerp( Visual_MultiMask547_g170446 , Local_MultiMask767_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch482_g170446 = lerpResult477_g170446;
				#else
				float staticSwitch482_g170446 = Visual_MultiMask547_g170446;
				#endif
				half Final_MultiMask572_g170446 = staticSwitch482_g170446;
				float In_MultiMask3_g170454 = Final_MultiMask572_g170446;
				half Visual_AlphaClip559_g170446 = Out_AlphaClip4_g170453;
				float temp_output_718_0_g170446 = (Local_AlbedoTex777_g170446).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170446 = ( temp_output_718_0_g170446 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170446 = temp_output_718_0_g170446;
				#endif
				half Local_AlphaClip772_g170446 = staticSwitch924_g170446;
				float lerpResult448_g170446 = lerp( Visual_AlphaClip559_g170446 , Local_AlphaClip772_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch564_g170446 = lerpResult448_g170446;
				#else
				float staticSwitch564_g170446 = Visual_AlphaClip559_g170446;
				#endif
				half Final_AlphaClip602_g170446 = staticSwitch564_g170446;
				float In_AlphaClip3_g170454 = Final_AlphaClip602_g170446;
				half Visual_AlphaFade588_g170446 = Out_AlphaFade4_g170453;
				half Local_AlphaFade773_g170446 = (lerpResult706_g170446).a;
				float lerpResult604_g170446 = lerp( Visual_AlphaFade588_g170446 , Local_AlphaFade773_g170446 , Detail_Mask412_g170446);
				#ifdef TVE_THIRD
				float staticSwitch608_g170446 = lerpResult604_g170446;
				#else
				float staticSwitch608_g170446 = Visual_AlphaFade588_g170446;
				#endif
				half Final_AlphaFade611_g170446 = staticSwitch608_g170446;
				float In_AlphaFade3_g170454 = Final_AlphaFade611_g170446;
				float3 In_Translucency3_g170454 = Out_Translucency4_g170453;
				float In_Transmission3_g170454 = Out_Transmission4_g170453;
				float In_Thickness3_g170454 = Out_Thickness4_g170453;
				float In_Diffusion3_g170454 = Out_Diffusion4_g170453;
				float In_Depth3_g170454 = Out_Depth4_g170453;
				{
				Data3_g170454.Dummy = In_Dummy3_g170454;
				Data3_g170454.Albedo = In_Albedo3_g170454;
				Data3_g170454.AlbedoRaw = In_AlbedoRaw3_g170454;
				Data3_g170454.NormalTS = In_NormalTS3_g170454;
				Data3_g170454.NormalWS = In_NormalWS3_g170454;
				Data3_g170454.Shader = In_Shader3_g170454;
				Data3_g170454.Emissive= In_Emissive3_g170454;
				Data3_g170454.MultiMask = In_MultiMask3_g170454;
				Data3_g170454.Grayscale = In_Grayscale3_g170454;
				Data3_g170454.Luminosity = In_Luminosity3_g170454;
				Data3_g170454.AlphaClip = In_AlphaClip3_g170454;
				Data3_g170454.AlphaFade = In_AlphaFade3_g170454;
				Data3_g170454.Translucency = In_Translucency3_g170454;
				Data3_g170454.Transmission = In_Transmission3_g170454;
				Data3_g170454.Thickness = In_Thickness3_g170454;
				Data3_g170454.Diffusion = In_Diffusion3_g170454;
				Data3_g170454.Depth = In_Depth3_g170454;
				}
				TVEVisualData Data4_g170545 = Data3_g170454;
				float Out_Dummy4_g170545 = 0;
				float3 Out_Albedo4_g170545 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170545 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170545 = float2( 0,0 );
				float3 Out_NormalWS4_g170545 = float3( 0,0,0 );
				float4 Out_Shader4_g170545 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170545 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170545 = 0;
				float Out_Grayscale4_g170545 = 0;
				float Out_Luminosity4_g170545 = 0;
				float Out_AlphaClip4_g170545 = 0;
				float Out_AlphaFade4_g170545 = 0;
				float3 Out_Translucency4_g170545 = float3( 0,0,0 );
				float Out_Transmission4_g170545 = 0;
				float Out_Thickness4_g170545 = 0;
				float Out_Diffusion4_g170545 = 0;
				float Out_Depth4_g170545 = 0;
				{
				Out_Dummy4_g170545 = Data4_g170545.Dummy;
				Out_Albedo4_g170545 = Data4_g170545.Albedo;
				Out_AlbedoRaw4_g170545 = Data4_g170545.AlbedoRaw;
				Out_NormalTS4_g170545 = Data4_g170545.NormalTS;
				Out_NormalWS4_g170545 = Data4_g170545.NormalWS;
				Out_Shader4_g170545 = Data4_g170545.Shader;
				Out_Emissive4_g170545= Data4_g170545.Emissive;
				Out_MultiMask4_g170545 = Data4_g170545.MultiMask;
				Out_Grayscale4_g170545 = Data4_g170545.Grayscale;
				Out_Luminosity4_g170545= Data4_g170545.Luminosity;
				Out_AlphaClip4_g170545 = Data4_g170545.AlphaClip;
				Out_AlphaFade4_g170545 = Data4_g170545.AlphaFade;
				Out_Translucency4_g170545 = Data4_g170545.Translucency;
				Out_Transmission4_g170545 = Data4_g170545.Transmission;
				Out_Thickness4_g170545 = Data4_g170545.Thickness;
				Out_Diffusion4_g170545 = Data4_g170545.Diffusion;
				Out_Depth4_g170545= Data4_g170545.Depth;
				}
				half3 Visual_Albedo127_g170544 = Out_Albedo4_g170545;
				TVEModelData Data15_g170552 = Data16_g170201;
				float Out_Dummy15_g170552 = 0;
				float3 Out_PositionWS15_g170552 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170552 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170552 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170552 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170552 = float3( 0,0,0 );
				float4 Out_VertexData15_g170552 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170552 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170552 = Data15_g170552.Dummy;
				Out_PositionWS15_g170552 = Data15_g170552.PositionWS;
				Out_PositionWO15_g170552 = Data15_g170552.PositionWO;
				Out_PivotWS15_g170552 = Data15_g170552.PivotWS;
				Out_PivotWO15_g170552 = Data15_g170552.PivotWO;
				Out_NormalWS15_g170552 = Data15_g170552.NormalWS;
				Out_ViewDirWS15_g170552 = Data15_g170552.ViewDirWS;
				Out_VertexData15_g170552 = Data15_g170552.VertexData;
				Out_BoundsData15_g170552 = Data15_g170552.BoundsData;
				}
				half4 Model_VertexData206_g170544 = Out_VertexData15_g170552;
				float4 break208_g170544 = Model_VertexData206_g170544;
				float4 break33_g170550 = _occlusion_vert_mode;
				float temp_output_30_0_g170550 = ( break208_g170544.x * break33_g170550.x );
				float temp_output_29_0_g170550 = ( break208_g170544.y * break33_g170550.y );
				float temp_output_31_0_g170550 = ( break208_g170544.z * break33_g170550.z );
				float temp_output_28_0_g170550 = ( temp_output_30_0_g170550 + temp_output_29_0_g170550 + temp_output_31_0_g170550 + ( break208_g170544.w * break33_g170550.w ) );
				float temp_output_194_0_g170544 = temp_output_28_0_g170550;
				float clampResult17_g170548 = clamp( temp_output_194_0_g170544 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170553 = _OcclusionMeshRemap.x;
				float temp_output_9_0_g170553 = ( clampResult17_g170548 - temp_output_7_0_g170553 );
				float temp_output_6_0_g170549 = saturate( ( ( temp_output_9_0_g170553 * _OcclusionMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170549 = ( temp_output_6_0_g170549 + _OcclusionMeshMode );
				#else
				float staticSwitch14_g170549 = temp_output_6_0_g170549;
				#endif
				half Occlusion_Mask82_g170544 = staticSwitch14_g170549;
				float3 lerpResult75_g170544 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170544);
				float3 lerpResult186_g170544 = lerp( Visual_Albedo127_g170544 , ( Visual_Albedo127_g170544 * lerpResult75_g170544 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170544 = lerpResult186_g170544;
				#else
				float3 staticSwitch171_g170544 = Visual_Albedo127_g170544;
				#endif
				half3 Final_Albedo160_g170544 = staticSwitch171_g170544;
				float3 In_Albedo3_g170546 = Final_Albedo160_g170544;
				float3 In_AlbedoRaw3_g170546 = Final_Albedo160_g170544;
				float2 In_NormalTS3_g170546 = Out_NormalTS4_g170545;
				float3 In_NormalWS3_g170546 = Out_NormalWS4_g170545;
				float4 In_Shader3_g170546 = Out_Shader4_g170545;
				float4 In_Emissive3_g170546 = Out_Emissive4_g170545;
				float3 temp_output_3_0_g170547 = Final_Albedo160_g170544;
				float dotResult20_g170547 = dot( temp_output_3_0_g170547 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170544 = dotResult20_g170547;
				float In_Grayscale3_g170546 = Final_Grayscale164_g170544;
				float clampResult180_g170544 = clamp( saturate( ( Final_Grayscale164_g170544 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170544 = clampResult180_g170544;
				float In_Luminosity3_g170546 = Final_Shading181_g170544;
				float In_MultiMask3_g170546 = Out_MultiMask4_g170545;
				float In_AlphaClip3_g170546 = Out_AlphaClip4_g170545;
				float In_AlphaFade3_g170546 = Out_AlphaFade4_g170545;
				float3 In_Translucency3_g170546 = Out_Translucency4_g170545;
				float In_Transmission3_g170546 = Out_Transmission4_g170545;
				float In_Thickness3_g170546 = Out_Thickness4_g170545;
				float In_Diffusion3_g170546 = Out_Diffusion4_g170545;
				float In_Depth3_g170546 = Out_Depth4_g170545;
				{
				Data3_g170546.Dummy = In_Dummy3_g170546;
				Data3_g170546.Albedo = In_Albedo3_g170546;
				Data3_g170546.AlbedoRaw = In_AlbedoRaw3_g170546;
				Data3_g170546.NormalTS = In_NormalTS3_g170546;
				Data3_g170546.NormalWS = In_NormalWS3_g170546;
				Data3_g170546.Shader = In_Shader3_g170546;
				Data3_g170546.Emissive= In_Emissive3_g170546;
				Data3_g170546.MultiMask = In_MultiMask3_g170546;
				Data3_g170546.Grayscale = In_Grayscale3_g170546;
				Data3_g170546.Luminosity = In_Luminosity3_g170546;
				Data3_g170546.AlphaClip = In_AlphaClip3_g170546;
				Data3_g170546.AlphaFade = In_AlphaFade3_g170546;
				Data3_g170546.Translucency = In_Translucency3_g170546;
				Data3_g170546.Transmission = In_Transmission3_g170546;
				Data3_g170546.Thickness = In_Thickness3_g170546;
				Data3_g170546.Diffusion = In_Diffusion3_g170546;
				Data3_g170546.Depth = In_Depth3_g170546;
				}
				TVEVisualData Data4_g170556 = Data3_g170546;
				float Out_Dummy4_g170556 = 0;
				float3 Out_Albedo4_g170556 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170556 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170556 = float2( 0,0 );
				float3 Out_NormalWS4_g170556 = float3( 0,0,0 );
				float4 Out_Shader4_g170556 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170556 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170556 = 0;
				float Out_Grayscale4_g170556 = 0;
				float Out_Luminosity4_g170556 = 0;
				float Out_AlphaClip4_g170556 = 0;
				float Out_AlphaFade4_g170556 = 0;
				float3 Out_Translucency4_g170556 = float3( 0,0,0 );
				float Out_Transmission4_g170556 = 0;
				float Out_Thickness4_g170556 = 0;
				float Out_Diffusion4_g170556 = 0;
				float Out_Depth4_g170556 = 0;
				{
				Out_Dummy4_g170556 = Data4_g170556.Dummy;
				Out_Albedo4_g170556 = Data4_g170556.Albedo;
				Out_AlbedoRaw4_g170556 = Data4_g170556.AlbedoRaw;
				Out_NormalTS4_g170556 = Data4_g170556.NormalTS;
				Out_NormalWS4_g170556 = Data4_g170556.NormalWS;
				Out_Shader4_g170556 = Data4_g170556.Shader;
				Out_Emissive4_g170556= Data4_g170556.Emissive;
				Out_MultiMask4_g170556 = Data4_g170556.MultiMask;
				Out_Grayscale4_g170556 = Data4_g170556.Grayscale;
				Out_Luminosity4_g170556= Data4_g170556.Luminosity;
				Out_AlphaClip4_g170556 = Data4_g170556.AlphaClip;
				Out_AlphaFade4_g170556 = Data4_g170556.AlphaFade;
				Out_Translucency4_g170556 = Data4_g170556.Translucency;
				Out_Transmission4_g170556 = Data4_g170556.Transmission;
				Out_Thickness4_g170556 = Data4_g170556.Thickness;
				Out_Diffusion4_g170556 = Data4_g170556.Diffusion;
				Out_Depth4_g170556= Data4_g170556.Depth;
				}
				half3 Visual_Albedo127_g170554 = Out_Albedo4_g170556;
				TVEModelData Data15_g170562 = Data16_g170201;
				float Out_Dummy15_g170562 = 0;
				float3 Out_PositionWS15_g170562 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170562 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170562 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170562 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170562 = float3( 0,0,0 );
				float4 Out_VertexData15_g170562 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170562 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170562 = Data15_g170562.Dummy;
				Out_PositionWS15_g170562 = Data15_g170562.PositionWS;
				Out_PositionWO15_g170562 = Data15_g170562.PositionWO;
				Out_PivotWS15_g170562 = Data15_g170562.PivotWS;
				Out_PivotWO15_g170562 = Data15_g170562.PivotWO;
				Out_NormalWS15_g170562 = Data15_g170562.NormalWS;
				Out_ViewDirWS15_g170562 = Data15_g170562.ViewDirWS;
				Out_VertexData15_g170562 = Data15_g170562.VertexData;
				Out_BoundsData15_g170562 = Data15_g170562.BoundsData;
				}
				half4 Model_VertexData224_g170554 = Out_VertexData15_g170562;
				float4 break226_g170554 = Model_VertexData224_g170554;
				float4 break33_g170555 = _gradient_vert_mode;
				float temp_output_30_0_g170555 = ( break226_g170554.x * break33_g170555.x );
				float temp_output_29_0_g170555 = ( break226_g170554.y * break33_g170555.y );
				float temp_output_31_0_g170555 = ( break226_g170554.z * break33_g170555.z );
				float temp_output_28_0_g170555 = ( temp_output_30_0_g170555 + temp_output_29_0_g170555 + temp_output_31_0_g170555 + ( break226_g170554.w * break33_g170555.w ) );
				float temp_output_211_0_g170554 = temp_output_28_0_g170555;
				float clampResult17_g170560 = clamp( temp_output_211_0_g170554 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170563 = _GradientMeshRemap.x;
				float temp_output_9_0_g170563 = ( clampResult17_g170560 - temp_output_7_0_g170563 );
				float temp_output_6_0_g170561 = saturate( ( ( temp_output_9_0_g170563 * _GradientMeshRemap.z ) + 0.0001 ) );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170561 = ( temp_output_6_0_g170561 + _GradientMeshMode );
				#else
				float staticSwitch14_g170561 = temp_output_6_0_g170561;
				#endif
				half Gradient_VertMask82_g170554 = staticSwitch14_g170561;
				half Gradient_Mask200_g170554 = Gradient_VertMask82_g170554;
				float3 lerpResult75_g170554 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170554);
				float temp_output_162_11_g170554 = Out_MultiMask4_g170556;
				half Visual_MultiMask196_g170554 = temp_output_162_11_g170554;
				float lerpResult190_g170554 = lerp( 1.0 , Visual_MultiMask196_g170554 , _GradientMultiValue);
				half Gradient_MultiMask194_g170554 = lerpResult190_g170554;
				float3 lerpResult186_g170554 = lerp( Visual_Albedo127_g170554 , ( Visual_Albedo127_g170554 * lerpResult75_g170554 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170554 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170554 = lerpResult186_g170554;
				#else
				float3 staticSwitch171_g170554 = Visual_Albedo127_g170554;
				#endif
				half3 Final_Albedo160_g170554 = staticSwitch171_g170554;
				float3 In_Albedo3_g170557 = Final_Albedo160_g170554;
				float3 In_AlbedoRaw3_g170557 = Final_Albedo160_g170554;
				float2 In_NormalTS3_g170557 = Out_NormalTS4_g170556;
				float3 In_NormalWS3_g170557 = Out_NormalWS4_g170556;
				float4 In_Shader3_g170557 = Out_Shader4_g170556;
				float4 In_Emissive3_g170557 = Out_Emissive4_g170556;
				float3 temp_output_3_0_g170558 = Final_Albedo160_g170554;
				float dotResult20_g170558 = dot( temp_output_3_0_g170558 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170554 = dotResult20_g170558;
				float In_Grayscale3_g170557 = Final_Grayscale164_g170554;
				float clampResult180_g170554 = clamp( saturate( ( Final_Grayscale164_g170554 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170554 = clampResult180_g170554;
				float In_Luminosity3_g170557 = Final_Luminosity181_g170554;
				float In_MultiMask3_g170557 = temp_output_162_11_g170554;
				float In_AlphaClip3_g170557 = Out_AlphaClip4_g170556;
				float In_AlphaFade3_g170557 = Out_AlphaFade4_g170556;
				float3 In_Translucency3_g170557 = Out_Translucency4_g170556;
				float In_Transmission3_g170557 = Out_Transmission4_g170556;
				float In_Thickness3_g170557 = Out_Thickness4_g170556;
				float In_Diffusion3_g170557 = Out_Diffusion4_g170556;
				float In_Depth3_g170557 = Out_Depth4_g170556;
				{
				Data3_g170557.Dummy = In_Dummy3_g170557;
				Data3_g170557.Albedo = In_Albedo3_g170557;
				Data3_g170557.AlbedoRaw = In_AlbedoRaw3_g170557;
				Data3_g170557.NormalTS = In_NormalTS3_g170557;
				Data3_g170557.NormalWS = In_NormalWS3_g170557;
				Data3_g170557.Shader = In_Shader3_g170557;
				Data3_g170557.Emissive= In_Emissive3_g170557;
				Data3_g170557.MultiMask = In_MultiMask3_g170557;
				Data3_g170557.Grayscale = In_Grayscale3_g170557;
				Data3_g170557.Luminosity = In_Luminosity3_g170557;
				Data3_g170557.AlphaClip = In_AlphaClip3_g170557;
				Data3_g170557.AlphaFade = In_AlphaFade3_g170557;
				Data3_g170557.Translucency = In_Translucency3_g170557;
				Data3_g170557.Transmission = In_Transmission3_g170557;
				Data3_g170557.Thickness = In_Thickness3_g170557;
				Data3_g170557.Diffusion = In_Diffusion3_g170557;
				Data3_g170557.Depth = In_Depth3_g170557;
				}
				TVEVisualData Data4_g170565 = Data3_g170557;
				float Out_Dummy4_g170565 = 0;
				float3 Out_Albedo4_g170565 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170565 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170565 = float2( 0,0 );
				float3 Out_NormalWS4_g170565 = float3( 0,0,0 );
				float4 Out_Shader4_g170565 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170565 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170565 = 0;
				float Out_Grayscale4_g170565 = 0;
				float Out_Luminosity4_g170565 = 0;
				float Out_AlphaClip4_g170565 = 0;
				float Out_AlphaFade4_g170565 = 0;
				float3 Out_Translucency4_g170565 = float3( 0,0,0 );
				float Out_Transmission4_g170565 = 0;
				float Out_Thickness4_g170565 = 0;
				float Out_Diffusion4_g170565 = 0;
				float Out_Depth4_g170565 = 0;
				{
				Out_Dummy4_g170565 = Data4_g170565.Dummy;
				Out_Albedo4_g170565 = Data4_g170565.Albedo;
				Out_AlbedoRaw4_g170565 = Data4_g170565.AlbedoRaw;
				Out_NormalTS4_g170565 = Data4_g170565.NormalTS;
				Out_NormalWS4_g170565 = Data4_g170565.NormalWS;
				Out_Shader4_g170565 = Data4_g170565.Shader;
				Out_Emissive4_g170565= Data4_g170565.Emissive;
				Out_MultiMask4_g170565 = Data4_g170565.MultiMask;
				Out_Grayscale4_g170565 = Data4_g170565.Grayscale;
				Out_Luminosity4_g170565= Data4_g170565.Luminosity;
				Out_AlphaClip4_g170565 = Data4_g170565.AlphaClip;
				Out_AlphaFade4_g170565 = Data4_g170565.AlphaFade;
				Out_Translucency4_g170565 = Data4_g170565.Translucency;
				Out_Transmission4_g170565 = Data4_g170565.Transmission;
				Out_Thickness4_g170565 = Data4_g170565.Thickness;
				Out_Diffusion4_g170565 = Data4_g170565.Diffusion;
				Out_Depth4_g170565= Data4_g170565.Depth;
				}
				half3 Visual_Albedo127_g170564 = Out_Albedo4_g170565;
				TVEModelData Data15_g170567 = Data16_g170201;
				float Out_Dummy15_g170567 = 0;
				float3 Out_PositionWS15_g170567 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170567 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170567 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170567 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170567 = float3( 0,0,0 );
				float4 Out_VertexData15_g170567 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170567 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170567 = Data15_g170567.Dummy;
				Out_PositionWS15_g170567 = Data15_g170567.PositionWS;
				Out_PositionWO15_g170567 = Data15_g170567.PositionWO;
				Out_PivotWS15_g170567 = Data15_g170567.PivotWS;
				Out_PivotWO15_g170567 = Data15_g170567.PivotWO;
				Out_NormalWS15_g170567 = Data15_g170567.NormalWS;
				Out_ViewDirWS15_g170567 = Data15_g170567.ViewDirWS;
				Out_VertexData15_g170567 = Data15_g170567.VertexData;
				Out_BoundsData15_g170567 = Data15_g170567.BoundsData;
				}
				half3 Model_PositionWO224_g170564 = Out_PositionWO15_g170567;
				half3 Model_PivotWO239_g170564 = Out_PivotWO15_g170567;
				float3 lerpResult242_g170564 = lerp( Model_PositionWO224_g170564 , Model_PivotWO239_g170564 , _VariationNoisePivotValue);
				float clampResult17_g170569 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170564 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
				float temp_output_7_0_g170570 = _VariationNoiseRemap.x;
				float temp_output_9_0_g170570 = ( clampResult17_g170569 - temp_output_7_0_g170570 );
				float temp_output_238_0_g170564 = saturate( ( ( temp_output_9_0_g170570 * _VariationNoiseRemap.z ) + 0.0001 ) );
				half Variaton_NoiseMask82_g170564 = temp_output_238_0_g170564;
				half Variaton_Mask200_g170564 = Variaton_NoiseMask82_g170564;
				float3 lerpResult75_g170564 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170564);
				float temp_output_162_11_g170564 = Out_MultiMask4_g170565;
				half Visual_MultiMask196_g170564 = temp_output_162_11_g170564;
				float lerpResult190_g170564 = lerp( 1.0 , Visual_MultiMask196_g170564 , _VariationMultiValue);
				half Variaton_MultiMask194_g170564 = lerpResult190_g170564;
				float3 lerpResult186_g170564 = lerp( Visual_Albedo127_g170564 , ( Visual_Albedo127_g170564 * lerpResult75_g170564 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170564 ));
				#ifdef TVE_VARIATION
				float3 staticSwitch171_g170564 = lerpResult186_g170564;
				#else
				float3 staticSwitch171_g170564 = Visual_Albedo127_g170564;
				#endif
				half3 Final_Albedo160_g170564 = staticSwitch171_g170564;
				float3 In_Albedo3_g170566 = Final_Albedo160_g170564;
				float3 In_AlbedoRaw3_g170566 = Final_Albedo160_g170564;
				float2 In_NormalTS3_g170566 = Out_NormalTS4_g170565;
				float3 In_NormalWS3_g170566 = Out_NormalWS4_g170565;
				float4 In_Shader3_g170566 = Out_Shader4_g170565;
				float4 In_Emissive3_g170566 = Out_Emissive4_g170565;
				float3 temp_output_3_0_g170568 = Final_Albedo160_g170564;
				float dotResult20_g170568 = dot( temp_output_3_0_g170568 , float3( 0.2126, 0.7152, 0.0722 ) );
				half Final_Grayscale164_g170564 = dotResult20_g170568;
				float In_Grayscale3_g170566 = Final_Grayscale164_g170564;
				float clampResult180_g170564 = clamp( saturate( ( Final_Grayscale164_g170564 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170564 = clampResult180_g170564;
				float In_Luminosity3_g170566 = Final_Luminosity181_g170564;
				float In_MultiMask3_g170566 = temp_output_162_11_g170564;
				float In_AlphaClip3_g170566 = Out_AlphaClip4_g170565;
				float In_AlphaFade3_g170566 = Out_AlphaFade4_g170565;
				float3 In_Translucency3_g170566 = Out_Translucency4_g170565;
				float In_Transmission3_g170566 = Out_Transmission4_g170565;
				float In_Thickness3_g170566 = Out_Thickness4_g170565;
				float In_Diffusion3_g170566 = Out_Diffusion4_g170565;
				float In_Depth3_g170566 = Out_Depth4_g170565;
				{
				Data3_g170566.Dummy = In_Dummy3_g170566;
				Data3_g170566.Albedo = In_Albedo3_g170566;
				Data3_g170566.AlbedoRaw = In_AlbedoRaw3_g170566;
				Data3_g170566.NormalTS = In_NormalTS3_g170566;
				Data3_g170566.NormalWS = In_NormalWS3_g170566;
				Data3_g170566.Shader = In_Shader3_g170566;
				Data3_g170566.Emissive= In_Emissive3_g170566;
				Data3_g170566.MultiMask = In_MultiMask3_g170566;
				Data3_g170566.Grayscale = In_Grayscale3_g170566;
				Data3_g170566.Luminosity = In_Luminosity3_g170566;
				Data3_g170566.AlphaClip = In_AlphaClip3_g170566;
				Data3_g170566.AlphaFade = In_AlphaFade3_g170566;
				Data3_g170566.Translucency = In_Translucency3_g170566;
				Data3_g170566.Transmission = In_Transmission3_g170566;
				Data3_g170566.Thickness = In_Thickness3_g170566;
				Data3_g170566.Diffusion = In_Diffusion3_g170566;
				Data3_g170566.Depth = In_Depth3_g170566;
				}
				TVEVisualData Data4_g170580 = Data3_g170566;
				float Out_Dummy4_g170580 = 0;
				float3 Out_Albedo4_g170580 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170580 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170580 = float2( 0,0 );
				float3 Out_NormalWS4_g170580 = float3( 0,0,0 );
				float4 Out_Shader4_g170580 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170580 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170580 = 0;
				float Out_Grayscale4_g170580 = 0;
				float Out_Luminosity4_g170580 = 0;
				float Out_AlphaClip4_g170580 = 0;
				float Out_AlphaFade4_g170580 = 0;
				float3 Out_Translucency4_g170580 = float3( 0,0,0 );
				float Out_Transmission4_g170580 = 0;
				float Out_Thickness4_g170580 = 0;
				float Out_Diffusion4_g170580 = 0;
				float Out_Depth4_g170580 = 0;
				{
				Out_Dummy4_g170580 = Data4_g170580.Dummy;
				Out_Albedo4_g170580 = Data4_g170580.Albedo;
				Out_AlbedoRaw4_g170580 = Data4_g170580.AlbedoRaw;
				Out_NormalTS4_g170580 = Data4_g170580.NormalTS;
				Out_NormalWS4_g170580 = Data4_g170580.NormalWS;
				Out_Shader4_g170580 = Data4_g170580.Shader;
				Out_Emissive4_g170580= Data4_g170580.Emissive;
				Out_MultiMask4_g170580 = Data4_g170580.MultiMask;
				Out_Grayscale4_g170580 = Data4_g170580.Grayscale;
				Out_Luminosity4_g170580= Data4_g170580.Luminosity;
				Out_AlphaClip4_g170580 = Data4_g170580.AlphaClip;
				Out_AlphaFade4_g170580 = Data4_g170580.AlphaFade;
				Out_Translucency4_g170580 = Data4_g170580.Translucency;
				Out_Transmission4_g170580 = Data4_g170580.Transmission;
				Out_Thickness4_g170580 = Data4_g170580.Thickness;
				Out_Diffusion4_g170580 = Data4_g170580.Diffusion;
				Out_Depth4_g170580= Data4_g170580.Depth;
				}
				half3 Visual_Albedo139_g170576 = Out_Albedo4_g170580;
				float temp_output_200_12_g170576 = Out_Grayscale4_g170580;
				half Visual_Grayscale150_g170576 = temp_output_200_12_g170576;
				float3 temp_cast_33 = (Visual_Grayscale150_g170576).xxx;
				TVEGlobalData Data15_g170577 = Data204_g170214;
				float Out_Dummy15_g170577 = 0;
				float4 Out_CoatDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170577 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170577 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170577 = Data15_g170577.Dummy;
				Out_CoatDataRT15_g170577 = Data15_g170577.CoatDataRT;
				Out_PaintDataRT15_g170577 = Data15_g170577.PaintDataRT;
				Out_GlowDataRT15_g170577= Data15_g170577.GlowDataRT;
				Out_AtmoDataRT15_g170577= Data15_g170577.AtmoDataRT;
				Out_FadeDataRT15_g170577= Data15_g170577.FadeDataRT;
				Out_FormDataRT15_g170577 = Data15_g170577.FormDataRT;
				Out_FlowDataRT15_g170577 = Data15_g170577.FlowDataRT;
				}
				half4 Global_PaintParams209_g170576 = Out_PaintDataRT15_g170577;
				float4 temp_output_6_0_g170594 = Global_PaintParams209_g170576;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170594 = ( temp_output_6_0_g170594 + _TintingElementMode );
				#else
				float4 staticSwitch14_g170594 = temp_output_6_0_g170594;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g170576 = staticSwitch14_g170594;
				#else
				float4 staticSwitch283_g170576 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g170576 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170576 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g170576 = saturate( (lerpResult412_g170576).w );
				float3 lerpResult368_g170576 = lerp( Visual_Albedo139_g170576 , temp_cast_33 , ( Tinting_GlobalValue285_g170576 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g170576 = (lerpResult412_g170576).xyz;
				float temp_output_200_11_g170576 = Out_MultiMask4_g170580;
				half Visual_MultiMask181_g170576 = temp_output_200_11_g170576;
				float lerpResult147_g170576 = lerp( 1.0 , Visual_MultiMask181_g170576 , _TintingMultiValue);
				half Tinting_MutiMask121_g170576 = lerpResult147_g170576;
				half Tinting_TexMask385_g170576 = 1.0;
				float temp_output_200_15_g170576 = Out_Luminosity4_g170580;
				half Visual_Luminosity257_g170576 = temp_output_200_15_g170576;
				float clampResult17_g170587 = clamp( Visual_Luminosity257_g170576 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170591 = _TintingLumaRemap.x;
				float temp_output_9_0_g170591 = ( clampResult17_g170587 - temp_output_7_0_g170591 );
				float lerpResult228_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170591 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g170576 = lerpResult228_g170576;
				TVEModelData Data15_g170581 = Data16_g170201;
				float Out_Dummy15_g170581 = 0;
				float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
				float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170581 = Data15_g170581.Dummy;
				Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
				Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
				Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
				Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
				Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
				Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
				Out_VertexData15_g170581 = Data15_g170581.VertexData;
				Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
				}
				half4 Model_VertexMasks307_g170576 = Out_VertexData15_g170581;
				float4 break311_g170576 = Model_VertexMasks307_g170576;
				float4 break33_g170584 = _tinting_vert_mode;
				float temp_output_30_0_g170584 = ( break311_g170576.x * break33_g170584.x );
				float temp_output_29_0_g170584 = ( break311_g170576.y * break33_g170584.y );
				float temp_output_31_0_g170584 = ( break311_g170576.z * break33_g170584.z );
				float temp_output_28_0_g170584 = ( temp_output_30_0_g170584 + temp_output_29_0_g170584 + temp_output_31_0_g170584 + ( break311_g170576.w * break33_g170584.w ) );
				float clampResult17_g170586 = clamp( temp_output_28_0_g170584 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170592 = _TintingMeshRemap.x;
				float temp_output_9_0_g170592 = ( clampResult17_g170586 - temp_output_7_0_g170592 );
				float lerpResult370_g170576 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170592 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
				float temp_output_6_0_g170588 = lerpResult370_g170576;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170588 = ( temp_output_6_0_g170588 + _TintingMeshMode );
				#else
				float staticSwitch14_g170588 = temp_output_6_0_g170588;
				#endif
				half Tinting_VertMask309_g170576 = staticSwitch14_g170588;
				half Tinting_NoiseMask213_g170576 = 1.0;
				half Custom_Mask345_g170576 = 1.0;
				half Tinting_CoreMasks433_g170576 = ( Tinting_MutiMask121_g170576 * Tinting_TexMask385_g170576 * Tinting_LumaMask153_g170576 * Tinting_VertMask309_g170576 * Tinting_NoiseMask213_g170576 * Custom_Mask345_g170576 );
				float temp_output_7_0_g170598 = _TintingBlendRemap.x;
				float temp_output_9_0_g170598 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170576 * Tinting_GlobalValue285_g170576 ) - temp_output_7_0_g170598 );
				half Tinting_Mask242_g170576 = ( saturate( ( ( temp_output_9_0_g170598 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g170576 = lerp( Visual_Albedo139_g170576 , ( lerpResult368_g170576 * 4.594794 * Tinting_GlobalColor290_g170576 * (_TintingColor).rgb ) , Tinting_Mask242_g170576);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g170576 = lerpResult90_g170576;
				#else
				float3 staticSwitch286_g170576 = Visual_Albedo139_g170576;
				#endif
				half3 Final_Albedo97_g170576 = staticSwitch286_g170576;
				float3 In_Albedo3_g170596 = Final_Albedo97_g170576;
				float3 In_AlbedoRaw3_g170596 = Out_AlbedoRaw4_g170580;
				float2 In_NormalTS3_g170596 = Out_NormalTS4_g170580;
				float3 In_NormalWS3_g170596 = Out_NormalWS4_g170580;
				float4 In_Shader3_g170596 = Out_Shader4_g170580;
				float4 In_Emissive3_g170596 = Out_Emissive4_g170580;
				float In_Grayscale3_g170596 = temp_output_200_12_g170576;
				float In_Luminosity3_g170596 = temp_output_200_15_g170576;
				float In_MultiMask3_g170596 = temp_output_200_11_g170576;
				float In_AlphaClip3_g170596 = Out_AlphaClip4_g170580;
				float In_AlphaFade3_g170596 = Out_AlphaFade4_g170580;
				float3 In_Translucency3_g170596 = Out_Translucency4_g170580;
				float In_Transmission3_g170596 = Out_Transmission4_g170580;
				float In_Thickness3_g170596 = Out_Thickness4_g170580;
				float In_Diffusion3_g170596 = Out_Diffusion4_g170580;
				float In_Depth3_g170596 = Out_Depth4_g170580;
				{
				Data3_g170596.Dummy = In_Dummy3_g170596;
				Data3_g170596.Albedo = In_Albedo3_g170596;
				Data3_g170596.AlbedoRaw = In_AlbedoRaw3_g170596;
				Data3_g170596.NormalTS = In_NormalTS3_g170596;
				Data3_g170596.NormalWS = In_NormalWS3_g170596;
				Data3_g170596.Shader = In_Shader3_g170596;
				Data3_g170596.Emissive= In_Emissive3_g170596;
				Data3_g170596.MultiMask = In_MultiMask3_g170596;
				Data3_g170596.Grayscale = In_Grayscale3_g170596;
				Data3_g170596.Luminosity = In_Luminosity3_g170596;
				Data3_g170596.AlphaClip = In_AlphaClip3_g170596;
				Data3_g170596.AlphaFade = In_AlphaFade3_g170596;
				Data3_g170596.Translucency = In_Translucency3_g170596;
				Data3_g170596.Transmission = In_Transmission3_g170596;
				Data3_g170596.Thickness = In_Thickness3_g170596;
				Data3_g170596.Diffusion = In_Diffusion3_g170596;
				Data3_g170596.Depth = In_Depth3_g170596;
				}
				TVEVisualData Data4_g170603 = Data3_g170596;
				float Out_Dummy4_g170603 = 0;
				float3 Out_Albedo4_g170603 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170603 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170603 = float2( 0,0 );
				float3 Out_NormalWS4_g170603 = float3( 0,0,0 );
				float4 Out_Shader4_g170603 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170603 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170603 = 0;
				float Out_Grayscale4_g170603 = 0;
				float Out_Luminosity4_g170603 = 0;
				float Out_AlphaClip4_g170603 = 0;
				float Out_AlphaFade4_g170603 = 0;
				float3 Out_Translucency4_g170603 = float3( 0,0,0 );
				float Out_Transmission4_g170603 = 0;
				float Out_Thickness4_g170603 = 0;
				float Out_Diffusion4_g170603 = 0;
				float Out_Depth4_g170603 = 0;
				{
				Out_Dummy4_g170603 = Data4_g170603.Dummy;
				Out_Albedo4_g170603 = Data4_g170603.Albedo;
				Out_AlbedoRaw4_g170603 = Data4_g170603.AlbedoRaw;
				Out_NormalTS4_g170603 = Data4_g170603.NormalTS;
				Out_NormalWS4_g170603 = Data4_g170603.NormalWS;
				Out_Shader4_g170603 = Data4_g170603.Shader;
				Out_Emissive4_g170603= Data4_g170603.Emissive;
				Out_MultiMask4_g170603 = Data4_g170603.MultiMask;
				Out_Grayscale4_g170603 = Data4_g170603.Grayscale;
				Out_Luminosity4_g170603= Data4_g170603.Luminosity;
				Out_AlphaClip4_g170603 = Data4_g170603.AlphaClip;
				Out_AlphaFade4_g170603 = Data4_g170603.AlphaFade;
				Out_Translucency4_g170603 = Data4_g170603.Translucency;
				Out_Transmission4_g170603 = Data4_g170603.Transmission;
				Out_Thickness4_g170603 = Data4_g170603.Thickness;
				Out_Diffusion4_g170603 = Data4_g170603.Diffusion;
				Out_Depth4_g170603= Data4_g170603.Depth;
				}
				half3 Visual_Albedo292_g170601 = Out_Albedo4_g170603;
				float temp_output_280_12_g170601 = Out_Grayscale4_g170603;
				half Visual_Grayscale308_g170601 = temp_output_280_12_g170601;
				float3 temp_cast_34 = (Visual_Grayscale308_g170601).xxx;
				TVEGlobalData Data15_g170602 = Data204_g170214;
				float Out_Dummy15_g170602 = 0;
				float4 Out_CoatDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170602 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170602 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170602 = Data15_g170602.Dummy;
				Out_CoatDataRT15_g170602 = Data15_g170602.CoatDataRT;
				Out_PaintDataRT15_g170602 = Data15_g170602.PaintDataRT;
				Out_GlowDataRT15_g170602= Data15_g170602.GlowDataRT;
				Out_AtmoDataRT15_g170602= Data15_g170602.AtmoDataRT;
				Out_FadeDataRT15_g170602= Data15_g170602.FadeDataRT;
				Out_FormDataRT15_g170602 = Data15_g170602.FormDataRT;
				Out_FlowDataRT15_g170602 = Data15_g170602.FlowDataRT;
				}
				half4 Global_AtmoParams314_g170601 = Out_AtmoDataRT15_g170602;
				float temp_output_6_0_g170620 = (Global_AtmoParams314_g170601).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170620 = ( temp_output_6_0_g170620 + _DrynessElementMode );
				#else
				float staticSwitch14_g170620 = temp_output_6_0_g170620;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g170601 = staticSwitch14_g170620;
				#else
				float staticSwitch351_g170601 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g170601 = lerp( 1.0 , ( staticSwitch351_g170601 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g170601 = lerpResult505_g170601;
				float3 lerpResult485_g170601 = lerp( Visual_Albedo292_g170601 , temp_cast_34 , ( Dryness_GlobalValue352_g170601 * _DrynessGrayValue ));
				half Dryness_TexMask478_g170601 = 1.0;
				float temp_output_280_11_g170601 = Out_MultiMask4_g170603;
				half Visual_MultiMask310_g170601 = temp_output_280_11_g170601;
				float lerpResult283_g170601 = lerp( 1.0 , Visual_MultiMask310_g170601 , _DrynessMultiValue);
				half Dryness_MultiMask302_g170601 = lerpResult283_g170601;
				float temp_output_280_15_g170601 = Out_Luminosity4_g170603;
				half Visual_Luminosity309_g170601 = temp_output_280_15_g170601;
				float clampResult17_g170613 = clamp( Visual_Luminosity309_g170601 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170617 = _DrynessLumaRemap.x;
				float temp_output_9_0_g170617 = ( clampResult17_g170613 - temp_output_7_0_g170617 );
				float lerpResult295_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170617 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g170601 = lerpResult295_g170601;
				TVEModelData Data15_g170607 = Data16_g170201;
				float Out_Dummy15_g170607 = 0;
				float3 Out_PositionWS15_g170607 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170607 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170607 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170607 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170607 = float3( 0,0,0 );
				float4 Out_VertexData15_g170607 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170607 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170607 = Data15_g170607.Dummy;
				Out_PositionWS15_g170607 = Data15_g170607.PositionWS;
				Out_PositionWO15_g170607 = Data15_g170607.PositionWO;
				Out_PivotWS15_g170607 = Data15_g170607.PivotWS;
				Out_PivotWO15_g170607 = Data15_g170607.PivotWO;
				Out_NormalWS15_g170607 = Data15_g170607.NormalWS;
				Out_ViewDirWS15_g170607 = Data15_g170607.ViewDirWS;
				Out_VertexData15_g170607 = Data15_g170607.VertexData;
				Out_BoundsData15_g170607 = Data15_g170607.BoundsData;
				}
				half4 Model_VertexMasks386_g170601 = Out_VertexData15_g170607;
				float4 break375_g170601 = Model_VertexMasks386_g170601;
				float4 break33_g170610 = _dryness_vert_mode;
				float temp_output_30_0_g170610 = ( break375_g170601.x * break33_g170610.x );
				float temp_output_29_0_g170610 = ( break375_g170601.y * break33_g170610.y );
				float temp_output_31_0_g170610 = ( break375_g170601.z * break33_g170610.z );
				float temp_output_28_0_g170610 = ( temp_output_30_0_g170610 + temp_output_29_0_g170610 + temp_output_31_0_g170610 + ( break375_g170601.w * break33_g170610.w ) );
				float clampResult17_g170611 = clamp( temp_output_28_0_g170610 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170618 = _DrynessMeshRemap.x;
				float temp_output_9_0_g170618 = ( clampResult17_g170611 - temp_output_7_0_g170618 );
				float lerpResult452_g170601 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170618 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
				float temp_output_6_0_g170614 = lerpResult452_g170601;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170614 = ( temp_output_6_0_g170614 + _DrynessMeshMode );
				#else
				float staticSwitch14_g170614 = temp_output_6_0_g170614;
				#endif
				half Dryness_VertMask378_g170601 = staticSwitch14_g170614;
				half Dryness_MaskNoise291_g170601 = 1.0;
				half Custom_Mask411_g170601 = 1.0;
				float temp_output_7_0_g170622 = _DrynessBlendRemap.x;
				float temp_output_9_0_g170622 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170601 * Dryness_MultiMask302_g170601 * Dryness_LumaMask301_g170601 * Dryness_VertMask378_g170601 * Dryness_MaskNoise291_g170601 * Dryness_GlobalValue352_g170601 * Custom_Mask411_g170601 ) - temp_output_7_0_g170622 );
				half Dryness_Mask329_g170601 = saturate( ( ( temp_output_9_0_g170622 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g170601 = lerp( Visual_Albedo292_g170601 , ( lerpResult485_g170601 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g170601 = lerpResult336_g170601;
				#else
				float3 staticSwitch356_g170601 = Visual_Albedo292_g170601;
				#endif
				half3 Final_Albedo331_g170601 = staticSwitch356_g170601;
				float3 In_Albedo3_g170604 = Final_Albedo331_g170601;
				float3 In_AlbedoRaw3_g170604 = Out_AlbedoRaw4_g170603;
				float2 In_NormalTS3_g170604 = Out_NormalTS4_g170603;
				float3 In_NormalWS3_g170604 = Out_NormalWS4_g170603;
				half4 Visual_Shader415_g170601 = Out_Shader4_g170603;
				float4 break438_g170601 = Visual_Shader415_g170601;
				float4 appendResult439_g170601 = (float4(break438_g170601.x , break438_g170601.y , break438_g170601.z , ( break438_g170601.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g170601 = lerp( Visual_Shader415_g170601 , appendResult439_g170601 , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g170601 = lerpResult427_g170601;
				#else
				float4 staticSwitch426_g170601 = Visual_Shader415_g170601;
				#endif
				half4 Final_Shader433_g170601 = staticSwitch426_g170601;
				float4 In_Shader3_g170604 = Final_Shader433_g170601;
				float4 In_Emissive3_g170604 = Out_Emissive4_g170603;
				float In_Grayscale3_g170604 = temp_output_280_12_g170601;
				float In_Luminosity3_g170604 = temp_output_280_15_g170601;
				float In_MultiMask3_g170604 = temp_output_280_11_g170601;
				float In_AlphaClip3_g170604 = Out_AlphaClip4_g170603;
				float In_AlphaFade3_g170604 = Out_AlphaFade4_g170603;
				float3 In_Translucency3_g170604 = Out_Translucency4_g170603;
				half Visual_Transmission416_g170601 = Out_Transmission4_g170603;
				float lerpResult421_g170601 = lerp( Visual_Transmission416_g170601 , ( Visual_Transmission416_g170601 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170601);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g170601 = lerpResult421_g170601;
				#else
				float staticSwitch418_g170601 = Visual_Transmission416_g170601;
				#endif
				half Final_Transmission425_g170601 = staticSwitch418_g170601;
				float In_Transmission3_g170604 = Final_Transmission425_g170601;
				float In_Thickness3_g170604 = Out_Thickness4_g170603;
				float In_Diffusion3_g170604 = Out_Diffusion4_g170603;
				float In_Depth3_g170604 = Out_Depth4_g170603;
				{
				Data3_g170604.Dummy = In_Dummy3_g170604;
				Data3_g170604.Albedo = In_Albedo3_g170604;
				Data3_g170604.AlbedoRaw = In_AlbedoRaw3_g170604;
				Data3_g170604.NormalTS = In_NormalTS3_g170604;
				Data3_g170604.NormalWS = In_NormalWS3_g170604;
				Data3_g170604.Shader = In_Shader3_g170604;
				Data3_g170604.Emissive= In_Emissive3_g170604;
				Data3_g170604.MultiMask = In_MultiMask3_g170604;
				Data3_g170604.Grayscale = In_Grayscale3_g170604;
				Data3_g170604.Luminosity = In_Luminosity3_g170604;
				Data3_g170604.AlphaClip = In_AlphaClip3_g170604;
				Data3_g170604.AlphaFade = In_AlphaFade3_g170604;
				Data3_g170604.Translucency = In_Translucency3_g170604;
				Data3_g170604.Transmission = In_Transmission3_g170604;
				Data3_g170604.Thickness = In_Thickness3_g170604;
				Data3_g170604.Diffusion = In_Diffusion3_g170604;
				Data3_g170604.Depth = In_Depth3_g170604;
				}
				TVEVisualData Data4_g170626 = Data3_g170604;
				float Out_Dummy4_g170626 = 0;
				float3 Out_Albedo4_g170626 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170626 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170626 = float2( 0,0 );
				float3 Out_NormalWS4_g170626 = float3( 0,0,0 );
				float4 Out_Shader4_g170626 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170626 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170626 = 0;
				float Out_Grayscale4_g170626 = 0;
				float Out_Luminosity4_g170626 = 0;
				float Out_AlphaClip4_g170626 = 0;
				float Out_AlphaFade4_g170626 = 0;
				float3 Out_Translucency4_g170626 = float3( 0,0,0 );
				float Out_Transmission4_g170626 = 0;
				float Out_Thickness4_g170626 = 0;
				float Out_Diffusion4_g170626 = 0;
				float Out_Depth4_g170626 = 0;
				{
				Out_Dummy4_g170626 = Data4_g170626.Dummy;
				Out_Albedo4_g170626 = Data4_g170626.Albedo;
				Out_AlbedoRaw4_g170626 = Data4_g170626.AlbedoRaw;
				Out_NormalTS4_g170626 = Data4_g170626.NormalTS;
				Out_NormalWS4_g170626 = Data4_g170626.NormalWS;
				Out_Shader4_g170626 = Data4_g170626.Shader;
				Out_Emissive4_g170626= Data4_g170626.Emissive;
				Out_MultiMask4_g170626 = Data4_g170626.MultiMask;
				Out_Grayscale4_g170626 = Data4_g170626.Grayscale;
				Out_Luminosity4_g170626= Data4_g170626.Luminosity;
				Out_AlphaClip4_g170626 = Data4_g170626.AlphaClip;
				Out_AlphaFade4_g170626 = Data4_g170626.AlphaFade;
				Out_Translucency4_g170626 = Data4_g170626.Translucency;
				Out_Transmission4_g170626 = Data4_g170626.Transmission;
				Out_Thickness4_g170626 = Data4_g170626.Thickness;
				Out_Diffusion4_g170626 = Data4_g170626.Diffusion;
				Out_Depth4_g170626= Data4_g170626.Depth;
				}
				half3 Visual_Albedo127_g170625 = Out_Albedo4_g170626;
				float4 vertexToFrag24_g170575 = packedInput.ase_texcoord7;
				half4 Interp_Data1055 = vertexToFrag24_g170575;
				float clampResult208_g170625 = clamp( (Interp_Data1055).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION
				float3 staticSwitch214_g170625 = ( Visual_Albedo127_g170625 + ( ( Visual_Albedo127_g170625 * Visual_Albedo127_g170625 * 200.0 * _motion_highlight_color ) * clampResult208_g170625 ) );
				#else
				float3 staticSwitch214_g170625 = Visual_Albedo127_g170625;
				#endif
				half3 Final_Albedo160_g170625 = staticSwitch214_g170625;
				float3 In_Albedo3_g170627 = Final_Albedo160_g170625;
				float3 In_AlbedoRaw3_g170627 = Out_AlbedoRaw4_g170626;
				float2 In_NormalTS3_g170627 = Out_NormalTS4_g170626;
				float3 In_NormalWS3_g170627 = Out_NormalWS4_g170626;
				float4 In_Shader3_g170627 = Out_Shader4_g170626;
				float4 In_Emissive3_g170627 = Out_Emissive4_g170626;
				float In_Grayscale3_g170627 = Out_Grayscale4_g170626;
				float In_Luminosity3_g170627 = Out_Luminosity4_g170626;
				float In_MultiMask3_g170627 = Out_MultiMask4_g170626;
				float In_AlphaClip3_g170627 = Out_AlphaClip4_g170626;
				float In_AlphaFade3_g170627 = Out_AlphaFade4_g170626;
				float3 In_Translucency3_g170627 = Out_Translucency4_g170626;
				float In_Transmission3_g170627 = Out_Transmission4_g170626;
				float In_Thickness3_g170627 = Out_Thickness4_g170626;
				float In_Diffusion3_g170627 = Out_Diffusion4_g170626;
				float In_Depth3_g170627 = Out_Depth4_g170626;
				{
				Data3_g170627.Dummy = In_Dummy3_g170627;
				Data3_g170627.Albedo = In_Albedo3_g170627;
				Data3_g170627.AlbedoRaw = In_AlbedoRaw3_g170627;
				Data3_g170627.NormalTS = In_NormalTS3_g170627;
				Data3_g170627.NormalWS = In_NormalWS3_g170627;
				Data3_g170627.Shader = In_Shader3_g170627;
				Data3_g170627.Emissive= In_Emissive3_g170627;
				Data3_g170627.MultiMask = In_MultiMask3_g170627;
				Data3_g170627.Grayscale = In_Grayscale3_g170627;
				Data3_g170627.Luminosity = In_Luminosity3_g170627;
				Data3_g170627.AlphaClip = In_AlphaClip3_g170627;
				Data3_g170627.AlphaFade = In_AlphaFade3_g170627;
				Data3_g170627.Translucency = In_Translucency3_g170627;
				Data3_g170627.Transmission = In_Transmission3_g170627;
				Data3_g170627.Thickness = In_Thickness3_g170627;
				Data3_g170627.Diffusion = In_Diffusion3_g170627;
				Data3_g170627.Depth = In_Depth3_g170627;
				}
				TVEVisualData Data4_g170629 = Data3_g170627;
				float Out_Dummy4_g170629 = 0;
				float3 Out_Albedo4_g170629 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170629 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170629 = float2( 0,0 );
				float3 Out_NormalWS4_g170629 = float3( 0,0,0 );
				float4 Out_Shader4_g170629 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170629 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170629 = 0;
				float Out_Grayscale4_g170629 = 0;
				float Out_Luminosity4_g170629 = 0;
				float Out_AlphaClip4_g170629 = 0;
				float Out_AlphaFade4_g170629 = 0;
				float3 Out_Translucency4_g170629 = float3( 0,0,0 );
				float Out_Transmission4_g170629 = 0;
				float Out_Thickness4_g170629 = 0;
				float Out_Diffusion4_g170629 = 0;
				float Out_Depth4_g170629 = 0;
				{
				Out_Dummy4_g170629 = Data4_g170629.Dummy;
				Out_Albedo4_g170629 = Data4_g170629.Albedo;
				Out_AlbedoRaw4_g170629 = Data4_g170629.AlbedoRaw;
				Out_NormalTS4_g170629 = Data4_g170629.NormalTS;
				Out_NormalWS4_g170629 = Data4_g170629.NormalWS;
				Out_Shader4_g170629 = Data4_g170629.Shader;
				Out_Emissive4_g170629= Data4_g170629.Emissive;
				Out_MultiMask4_g170629 = Data4_g170629.MultiMask;
				Out_Grayscale4_g170629 = Data4_g170629.Grayscale;
				Out_Luminosity4_g170629= Data4_g170629.Luminosity;
				Out_AlphaClip4_g170629 = Data4_g170629.AlphaClip;
				Out_AlphaFade4_g170629 = Data4_g170629.AlphaFade;
				Out_Translucency4_g170629 = Data4_g170629.Translucency;
				Out_Transmission4_g170629 = Data4_g170629.Transmission;
				Out_Thickness4_g170629 = Data4_g170629.Thickness;
				Out_Diffusion4_g170629 = Data4_g170629.Diffusion;
				Out_Depth4_g170629= Data4_g170629.Depth;
				}
				half3 Visual_Albedo127_g170628 = Out_Albedo4_g170629;
				float3 temp_output_622_0_g170628 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170632) = _OverlayAlbedoTex;
				float localFilterTexture19_g170643 = ( 0.0 );
				SamplerState SS19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170643 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170643 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170643 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170643 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g170643 = SamplerDefault19_g170643;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170643 = SamplerDefault19_g170643;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170643 = SamplerPoint19_g170643;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170643 = SamplerLow19_g170643;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170643 = SamplerMedium19_g170643;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170643 = SamplerHigh19_g170643;
				#endif
				}
				SamplerState Sampler238_g170632 = SS19_g170643;
				float4 temp_output_6_0_g170633 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170633 = ( temp_output_6_0_g170633 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g170633 = temp_output_6_0_g170633;
				#endif
				half4 Overlay_Coords639_g170628 = staticSwitch14_g170633;
				float4 temp_output_37_0_g170632 = Overlay_Coords639_g170628;
				half4 Coords238_g170632 = temp_output_37_0_g170632;
				TVEModelData Data15_g170645 = Data16_g170201;
				float Out_Dummy15_g170645 = 0;
				float3 Out_PositionWS15_g170645 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170645 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170645 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170645 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170645 = float3( 0,0,0 );
				float4 Out_VertexData15_g170645 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170645 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170645 = Data15_g170645.Dummy;
				Out_PositionWS15_g170645 = Data15_g170645.PositionWS;
				Out_PositionWO15_g170645 = Data15_g170645.PositionWO;
				Out_PivotWS15_g170645 = Data15_g170645.PivotWS;
				Out_PivotWO15_g170645 = Data15_g170645.PivotWO;
				Out_NormalWS15_g170645 = Data15_g170645.NormalWS;
				Out_ViewDirWS15_g170645 = Data15_g170645.ViewDirWS;
				Out_VertexData15_g170645 = Data15_g170645.VertexData;
				Out_BoundsData15_g170645 = Data15_g170645.BoundsData;
				}
				half3 Model_PositionWO602_g170628 = Out_PositionWO15_g170645;
				float3 temp_output_279_0_g170632 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170632 = temp_output_279_0_g170632;
				half4 localSamplePlanar2D238_g170632 = SamplePlanar2D( Texture238_g170632 , Sampler238_g170632 , Coords238_g170632 , WorldPosition238_g170632 );
				TEXTURE2D(Texture246_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170632 = SS19_g170643;
				half4 Coords246_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition246_g170632 = temp_output_279_0_g170632;
				half3 Model_NormalWS712_g170628 = Out_NormalWS15_g170645;
				float3 temp_output_280_0_g170632 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170632 = temp_output_280_0_g170632;
				half4 localSamplePlanar3D246_g170632 = SamplePlanar3D( Texture246_g170632 , Sampler246_g170632 , Coords246_g170632 , WorldPosition246_g170632 , WorldNormal246_g170632 );
				TEXTURE2D(Texture234_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170632 = SS19_g170643;
				float4 Coords234_g170632 = temp_output_37_0_g170632;
				float3 WorldPosition234_g170632 = temp_output_279_0_g170632;
				float4 localSampleStochastic2D234_g170632 = SampleStochastic2D( Texture234_g170632 , Sampler234_g170632 , Coords234_g170632 , WorldPosition234_g170632 );
				TEXTURE2D(Texture263_g170632) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170632 = SS19_g170643;
				half4 Coords263_g170632 = temp_output_37_0_g170632;
				half3 WorldPosition263_g170632 = temp_output_279_0_g170632;
				half3 WorldNormal263_g170632 = temp_output_280_0_g170632;
				half4 localSampleStochastic3D263_g170632 = SampleStochastic3D( Texture263_g170632 , Sampler263_g170632 , Coords263_g170632 , WorldPosition263_g170632 , WorldNormal263_g170632 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170628 = localSamplePlanar3D246_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170628 = localSampleStochastic2D234_g170632;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170628 = localSampleStochastic3D263_g170632;
				#else
				float4 staticSwitch676_g170628 = localSamplePlanar2D238_g170632;
				#endif
				half3 Overlay_Albedo526_g170628 = (staticSwitch676_g170628).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170628 = ( temp_output_622_0_g170628 * Overlay_Albedo526_g170628 );
				#else
				float3 staticSwitch578_g170628 = temp_output_622_0_g170628;
				#endif
				float3 temp_output_6_0_g170646 = staticSwitch578_g170628;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170646 = ( temp_output_6_0_g170646 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g170646 = temp_output_6_0_g170646;
				#endif
				float3 temp_cast_35 = (0.0).xxx;
				TEXTURE2D(Texture246_g170636) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g170636 = sampler_Linear_Repeat;
				float4 appendResult863_g170628 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170636 = appendResult863_g170628;
				half4 Coords246_g170636 = temp_output_37_0_g170636;
				float3 temp_output_279_0_g170636 = Model_PositionWO602_g170628;
				half3 WorldPosition246_g170636 = temp_output_279_0_g170636;
				float3 temp_output_280_0_g170636 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170636 = temp_output_280_0_g170636;
				half4 localSamplePlanar3D246_g170636 = SamplePlanar3D( Texture246_g170636 , Sampler246_g170636 , Coords246_g170636 , WorldPosition246_g170636 , WorldNormal246_g170636 );
				half Overlay_GlitterTex854_g170628 = (localSamplePlanar3D246_g170636).x;
				half3 Model_PositionWS879_g170628 = Out_PositionWS15_g170645;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g170628 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170628 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170628 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g170628 = temp_cast_35;
				#endif
				half3 Overlay_GlitterColor865_g170628 = staticSwitch868_g170628;
				half Overlay_TexMask908_g170628 = 1.0;
				float3 temp_output_739_21_g170628 = Out_NormalWS4_g170629;
				half3 Visual_NormalWS749_g170628 = temp_output_739_21_g170628;
				float clampResult17_g170652 = clamp( saturate( (Visual_NormalWS749_g170628).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170656 = _OverlayProjRemap.x;
				float temp_output_9_0_g170656 = ( clampResult17_g170652 - temp_output_7_0_g170656 );
				float lerpResult842_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170656 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170628 = lerpResult842_g170628;
				float temp_output_739_15_g170628 = Out_Luminosity4_g170629;
				half Visual_Luminosity654_g170628 = temp_output_739_15_g170628;
				float clampResult17_g170660 = clamp( Visual_Luminosity654_g170628 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170661 = _OverlayLumaRemap.x;
				float temp_output_9_0_g170661 = ( clampResult17_g170660 - temp_output_7_0_g170661 );
				float lerpResult587_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170628 = lerpResult587_g170628;
				half4 Model_VertexMasks791_g170628 = Out_VertexData15_g170645;
				float4 break792_g170628 = Model_VertexMasks791_g170628;
				float4 break33_g170647 = _overlay_vert_mode;
				float temp_output_30_0_g170647 = ( break792_g170628.x * break33_g170647.x );
				float temp_output_29_0_g170647 = ( break792_g170628.y * break33_g170647.y );
				float temp_output_31_0_g170647 = ( break792_g170628.z * break33_g170647.z );
				float temp_output_28_0_g170647 = ( temp_output_30_0_g170647 + temp_output_29_0_g170647 + temp_output_31_0_g170647 + ( break792_g170628.w * break33_g170647.w ) );
				float clampResult17_g170648 = clamp( temp_output_28_0_g170647 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170657 = _OverlayMeshRemap.x;
				float temp_output_9_0_g170657 = ( clampResult17_g170648 - temp_output_7_0_g170657 );
				float lerpResult881_g170628 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170657 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170653 = lerpResult881_g170628;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170653 = ( temp_output_6_0_g170653 + _OverlayMeshMode );
				#else
				float staticSwitch14_g170653 = temp_output_6_0_g170653;
				#endif
				half Overlay_VertMask801_g170628 = staticSwitch14_g170653;
				half Overlay_MaskNoise427_g170628 = 1.0;
				TVEGlobalData Data15_g170630 = Data204_g170214;
				float Out_Dummy15_g170630 = 0;
				float4 Out_CoatDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170630 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170630 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170630 = Data15_g170630.Dummy;
				Out_CoatDataRT15_g170630 = Data15_g170630.CoatDataRT;
				Out_PaintDataRT15_g170630 = Data15_g170630.PaintDataRT;
				Out_GlowDataRT15_g170630= Data15_g170630.GlowDataRT;
				Out_AtmoDataRT15_g170630= Data15_g170630.AtmoDataRT;
				Out_FadeDataRT15_g170630= Data15_g170630.FadeDataRT;
				Out_FormDataRT15_g170630 = Data15_g170630.FormDataRT;
				Out_FlowDataRT15_g170630 = Data15_g170630.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170628 = Out_AtmoDataRT15_g170630;
				float temp_output_6_0_g170662 = (Global_AtmoParams516_g170628).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170662 = ( temp_output_6_0_g170662 + _OverlayElementMode );
				#else
				float staticSwitch14_g170662 = temp_output_6_0_g170662;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170628 = staticSwitch14_g170662;
				#else
				float staticSwitch705_g170628 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g170628 = lerp( 1.0 , ( staticSwitch705_g170628 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g170628 = lerpResult937_g170628;
				half Custom_Mask646_g170628 = 1.0;
				float temp_output_7_0_g170659 = _OverlayBlendRemap.x;
				float temp_output_9_0_g170659 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170628 * Overlay_MaskProj457_g170628 * Overlay_MaskLuma438_g170628 * Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 * Custom_Mask646_g170628 ) - temp_output_7_0_g170659 );
				half Overlay_Mask494_g170628 = saturate( ( ( temp_output_9_0_g170659 / ( _OverlayBlendRemap.y - temp_output_7_0_g170659 ) ) + 0.0001 ) );
				float3 lerpResult467_g170628 = lerp( Visual_Albedo127_g170628 , ( staticSwitch14_g170646 + Overlay_GlitterColor865_g170628 ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170628 = lerpResult467_g170628;
				#else
				float3 staticSwitch577_g170628 = Visual_Albedo127_g170628;
				#endif
				half3 Final_Albedo493_g170628 = staticSwitch577_g170628;
				float3 In_Albedo3_g170631 = Final_Albedo493_g170628;
				float3 In_AlbedoRaw3_g170631 = Out_AlbedoRaw4_g170629;
				half2 Visual_NormalTS535_g170628 = Out_NormalTS4_g170629;
				TEXTURE2D(Texture238_g170634) = _OverlayNormalTex;
				float localFilterTexture29_g170644 = ( 0.0 );
				SamplerState SS29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170644 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170644 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170644 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170644 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g170644 = SamplerDefault29_g170644;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170644 = SamplerDefault29_g170644;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170644 = SamplerPoint29_g170644;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170644 = SamplerLow29_g170644;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170644 = SamplerMedium29_g170644;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170644 = SamplerHigh29_g170644;
				#endif
				}
				SamplerState Sampler238_g170634 = SS29_g170644;
				float4 temp_output_37_0_g170634 = Overlay_Coords639_g170628;
				half4 Coords238_g170634 = temp_output_37_0_g170634;
				float3 temp_output_279_0_g170634 = Model_PositionWO602_g170628;
				half3 WorldPosition238_g170634 = temp_output_279_0_g170634;
				half4 localSamplePlanar2D238_g170634 = SamplePlanar2D( Texture238_g170634 , Sampler238_g170634 , Coords238_g170634 , WorldPosition238_g170634 );
				TEXTURE2D(Texture246_g170634) = _OverlayNormalTex;
				SamplerState Sampler246_g170634 = SS29_g170644;
				half4 Coords246_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition246_g170634 = temp_output_279_0_g170634;
				float3 temp_output_280_0_g170634 = Model_NormalWS712_g170628;
				half3 WorldNormal246_g170634 = temp_output_280_0_g170634;
				half4 localSamplePlanar3D246_g170634 = SamplePlanar3D( Texture246_g170634 , Sampler246_g170634 , Coords246_g170634 , WorldPosition246_g170634 , WorldNormal246_g170634 );
				TEXTURE2D(Texture234_g170634) = _OverlayNormalTex;
				SamplerState Sampler234_g170634 = SS29_g170644;
				float4 Coords234_g170634 = temp_output_37_0_g170634;
				float3 WorldPosition234_g170634 = temp_output_279_0_g170634;
				float4 localSampleStochastic2D234_g170634 = SampleStochastic2D( Texture234_g170634 , Sampler234_g170634 , Coords234_g170634 , WorldPosition234_g170634 );
				TEXTURE2D(Texture263_g170634) = _OverlayNormalTex;
				SamplerState Sampler263_g170634 = SS29_g170644;
				half4 Coords263_g170634 = temp_output_37_0_g170634;
				half3 WorldPosition263_g170634 = temp_output_279_0_g170634;
				half3 WorldNormal263_g170634 = temp_output_280_0_g170634;
				half4 localSampleStochastic3D263_g170634 = SampleStochastic3D( Texture263_g170634 , Sampler263_g170634 , Coords263_g170634 , WorldPosition263_g170634 , WorldNormal263_g170634 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170628 = localSamplePlanar3D246_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170628 = localSampleStochastic2D234_g170634;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170628 = localSampleStochastic3D263_g170634;
				#else
				float4 staticSwitch686_g170628 = localSamplePlanar2D238_g170634;
				#endif
				half4 Normal_Packed45_g170637 = staticSwitch686_g170628;
				float2 appendResult58_g170637 = (float2(( (Normal_Packed45_g170637).x * (Normal_Packed45_g170637).w ) , (Normal_Packed45_g170637).y));
				half2 Normal_Default50_g170637 = appendResult58_g170637;
				half2 Normal_ASTC41_g170637 = (Normal_Packed45_g170637).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170637 = Normal_ASTC41_g170637;
				#else
				float2 staticSwitch38_g170637 = Normal_Default50_g170637;
				#endif
				half2 Normal_NO_DTX544_g170637 = (Normal_Packed45_g170637).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170637 = Normal_NO_DTX544_g170637;
				#else
				float2 staticSwitch37_g170637 = staticSwitch38_g170637;
				#endif
				float2 temp_output_623_0_g170628 = (staticSwitch37_g170637*2.0 + -1.0);
				half2 Overlay_Normal528_g170628 = temp_output_623_0_g170628;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170628 = Overlay_Normal528_g170628;
				#else
				float2 staticSwitch579_g170628 = Visual_NormalTS535_g170628;
				#endif
				float2 lerpResult551_g170628 = lerp( Visual_NormalTS535_g170628 , ( staticSwitch579_g170628 * _OverlayNormalValue ) , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170628 = lerpResult551_g170628;
				#else
				float2 staticSwitch583_g170628 = Visual_NormalTS535_g170628;
				#endif
				half2 Final_NormalTS499_g170628 = staticSwitch583_g170628;
				float2 In_NormalTS3_g170631 = Final_NormalTS499_g170628;
				float3 In_NormalWS3_g170631 = temp_output_739_21_g170628;
				half4 Visual_Masks536_g170628 = Out_Shader4_g170629;
				float4 appendResult585_g170628 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170628 = lerp( Visual_Masks536_g170628 , appendResult585_g170628 , Overlay_Mask494_g170628);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170628 = lerpResult584_g170628;
				#else
				float4 staticSwitch586_g170628 = Visual_Masks536_g170628;
				#endif
				half4 Final_Masks482_g170628 = staticSwitch586_g170628;
				float4 In_Shader3_g170631 = Final_Masks482_g170628;
				float4 In_Emissive3_g170631 = Out_Emissive4_g170629;
				float temp_output_739_12_g170628 = Out_Grayscale4_g170629;
				float In_Grayscale3_g170631 = temp_output_739_12_g170628;
				float In_Luminosity3_g170631 = temp_output_739_15_g170628;
				float In_MultiMask3_g170631 = Out_MultiMask4_g170629;
				float In_AlphaClip3_g170631 = Out_AlphaClip4_g170629;
				float In_AlphaFade3_g170631 = Out_AlphaFade4_g170629;
				float3 In_Translucency3_g170631 = Out_Translucency4_g170629;
				half Visual_Transmission699_g170628 = Out_Transmission4_g170629;
				float lerpResult746_g170628 = lerp( Visual_Transmission699_g170628 , ( Visual_Transmission699_g170628 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170628 * Overlay_MaskNoise427_g170628 * Overlay_MaskGlobal429_g170628 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170628 = lerpResult746_g170628;
				#else
				float staticSwitch703_g170628 = Visual_Transmission699_g170628;
				#endif
				half Final_Transmission702_g170628 = staticSwitch703_g170628;
				float In_Transmission3_g170631 = Final_Transmission702_g170628;
				float In_Thickness3_g170631 = Out_Thickness4_g170629;
				float In_Diffusion3_g170631 = Out_Diffusion4_g170629;
				float In_Depth3_g170631 = Out_Depth4_g170629;
				{
				Data3_g170631.Dummy = In_Dummy3_g170631;
				Data3_g170631.Albedo = In_Albedo3_g170631;
				Data3_g170631.AlbedoRaw = In_AlbedoRaw3_g170631;
				Data3_g170631.NormalTS = In_NormalTS3_g170631;
				Data3_g170631.NormalWS = In_NormalWS3_g170631;
				Data3_g170631.Shader = In_Shader3_g170631;
				Data3_g170631.Emissive= In_Emissive3_g170631;
				Data3_g170631.MultiMask = In_MultiMask3_g170631;
				Data3_g170631.Grayscale = In_Grayscale3_g170631;
				Data3_g170631.Luminosity = In_Luminosity3_g170631;
				Data3_g170631.AlphaClip = In_AlphaClip3_g170631;
				Data3_g170631.AlphaFade = In_AlphaFade3_g170631;
				Data3_g170631.Translucency = In_Translucency3_g170631;
				Data3_g170631.Transmission = In_Transmission3_g170631;
				Data3_g170631.Thickness = In_Thickness3_g170631;
				Data3_g170631.Diffusion = In_Diffusion3_g170631;
				Data3_g170631.Depth = In_Depth3_g170631;
				}
				TVEVisualData Data4_g170666 = Data3_g170631;
				float Out_Dummy4_g170666 = 0;
				float3 Out_Albedo4_g170666 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170666 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170666 = float2( 0,0 );
				float3 Out_NormalWS4_g170666 = float3( 0,0,0 );
				float4 Out_Shader4_g170666 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170666 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170666 = 0;
				float Out_Grayscale4_g170666 = 0;
				float Out_Luminosity4_g170666 = 0;
				float Out_AlphaClip4_g170666 = 0;
				float Out_AlphaFade4_g170666 = 0;
				float3 Out_Translucency4_g170666 = float3( 0,0,0 );
				float Out_Transmission4_g170666 = 0;
				float Out_Thickness4_g170666 = 0;
				float Out_Diffusion4_g170666 = 0;
				float Out_Depth4_g170666 = 0;
				{
				Out_Dummy4_g170666 = Data4_g170666.Dummy;
				Out_Albedo4_g170666 = Data4_g170666.Albedo;
				Out_AlbedoRaw4_g170666 = Data4_g170666.AlbedoRaw;
				Out_NormalTS4_g170666 = Data4_g170666.NormalTS;
				Out_NormalWS4_g170666 = Data4_g170666.NormalWS;
				Out_Shader4_g170666 = Data4_g170666.Shader;
				Out_Emissive4_g170666= Data4_g170666.Emissive;
				Out_MultiMask4_g170666 = Data4_g170666.MultiMask;
				Out_Grayscale4_g170666 = Data4_g170666.Grayscale;
				Out_Luminosity4_g170666= Data4_g170666.Luminosity;
				Out_AlphaClip4_g170666 = Data4_g170666.AlphaClip;
				Out_AlphaFade4_g170666 = Data4_g170666.AlphaFade;
				Out_Translucency4_g170666 = Data4_g170666.Translucency;
				Out_Transmission4_g170666 = Data4_g170666.Transmission;
				Out_Thickness4_g170666 = Data4_g170666.Thickness;
				Out_Diffusion4_g170666 = Data4_g170666.Diffusion;
				Out_Depth4_g170666= Data4_g170666.Depth;
				}
				half3 Visual_Albedo127_g170665 = Out_Albedo4_g170666;
				TVEGlobalData Data15_g170671 = Data204_g170214;
				float Out_Dummy15_g170671 = 0;
				float4 Out_CoatDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170671 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170671 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170671 = Data15_g170671.Dummy;
				Out_CoatDataRT15_g170671 = Data15_g170671.CoatDataRT;
				Out_PaintDataRT15_g170671 = Data15_g170671.PaintDataRT;
				Out_GlowDataRT15_g170671= Data15_g170671.GlowDataRT;
				Out_AtmoDataRT15_g170671= Data15_g170671.AtmoDataRT;
				Out_FadeDataRT15_g170671= Data15_g170671.FadeDataRT;
				Out_FormDataRT15_g170671 = Data15_g170671.FormDataRT;
				Out_FlowDataRT15_g170671 = Data15_g170671.FlowDataRT;
				}
				half4 Global_AtmoParams516_g170665 = Out_AtmoDataRT15_g170671;
				float4 temp_output_6_0_g170692 = Global_AtmoParams516_g170665;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170692 = ( temp_output_6_0_g170692 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g170692 = temp_output_6_0_g170692;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g170665 = staticSwitch14_g170692;
				#else
				float4 staticSwitch663_g170665 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g170665 = lerp( float2( 1,1 ) , (( staticSwitch663_g170665 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g170665 = lerpResult1121_g170665;
				half Global_Wetness429_g170665 = break1123_g170665.x;
				half Wetness_Value1042_g170665 = ( _WetnessIntensityValue * Global_Wetness429_g170665 );
				TVEModelData Data15_g170677 = Data16_g170201;
				float Out_Dummy15_g170677 = 0;
				float3 Out_PositionWS15_g170677 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170677 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170677 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170677 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170677 = float3( 0,0,0 );
				float4 Out_VertexData15_g170677 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170677 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170677 = Data15_g170677.Dummy;
				Out_PositionWS15_g170677 = Data15_g170677.PositionWS;
				Out_PositionWO15_g170677 = Data15_g170677.PositionWO;
				Out_PivotWS15_g170677 = Data15_g170677.PivotWS;
				Out_PivotWO15_g170677 = Data15_g170677.PivotWO;
				Out_NormalWS15_g170677 = Data15_g170677.NormalWS;
				Out_ViewDirWS15_g170677 = Data15_g170677.ViewDirWS;
				Out_VertexData15_g170677 = Data15_g170677.VertexData;
				Out_BoundsData15_g170677 = Data15_g170677.BoundsData;
				}
				half4 Model_VertexData1030_g170665 = Out_VertexData15_g170677;
				float4 break1019_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170680 = _wetness_vert_mode;
				float temp_output_30_0_g170680 = ( break1019_g170665.x * break33_g170680.x );
				float temp_output_29_0_g170680 = ( break1019_g170665.y * break33_g170680.y );
				float temp_output_31_0_g170680 = ( break1019_g170665.z * break33_g170680.z );
				float temp_output_28_0_g170680 = ( temp_output_30_0_g170680 + temp_output_29_0_g170680 + temp_output_31_0_g170680 + ( break1019_g170665.w * break33_g170680.w ) );
				float clampResult17_g170679 = clamp( temp_output_28_0_g170680 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170688 = _WetnessMeshRemap.x;
				float temp_output_9_0_g170688 = ( clampResult17_g170679 - temp_output_7_0_g170688 );
				float lerpResult1026_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170688 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
				float temp_output_6_0_g170681 = lerpResult1026_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170681 = ( temp_output_6_0_g170681 + _WetnessMeshMode );
				#else
				float staticSwitch14_g170681 = temp_output_6_0_g170681;
				#endif
				float temp_output_1025_0_g170665 = staticSwitch14_g170681;
				half Wetness_VertMask1024_g170665 = temp_output_1025_0_g170665;
				float temp_output_1043_0_g170665 = ( Wetness_Value1042_g170665 * Wetness_VertMask1024_g170665 );
				half Wetness_Mask866_g170665 = temp_output_1043_0_g170665;
				float4 break1083_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170683 = _wetness_water_vert_mode;
				float temp_output_30_0_g170683 = ( break1083_g170665.x * break33_g170683.x );
				float temp_output_29_0_g170683 = ( break1083_g170665.y * break33_g170683.y );
				float temp_output_31_0_g170683 = ( break1083_g170665.z * break33_g170683.z );
				float temp_output_28_0_g170683 = ( temp_output_30_0_g170683 + temp_output_29_0_g170683 + temp_output_31_0_g170683 + ( break1083_g170665.w * break33_g170683.w ) );
				float clampResult17_g170682 = clamp( temp_output_28_0_g170683 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170689 = _WetnessWaterMeshRemap.x;
				float temp_output_9_0_g170689 = ( clampResult17_g170682 - temp_output_7_0_g170689 );
				float lerpResult1089_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170689 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
				float temp_output_6_0_g170684 = lerpResult1089_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170684 = ( temp_output_6_0_g170684 + _WetnessWaterMeshMode );
				#else
				float staticSwitch14_g170684 = temp_output_6_0_g170684;
				#endif
				float temp_output_1091_0_g170665 = staticSwitch14_g170684;
				half Water_VertMask1094_g170665 = temp_output_1091_0_g170665;
				half4 Visual_Masks536_g170665 = Out_Shader4_g170666;
				float lerpResult1013_g170665 = lerp( 1.0 , (Visual_Masks536_g170665).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g170665 = lerpResult1013_g170665;
				float clampResult17_g170678 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170665 * Water_VertMask1094_g170665 ) - Water_HeightMask782_g170665 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170691 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g170691 = ( clampResult17_g170678 - temp_output_7_0_g170691 );
				half3 Model_NormalWS798_g170665 = Out_NormalWS15_g170677;
				float temp_output_786_0_g170665 = saturate( (Model_NormalWS798_g170665).y );
				half Wetness_ProjMask790_g170665 = temp_output_786_0_g170665;
				half Water_Mask760_g170665 = ( saturate( ( ( temp_output_9_0_g170691 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170665 );
				float3 lerpResult918_g170665 = lerp( Visual_Albedo127_g170665 , ( Visual_Albedo127_g170665 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g170665 = lerpResult918_g170665;
				#else
				float3 staticSwitch946_g170665 = Visual_Albedo127_g170665;
				#endif
				float3 lerpResult768_g170665 = lerp( staticSwitch946_g170665 , ( staticSwitch946_g170665 * staticSwitch946_g170665 ) , _WetnessContrastValue);
				float3 lerpResult651_g170665 = lerp( Visual_Albedo127_g170665 , lerpResult768_g170665 , Wetness_Mask866_g170665);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g170665 = lerpResult651_g170665;
				#else
				float3 staticSwitch577_g170665 = Visual_Albedo127_g170665;
				#endif
				half3 Final_Albedo493_g170665 = staticSwitch577_g170665;
				float3 In_Albedo3_g170667 = Final_Albedo493_g170665;
				float3 In_AlbedoRaw3_g170667 = Out_AlbedoRaw4_g170666;
				half2 Visual_Normal535_g170665 = Out_NormalTS4_g170666;
				float lerpResult877_g170665 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g170665 = ( Visual_Normal535_g170665 * lerpResult877_g170665 );
				#else
				float2 staticSwitch957_g170665 = Visual_Normal535_g170665;
				#endif
				float2 temp_cast_36 = (0.0).xx;
				TEXTURE2D(Texture238_g170675) = _WetnessDropsTexRT;
				SamplerState Sampler238_g170675 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g170665 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g170675 = appendResult924_g170665;
				half4 Coords238_g170675 = temp_output_37_0_g170675;
				half3 Model_PositionWO602_g170665 = Out_PositionWO15_g170677;
				float3 temp_output_279_0_g170675 = Model_PositionWO602_g170665;
				half3 WorldPosition238_g170675 = temp_output_279_0_g170675;
				half4 localSamplePlanar2D238_g170675 = SamplePlanar2D( Texture238_g170675 , Sampler238_g170675 , Coords238_g170675 , WorldPosition238_g170675 );
				float4 temp_output_1010_0_g170665 = localSamplePlanar2D238_g170675;
				half2 Rain_DropsNormal919_g170665 = (temp_output_1010_0_g170665).zw;
				float2 temp_output_903_0_g170665 = (Rain_DropsNormal919_g170665*2.0 + -1.0);
				half2 Rain_RingsNormal713_g170665 = (temp_output_1010_0_g170665).xy;
				float2 lerpResult904_g170665 = lerp( temp_output_903_0_g170665 , (Rain_RingsNormal713_g170665*2.0 + -1.0) , ( Water_Mask760_g170665 * Water_Mask760_g170665 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g170665 = lerpResult904_g170665;
				#else
				float2 staticSwitch960_g170665 = temp_output_903_0_g170665;
				#endif
				half2 Rain_Drops1002_g170665 = ( staticSwitch960_g170665 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g170665 = Out_PositionWS15_g170677;
				half Global_Rain955_g170665 = break1123_g170665.y;
				half Rain_Value1067_g170665 = Global_Rain955_g170665;
				float4 break1097_g170665 = Model_VertexData1030_g170665;
				float4 break33_g170686 = _wetness_drops_vert_mode;
				float temp_output_30_0_g170686 = ( break1097_g170665.x * break33_g170686.x );
				float temp_output_29_0_g170686 = ( break1097_g170665.y * break33_g170686.y );
				float temp_output_31_0_g170686 = ( break1097_g170665.z * break33_g170686.z );
				float temp_output_28_0_g170686 = ( temp_output_30_0_g170686 + temp_output_29_0_g170686 + temp_output_31_0_g170686 + ( break1097_g170665.w * break33_g170686.w ) );
				float clampResult17_g170685 = clamp( temp_output_28_0_g170686 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170690 = _WetnessDropsMeshRemap.x;
				float temp_output_9_0_g170690 = ( clampResult17_g170685 - temp_output_7_0_g170690 );
				float lerpResult1100_g170665 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170690 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
				float temp_output_6_0_g170687 = lerpResult1100_g170665;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170687 = ( temp_output_6_0_g170687 + _WetnessDropsMeshMode );
				#else
				float staticSwitch14_g170687 = temp_output_6_0_g170687;
				#endif
				float temp_output_1101_0_g170665 = staticSwitch14_g170687;
				half Rain_VertMask1108_g170665 = temp_output_1101_0_g170665;
				half Rain_Mask999_g170665 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170665 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170665 * Rain_VertMask1108_g170665 );
				half2 Normal_Planar45_g170674 = ( Rain_Drops1002_g170665 * Rain_Mask999_g170665 * Wetness_ProjMask790_g170665 );
				float2 break71_g170674 = Normal_Planar45_g170674;
				float3 appendResult72_g170674 = (float3(break71_g170674.x , 0.0 , break71_g170674.y));
				half2 Wetness_Normal526_g170665 = (mul( ase_worldToTangent, appendResult72_g170674 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g170665 = Wetness_Normal526_g170665;
				#else
				float2 staticSwitch583_g170665 = temp_cast_36;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g170665 = ( staticSwitch957_g170665 + staticSwitch583_g170665 );
				#else
				float2 staticSwitch774_g170665 = Visual_Normal535_g170665;
				#endif
				half2 Final_Normal499_g170665 = staticSwitch774_g170665;
				float2 In_NormalTS3_g170667 = Final_Normal499_g170665;
				float3 In_NormalWS3_g170667 = Out_NormalWS4_g170666;
				float4 break658_g170665 = Visual_Masks536_g170665;
				float temp_output_935_0_g170665 = ( Wetness_Mask866_g170665 * _WetnessSmoothnessValue );
				float lerpResult941_g170665 = lerp( temp_output_935_0_g170665 , 2.0 , Water_Mask760_g170665);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g170665 = lerpResult941_g170665;
				#else
				float staticSwitch959_g170665 = temp_output_935_0_g170665;
				#endif
				float4 appendResult661_g170665 = (float4(break658_g170665.x , break658_g170665.y , break658_g170665.z , saturate( ( break658_g170665.w + staticSwitch959_g170665 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g170665 = appendResult661_g170665;
				#else
				float4 staticSwitch586_g170665 = Visual_Masks536_g170665;
				#endif
				half4 Final_Masks482_g170665 = staticSwitch586_g170665;
				float4 In_Shader3_g170667 = Final_Masks482_g170665;
				float4 In_Emissive3_g170667 = Out_Emissive4_g170666;
				float In_Grayscale3_g170667 = Out_Grayscale4_g170666;
				float In_Luminosity3_g170667 = Out_Luminosity4_g170666;
				float In_MultiMask3_g170667 = Out_MultiMask4_g170666;
				float In_AlphaClip3_g170667 = Out_AlphaClip4_g170666;
				float In_AlphaFade3_g170667 = Out_AlphaFade4_g170666;
				float3 In_Translucency3_g170667 = Out_Translucency4_g170666;
				float In_Transmission3_g170667 = Out_Transmission4_g170666;
				float In_Thickness3_g170667 = Out_Thickness4_g170666;
				float In_Diffusion3_g170667 = Out_Diffusion4_g170666;
				float In_Depth3_g170667 = Out_Depth4_g170666;
				{
				Data3_g170667.Dummy = In_Dummy3_g170667;
				Data3_g170667.Albedo = In_Albedo3_g170667;
				Data3_g170667.AlbedoRaw = In_AlbedoRaw3_g170667;
				Data3_g170667.NormalTS = In_NormalTS3_g170667;
				Data3_g170667.NormalWS = In_NormalWS3_g170667;
				Data3_g170667.Shader = In_Shader3_g170667;
				Data3_g170667.Emissive= In_Emissive3_g170667;
				Data3_g170667.MultiMask = In_MultiMask3_g170667;
				Data3_g170667.Grayscale = In_Grayscale3_g170667;
				Data3_g170667.Luminosity = In_Luminosity3_g170667;
				Data3_g170667.AlphaClip = In_AlphaClip3_g170667;
				Data3_g170667.AlphaFade = In_AlphaFade3_g170667;
				Data3_g170667.Translucency = In_Translucency3_g170667;
				Data3_g170667.Transmission = In_Transmission3_g170667;
				Data3_g170667.Thickness = In_Thickness3_g170667;
				Data3_g170667.Diffusion = In_Diffusion3_g170667;
				Data3_g170667.Depth = In_Depth3_g170667;
				}
				TVEVisualData Data4_g170697 = Data3_g170667;
				float Out_Dummy4_g170697 = 0;
				float3 Out_Albedo4_g170697 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170697 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170697 = float2( 0,0 );
				float3 Out_NormalWS4_g170697 = float3( 0,0,0 );
				float4 Out_Shader4_g170697 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170697 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170697 = 0;
				float Out_Grayscale4_g170697 = 0;
				float Out_Luminosity4_g170697 = 0;
				float Out_AlphaClip4_g170697 = 0;
				float Out_AlphaFade4_g170697 = 0;
				float3 Out_Translucency4_g170697 = float3( 0,0,0 );
				float Out_Transmission4_g170697 = 0;
				float Out_Thickness4_g170697 = 0;
				float Out_Diffusion4_g170697 = 0;
				float Out_Depth4_g170697 = 0;
				{
				Out_Dummy4_g170697 = Data4_g170697.Dummy;
				Out_Albedo4_g170697 = Data4_g170697.Albedo;
				Out_AlbedoRaw4_g170697 = Data4_g170697.AlbedoRaw;
				Out_NormalTS4_g170697 = Data4_g170697.NormalTS;
				Out_NormalWS4_g170697 = Data4_g170697.NormalWS;
				Out_Shader4_g170697 = Data4_g170697.Shader;
				Out_Emissive4_g170697= Data4_g170697.Emissive;
				Out_MultiMask4_g170697 = Data4_g170697.MultiMask;
				Out_Grayscale4_g170697 = Data4_g170697.Grayscale;
				Out_Luminosity4_g170697= Data4_g170697.Luminosity;
				Out_AlphaClip4_g170697 = Data4_g170697.AlphaClip;
				Out_AlphaFade4_g170697 = Data4_g170697.AlphaFade;
				Out_Translucency4_g170697 = Data4_g170697.Translucency;
				Out_Transmission4_g170697 = Data4_g170697.Transmission;
				Out_Thickness4_g170697 = Data4_g170697.Thickness;
				Out_Diffusion4_g170697 = Data4_g170697.Diffusion;
				Out_Depth4_g170697= Data4_g170697.Depth;
				}
				float3 In_Albedo3_g170695 = Out_Albedo4_g170697;
				float3 In_AlbedoRaw3_g170695 = Out_AlbedoRaw4_g170697;
				float2 In_NormalTS3_g170695 = Out_NormalTS4_g170697;
				float3 In_NormalWS3_g170695 = Out_NormalWS4_g170697;
				float4 In_Shader3_g170695 = Out_Shader4_g170697;
				float4 In_Emissive3_g170695 = Out_Emissive4_g170697;
				float In_Grayscale3_g170695 = Out_Grayscale4_g170697;
				float In_Luminosity3_g170695 = Out_Luminosity4_g170697;
				float temp_output_836_11_g170694 = Out_MultiMask4_g170697;
				float In_MultiMask3_g170695 = temp_output_836_11_g170694;
				half Visual_AlphaClip667_g170694 = Out_AlphaClip4_g170697;
				half Input_True57_g170705 = Visual_AlphaClip667_g170694;
				half True36_g170705 = Input_True57_g170705;
				TVEGlobalData Data15_g170696 = Data204_g170214;
				float Out_Dummy15_g170696 = 0;
				float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170696 = Data15_g170696.Dummy;
				Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
				Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
				Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
				Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
				Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
				Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
				Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
				}
				half4 Global_FadeParams516_g170694 = Out_FadeDataRT15_g170696;
				float temp_output_6_0_g170703 = saturate( (Global_FadeParams516_g170694).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170703 = ( temp_output_6_0_g170703 + _CutoutElementMode );
				#else
				float staticSwitch14_g170703 = temp_output_6_0_g170703;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g170694 = staticSwitch14_g170703;
				#else
				float staticSwitch663_g170694 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g170694 = lerp( 1.0 , ( staticSwitch663_g170694 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g170694 = lerpResult843_g170694;
				float lerpResult811_g170694 = lerp( 1.0 , Visual_AlphaClip667_g170694 , _CutoutAlphaValue);
				half Local_AlphaMask814_g170694 = lerpResult811_g170694;
				TVEModelData Data15_g170698 = Data16_g170201;
				float Out_Dummy15_g170698 = 0;
				float3 Out_PositionWS15_g170698 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170698 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170698 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170698 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170698 = float3( 0,0,0 );
				float4 Out_VertexData15_g170698 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170698 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170698 = Data15_g170698.Dummy;
				Out_PositionWS15_g170698 = Data15_g170698.PositionWS;
				Out_PositionWO15_g170698 = Data15_g170698.PositionWO;
				Out_PivotWS15_g170698 = Data15_g170698.PivotWS;
				Out_PivotWO15_g170698 = Data15_g170698.PivotWO;
				Out_NormalWS15_g170698 = Data15_g170698.NormalWS;
				Out_ViewDirWS15_g170698 = Data15_g170698.ViewDirWS;
				Out_VertexData15_g170698 = Data15_g170698.VertexData;
				Out_BoundsData15_g170698 = Data15_g170698.BoundsData;
				}
				half3 Model_PositionWO602_g170694 = Out_PositionWO15_g170698;
				float lerpResult673_g170694 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170694 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
				half Local_NoiseMask678_g170694 = lerpResult673_g170694;
				half4 Model_VertexMasks752_g170694 = Out_VertexData15_g170698;
				float4 break755_g170694 = Model_VertexMasks752_g170694;
				float4 break33_g170699 = _cutout_vert_mode;
				float temp_output_30_0_g170699 = ( break755_g170694.x * break33_g170699.x );
				float temp_output_29_0_g170699 = ( break755_g170694.y * break33_g170699.y );
				float temp_output_31_0_g170699 = ( break755_g170694.z * break33_g170699.z );
				float temp_output_28_0_g170699 = ( temp_output_30_0_g170699 + temp_output_29_0_g170699 + temp_output_31_0_g170699 + ( break755_g170694.w * break33_g170699.w ) );
				float clampResult17_g170700 = clamp( temp_output_28_0_g170699 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170702 = _CutoutMeshRemap.x;
				float temp_output_9_0_g170702 = ( clampResult17_g170700 - temp_output_7_0_g170702 );
				float lerpResult820_g170694 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170702 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
				float temp_output_6_0_g170701 = lerpResult820_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170701 = ( temp_output_6_0_g170701 + _CutoutMeshMode );
				#else
				float staticSwitch14_g170701 = temp_output_6_0_g170701;
				#endif
				float temp_output_801_0_g170694 = staticSwitch14_g170701;
				half Local_VertMask766_g170694 = temp_output_801_0_g170694;
				half Visual_MultiMask671_g170694 = temp_output_836_11_g170694;
				float lerpResult683_g170694 = lerp( 1.0 , Visual_MultiMask671_g170694 , _CutoutMultiValue);
				half Local_MultiMask685_g170694 = lerpResult683_g170694;
				float lerpResult728_g170694 = lerp( Visual_AlphaClip667_g170694 , min( Visual_AlphaClip667_g170694 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170694 ) - ( Local_AlphaMask814_g170694 * Local_NoiseMask678_g170694 * Local_VertMask766_g170694 ) ) ) ) , Local_MultiMask685_g170694);
				half Local_AlphaClip784_g170694 = lerpResult728_g170694;
				half Input_False58_g170705 = Local_AlphaClip784_g170694;
				half False36_g170705 = Input_False58_g170705;
				half localShadowPassCheck36_g170705 = ShadowPassCheck36_g170705( True36_g170705 , False36_g170705 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g170694 = Local_AlphaClip784_g170694;
				#else
				float staticSwitch791_g170694 = localShadowPassCheck36_g170705;
				#endif
				float temp_output_6_0_g170706 = staticSwitch791_g170694;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170706 = ( temp_output_6_0_g170706 + _CutoutShadowMode );
				#else
				float staticSwitch14_g170706 = temp_output_6_0_g170706;
				#endif
				float temp_output_798_0_g170694 = staticSwitch14_g170706;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g170694 = temp_output_798_0_g170694;
				#else
				float staticSwitch577_g170694 = Visual_AlphaClip667_g170694;
				#endif
				half Final_AlphaClip795_g170694 = staticSwitch577_g170694;
				float In_AlphaClip3_g170695 = Final_AlphaClip795_g170694;
				float In_AlphaFade3_g170695 = Out_AlphaFade4_g170697;
				float3 In_Translucency3_g170695 = Out_Translucency4_g170697;
				float In_Transmission3_g170695 = Out_Transmission4_g170697;
				float In_Thickness3_g170695 = Out_Thickness4_g170697;
				float In_Diffusion3_g170695 = Out_Diffusion4_g170697;
				float In_Depth3_g170695 = Out_Depth4_g170697;
				{
				Data3_g170695.Dummy = In_Dummy3_g170695;
				Data3_g170695.Albedo = In_Albedo3_g170695;
				Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
				Data3_g170695.NormalTS = In_NormalTS3_g170695;
				Data3_g170695.NormalWS = In_NormalWS3_g170695;
				Data3_g170695.Shader = In_Shader3_g170695;
				Data3_g170695.Emissive= In_Emissive3_g170695;
				Data3_g170695.MultiMask = In_MultiMask3_g170695;
				Data3_g170695.Grayscale = In_Grayscale3_g170695;
				Data3_g170695.Luminosity = In_Luminosity3_g170695;
				Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
				Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
				Data3_g170695.Translucency = In_Translucency3_g170695;
				Data3_g170695.Transmission = In_Transmission3_g170695;
				Data3_g170695.Thickness = In_Thickness3_g170695;
				Data3_g170695.Diffusion = In_Diffusion3_g170695;
				Data3_g170695.Depth = In_Depth3_g170695;
				}
				TVEVisualData Data4_g170713 = Data3_g170695;
				float Out_Dummy4_g170713 = 0;
				float3 Out_Albedo4_g170713 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170713 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170713 = float2( 0,0 );
				float3 Out_NormalWS4_g170713 = float3( 0,0,0 );
				float4 Out_Shader4_g170713 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170713 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170713 = 0;
				float Out_Grayscale4_g170713 = 0;
				float Out_Luminosity4_g170713 = 0;
				float Out_AlphaClip4_g170713 = 0;
				float Out_AlphaFade4_g170713 = 0;
				float3 Out_Translucency4_g170713 = float3( 0,0,0 );
				float Out_Transmission4_g170713 = 0;
				float Out_Thickness4_g170713 = 0;
				float Out_Diffusion4_g170713 = 0;
				float Out_Depth4_g170713 = 0;
				{
				Out_Dummy4_g170713 = Data4_g170713.Dummy;
				Out_Albedo4_g170713 = Data4_g170713.Albedo;
				Out_AlbedoRaw4_g170713 = Data4_g170713.AlbedoRaw;
				Out_NormalTS4_g170713 = Data4_g170713.NormalTS;
				Out_NormalWS4_g170713 = Data4_g170713.NormalWS;
				Out_Shader4_g170713 = Data4_g170713.Shader;
				Out_Emissive4_g170713= Data4_g170713.Emissive;
				Out_MultiMask4_g170713 = Data4_g170713.MultiMask;
				Out_Grayscale4_g170713 = Data4_g170713.Grayscale;
				Out_Luminosity4_g170713= Data4_g170713.Luminosity;
				Out_AlphaClip4_g170713 = Data4_g170713.AlphaClip;
				Out_AlphaFade4_g170713 = Data4_g170713.AlphaFade;
				Out_Translucency4_g170713 = Data4_g170713.Translucency;
				Out_Transmission4_g170713 = Data4_g170713.Transmission;
				Out_Thickness4_g170713 = Data4_g170713.Thickness;
				Out_Diffusion4_g170713 = Data4_g170713.Diffusion;
				Out_Depth4_g170713= Data4_g170713.Depth;
				}
				float3 In_Albedo3_g170714 = Out_Albedo4_g170713;
				float3 In_AlbedoRaw3_g170714 = Out_AlbedoRaw4_g170713;
				float2 In_NormalTS3_g170714 = Out_NormalTS4_g170713;
				float3 In_NormalWS3_g170714 = Out_NormalWS4_g170713;
				float4 In_Shader3_g170714 = Out_Shader4_g170713;
				float4 In_Emissive3_g170714 = Out_Emissive4_g170713;
				float In_Grayscale3_g170714 = Out_Grayscale4_g170713;
				float In_Luminosity3_g170714 = Out_Luminosity4_g170713;
				float temp_output_821_11_g170711 = Out_MultiMask4_g170713;
				float In_MultiMask3_g170714 = temp_output_821_11_g170711;
				half Visual_AlphaClip754_g170711 = Out_AlphaClip4_g170713;
				half Input_True57_g170718 = Visual_AlphaClip754_g170711;
				half True36_g170718 = Input_True57_g170718;
				half Dither_Constant768_g170711 = _DitherConstantValue;
				half Dither_BiasProximity881_g170711 = TVE_DitherParams.x;
				half Dither_BiasEnabled883_g170711 = TVE_DitherParams.w;
				float lerpResult884_g170711 = lerp( 1.0 , Dither_BiasProximity881_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170716 = _DitherProximityMaxValue;
				float temp_output_9_0_g170716 = ( ( distance( PositionWS , _WorldSpaceCameraPos ) * lerpResult884_g170711 ) - temp_output_7_0_g170716 );
				half Dither_Proximity767_g170711 = ( saturate( ( ( temp_output_9_0_g170716 / ( _DitherProximityMinValue - temp_output_7_0_g170716 ) ) + 0.0001 ) ) * _DitherProximityValue );
				TVEModelData Data15_g170715 = Data16_g170201;
				float Out_Dummy15_g170715 = 0;
				float3 Out_PositionWS15_g170715 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170715 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170715 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170715 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170715 = float3( 0,0,0 );
				float4 Out_VertexData15_g170715 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170715 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170715 = Data15_g170715.Dummy;
				Out_PositionWS15_g170715 = Data15_g170715.PositionWS;
				Out_PositionWO15_g170715 = Data15_g170715.PositionWO;
				Out_PivotWS15_g170715 = Data15_g170715.PivotWS;
				Out_PivotWO15_g170715 = Data15_g170715.PivotWO;
				Out_NormalWS15_g170715 = Data15_g170715.NormalWS;
				Out_ViewDirWS15_g170715 = Data15_g170715.ViewDirWS;
				Out_VertexData15_g170715 = Data15_g170715.VertexData;
				Out_BoundsData15_g170715 = Data15_g170715.BoundsData;
				}
				half3 Model_PositionWS776_g170711 = Out_PositionWS15_g170715;
				half Dither_BiasDistance882_g170711 = TVE_DitherParams.z;
				float lerpResult888_g170711 = lerp( 1.0 , Dither_BiasDistance882_g170711 , Dither_BiasEnabled883_g170711);
				float temp_output_7_0_g170717 = _DitherDistanceMinValue;
				float temp_output_9_0_g170717 = ( ( distance( Model_PositionWS776_g170711 , _WorldSpaceCameraPos ) * lerpResult888_g170711 ) - temp_output_7_0_g170717 );
				half Dither_Distance856_g170711 = ( saturate( ( ( temp_output_9_0_g170717 / ( _DitherDistanceMaxValue - temp_output_7_0_g170717 ) ) + 0.0001 ) ) * _DitherDistanceValue );
				half3 Model_ViewDirWS845_g170711 = Out_ViewDirWS15_g170715;
				float3 normalizeResult792_g170711 = normalize( cross( ddy( PositionWS ) , ddx( PositionWS ) ) );
				float dotResult778_g170711 = dot( Model_ViewDirWS845_g170711 , normalizeResult792_g170711 );
				half Dither_Glancing784_g170711 = ( saturate( ( ( 1.0 - abs( dotResult778_g170711 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
				half Dither_Value429_g170711 = max( max( max( Dither_Constant768_g170711 , Dither_Proximity767_g170711 ) , Dither_Distance856_g170711 ) , Dither_Glancing784_g170711 );
				half3 Model_PositionWO602_g170711 = Out_PositionWO15_g170715;
				half3 Dither_PositionWO895_g170711 = ( Model_PositionWO602_g170711 * 20.0 );
				half Local_MaskNoise678_g170711 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170711 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
				half Visual_MultiMask671_g170711 = temp_output_821_11_g170711;
				float lerpResult683_g170711 = lerp( 1.0 , Visual_MultiMask671_g170711 , _DitherMultiValue);
				half Local_MaskMulti685_g170711 = lerpResult683_g170711;
				half Custom_Mask826_g170711 = 1.0;
				float lerpResult728_g170711 = lerp( Visual_AlphaClip754_g170711 , min( Visual_AlphaClip754_g170711 , ( -0.001 - ( Dither_Value429_g170711 - Local_MaskNoise678_g170711 ) ) ) , ( Local_MaskMulti685_g170711 * Custom_Mask826_g170711 ));
				half Local_AlphaClip834_g170711 = lerpResult728_g170711;
				half Input_False58_g170718 = Local_AlphaClip834_g170711;
				half False36_g170718 = Input_False58_g170718;
				half localShadowPassCheck36_g170718 = ShadowPassCheck36_g170718( True36_g170718 , False36_g170718 );
				#ifdef TVE_DITHER_SHADOW
				float staticSwitch831_g170711 = Local_AlphaClip834_g170711;
				#else
				float staticSwitch831_g170711 = localShadowPassCheck36_g170718;
				#endif
				float temp_output_6_0_g170719 = staticSwitch831_g170711;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _DitherShadowMode );
				#else
				float staticSwitch14_g170719 = temp_output_6_0_g170719;
				#endif
				float temp_output_840_0_g170711 = staticSwitch14_g170719;
				#ifdef TVE_DITHER
				float staticSwitch577_g170711 = temp_output_840_0_g170711;
				#else
				float staticSwitch577_g170711 = Visual_AlphaClip754_g170711;
				#endif
				half Final_AlphaClip493_g170711 = staticSwitch577_g170711;
				float In_AlphaClip3_g170714 = Final_AlphaClip493_g170711;
				float In_AlphaFade3_g170714 = Out_AlphaFade4_g170713;
				float3 In_Translucency3_g170714 = Out_Translucency4_g170713;
				float In_Transmission3_g170714 = Out_Transmission4_g170713;
				float In_Thickness3_g170714 = Out_Thickness4_g170713;
				float In_Diffusion3_g170714 = Out_Diffusion4_g170713;
				float In_Depth3_g170714 = Out_Depth4_g170713;
				{
				Data3_g170714.Dummy = In_Dummy3_g170714;
				Data3_g170714.Albedo = In_Albedo3_g170714;
				Data3_g170714.AlbedoRaw = In_AlbedoRaw3_g170714;
				Data3_g170714.NormalTS = In_NormalTS3_g170714;
				Data3_g170714.NormalWS = In_NormalWS3_g170714;
				Data3_g170714.Shader = In_Shader3_g170714;
				Data3_g170714.Emissive= In_Emissive3_g170714;
				Data3_g170714.MultiMask = In_MultiMask3_g170714;
				Data3_g170714.Grayscale = In_Grayscale3_g170714;
				Data3_g170714.Luminosity = In_Luminosity3_g170714;
				Data3_g170714.AlphaClip = In_AlphaClip3_g170714;
				Data3_g170714.AlphaFade = In_AlphaFade3_g170714;
				Data3_g170714.Translucency = In_Translucency3_g170714;
				Data3_g170714.Transmission = In_Transmission3_g170714;
				Data3_g170714.Thickness = In_Thickness3_g170714;
				Data3_g170714.Diffusion = In_Diffusion3_g170714;
				Data3_g170714.Depth = In_Depth3_g170714;
				}
				TVEVisualData Data4_g170740 = Data3_g170714;
				float Out_Dummy4_g170740 = 0;
				float3 Out_Albedo4_g170740 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170740 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170740 = float2( 0,0 );
				float3 Out_NormalWS4_g170740 = float3( 0,0,0 );
				float4 Out_Shader4_g170740 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170740 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170740 = 0;
				float Out_Grayscale4_g170740 = 0;
				float Out_Luminosity4_g170740 = 0;
				float Out_AlphaClip4_g170740 = 0;
				float Out_AlphaFade4_g170740 = 0;
				float3 Out_Translucency4_g170740 = float3( 0,0,0 );
				float Out_Transmission4_g170740 = 0;
				float Out_Thickness4_g170740 = 0;
				float Out_Diffusion4_g170740 = 0;
				float Out_Depth4_g170740 = 0;
				{
				Out_Dummy4_g170740 = Data4_g170740.Dummy;
				Out_Albedo4_g170740 = Data4_g170740.Albedo;
				Out_AlbedoRaw4_g170740 = Data4_g170740.AlbedoRaw;
				Out_NormalTS4_g170740 = Data4_g170740.NormalTS;
				Out_NormalWS4_g170740 = Data4_g170740.NormalWS;
				Out_Shader4_g170740 = Data4_g170740.Shader;
				Out_Emissive4_g170740= Data4_g170740.Emissive;
				Out_MultiMask4_g170740 = Data4_g170740.MultiMask;
				Out_Grayscale4_g170740 = Data4_g170740.Grayscale;
				Out_Luminosity4_g170740= Data4_g170740.Luminosity;
				Out_AlphaClip4_g170740 = Data4_g170740.AlphaClip;
				Out_AlphaFade4_g170740 = Data4_g170740.AlphaFade;
				Out_Translucency4_g170740 = Data4_g170740.Translucency;
				Out_Transmission4_g170740 = Data4_g170740.Transmission;
				Out_Thickness4_g170740 = Data4_g170740.Thickness;
				Out_Diffusion4_g170740 = Data4_g170740.Diffusion;
				Out_Depth4_g170740= Data4_g170740.Depth;
				}
				float3 temp_output_297_0_g170736 = Out_Albedo4_g170740;
				float3 In_Albedo3_g170751 = temp_output_297_0_g170736;
				float3 temp_output_297_23_g170736 = Out_AlbedoRaw4_g170740;
				float3 In_AlbedoRaw3_g170751 = temp_output_297_23_g170736;
				float2 In_NormalTS3_g170751 = Out_NormalTS4_g170740;
				float3 In_NormalWS3_g170751 = Out_NormalWS4_g170740;
				float4 In_Shader3_g170751 = Out_Shader4_g170740;
				float4 temp_cast_37 = (0.0).xxxx;
				half4 Visual_Emissive255_g170736 = Out_Emissive4_g170740;
				TVEModelData Data15_g170741 = Data16_g170201;
				float Out_Dummy15_g170741 = 0;
				float3 Out_PositionWS15_g170741 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170741 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170741 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170741 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170741 = float3( 0,0,0 );
				float4 Out_VertexData15_g170741 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170741 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170741 = Data15_g170741.Dummy;
				Out_PositionWS15_g170741 = Data15_g170741.PositionWS;
				Out_PositionWO15_g170741 = Data15_g170741.PositionWO;
				Out_PivotWS15_g170741 = Data15_g170741.PivotWS;
				Out_PivotWO15_g170741 = Data15_g170741.PivotWO;
				Out_NormalWS15_g170741 = Data15_g170741.NormalWS;
				Out_ViewDirWS15_g170741 = Data15_g170741.ViewDirWS;
				Out_VertexData15_g170741 = Data15_g170741.VertexData;
				Out_BoundsData15_g170741 = Data15_g170741.BoundsData;
				}
				half4 Model_VertexMasks216_g170736 = Out_VertexData15_g170741;
				float4 break251_g170736 = Model_VertexMasks216_g170736;
				float4 break33_g170746 = _emissive_vert_mode;
				float temp_output_30_0_g170746 = ( break251_g170736.x * break33_g170746.x );
				float temp_output_29_0_g170746 = ( break251_g170736.y * break33_g170746.y );
				float temp_output_31_0_g170746 = ( break251_g170736.z * break33_g170746.z );
				float temp_output_28_0_g170746 = ( temp_output_30_0_g170746 + temp_output_29_0_g170746 + temp_output_31_0_g170746 + ( break251_g170736.w * break33_g170746.w ) );
				float clampResult17_g170745 = clamp( temp_output_28_0_g170746 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170749 = _EmissiveMeshRemap.x;
				float temp_output_9_0_g170749 = ( clampResult17_g170745 - temp_output_7_0_g170749 );
				float lerpResult303_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170749 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170748 = lerpResult303_g170736;
				#ifdef TVE_DUMMY
				float staticSwitch14_g170748 = ( temp_output_6_0_g170748 + _EmissiveMeshMode );
				#else
				float staticSwitch14_g170748 = temp_output_6_0_g170748;
				#endif
				half Emissive_MeshMask221_g170736 = staticSwitch14_g170748;
				TEXTURE2D(Texture276_g170738) = _EmissiveMaskTex;
				SamplerState Sampler276_g170738 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170739 = _emissive_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g170739 = ( temp_output_6_0_g170739 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
				#else
				float4 staticSwitch14_g170739 = temp_output_6_0_g170739;
				#endif
				half4 Emissive_Coords167_g170736 = staticSwitch14_g170739;
				float4 temp_output_37_0_g170738 = Emissive_Coords167_g170736;
				half4 Coords276_g170738 = temp_output_37_0_g170738;
				half2 TexCoord276_g170738 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170738 = SampleMain( Texture276_g170738 , Sampler276_g170738 , Coords276_g170738 , TexCoord276_g170738 );
				TEXTURE2D(Texture275_g170738) = _EmissiveMaskTex;
				SamplerState Sampler275_g170738 = sampler_Linear_Repeat;
				half4 Coords275_g170738 = temp_output_37_0_g170738;
				half2 TexCoord275_g170738 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170738 = SampleExtra( Texture275_g170738 , Sampler275_g170738 , Coords275_g170738 , TexCoord275_g170738 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170736 = localSampleExtra275_g170738;
				#else
				float4 staticSwitch176_g170736 = localSampleMain276_g170738;
				#endif
				half4 Emissive_MaskTex201_g170736 = staticSwitch176_g170736;
				float clampResult17_g170747 = clamp( (Emissive_MaskTex201_g170736).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170750 = _EmissiveMaskRemap.x;
				float temp_output_9_0_g170750 = ( clampResult17_g170747 - temp_output_7_0_g170750 );
				float lerpResult302_g170736 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170750 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170736 = lerpResult302_g170736;
				float temp_output_279_0_g170736 = ( Emissive_MeshMask221_g170736 * Emissive_Mask103_g170736 );
				float3 appendResult293_g170736 = (float3(temp_output_279_0_g170736 , temp_output_279_0_g170736 , temp_output_279_0_g170736));
				half3 Local_EmissiveColor278_g170736 = appendResult293_g170736;
				float3 temp_output_316_0_g170736 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g170737 = Data204_g170214;
				float Out_Dummy15_g170737 = 0;
				float4 Out_CoatDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170737 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170737 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170737 = Data15_g170737.Dummy;
				Out_CoatDataRT15_g170737 = Data15_g170737.CoatDataRT;
				Out_PaintDataRT15_g170737 = Data15_g170737.PaintDataRT;
				Out_GlowDataRT15_g170737= Data15_g170737.GlowDataRT;
				Out_AtmoDataRT15_g170737= Data15_g170737.AtmoDataRT;
				Out_FadeDataRT15_g170737= Data15_g170737.FadeDataRT;
				Out_FormDataRT15_g170737 = Data15_g170737.FormDataRT;
				Out_FlowDataRT15_g170737 = Data15_g170737.FlowDataRT;
				}
				half4 Global_GlowParams179_g170736 = Out_GlowDataRT15_g170737;
				float3 temp_output_6_0_g170743 = (Global_GlowParams179_g170736).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170743 = ( temp_output_6_0_g170743 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g170743 = temp_output_6_0_g170743;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170736 = staticSwitch14_g170743;
				#else
				float3 staticSwitch228_g170736 = temp_output_316_0_g170736;
				#endif
				float3 lerpResult299_g170736 = lerp( float3( 1,1,1 ) , staticSwitch228_g170736 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g170736 = lerpResult299_g170736;
				half3 Visual_AlbedoRaw306_g170736 = temp_output_297_23_g170736;
				float3 lerpResult307_g170736 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170736 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g170736 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170736 * lerpResult307_g170736 );
				half3 Emissive_Blend260_g170736 = ( ( (Visual_Emissive255_g170736).xyz * Local_EmissiveColor278_g170736 ) * Local_EmissiveValue88_g170736 );
				float3 temp_output_3_0_g170742 = Emissive_Blend260_g170736;
				float temp_output_15_0_g170742 = _emissive_power_value;
				float3 hdEmission22_g170742 = ASEGetEmissionHDRColor(temp_output_3_0_g170742,temp_output_15_0_g170742,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g170736 = temp_output_279_0_g170736;
				float4 appendResult295_g170736 = (float4(hdEmission22_g170742 , Local_EmissiveMask294_g170736));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170736 = appendResult295_g170736;
				#else
				float4 staticSwitch129_g170736 = temp_cast_37;
				#endif
				half4 Final_Emissive184_g170736 = staticSwitch129_g170736;
				float4 In_Emissive3_g170751 = Final_Emissive184_g170736;
				float In_Grayscale3_g170751 = Out_Grayscale4_g170740;
				float In_Luminosity3_g170751 = Out_Luminosity4_g170740;
				float temp_output_297_11_g170736 = Out_MultiMask4_g170740;
				float In_MultiMask3_g170751 = temp_output_297_11_g170736;
				float In_AlphaClip3_g170751 = Out_AlphaClip4_g170740;
				float In_AlphaFade3_g170751 = Out_AlphaFade4_g170740;
				float3 In_Translucency3_g170751 = Out_Translucency4_g170740;
				float In_Transmission3_g170751 = Out_Transmission4_g170740;
				float In_Thickness3_g170751 = Out_Thickness4_g170740;
				float In_Diffusion3_g170751 = Out_Diffusion4_g170740;
				float In_Depth3_g170751 = Out_Depth4_g170740;
				{
				Data3_g170751.Dummy = In_Dummy3_g170751;
				Data3_g170751.Albedo = In_Albedo3_g170751;
				Data3_g170751.AlbedoRaw = In_AlbedoRaw3_g170751;
				Data3_g170751.NormalTS = In_NormalTS3_g170751;
				Data3_g170751.NormalWS = In_NormalWS3_g170751;
				Data3_g170751.Shader = In_Shader3_g170751;
				Data3_g170751.Emissive= In_Emissive3_g170751;
				Data3_g170751.MultiMask = In_MultiMask3_g170751;
				Data3_g170751.Grayscale = In_Grayscale3_g170751;
				Data3_g170751.Luminosity = In_Luminosity3_g170751;
				Data3_g170751.AlphaClip = In_AlphaClip3_g170751;
				Data3_g170751.AlphaFade = In_AlphaFade3_g170751;
				Data3_g170751.Translucency = In_Translucency3_g170751;
				Data3_g170751.Transmission = In_Transmission3_g170751;
				Data3_g170751.Thickness = In_Thickness3_g170751;
				Data3_g170751.Diffusion = In_Diffusion3_g170751;
				Data3_g170751.Depth = In_Depth3_g170751;
				}
				TVEVisualData Data4_g170770 = Data3_g170751;
				float Out_Dummy4_g170770 = 0;
				float3 Out_Albedo4_g170770 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170770 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170770 = float2( 0,0 );
				float3 Out_NormalWS4_g170770 = float3( 0,0,0 );
				float4 Out_Shader4_g170770 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170770 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170770 = 0;
				float Out_Grayscale4_g170770 = 0;
				float Out_Luminosity4_g170770 = 0;
				float Out_AlphaClip4_g170770 = 0;
				float Out_AlphaFade4_g170770 = 0;
				float3 Out_Translucency4_g170770 = float3( 0,0,0 );
				float Out_Transmission4_g170770 = 0;
				float Out_Thickness4_g170770 = 0;
				float Out_Diffusion4_g170770 = 0;
				float Out_Depth4_g170770 = 0;
				{
				Out_Dummy4_g170770 = Data4_g170770.Dummy;
				Out_Albedo4_g170770 = Data4_g170770.Albedo;
				Out_AlbedoRaw4_g170770 = Data4_g170770.AlbedoRaw;
				Out_NormalTS4_g170770 = Data4_g170770.NormalTS;
				Out_NormalWS4_g170770 = Data4_g170770.NormalWS;
				Out_Shader4_g170770 = Data4_g170770.Shader;
				Out_Emissive4_g170770= Data4_g170770.Emissive;
				Out_MultiMask4_g170770 = Data4_g170770.MultiMask;
				Out_Grayscale4_g170770 = Data4_g170770.Grayscale;
				Out_Luminosity4_g170770= Data4_g170770.Luminosity;
				Out_AlphaClip4_g170770 = Data4_g170770.AlphaClip;
				Out_AlphaFade4_g170770 = Data4_g170770.AlphaFade;
				Out_Translucency4_g170770 = Data4_g170770.Translucency;
				Out_Transmission4_g170770 = Data4_g170770.Transmission;
				Out_Thickness4_g170770 = Data4_g170770.Thickness;
				Out_Diffusion4_g170770 = Data4_g170770.Diffusion;
				Out_Depth4_g170770= Data4_g170770.Depth;
				}
				half3 Visual_Albedo199_g170769 = Out_Albedo4_g170770;
				float3 temp_cast_38 = (0.0).xxx;
				half3 Subsurface_Color264_g170769 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170769 );
				half Visual_Transmission138_g170769 = Out_Transmission4_g170770;
				half Subsurface_Value268_g170769 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170772 = Data204_g170214;
				float Out_Dummy15_g170772 = 0;
				float4 Out_CoatDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g170772 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g170772 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170772 = Data15_g170772.Dummy;
				Out_CoatDataRT15_g170772 = Data15_g170772.CoatDataRT;
				Out_PaintDataRT15_g170772 = Data15_g170772.PaintDataRT;
				Out_GlowDataRT15_g170772= Data15_g170772.GlowDataRT;
				Out_AtmoDataRT15_g170772= Data15_g170772.AtmoDataRT;
				Out_FadeDataRT15_g170772= Data15_g170772.FadeDataRT;
				Out_FormDataRT15_g170772 = Data15_g170772.FormDataRT;
				Out_FlowDataRT15_g170772 = Data15_g170772.FlowDataRT;
				}
				half4 Global_GlowParams373_g170769 = Out_GlowDataRT15_g170772;
				float temp_output_6_0_g170775 = saturate( (Global_GlowParams373_g170769).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g170775 = ( temp_output_6_0_g170775 + _SubsurfaceElementMode );
				#else
				float staticSwitch14_g170775 = temp_output_6_0_g170775;
				#endif
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170769 = staticSwitch14_g170775;
				#else
				float staticSwitch367_g170769 = TVE_GlowParams.w;
				#endif
				float lerpResult403_g170769 = lerp( 1.0 , staticSwitch367_g170769 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
				half Subsurface_GlobalMask369_g170769 = lerpResult403_g170769;
				float temp_output_301_11_g170769 = Out_MultiMask4_g170770;
				half Visual_MultiMask292_g170769 = temp_output_301_11_g170769;
				float lerpResult293_g170769 = lerp( 1.0 , Visual_MultiMask292_g170769 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170769 = lerpResult293_g170769;
				half Custom_Mask363_g170769 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170769 = ( Visual_Transmission138_g170769 * Subsurface_Value268_g170769 * Subsurface_GlobalMask369_g170769 * Subsurface_MultiMask296_g170769 * Custom_Mask363_g170769 );
				#else
				float staticSwitch345_g170769 = 0.0;
				#endif
				half Final_Transmission269_g170769 = staticSwitch345_g170769;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170769 = ( Subsurface_Color264_g170769 * Final_Transmission269_g170769 * 10.0 );
				#else
				float3 staticSwitch348_g170769 = temp_cast_38;
				#endif
				half3 Final_Translucency254_g170769 = staticSwitch348_g170769;
				TVEModelData Data15_g170773 = Data16_g170201;
				float Out_Dummy15_g170773 = 0;
				float3 Out_PositionWS15_g170773 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170773 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170773 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170773 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g170773 = float3( 0,0,0 );
				float4 Out_VertexData15_g170773 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170773 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g170773 = Data15_g170773.Dummy;
				Out_PositionWS15_g170773 = Data15_g170773.PositionWS;
				Out_PositionWO15_g170773 = Data15_g170773.PositionWO;
				Out_PivotWS15_g170773 = Data15_g170773.PivotWS;
				Out_PivotWO15_g170773 = Data15_g170773.PivotWO;
				Out_NormalWS15_g170773 = Data15_g170773.NormalWS;
				Out_ViewDirWS15_g170773 = Data15_g170773.ViewDirWS;
				Out_VertexData15_g170773 = Data15_g170773.VertexData;
				Out_BoundsData15_g170773 = Data15_g170773.BoundsData;
				}
				half3 Model_ViewDirWS392_g170769 = Out_ViewDirWS15_g170773;
				float dotResult324_g170769 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g170769 );
				float saferPower323_g170769 = abs( saturate( dotResult324_g170769 ) );
				#ifdef UNITY_PASS_FORWARDADD
				float staticSwitch330_g170769 = 0.0;
				#else
				float staticSwitch330_g170769 = ( pow( saferPower323_g170769 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
				#endif
				half Mask_Subsurface_View320_g170769 = staticSwitch330_g170769;
				float3 temp_output_6_0_g170774 = ( Final_Translucency254_g170769 * Mask_Subsurface_View320_g170769 );
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g170774 = ( temp_output_6_0_g170774 + _SubsurfaceAproxInfo );
				#else
				float3 staticSwitch14_g170774 = temp_output_6_0_g170774;
				#endif
				half3 Subsurface_Approximation333_g170769 = staticSwitch14_g170774;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch353_g170769 = ( Visual_Albedo199_g170769 + Subsurface_Approximation333_g170769 );
				#else
				float3 staticSwitch353_g170769 = Visual_Albedo199_g170769;
				#endif
				half3 Final_Albedo312_g170769 = staticSwitch353_g170769;
				float3 In_Albedo3_g170771 = Final_Albedo312_g170769;
				float3 In_AlbedoRaw3_g170771 = Out_AlbedoRaw4_g170770;
				float2 In_NormalTS3_g170771 = Out_NormalTS4_g170770;
				float3 In_NormalWS3_g170771 = Out_NormalWS4_g170770;
				float4 In_Shader3_g170771 = Out_Shader4_g170770;
				float4 In_Emissive3_g170771 = Out_Emissive4_g170770;
				float In_Grayscale3_g170771 = Out_Grayscale4_g170770;
				float In_Luminosity3_g170771 = Out_Luminosity4_g170770;
				float In_MultiMask3_g170771 = temp_output_301_11_g170769;
				float In_AlphaClip3_g170771 = Out_AlphaClip4_g170770;
				float In_AlphaFade3_g170771 = Out_AlphaFade4_g170770;
				float3 In_Translucency3_g170771 = Final_Translucency254_g170769;
				float In_Transmission3_g170771 = Final_Transmission269_g170769;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170769 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170769 = 1.0;
				#endif
				half Final_Thickness275_g170769 = staticSwitch351_g170769;
				float In_Thickness3_g170771 = Final_Thickness275_g170769;
				float Final_Diffusion340_g170769 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170771 = Final_Diffusion340_g170769;
				float In_Depth3_g170771 = Out_Depth4_g170770;
				{
				Data3_g170771.Dummy = In_Dummy3_g170771;
				Data3_g170771.Albedo = In_Albedo3_g170771;
				Data3_g170771.AlbedoRaw = In_AlbedoRaw3_g170771;
				Data3_g170771.NormalTS = In_NormalTS3_g170771;
				Data3_g170771.NormalWS = In_NormalWS3_g170771;
				Data3_g170771.Shader = In_Shader3_g170771;
				Data3_g170771.Emissive= In_Emissive3_g170771;
				Data3_g170771.MultiMask = In_MultiMask3_g170771;
				Data3_g170771.Grayscale = In_Grayscale3_g170771;
				Data3_g170771.Luminosity = In_Luminosity3_g170771;
				Data3_g170771.AlphaClip = In_AlphaClip3_g170771;
				Data3_g170771.AlphaFade = In_AlphaFade3_g170771;
				Data3_g170771.Translucency = In_Translucency3_g170771;
				Data3_g170771.Transmission = In_Transmission3_g170771;
				Data3_g170771.Thickness = In_Thickness3_g170771;
				Data3_g170771.Diffusion = In_Diffusion3_g170771;
				Data3_g170771.Depth = In_Depth3_g170771;
				}
				TVEVisualData Data4_g170786 = Data3_g170771;
				float Out_Dummy4_g170786 = 0;
				float3 Out_Albedo4_g170786 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g170786 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170786 = float2( 0,0 );
				float3 Out_NormalWS4_g170786 = float3( 0,0,0 );
				float4 Out_Shader4_g170786 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170786 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170786 = 0;
				float Out_Grayscale4_g170786 = 0;
				float Out_Luminosity4_g170786 = 0;
				float Out_AlphaClip4_g170786 = 0;
				float Out_AlphaFade4_g170786 = 0;
				float3 Out_Translucency4_g170786 = float3( 0,0,0 );
				float Out_Transmission4_g170786 = 0;
				float Out_Thickness4_g170786 = 0;
				float Out_Diffusion4_g170786 = 0;
				float Out_Depth4_g170786 = 0;
				{
				Out_Dummy4_g170786 = Data4_g170786.Dummy;
				Out_Albedo4_g170786 = Data4_g170786.Albedo;
				Out_AlbedoRaw4_g170786 = Data4_g170786.AlbedoRaw;
				Out_NormalTS4_g170786 = Data4_g170786.NormalTS;
				Out_NormalWS4_g170786 = Data4_g170786.NormalWS;
				Out_Shader4_g170786 = Data4_g170786.Shader;
				Out_Emissive4_g170786= Data4_g170786.Emissive;
				Out_MultiMask4_g170786 = Data4_g170786.MultiMask;
				Out_Grayscale4_g170786 = Data4_g170786.Grayscale;
				Out_Luminosity4_g170786= Data4_g170786.Luminosity;
				Out_AlphaClip4_g170786 = Data4_g170786.AlphaClip;
				Out_AlphaFade4_g170786 = Data4_g170786.AlphaFade;
				Out_Translucency4_g170786 = Data4_g170786.Translucency;
				Out_Transmission4_g170786 = Data4_g170786.Transmission;
				Out_Thickness4_g170786 = Data4_g170786.Thickness;
				Out_Diffusion4_g170786 = Data4_g170786.Diffusion;
				Out_Depth4_g170786= Data4_g170786.Depth;
				}
				float temp_output_3_0_g170791 = Out_AlphaClip4_g170786;
				float Alpha21_g170791 = temp_output_3_0_g170791;
				float temp_output_15_0_g170791 = 0.0;
				float Treshold21_g170791 = temp_output_15_0_g170791;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g170791 - Treshold21_g170791);
				#endif
				#endif
				}
				

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;

				surfaceDescription.Alpha = saturate( ( Alpha21_g170791 * Out_AlphaFade4_g170786 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {
            Name "FullScreenDebug"
            Tags
			{
				"LightMode" = "FullScreenDebug"
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal = input.normalOS;
				output.ObjectSpaceTangent = input.tangentOS.xyz;
				output.ObjectSpacePosition = input.positionOS;

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TheVisualEngine.MaterialGUI"
	
	Fallback Off
}
/*ASEBEGIN
Version=19802
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1021;-11392,-256;Inherit;False;Block Model;46;;170196;7ad7765e793a6714babedee0033c36e9;14,240,1,290,1,291,1,289,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1022;-11072,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1023;-10624,-256;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1024;-11072,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1025;-10368,-256;Inherit;False;Block Global;58;;170214;212e17d4006dc88449d56ce0340cb5ff;17,315,1,311,1,317,1,388,1,321,1,398,1,404,1,337,1,282,1,396,1,283,1,285,1,276,1,349,1,402,1,385,1,308,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1026;-9600,-256;Inherit;False;1024;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1027;-5376,-256;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1028;-10048,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1029;-9344,-256;Inherit;False;Block Pivots Sub;-1;;170369;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1030;-5120,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1031;-5120,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1032;-5120,-256;Inherit;False;Block Main;102;;170372;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1034;-8960,-256;Inherit;False;Block Perspective;501;;170393;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1033;-8960,-128;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1035;-4736,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1036;-4736,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1037;-4736,-256;Inherit;False;Block Layer;126;;170397;5f6a6b9e0b5515744bf8e48a9ccead1b;13,986,1,709,1,726,1,748,1,1070,1,1066,1,1048,1,1045,1,1053,1,1035,1,1055,1,1051,1,1008,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1038;-8576,-256;Inherit;False;Block Size Fade;507;;170438;467c36a7402d0274b9ad844bbc95de33;3,228,1,225,1,233,0;3;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;231;FLOAT;1;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1081;-8576,-128;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1039;-4352,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1040;-4352,-256;Inherit;False;Block Detail;178;;170446;a5b52fdec7b855a4fba859a90e837892;13,990,1,709,1,726,1,748,1,1073,1,1083,1,1062,1,1057,1,1067,1,1048,1,1069,1,1065,1,1013,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1041;-8192,-256;Inherit;False;Block Motion;517;;170486;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1042;-3968,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1043;-3968,-256;Inherit;False;Block Occlusion;227;;170544;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1044;-7744,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1045;-3584,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1046;-3584,-256;Inherit;False;Block Gradient;239;;170554;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1047;-6272,-256;Inherit;False;1044;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1048;-3200,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1049;-3200,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1050;-3200,-256;Inherit;False;Block Variation;252;;170564;f25afe21028a28a4e8dee6f6da7bc1a5;1,253,0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1051;-6016,-256;Inherit;False;Block Interp;-1;;170575;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1052;-2816,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1053;-2816,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1054;-2816,-256;Inherit;False;Block Tinting;265;;170576;9f39e156ea8d89e4997ea2a1e194137e;10,352,1,416,1,414,1,407,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1055;-5696,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1056;-2432,-256;Inherit;False;Block Dryness;295;;170601;f05795de23f951c45bb73c8b4321e4b7;10,398,1,510,0,507,1,504,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1057;-2432,-128;Inherit;False;1055;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1058;-2048,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1059;-2048,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1060;-2048,-256;Inherit;False;Block Highlight;0;;170625;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1061;-1664,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1062;-1664,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1063;-1664,-256;Inherit;False;Block Overlay;328;;170628;8ae9c8285a7817844a51243251284d21;11,813,1,821,1,819,1,942,1,940,1,944,0,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1064;-1280,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1065;-1280,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1066;-1280,-256;Inherit;False;Block Wetness;376;;170665;52c5a1f52507fc44e926833b126e7855;10,850,1,1124,1,1120,1,1075,1,945,1,930,1,857,1,1092,1,851,1,1107,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1067;-896,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1068;-896,-256;Inherit;False;Block Cutout;418;;170694;866b4a5fe67e7f34085520e1bb5be2b7;8,775,1,846,1,840,1,777,1,815,1,853,0,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1069;-512,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1070;-512,-256;Inherit;False;Block Dithering;438;;170711;c7e02d28445e979479d493926695e6f3;6,843,1,859,1,844,1,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1071;-512,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1072;-7808,-256;Inherit;False;Block Transform;-1;;170726;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1073;-128,-256;Inherit;False;Block Emissive;457;;170736;64497f287b9096b43b688b52b4a0bf20;6,282,0,273,1,319,1,312,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1074;-128,-64;Inherit;False;1028;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1075;-128,-128;Inherit;False;1022;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1076;-7424,-256;Inherit;False;Block Normal;564;;170752;87f7defafe56dbf4b954caf5efc3f5ca;6,1722,1,1724,1,1713,0,1693,1,1700,0,1638,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1077;256,-256;Inherit;False;Block Subsurface;481;;170769;d738d295ada6b1f409db6776b5efe789;5,315,1,413,1,411,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1078;-7040,-256;Inherit;False;Block Pivots Add;-1;;170777;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1079;576,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1080;-6720,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;726;1280,-256;Inherit;False;1079;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;725;1280,-192;Inherit;False;1080;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;10;1280,-512;Half;False;Property;_render_cull;_render_cull;586;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;20;1472,-512;Half;False;Property;_render_src;_render_src;587;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;7;1664,-512;Half;False;Property;_render_dst;_render_dst;588;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;17;1856,-512;Half;False;Property;_render_zw;_render_zw;589;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;639;2560,-512;Inherit;False;Base Compile;-1;;170780;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;641;2048,-512;Half;False;Property;_render_coverage;_render_coverage;590;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;764;1280,-640;Half;False;Property;_IsGeneralShader;_IsGeneralShader;591;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1001;1504,-640;Half;False;Property;_IsStandardShader;_IsStandardShader;592;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;991;1536,-256;Inherit;False;Block Render;2;;170781;a46c8f81ec84cc34b8c5bbba7c174e1d;0;3;17;OBJECT;;False;19;OBJECT;;False;125;FLOAT;0;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1010;2080,-256;Float;False;True;-1;2;TheVisualEngine.MaterialGUI;0;15;BOXOPHOBIC/The Visual Engine/Geometry/General Standard Lit;28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;35;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;40;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;4;638504301875363638;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Normal Space,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;1;0;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Write Depth;0;0;  Depth Offset;0;0;  Conservative;0;0;GPU Instancing;1;0;LOD CrossFade;1;638504301950519876;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504301968634547;0;11;True;True;True;True;True;True;False;False;False;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1011;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1012;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1013;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1014;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1015;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1016;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1017;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1018;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1019;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1020;2080,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
WireConnection;1022;0;1021;314
WireConnection;1024;0;1021;128
WireConnection;1025;206;1023;0
WireConnection;1028;0;1025;151
WireConnection;1029;146;1026;0
WireConnection;1032;225;1027;0
WireConnection;1034;146;1029;128
WireConnection;1037;585;1032;106
WireConnection;1037;633;1030;0
WireConnection;1037;974;1031;0
WireConnection;1038;146;1034;128
WireConnection;1038;186;1033;0
WireConnection;1040;585;1037;552
WireConnection;1040;633;1035;0
WireConnection;1040;971;1036;0
WireConnection;1041;146;1038;128
WireConnection;1041;212;1081;0
WireConnection;1043;144;1040;552
WireConnection;1043;204;1039;0
WireConnection;1044;0;1041;1903
WireConnection;1046;144;1043;116
WireConnection;1046;222;1042;0
WireConnection;1050;144;1046;116
WireConnection;1050;222;1045;0
WireConnection;1051;22;1047;0
WireConnection;1054;198;1050;116
WireConnection;1054;223;1049;0
WireConnection;1054;207;1048;0
WireConnection;1055;0;1051;0
WireConnection;1056;279;1054;204
WireConnection;1056;297;1053;0
WireConnection;1056;281;1052;0
WireConnection;1060;144;1056;346
WireConnection;1060;212;1057;0
WireConnection;1063;572;1060;116
WireConnection;1063;596;1058;0
WireConnection;1063;600;1059;0
WireConnection;1066;572;1063;566
WireConnection;1066;596;1062;0
WireConnection;1066;600;1061;0
WireConnection;1068;572;1066;566
WireConnection;1068;596;1065;0
WireConnection;1068;600;1064;0
WireConnection;1070;572;1068;566
WireConnection;1070;596;1067;0
WireConnection;1072;146;1041;128
WireConnection;1073;146;1070;566
WireConnection;1073;148;1071;0
WireConnection;1073;178;1069;0
WireConnection;1076;146;1072;128
WireConnection;1077;146;1073;183
WireConnection;1077;385;1075;0
WireConnection;1077;371;1074;0
WireConnection;1078;146;1076;128
WireConnection;1079;0;1077;183
WireConnection;1080;0;1078;128
WireConnection;991;17;726;0
WireConnection;991;19;725;0
WireConnection;1010;0;991;21
WireConnection;1010;1;991;22
WireConnection;1010;5;991;77
WireConnection;1010;7;991;27
WireConnection;1010;8;991;26
WireConnection;1010;6;991;34
WireConnection;1010;9;991;28
WireConnection;1010;11;991;30
WireConnection;1010;12;991;32
WireConnection;1010;27;991;33
ASEEND*/
//CHKSM=C3E37FFE79BE4AC0EC7258F9F2DBF4EE54EEAB45
