// Made with Amplify Shader Editor v1.9.8.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit"
{
	Properties
	{
		[HideInInspector] _motion_highlight_color( "_motion_highlight_color", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _IsVersion( "_IsVersion", Float ) = 2070
		[HideInInspector] _IsTVEShader( "_IsTVEShader", Float ) = 1
		[HideInInspector] _IsShared( "_IsShared", Float ) = 0
		[HideInInspector] _IsIdentifier( "_IsIdentifier", Float ) = 0
		[HideInInspector] _IsCollected( "_IsCollected", Float ) = 0
		[HideInInspector] _IsConverted( "_IsConverted", Float ) = 0
		[HideInInspector] _IsCustomShader( "_IsCustomShader", Float ) = 0
		[HideInInspector] _MainTex( "Legacy MainTex", 2D ) = "white" {}
		[HideInInspector] _BumpMap( "Legacy BumpMap", 2D ) = "white" {}
		[HideInInspector] _Cutoff( "Legacy Cutoff", Float ) = 0.5
		[HideInInspector] _Color( "Legacy Color", Color ) = ( 0, 0, 0, 0 )
		[StyledCategory(Render Settings, true, 0, 10)] _RenderCategory( "[ Render Category ]", Float ) = 1
		[Enum(Opaque,0,Transparent,1)] _RenderMode( "Render Mode", Float ) = 0
		[Enum(Off,0,On,1)] _RenderZWrite( "Render ZWrite", Float ) = 1
		[Enum(Both,0,Back,1,Front,2)] _RenderCull( "Render Faces", Float ) = 2
		[HideInInspector] _render_normal( "_render_normal", Vector ) = ( 1, 1, 1, 0 )
		[HideInInspector] _RenderQueue( "Render Queue", Float ) = 0
		[HideInInspector] _RenderPriority( "Render Priority", Float ) = 0
		[HideInInspector] _RenderBakeGI( "Render BakeGI", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSSR( "Render SSR", Float ) = 0
		[Enum(Off,0,On,1)] _RenderDecals( "Render Decals", Float ) = 0
		[Enum(Auto,0,Off,1,On,2)] _RenderMotion( "Render Motion", Float ) = 0
		[Enum(Flip,0,Mirror,1,Same,2)] _RenderNormal( "Render Normals", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSpecular( "Render Specular", Float ) = 1
		[Enum(Off,0,On,1)] _RenderShadow( "Render Shadows", Float ) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)] _RenderFilter( "Render Filtering", Float ) = 0
		[Enum(Off,0,On,1)] _RenderClip( "Render Clipping", Float ) = 0
		[StyledSpace(10)] _RenderEnd( "[ Render End ]", Float ) = 1
		[HideInInspector] _NoiseTex3D( "Noise Mask 3D", 3D ) = "white" {}
		[HideInInspector] _NoiseTexSS( "Noise Mask SS", 2D ) = "white" {}
		[HideInInspector] _SpecColor( "Specular Color", Color ) = ( 1, 1, 1, 1 )
		[StyledCategory(Object Settings, true, 0, 10)] _ObjectCategory( "[ Object Category ]", Float ) = 1
		[StyledMessage(Info, Use the Object Height and Radius to remap the procedural height and spherical masks when used for motion., 0, 10)] _ObjectBoundsInfo( "# ObjectBoundsInfo", Float ) = 0
		[Enum(Legacy,0,Standard,1)] _ObjectModelMode( "Object Model Mode", Float ) = 1
		[Enum(Off,0,Baked,1,Procedural,2)] _ObjectPivotMode( "Object Pivots Mode", Float ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _ObjectPhaseMode( "Object Phase Mask", Float ) = 0
		_ObjectHeightValue( "Object Height Value", Range( 0, 40 ) ) = 1
		_ObjectRadiusValue( "Object Radius Value", Range( 0, 40 ) ) = 1
		[HideInInspector] _object_phase_mode( "_object_phase_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _ObjectEnd( "[ Object End ]", Float ) = 1
		[StyledCategory(Global Settings, true, 0, 10)] _GlobalCategory( "[ Global Category ]", Float ) = 1
		[StyledMessage(Info, Use the Pivots sliders to control if the global texture is sampled in world space or at pivot position or pivots positions when baked pivots are used., 0, 10)] _GlobalPivotInfo( "# GlobalPivotInfo", Float ) = 0
		[StyledEnum(Coat Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalCoatLayerValue( "Global Coat Layer", Float ) = 0
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalPaintLayerValue( "Global Paint Layer", Float ) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalAtmoLayerValue( "Global Atmo Layer", Float ) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFadeLayerValue( "Global Fade Layer", Float ) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalGlowLayerValue( "Global Glow Layer", Float ) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFormLayerValue( "Global Form Layer", Float ) = 0
		[StyledEnum(Flow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFlowLayerValue( "Global Flow Layer", Float ) = 0
		_GlobalCoatPivotValue( "Global Coat Pivots", Range( 0, 1 ) ) = 0
		_GlobalPaintPivotValue( "Global Paint Pivots", Range( 0, 1 ) ) = 0
		_GlobalAtmoPivotValue( "Global Atmo Pivots", Range( 0, 1 ) ) = 0
		_GlobalFadePivotValue( "Global Fade Pivots", Range( 0, 1 ) ) = 0
		_GlobalGlowPivotValue( "Global Glow Pivots", Range( 0, 1 ) ) = 0
		_GlobalFormPivotValue( "Global Form Pivots", Range( 0, 1 ) ) = 1
		_GlobalFlowPivotValue( "Global Flow Pivots", Range( 0, 1 ) ) = 1
		[StyledSpace(10)] _GlobalEnd( "[ Global End ]", Float ) = 1
		[StyledCategory(Main Settings, true, 0, 10)] _MainCategory( "[Main Category ]", Float ) = 1
		[StyledMessage(Info, Use the Multi Mask remap sliders to mask out the leaves when using Dual Colors or for Global Effects. The mask is stored in the Shader texture blue channel. , 0, 10)] _MainMultiMaskInfo( "# MainMultiMaskInfo", Float ) = 0
		[StyledTextureSingleLine] _MainAlbedoTex( "Main Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _MainNormalTex( "Main Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _MainShaderTex( "Main Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _MainSampleMode( "Main Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _MainCoordMode( "Main UV Mode", Float ) = 0
		[StyledVector(9)] _MainCoordValue( "Main UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _main_coord_value( "_main_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _MainColorMode( "Main Color", Float ) = 0
		[HDR] _MainColor( "Main Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _MainColorTwo( "Main ColorB", Color ) = ( 1, 1, 1, 1 )
		_MainAlphaClipValue( "Main Alpha", Range( 0, 1 ) ) = 0.5
		_MainAlbedoValue( "Main Albedo", Range( 0, 1 ) ) = 1
		_MainNormalValue( "Main Normal", Range( -8, 8 ) ) = 1
		_MainMetallicValue( "Main Metallic", Range( 0, 1 ) ) = 0
		_MainOcclusionValue( "Main Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _MainOcclusionRemap( "Main Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _MainMultiRemap( "Main Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_MainSmoothnessValue( "Main Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _MainSmoothnessRemap( "Main Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _MainEnd( "[Main End ]", Float ) = 1
		[StyledCategory(Layer Settings, true, 0, 10)] _LayerCategory( "[ Layer Category ]", Float ) = 1
		_SecondIntensityValue( "Layer Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _SecondBakeMode( "Layer Baking", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _SecondAlbedoTex( "Layer Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _SecondNormalTex( "Layer Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _SecondShaderTex( "Layer Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _SecondSampleMode( "Layer Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _SecondCoordMode( "Layer UV Mode", Float ) = 0
		[StyledVector(9)] _SecondCoordValue( "Layer UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _SecondColorMode( "Layer Color", Float ) = 0
		[HDR] _SecondColor( "Layer Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _SecondColorTwo( "Layer ColorB", Color ) = ( 1, 1, 1, 1 )
		_SecondAlphaClipValue( "Layer Alpha", Range( 0, 1 ) ) = 0.5
		_SecondAlbedoValue( "Layer Albedo", Range( 0, 1 ) ) = 1
		_SecondNormalValue( "Layer Normal", Range( -8, 8 ) ) = 1
		_SecondMetallicValue( "Layer Metallic", Range( 0, 1 ) ) = 0
		_SecondOcclusionValue( "Layer Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondOcclusionRemap( "Layer Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _SecondMultiRemap( "Layer Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_SecondSmoothnessValue( "Layer Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondSmoothnessRemap( "Layer Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _SecondBlendIntensityValue( "Layer Blend Intensity", Range( 0, 1 ) ) = 1
		_SecondBlendAlbedoValue( "Layer Blend Albedos", Range( 0, 1 ) ) = 0
		_SecondBlendNormalValue( "Layer Blend Normals", Range( 0, 1 ) ) = 0
		_SecondBlendShaderValue( "Layer Blend Shaders", Range( 0, 1 ) ) = 0
		[Space(10)][StyledTextureSingleLine] _SecondMaskTex( "Layer Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)] _SecondMaskSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _SecondMaskCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(9)] _SecondMaskCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		_SecondGlobalValue( "Layer Coat Mask", Range( 0, 1 ) ) = 1
		_SecondMaskValue( "Layer TexB Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _SecondMaskRemap( "Layer TexB Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondLumaValue( "Layer Luma Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondLumaRemap( "Layer Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondProjValue( "Layer ProjY Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _SecondProjRemap( "Layer ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_SecondMeshValue( "Layer Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _SecondMeshMode( "Layer Mesh Mask", Float ) = 2
		[StyledRemapSlider] _SecondMeshRemap( "Layer Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _SecondBlendRemap( "Layer Blend Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _SecondElementMode( "Use Coat Elements", Float ) = 0
		[StyledSpace(10)] _LayerEnd( "[ Layer End ]", Float ) = 1
		[HideInInspector] _second_coord_value( "_second_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _second_vert_mode( "_second_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _second_mask_coord_value( "_second_mask_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledCategory(Detail Settings, true, 0, 10)] _DetailCategory( "[ Detail Category ]", Float ) = 1
		_ThirdIntensityValue( "Detail Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _ThirdBakeMode( "Detail Baking", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _ThirdAlbedoTex( "Detail Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _ThirdNormalTex( "Detail Normal", 2D ) = "bump" {}
		[StyledTextureSingleLine] _ThirdShaderTex( "Detail Shader", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)] _ThirdSampleMode( "Detail Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _ThirdCoordMode( "Detail UV Mode", Float ) = 0
		[StyledVector(9)] _ThirdCoordValue( "Detail UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Enum(Constant,0,Dual Colors,1)] _ThirdColorMode( "Detail Color", Float ) = 0
		[HDR] _ThirdColor( "Detail Color", Color ) = ( 1, 1, 1, 1 )
		[HDR] _ThirdColorTwo( "Detail ColorB", Color ) = ( 1, 1, 1, 1 )
		_ThirdAlphaClipValue( "Detail Alpha", Range( 0, 1 ) ) = 0.5
		_ThirdAlbedoValue( "Detail Albedo", Range( 0, 1 ) ) = 1
		_ThirdNormalValue( "Detail Normal", Range( -8, 8 ) ) = 1
		_ThirdMetallicValue( "Detail Metallic", Range( 0, 1 ) ) = 0
		_ThirdOcclusionValue( "Detail Occlusion", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdOcclusionRemap( "Detail Occlusion", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _ThirdMultiRemap( "Detail Multi Mask", Vector ) = ( 0, 0, 0, 0 )
		_ThirdSmoothnessValue( "Detail Smoothness", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdSmoothnessRemap( "Detail Smoothness", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _ThirdBlendIntensityValue( "Detail Blend Intensity", Range( 0, 1 ) ) = 1
		_ThirdBlendAlbedoValue( "Detail Blend Albedos", Range( 0, 1 ) ) = 0
		_ThirdBlendNormalValue( "Detail Blend Normals", Range( 0, 1 ) ) = 0
		_ThirdBlendShaderValue( "Detail Blend Shaders", Range( 0, 1 ) ) = 0
		[Space(10)][StyledTextureSingleLine] _ThirdMaskTex( "Detail Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)] _ThirdMaskSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _ThirdMaskCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(9)] _ThirdMaskCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		_ThirdGlobalValue( "Detail Coat Mask", Range( 0, 1 ) ) = 1
		_ThirdMaskValue( "Detail TexG Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _ThirdMaskRemap( "Detail TexG Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdLumaValue( "Detail Luma Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdLumaRemap( "Detail Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdProjValue( "Detail ProjY Mask", Range( 0, 1 ) ) = 0
		[StyledRemapSlider] _ThirdProjRemap( "Detail ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_ThirdMeshValue( "Detail Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _ThirdMeshMode( "Detail Mesh Mask", Float ) = 1
		[StyledRemapSlider] _ThirdMeshRemap( "Detail Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _ThirdBlendRemap( "Detail Blend Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _ThirdElementMode( "Use Coat Elements", Float ) = 0
		[HideInInspector] _third_coord_value( "_third_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _third_vert_mode( "_third_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _third_mask_coord_value( "_third_mask_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _DetailEnd( "[ Detail End ]", Float ) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)] _OcclusionCategory( "[ Occlusion Category ]", Float ) = 1
		_OcclusionIntensityValue( "Occlusion Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _OcclusionBakeMode( "Occlusion Baking", Float ) = 1
		[HDR] _OcclusionColorOne( "Occlusion ColorA", Color ) = ( 1, 1, 1, 1 )
		[HDR] _OcclusionColorTwo( "Occlusion ColorB", Color ) = ( 0.25, 0.25, 0.25, 1 )
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)] _OcclusionMeshMode( "Occlusion Mesh Mask", Float ) = 1
		[StyledRemapSlider] _OcclusionMeshRemap( "Occlusion Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _OcclusionEnd( "[ Occlusion End ]", Float ) = 1
		[HideInInspector] _occlusion_vert_mode( "_occlusion_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Gradient Settings, true, 0, 10)] _GradientCategory( "[ Gradient Category ]", Float ) = 1
		_GradientIntensityValue( "Gradient Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _GradientBakeMode( "Gradient Baking", Float ) = 1
		[HDR] _GradientColorOne( "Gradient ColorA", Color ) = ( 1, 0.6135602, 0, 1 )
		[HDR] _GradientColorTwo( "Gradient ColorB", Color ) = ( 0.754717, 0.0389044, 0.03203986, 1 )
		[Space(10)] _GradientMultiValue( "Gradient Multi Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _GradientMeshMode( "Gradient Mesh Mask", Float ) = 3
		[StyledRemapSlider] _GradientMeshRemap( "Gradient Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledSpace(10)] _GradientEnd( "[ Gradient End ]", Float ) = 1
		[HideInInspector] _gradient_vert_mode( "_gradient_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Variation Settings, true, 0, 10)] _VariationCategory( "[ Variation Category ]", Float ) = 1
		_VariationIntensityValue( "Variation Intensity", Range( 0, 1 ) ) = 0
		[HDR] _VariationColorOne( "Variation ColorA", Color ) = ( 0.4573758, 0.6226415, 0.2144001, 1 )
		[HDR] _VariationColorTwo( "Variation ColorB", Color ) = ( 0.7450981, 0.5238863, 0.1098039, 1 )
		[Space(10)] _VariationMultiValue( "Variation Multi Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider()] _VariationNoiseRemap( "Variation Noise Mask", Vector ) = ( 0, 1, 0, 0 )
		_VariationNoiseTillingValue( "Variation Noise Tilling", Range( 0, 100 ) ) = 10
		_VariationNoisePivotValue( "Variation Noise Pivots", Range( 0, 1 ) ) = 0
		[StyledSpace(10)] _VariationEnd( "[ Variation End ]", Float ) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)] _TintingCategory( "[ Tinting Category ]", Float ) = 1
		_TintingIntensityValue( "Tinting Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _TintingBakeMode( "Tinting Baking", Float ) = 0
		_TintingGrayValue( "Tinting Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _TintingColor( "Tinting Color", Color ) = ( 1, 1, 1, 1 )
		[StyledSpace(10)] _TintingSpace( "[ Tinting Space ]", Float ) = 1
		_TintingGlobalValue( "Tinting Paint Mask", Range( 0, 1 ) ) = 1
		_TintingMultiValue( "Tinting Multi Mask", Range( 0, 1 ) ) = 1
		_TintingLumaValue( "Tinting Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _TintingLumaRemap( "Tinting Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_TintingMeshValue( "Tinting Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _TintingMeshMode( "Tinting Mesh Mask", Float ) = 3
		[StyledRemapSlider] _TintingMeshRemap( "Tinting Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _TintingBlendRemap( "Tinting Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _TintingElementMode( "Use Paint Elements", Float ) = 0
		[StyledSpace(10)] _TintingEnd( "[ Tinting End]", Float ) = 1
		[HideInInspector] _tinting_vert_mode( "_tinting_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Dryness Settings, true, 0, 10)] _DrynessCategory( "[ Dryness Category ]", Float ) = 1
		_DrynessIntensityValue( "Dryness Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _DrynessBakeMode( "Dryness Baking", Float ) = 0
		_DrynessGrayValue( "Dryness Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _DrynessColor( "Dryness Color", Color ) = ( 1, 0.7083712, 0.495283, 1 )
		_DrynessSubsurfaceValue( "Dryness Subsurface", Range( 0, 1 ) ) = 0.5
		_DrynessSmoothnessValue( "Dryness Smoothness", Range( 0, 1 ) ) = 0.5
		[StyledSpace(10)] _DrynessSpace( "[ Dryness Space ]", Float ) = 1
		_DrynessGlobalValue( "Dryness Atmo Mask", Range( 0, 1 ) ) = 1
		_DrynessMultiValue( "Dryness Multi Mask", Range( 0, 1 ) ) = 1
		_DrynessLumaValue( "Dryness Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _DrynessLumaRemap( "Dryness Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_DrynessMeshValue( "Dryness Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _DrynessMeshMode( "Dryness Mesh Mask", Float ) = 3
		[StyledRemapSlider] _DrynessMeshRemap( "Dryness Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _DrynessBlendRemap( "Dryness Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _DrynessElementMode( "Use Atmo Elements", Float ) = 0
		[StyledSpace(10)] _DrynessEnd( "[ Dryness End ]", Float ) = 1
		[HideInInspector] _dryness_vert_mode( "_dryness_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledCategory(Overlay Settings, true, 0, 10)] _OverlayCategory( "[ Overlay Category ]", Float ) = 1
		_OverlayIntensityValue( "Overlay Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _OverlayBakeMode( "Overlay Baking", Float ) = 0
		[Enum(Off,0,On,1)] _OverlayTextureMode( "Overlay Maps", Float ) = 0
		[Space(10)][StyledTextureSingleLine] _OverlayAlbedoTex( "Overlay Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _OverlayNormalTex( "Overlay Normal", 2D ) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)] _OverlaySampleMode( "Overlay Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _OverlayCoordMode( "Overlay UV Mode", Float ) = 0
		[StyledVector(9)] _OverlayCoordValue( "Overlay UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HDR] _OverlayColor( "Overlay Color", Color ) = ( 0.2815503, 0.4009458, 0.5377358, 1 )
		_OverlayNormalValue( "Overlay Normal", Range( -8, 8 ) ) = 1
		_OverlaySubsurfaceValue( "Overlay Subsurface", Range( 0, 1 ) ) = 0.5
		_OverlaySmoothnessValue( "Overlay Smoothness", Range( 0, 1 ) ) = 0.5
		[Space(10)][StyledTextureSingleLine] _OverlayGlitterTexRT( "Overlay Glitter RT", 2D ) = "black" {}
		[Space(10)] _OverlayGlitterIntensityValue( "Overlay Glitter Intensity", Range( 0, 1 ) ) = 0
		[HDR] _OverlayGlitterColor( "Overlay Glitter Color", Color ) = ( 0.7215686, 1.913725, 2.996078, 1 )
		_OverlayGlitterTillingValue( "Overlay Glitter Tilling", Range( 0, 8 ) ) = 4
		_OverlayGlitterDistValue( "Overlay Glitter Limit", Range( 0, 200 ) ) = 100
		[StyledSpace(10)] _OverlaySpace( "[ Overlay Space ]", Float ) = 1
		_OverlayGlobalValue( "Overlay Atmo Mask", Range( 0, 1 ) ) = 1
		_OverlayLumaValue( "Overlay Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _OverlayLumaRemap( "Overlay Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayProjValue( "Overlay ProjY Mask", Range( 0, 1 ) ) = 0.5
		[StyledRemapSlider] _OverlayProjRemap( "Overlay ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayMeshValue( "Overlay Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _OverlayMeshMode( "Overlay Mesh Mask", Float ) = 1
		[StyledRemapSlider] _OverlayMeshRemap( "Overlay Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _OverlayBlendRemap( "Overlay Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _OverlayElementMode( "Use Atmo Elements", Float ) = 0
		[HideInInspector] _overlay_vert_mode( "_overlay_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _overlay_coord_value( "_overlay_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _OverlayEnd( "[ Overlay End ]", Float ) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)] _WetnessCategory( "[ Wetness Category ]", Float ) = 1
		_WetnessIntensityValue( "Wetness Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _WetnessBakeMode( "Wetness Baking", Float ) = 0
		_WetnessContrastValue( "Wetness Contrast", Range( 0, 1 ) ) = 0.2
		_WetnessSmoothnessValue( "Wetness Smoothness", Range( 0, 1 ) ) = 0.8
		[Space(10)] _WetnessGlobalValue( "Wetness Atmo Mask", Range( 0, 1 ) ) = 1
		_WetnessMeshValue( "Wetness Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessMeshMode( "Wetness Mesh Mask", Float ) = 0
		[StyledRemapSlider] _WetnessMeshRemap( "Wetness Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _WetnessWaterIntensityValue( "Wetness Water Intensity", Range( 0, 1 ) ) = 0
		[HDR] _WetnessWaterColor( "Wetness Water Color", Color ) = ( 0.5420078, 0.7924528, 0.6068289, 1 )
		_WetnessWaterBaseValue( "Wetness Water Base Mask", Range( 0, 1 ) ) = 1
		_WetnessWaterMeshValue( "Wetness Water Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessWaterMeshMode( "Wetness Water Mesh Mask", Float ) = 1
		[StyledRemapSlider] _WetnessWaterMeshRemap( "Wetness Water Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _WetnessWaterBlendRemap( "Wetness Water Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledTextureSingleLine] _WetnessDropsTexRT( "Wetness Drops RT", 2D ) = "white" {}
		[Space(10)] _WetnessDropsIntensityValue( "Wetness Drops Intensity", Range( 0, 1 ) ) = 1
		_WetnessDropsNormalValue( "Wetness Drops Normal", Range( -8, 8 ) ) = 1
		_WetnessDropsTillingValue( "Wetness Drops Tilling", Range( 0, 8 ) ) = 0.25
		_WetnessDropsDistValue( "Wetness Drops Limit", Range( 0, 200 ) ) = 50
		_WetnessDropsMeshValue( "Wetness Drops Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _WetnessDropsMeshMode( "Wetness Drops Mesh Mask", Float ) = 2
		[StyledRemapSlider] _WetnessDropsMeshRemap( "Wetness Drops Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _WetnessElementMode( "Use Atmo Elements", Float ) = 0
		[HideInInspector] _wetness_water_vert_mode( "_wetness_water_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _wetness_vert_mode( "_wetness_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _wetness_drops_vert_mode( "_wetness_drops_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _WetnessEnd( "[ Wetness End ]", Float ) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)] _CutoutCategory( "[ Cutout Category ]", Float ) = 1
		_CutoutIntensityValue( "Cutout Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _CutoutBakeMode( "Cutout Baking", Float ) = 0
		[StyledSpace(10)] _CutoutSpace( "[ Cutout Space ]", Float ) = 1
		_CutoutGlobalValue( "Cutout Fade Mask", Range( 0, 1 ) ) = 1
		_CutoutMultiValue( "Cutout Multi Mask", Range( 0, 1 ) ) = 1
		_CutoutAlphaValue( "Cutout Alpha Mask", Range( 0, 1 ) ) = 0
		_CutoutMeshValue( "Cutout Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _CutoutMeshMode( "Cutout Mesh Mask", Float ) = 0
		[StyledRemapSlider] _CutoutMeshRemap( "Cutout Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		_CutoutNoiseValue( "Cutout Noise Mask", Range( 0, 1 ) ) = 1
		_CutoutNoiseTillingValue( "Cutout Noise Tilling", Range( 0, 100 ) ) = 50
		[Space(10)][StyledToggle] _CutoutElementMode( "Use Fade Elements", Float ) = 0
		[HideInInspector] _cutout_vert_mode( "_cutout_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _CutoutEnd( "[ Cutout End ]", Float ) = 1
		[StyledCategory(Dither Settings, true, 0, 10)] _DitherCategory( "[ Dither Category ]", Float ) = 1
		_DitherConstantValue( "Dither Constant", Range( 0, 1 ) ) = 0
		_DitherProximityValue( "Dither Proximity", Range( 0, 1 ) ) = 0
		_DitherProximityMinValue( "Dither Proximity Start", Range( 0, 40 ) ) = 0
		_DitherProximityMaxValue( "Dither Proximity Limit", Range( 0, 40 ) ) = 1
		_DitherDistanceValue( "Dither Distance", Range( 0, 1 ) ) = 0
		_DitherDistanceMinValue( "Dither Distance Start", Range( 0, 1000 ) ) = 0
		_DitherDistanceMaxValue( "Dither Distance Limit", Range( 0, 1000 ) ) = 0
		_DitherGlancingValue( "Dither Glancing", Range( 0, 1 ) ) = 0
		_DitherGlancingAngleValue( "Dither Glanging Angle", Range( 0, 8 ) ) = 1
		[Space(10)] _DitherMultiValue( "Dither Multi Mask", Range( 0, 1 ) ) = 0
		_DitherNoiseTillingValue( "Dither Noise Tilling", Range( 0, 100 ) ) = 50
		[StyledSpace(10)] _DitherEnd( "[ Dither End ]", Float ) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)] _EmissiveCategory( "[ Emissive Category ]", Float ) = 1
		_EmissiveIntensityValue( "Emissive Intensity", Range( 0, 1 ) ) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)] _EmissiveFlagMode( "Emissive GI Mode", Float ) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)] _EmissiveColorMode( "Emissive Color", Float ) = 0
		[HDR] _EmissiveColor( "Emissive Color", Color ) = ( 1, 1, 1, 1 )
		[Enum(Nits,0,EV100,1)] _EmissivePowerMode( "Emissive Value", Float ) = 0
		_EmissivePowerValue( "Emissive Value", Float ) = 1
		[Space(10)][StyledTextureSingleLine] _EmissiveMaskTex( "Emissive Mask", 2D ) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)] _EmissiveSampleMode( "Mask Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _EmissiveCoordMode( "Mask UV Mode", Float ) = 0
		[StyledVector(18)] _EmissiveCoordValue( "Mask UV Value", Vector ) = ( 1, 1, 0, 0 )
		[Space(10)] _EmissiveGlobalValue( "Emissive Glow Mask", Range( 0, 1 ) ) = 1
		_EmissiveMaskValue( "Emissive TexR Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _EmissiveMaskRemap( "Emissive TexR Mask", Vector ) = ( 0, 1, 0, 0 )
		_EmissiveMeshValue( "Emissive Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _EmissiveMeshMode( "Emissive Mesh Mask", Float ) = 0
		[StyledRemapSlider] _EmissiveMeshRemap( "Emissive Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)][StyledToggle] _EmissiveElementMode( "Use Glow Elements", Float ) = 0
		[StyledSpace(10)] _EmissiveEnd( "[ Emissive End ]", Float ) = 1
		[HideInInspector] _emissive_power_value( "_emissive_power_value", Float ) = 1
		[HideInInspector] _emissive_vert_mode( "_emissive_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _emissive_coord_value( "_emissive_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledCategory(Subsurface Settings, true, 0, 10)] _SubsurfaceCategory( "[ Subsurface Category ]", Float ) = 1
		[StyledMessage(Info, When using Standard Lit shaders__ the Subsurface feature is an approximation effect designed to work in deferred rendering path., 0, 10)] _SubsurfaceAproxInfo( "# Subsurface Aprox Info", Float ) = 0
		[DiffusionProfile] _SubsurfaceDiffusion( "Subsurface Diffusion", Float ) = 0
		[HideInInspector] _SubsurfaceDiffusion_Asset( "Subsurface Diffusion", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _SubsurfaceSpace( "# SubsurfaceSpace", Float ) = 0
		_SubsurfaceIntensityValue( "Subsurface Intensity", Range( 0, 1 ) ) = 0
		[HDR] _SubsurfaceColor( "Subsurface Color", Color ) = ( 1, 1, 1, 1 )
		_SubsurfaceScatteringValue( "Subsurface Value", Range( 0, 16 ) ) = 2
		_SubsurfaceAngleValue( "Subsurface Angle", Range( 1, 16 ) ) = 8
		_SubsurfaceDirectValue( "Subsurface Direct", Range( 0, 1 ) ) = 1
		_SubsurfaceNormalValue( "Subsurface Normal", Range( 0, 1 ) ) = 0
		_SubsurfaceAmbientValue( "Subsurface Ambient", Range( 0, 1 ) ) = 0.2
		_SubsurfaceShadowValue( "Subsurface Shadow", Range( 0, 1 ) ) = 1
		[Space(10)] _SubsurfaceGlobalValue( "Subsurface Glow Mask", Range( 0, 1 ) ) = 1
		_SubsurfaceMultiValue( "Subsurface Multi Mask", Range( 0, 1 ) ) = 1
		[Space(10)][StyledToggle] _SubsurfaceElementMode( "Use Glow Elements", Float ) = 0
		[StyledSpace(10)] _SubsurfaceEnd( "[ Subsurface End ]", Float ) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)] _PerspectiveCategory( "[ Perspective Category ]", Float ) = 1
		_PerspectiveIntensityValue( "Perspective Intensity", Range( 0, 10 ) ) = 0
		_PerspectivePhaseValue( "Perspective Phase", Range( 0, 1 ) ) = 0
		_PerspectiveAngleValue( "Perspective Angle", Range( 0, 8 ) ) = 1
		[StyledSpace(10)] _PerspectiveEnd( "[ Perspective End ]", Float ) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)] _SizeFadeCategory( "[ Size Fade Category ]", Float ) = 1
		_SizeFadeIntensityValue( "Size Fade Intensity", Range( 0, 1 ) ) = 0
		[Enum(All Axis,0,Up Axis,1)] _SizeFadeScaleMode( "Size Fade Mode", Float ) = 0
		_SizeFadeScaleValue( "Size Fade Value", Range( 0, 1 ) ) = 1
		_SizeFadeDistMinValue( "Size Fade Start", Range( 0, 1000 ) ) = 0
		_SizeFadeDistMaxValue( "Size Fade Limit", Range( 0, 1000 ) ) = 0
		[Space(10)] _SizeFadeGlobalValue( "Size Fade Form Mask", Range( 0, 1 ) ) = 1
		[Space(10)][StyledToggle] _SizeFadeElementMode( "Use Form Elements", Float ) = 0
		[StyledSpace(10)] _SizeFadeEnd( "[ Size Fade End ]", Float ) = 1
		[StyledCategory(Motion Settings, true, 0, 10)] _MotionCategory( "[ Motion Category ]", Float ) = 1
		[StyledMessage(Info, The Interaction features require elements to work. Use Flow elements to add interaction and use the Push Mask slider to control the interaction amount per motion layer., 0, 10)] _MotionPushInfo( "# Message Push", Float ) = 0
		[NoScaleOffset][StyledTextureSingleLine] _MotionNoiseTex( "Motion Texture", 2D ) = "white" {}
		[Space(10)] _MotionIntensityValue( "Motion Intensity", Range( 0, 1 ) ) = 1
		_MotionDistValue( "Motion Details Limit", Range( 0, 1000 ) ) = 100
		[Space(10)] _MotionBaseIntensityValue( "Motion Primary Intensity", Range( 0, 10 ) ) = 0
		_MotionBaseDelayValue( "Motion Primary Delay", Range( 0, 1 ) ) = 0
		_MotionBaseNoiseValue( "Motion Primary Noise", Range( 0, 1 ) ) = 0.5
		_MotionBasePivotValue( "Motion Primary Pivots", Range( 0, 1 ) ) = 0.8
		_MotionBasePhaseValue( "Motion Primary Phase", Range( 0, 1 ) ) = 0
		_MotionBaseTillingValue( "Motion Primary Tilling", Range( 0, 100 ) ) = 5
		_MotionBaseSpeedValue( "Motion Primary Speed", Range( 0, 50 ) ) = 5
		_MotionBasePushValue( "Motion Primary Push Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionBaseMaskMode( "Motion Primary Anim Mask", Float ) = 3
		[StyledRemapSlider] _MotionBaseMaskRemap( "Motion Primary Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionSmallIntensityValue( "Motion Second Intensity", Range( 0, 10 ) ) = 0
		_MotionSmallDelayValue( "Motion Second Delay", Range( 0, 1 ) ) = 0
		_MotionSmallNoiseValue( "Motion Second Noise", Range( 0, 1 ) ) = 0.5
		_MotionSmallPivotValue( "Motion Second Pivots", Range( 0, 1 ) ) = 0.2
		_MotionSmallPhaseValue( "Motion Second Phase", Range( 0, 1 ) ) = 0
		_MotionSmallTillingValue( "Motion Second Tilling", Range( 0, 100 ) ) = 5
		_MotionSmallSpeedValue( "Motion Second Speed", Range( 0, 50 ) ) = 5
		_MotionSmallPushValue( "Motion Second Push Mask", Range( 0, 1 ) ) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionSmallMaskMode( "Motion Second Anim Mask", Float ) = 1
		[StyledRemapSlider] _MotionSmallMaskRemap( "Motion Second Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionTinyIntensityValue( "Motion Leaves Intensity", Range( 0, 10 ) ) = 0
		_MotionTinyNoiseValue( "Motion Leaves Noise", Range( 0, 1 ) ) = 1
		_MotionTinyTillingValue( "Motion Leaves Tilling", Range( 0, 100 ) ) = 50
		_MotionTinySpeedValue( "Motion Leaves Speed", Range( 0, 50 ) ) = 10
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)] _MotionTinyMaskMode( "Motion Leaves Anim Mask", Float ) = 2
		[StyledRemapSlider] _MotionTinyMaskRemap( "Motion Leaves Anim Mask", Vector ) = ( 0, 1, 0, 0 )
		[Space(10)] _MotionHighlightValue( "Motion Ripples Intensity", Range( 0, 1 ) ) = 0
		[HDR] _MotionHighlightColor( "Motion Ripples Color", Color ) = ( 1, 1, 1, 1 )
		[Space(10)][StyledToggle] _MotionElementMode( "Use Flow Elements", Float ) = 0
		[StyledSpace(10)] _MotionWindEnd( "[ Motion Wind End ]", Float ) = 1
		[HideInInspector] _motion_base_mask_mode( "_motion_base_mask_mode", Float ) = 0
		[HideInInspector] _motion_base_vert_mode( "_motion_base_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_base_proc_mode( "_motion_base_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_mask_mode( "_motion_small_mask_mode", Float ) = 0
		[HideInInspector] _motion_small_vert_mode( "_motion_small_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_proc_mode( "_motion_small_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_tiny_mask_mode( "_motion_tiny_mask_mode", Float ) = 0
		[HideInInspector] _motion_tiny_vert_mode( "_motion_tiny_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_tiny_proc_mode( "_motion_tiny_proc_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _motion_small_mode( "_motion_small_mode", Float ) = 0
		[StyledCategory(Normal Settings, true, 0, 10)] _NormalCategory( "[ Normal Category ]", Float ) = 1
		_NormalFlattenValue( "Normal Flattening", Range( 0, 1 ) ) = 0
		_NormalSphereValue( "Normal Spherical", Range( 0, 1 ) ) = 0
		[StyledVector(18)] _NormalSphereOffsetValue( "Normal Spherical Offset", Vector ) = ( 0, 0, 0, 0 )
		_NormalComputeValue( "Normal Compute", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Bake Settings To Textures,1)] _NormalBakeMode( "Normal Baking", Float ) = 1
		[StyledSpace(10)] _NormalSpace( "[ Normal Space ]", Float ) = 1
		_NormalMeshValue( "Normal Mesh Mask", Range( 0, 1 ) ) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)] _NormalMeshMode( "Normal Mesh Mask", Float ) = 2
		[StyledRemapSlider] _NormalMeshRemap( "Normal Mesh Mask", Vector ) = ( 0, 1, 0, 0 )
		[HideInInspector] _normal_vert_mode( "_normal_vert_mode", Vector ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _NormalEnd( "[ Normal End ]", Float ) = 1
		[HideInInspector] _render_cull( "_render_cull", Float ) = 0
		[HideInInspector] _render_src( "_render_src", Float ) = 1
		[HideInInspector] _render_dst( "_render_dst", Float ) = 0
		[HideInInspector] _render_zw( "_render_zw", Float ) = 1
		[HideInInspector] _render_coverage( "_render_coverage", Float ) = 0
		[HideInInspector] _IsGeneralShader( "_IsGeneralShader", Float ) = 1
		[HideInInspector] _IsSimpleShader( "_IsSimpleShader", Float ) = 1

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		//_TransStrength( "Trans Strength", Range( 0, 50 ) ) = 1
		//_TransNormal( "Trans Normal Distortion", Range( 0, 1 ) ) = 0.5
		//_TransScattering( "Trans Scattering", Range( 1, 50 ) ) = 2
		//_TransDirect( "Trans Direct", Range( 0, 1 ) ) = 0.9
		//_TransAmbient( "Trans Ambient", Range( 0, 1 ) ) = 0.1
		//_TransShadow( "Trans Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		

		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA

		

		Blend [_render_src] [_render_dst]
		

		CGINCLUDE
			#pragma target 4.5

			float4 FixedTess( float tessValue )
			{
				return tessValue;
			}

			float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
			{
				float3 wpos = mul(o2w,vertex).xyz;
				float dist = distance (wpos, cameraPos);
				float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
				return f;
			}

			float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
			{
				float4 tess;
				tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
				tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
				tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
				tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
				return tess;
			}

			float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
			{
				float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
				float len = distance(wpos0, wpos1);
				float f = max(len * scParams.y / (edgeLen * dist), 1.0);
				return f;
			}

			float DistanceFromPlane (float3 pos, float4 plane)
			{
				float d = dot (float4(pos,1.0f), plane);
				return d;
			}

			bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
			{
				float4 planeTest;
				planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
				planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
				planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
				planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
							  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
				return !all (planeTest);
			}

			float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
			{
				float3 f;
				f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
				f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
				f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

				return CalcTriEdgeTessFactors (f);
			}

			float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
			{
				float3 pos0 = mul(o2w,v0).xyz;
				float3 pos1 = mul(o2w,v1).xyz;
				float3 pos2 = mul(o2w,v2).xyz;
				float4 tess;
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
				return tess;
			}

			float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
			{
				float3 pos0 = mul(o2w,v0).xyz;
				float3 pos1 = mul(o2w,v1).xyz;
				float3 pos2 = mul(o2w,v2).xyz;
				float4 tess;

				if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
				{
					tess = 0.0f;
				}
				else
				{
					tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
					tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
					tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
					tess.w = (tess.x + tess.y + tess.z) / 3.0f;
				}
				return tess;
			}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
				#define ASE_GEOMETRY 1
				#define ASE_FRAGMENT_NORMAL 0
				#define ASE_NEEDS_FRAG_SHADOWCOORDS
				#pragma shader_feature_local_fragment _SPECULARHIGHLIGHTS_OFF
				#pragma multi_compile_instancing
				#pragma multi_compile __ LOD_FADE_CROSSFADE
				#pragma multi_compile_fog
				#define _SPECULAR_SETUP 1
				#define ASE_LIGHTING_SIMPLE 1
				#define _ENVIRONMENTREFLECTIONS_OFF 1
				#define ASE_ABSOLUTE_VERTEX_POS 1
				#define ASE_VERSION 19802
				#define ASE_USING_SAMPLING_MACROS 1

				#pragma vertex vert
				#pragma fragment frag
				#pragma multi_compile_fwdbase
				#ifndef UNITY_PASS_FORWARDBASE
					#define UNITY_PASS_FORWARDBASE
				#endif
				#include "HLSLSupport.cginc"
				#ifdef ASE_GEOMETRY
					#ifndef UNITY_INSTANCED_LOD_FADE
						#define UNITY_INSTANCED_LOD_FADE
					#endif
					#ifndef UNITY_INSTANCED_SH
						#define UNITY_INSTANCED_SH
					#endif
					#ifndef UNITY_INSTANCED_LIGHTMAPSTS
						#define UNITY_INSTANCED_LIGHTMAPSTS
					#endif
				#endif
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				#include "UnityPBSLighting.cginc"
				#include "AutoLight.cginc"

				#include "UnityStandardBRDF.cginc"
				#define ASE_NEEDS_VERT_POSITION
				#define ASE_NEEDS_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_NORMAL
				#define ASE_NEEDS_VERT_TANGENT
				#define ASE_NEEDS_TEXTURE_COORDINATES0
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
				#define ASE_NEEDS_TEXTURE_COORDINATES2
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
				#define ASE_NEEDS_WORLD_NORMAL
				#define ASE_NEEDS_FRAG_WORLD_NORMAL
				#define ASE_NEEDS_WORLD_TANGENT
				#define ASE_NEEDS_FRAG_WORLD_TANGENT
				#define ASE_NEEDS_WORLD_BITANGENT
				#define ASE_NEEDS_FRAG_WORLD_BITANGENT
				#define ASE_NEEDS_WORLD_POSITION
				#define ASE_NEEDS_FRAG_WORLD_POSITION
				#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
				#pragma shader_feature_local_vertex TVE_SIZEFADE
				#pragma shader_feature_local_vertex TVE_PERSPECTIVE
				#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
				#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
				#pragma shader_feature_local_vertex TVE_MOTION
				#pragma shader_feature_local TVE_LEGACY
				#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
				#pragma shader_feature_local_vertex TVE_NORMAL
				#pragma shader_feature_local_fragment TVE_SUBSURFACE
				#pragma shader_feature_local_fragment TVE_WETNESS
				#pragma shader_feature_local_fragment TVE_OVERLAY
				#pragma shader_feature_local_fragment TVE_MOTION
				#pragma shader_feature_local_fragment TVE_DRYNESS
				#pragma shader_feature_local_fragment TVE_TINTING
				#pragma shader_feature_local_fragment TVE_VARIATION
				#pragma shader_feature_local_fragment TVE_GRADIENT
				#pragma shader_feature_local_fragment TVE_OCCLUSION
				#pragma shader_feature_local_fragment TVE_THIRD
				#pragma shader_feature_local_fragment TVE_SECOND
				#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
				#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
				#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
				#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
				#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
				#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
				#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_WATER
				#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
				#pragma shader_feature_local_fragment TVE_CUTOUT
				#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
				#pragma shader_feature_local_fragment TVE_DITHER
				#pragma shader_feature_local_fragment TVE_EMISSIVE
				#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
				#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
				#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
				//SHADER INJECTION POINT BEGIN
				//SHADER INJECTION POINT END
				  
				struct TVEVisualData
				{  
					half Dummy;  
					half3 Albedo;
					half3 AlbedoRaw;
					half2 NormalTS;
					half3 NormalWS; 
					half4 Shader;
					half4 Emissive;
					half AlphaClip;
					half AlphaFade;
					half MultiMask;
					half Grayscale;
					half Luminosity;
					half3 Translucency;
					half Transmission;
					half Thickness;
					float Diffusion;
					float Depth;
				};  
				    
				struct TVEModelData
				{    
					half Dummy;    
					half3 PositionOS;
					half3 PositionWS;
					half3 PositionWO;
					half3 PositionRawOS;
					half3 PositionAddOS;
					half3 PivotOS;
					half3 PivotWS;
					half3 PivotWO;
					half3 NormalOS;
					half3 NormalWS;
					half3 NormalRawOS;
					half3 NormalRawWS;
					half4 TangentOS;
					half3 ViewDirWS;
					half4 VertexData;
					half4 PhaseData;
					half4 BoundsData;
					half4 RotationData;
				};    
				      
				struct TVEGlobalData
				{      
					half Dummy;      
					half4 CoatDataRT;
					half4 PaintDataRT;
					half4 GlowDataRT;
					half4 AtmoDataRT;
					half4 FadeDataRT;
					half4 FormDataRT;
					half4 FlowDataRT;
				};      
				        
				struct TVEMasksData
				{        
					half4 Mask0;
					half4 Mask1;
					half4 Mask2;
					half4 Mask3;
				};        
				#define TVE_GEOMETRY_SHADER
				//#pragma editor_sync_compilation
				#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
					#define ASE_NEEDS_TEXTURE_COORDINATES2
				#endif
				#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#else//ASE Sampling Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
				#endif//ASE Sampling Macros
				


				struct appdata
				{
					float4 vertex : POSITION;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					float4 ase_texcoord : TEXCOORD0;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct v2f
				{
					UNITY_POSITION( pos );
					UNITY_LIGHTING_COORDS( 0, 1 )
					UNITY_FOG_COORDS( 2 )
					float4 worldNormal : TEXCOORD3;
					float4 worldTangent : TEXCOORD4;
					float4 worldBitangent : TEXCOORD5;
					half4 ambientOrLightmapUV : TEXCOORD6;
					#if defined( ASE_NEEDS_FRAG_SCREEN_POSITION )
						float4 screenPos : TEXCOORD7;
					#endif
					float4 ase_texcoord8 : TEXCOORD8;
					float4 ase_texcoord9 : TEXCOORD9;
					float4 ase_texcoord10 : TEXCOORD10;
					float4 ase_texcoord11 : TEXCOORD11;
					float4 ase_color : COLOR;
					float4 ase_texcoord12 : TEXCOORD12;
					UNITY_VERTEX_INPUT_INSTANCE_ID
					UNITY_VERTEX_OUTPUT_STEREO
				};

				#ifdef ASE_TRANSMISSION
					float _TransmissionShadow;
				#endif
				#ifdef ASE_TRANSLUCENCY
					float _TransStrength;
					float _TransNormal;
					float _TransScattering;
					float _TransDirect;
					float _TransAmbient;
					float _TransShadow;
				#endif
				#ifdef ASE_TESSELLATION
					float _TessPhongStrength;
					float _TessValue;
					float _TessMin;
					float _TessMax;
					float _TessEdgeLength;
					float _TessMaxDisp;
				#endif

				uniform half _SubsurfaceAngleValue;
				uniform float _SubsurfaceDiffusion;
				uniform float4 _SubsurfaceDiffusion_Asset;
				uniform half _SubsurfaceSpace;
				uniform half _SubsurfaceScatteringValue;
				uniform half _render_cull;
				uniform half _render_src;
				uniform half _render_dst;
				uniform half _render_zw;
				uniform half _render_coverage;
				uniform half _IsGeneralShader;
				uniform half _IsSimpleShader;
				uniform half _RenderZWrite;
				uniform half _IsVersion;
				uniform half _RenderCategory;
				uniform half _RenderEnd;
				uniform half _RenderMode;
				uniform half _RenderCull;
				uniform half _RenderNormal;
				uniform half _RenderBakeGI;
				uniform half _RenderDecals;
				uniform half _RenderSSR;
				uniform half _RenderPriority;
				uniform half _RenderQueue;
				uniform half _RenderMotion;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
				SamplerState sampler_BumpMap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
				SamplerState sampler_MainTex;
				uniform half _Cutoff;
				uniform half4 _Color;
				uniform half _IsTVEShader;
				uniform half _IsCustomShader;
				uniform half _IsShared;
				uniform half _IsCollected;
				uniform half _IsConverted;
				uniform half _IsIdentifier;
				uniform half _RenderFilter;
				uniform half _RenderShadow;
				uniform half _RenderClip;
				UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
				SamplerState sampler_NoiseTex3D;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
				SamplerState sampler_NoiseTexSS;
				uniform half _NormalCategory;
				uniform half _NormalEnd;
				uniform half _NormalSpace;
				uniform half _NormalBakeMode;
				uniform half _MotionCategory;
				uniform half _MotionWindEnd;
				uniform half _MotionElementMode;
				uniform half _MotionPushInfo;
				uniform half _SizeFadeCategory;
				uniform half _SizeFadeEnd;
				uniform half _PerspectiveCategory;
				uniform half _PerspectiveEnd;
				uniform half _ObjectCategory;
				uniform half _ObjectEnd;
				uniform half _ObjectModelMode;
				uniform half _ObjectPivotMode;
				uniform half _ObjectPhaseMode;
				uniform half _ObjectBoundsInfo;
				uniform float3 TVE_WorldOrigin;
				uniform half4 TVE_TimeParams;
				uniform half4 _object_phase_mode;
				uniform half _ObjectHeightValue;
				uniform half _ObjectRadiusValue;
				uniform half _PerspectivePhaseValue;
				uniform half _PerspectiveIntensityValue;
				uniform half _PerspectiveAngleValue;
				uniform half4 TVE_SizeFadeParams;
				uniform half _SizeFadeDistMaxValue;
				uniform half _SizeFadeDistMinValue;
				uniform half _SizeFadeScaleValue;
				uniform half4 TVE_FormParams;
				uniform half _GlobalCategory;
				uniform half _GlobalEnd;
				uniform half _GlobalPivotInfo;
				uniform half _GlobalCoatLayerValue;
				uniform float TVE_CoatLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
				uniform half4 TVE_RenderBaseCoords;
				uniform half _GlobalCoatPivotValue;
				SamplerState sampler_Linear_Clamp;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
				uniform half4 TVE_RenderNearCoords;
				SamplerState sampler_Linear_Repeat;
				uniform float4 TVE_RenderNearPositionR;
				uniform half TVE_RenderNearFadeValue;
				uniform half4 TVE_CoatParams;
				uniform half _GlobalPaintLayerValue;
				uniform float TVE_PaintLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
				uniform half _GlobalPaintPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
				uniform half4 TVE_PaintParams;
				uniform half _GlobalGlowLayerValue;
				uniform float TVE_GlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
				uniform half _GlobalGlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
				uniform half4 TVE_GlowParams;
				uniform half _GlobalAtmoLayerValue;
				uniform float TVE_AtmoLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
				uniform half _GlobalAtmoPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
				uniform half4 TVE_AtmoParams;
				uniform half _GlobalFadeLayerValue;
				uniform float TVE_FadeLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
				uniform half _GlobalFadePivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
				uniform half4 TVE_FadeParams;
				uniform half _GlobalFormLayerValue;
				uniform float TVE_FormLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
				uniform half _GlobalFormPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
				uniform half _GlobalFlowLayerValue;
				uniform float TVE_FlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
				uniform half _GlobalFlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
				uniform half4 TVE_FlowParams;
				uniform half _SizeFadeElementMode;
				uniform half _SizeFadeGlobalValue;
				uniform half TVE_IsEnabled;
				uniform half _SizeFadeScaleMode;
				uniform half _SizeFadeIntensityValue;
				uniform half _MotionSmallIntensityValue;
				uniform half4 _motion_small_vert_mode;
				uniform half4 _motion_small_proc_mode;
				uniform half _motion_small_mask_mode;
				uniform half4 _MotionSmallMaskRemap;
				uniform half _MotionSmallMaskMode;
				uniform half4 TVE_MotionParams;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
				uniform half _MotionSmallPivotValue;
				uniform half _MotionSmallPhaseValue;
				uniform half _MotionSmallTillingValue;
				uniform half _MotionSmallSpeedValue;
				uniform half _MotionSmallNoiseValue;
				uniform half4 TVE_MotionParamsEditor;
				uniform half _MotionIntensityValue;
				uniform half _MotionSmallDelayValue;
				uniform half _MotionSmallPushValue;
				uniform half _MotionTinyIntensityValue;
				uniform half _MotionDistValue;
				uniform half4 _motion_tiny_vert_mode;
				uniform half4 _motion_tiny_proc_mode;
				uniform half _motion_tiny_mask_mode;
				uniform half4 _MotionTinyMaskRemap;
				uniform half _MotionTinyMaskMode;
				uniform half _MotionTinyTillingValue;
				uniform half _MotionTinySpeedValue;
				uniform half _MotionTinyNoiseValue;
				uniform half _MotionBasePivotValue;
				uniform half _MotionBasePhaseValue;
				uniform half _MotionBaseTillingValue;
				uniform half _MotionBaseSpeedValue;
				uniform half _MotionBaseNoiseValue;
				uniform half _MotionBaseDelayValue;
				uniform half _MotionBasePushValue;
				uniform half _motion_small_mode;
				uniform half _MotionBaseIntensityValue;
				uniform half4 _motion_base_vert_mode;
				uniform half4 _motion_base_proc_mode;
				uniform half _motion_base_mask_mode;
				uniform half4 _MotionBaseMaskRemap;
				uniform half _MotionBaseMaskMode;
				uniform half _NormalFlattenValue;
				uniform half3 _NormalSphereOffsetValue;
				uniform half _NormalSphereValue;
				uniform half _NormalComputeValue;
				uniform half4 _normal_vert_mode;
				uniform half4 _NormalMeshRemap;
				uniform half _NormalMeshValue;
				uniform half _NormalMeshMode;
				uniform half _DisableSRPBatcher;
				uniform half _SubsurfaceCategory;
				uniform half _SubsurfaceEnd;
				uniform half _SubsurfaceDirectValue;
				uniform half _SubsurfaceNormalValue;
				uniform half _SubsurfaceAmbientValue;
				uniform half _SubsurfaceShadowValue;
				uniform half _EmissiveCategory;
				uniform half _EmissiveEnd;
				uniform half _EmissivePowerMode;
				uniform half _EmissivePowerValue;
				uniform half _EmissiveFlagMode;
				uniform half _DitherCategory;
				uniform half _DitherEnd;
				uniform half _CutoutCategory;
				uniform half _CutoutEnd;
				uniform half _CutoutSpace;
				uniform half _CutoutBakeMode;
				uniform half _WetnessCategory;
				uniform half _WetnessEnd;
				uniform half _WetnessBakeMode;
				uniform half _OverlayCategory;
				uniform half _OverlayEnd;
				uniform half _OverlaySpace;
				uniform half _OverlayBakeMode;
				uniform half _DrynessCategory;
				uniform half _DrynessEnd;
				uniform half _DrynessSpace;
				uniform half _DrynessBakeMode;
				uniform half _TintingCategory;
				uniform half _TintingEnd;
				uniform half _TintingSpace;
				uniform half _TintingBakeMode;
				uniform half _VariationCategory;
				uniform half _VariationEnd;
				uniform half _GradientCategory;
				uniform half _GradientEnd;
				uniform half _GradientBakeMode;
				uniform half _OcclusionCategory;
				uniform half _OcclusionEnd;
				uniform half _OcclusionBakeMode;
				uniform half _DetailCategory;
				uniform half _DetailEnd;
				uniform half _ThirdSampleMode;
				uniform half _ThirdCoordMode;
				uniform half4 _ThirdCoordValue;
				uniform half _ThirdMaskSampleMode;
				uniform half _ThirdMaskCoordMode;
				uniform half4 _ThirdMaskCoordValue;
				uniform half _ThirdBakeMode;
				uniform half _LayerCategory;
				uniform half _LayerEnd;
				uniform half _SecondSampleMode;
				uniform half _SecondCoordMode;
				uniform half4 _SecondCoordValue;
				uniform half _SecondMaskSampleMode;
				uniform half _SecondMaskCoordMode;
				uniform half4 _SecondMaskCoordValue;
				uniform half _SecondBakeMode;
				uniform half _MainCategory;
				uniform half _MainEnd;
				uniform half _MainSampleMode;
				uniform half _MainCoordMode;
				uniform half4 _MainCoordValue;
				uniform half _MainMultiMaskInfo;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
				SamplerState sampler_Linear_Repeat_Aniso8;
				SamplerState sampler_Point_Repeat;
				uniform half4 _main_coord_value;
				uniform half _MainAlbedoValue;
				uniform half4 _MainColorTwo;
				uniform half4 _MainColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
				uniform half _MainMetallicValue;
				uniform half4 _MainOcclusionRemap;
				uniform half _MainOcclusionValue;
				uniform half4 _MainSmoothnessRemap;
				uniform half _MainSmoothnessValue;
				uniform half4 _MainMultiRemap;
				uniform half _MainColorMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
				uniform half _MainNormalValue;
				uniform half _MainAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
				uniform half4 _second_coord_value;
				uniform half _SecondAlbedoValue;
				uniform half4 _SecondColorTwo;
				uniform half4 _SecondColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
				uniform half _SecondMetallicValue;
				uniform half4 _SecondOcclusionRemap;
				uniform half _SecondOcclusionValue;
				uniform half4 _SecondSmoothnessRemap;
				uniform half _SecondSmoothnessValue;
				uniform half4 _SecondMultiRemap;
				uniform half _SecondColorMode;
				uniform half _SecondBlendAlbedoValue;
				uniform half _SecondIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
				uniform half4 _second_mask_coord_value;
				uniform half4 _SecondMaskRemap;
				uniform half _SecondMaskValue;
				uniform half4 _SecondLumaRemap;
				uniform half _SecondLumaValue;
				uniform half4 _SecondProjRemap;
				uniform half _SecondProjValue;
				uniform half4 _second_vert_mode;
				uniform half4 _SecondMeshRemap;
				uniform half _SecondMeshValue;
				uniform half _SecondMeshMode;
				uniform half _SecondElementMode;
				uniform half _SecondGlobalValue;
				uniform half4 _SecondBlendRemap;
				uniform half _SecondBlendIntensityValue;
				uniform half _SecondBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
				uniform half _SecondNormalValue;
				uniform half _SecondBlendShaderValue;
				uniform half _SecondAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
				uniform half4 _third_coord_value;
				uniform half _ThirdAlbedoValue;
				uniform half4 _ThirdColorTwo;
				uniform half4 _ThirdColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
				uniform half _ThirdMetallicValue;
				uniform half4 _ThirdOcclusionRemap;
				uniform half _ThirdOcclusionValue;
				uniform half4 _ThirdSmoothnessRemap;
				uniform half _ThirdSmoothnessValue;
				uniform half4 _ThirdMultiRemap;
				uniform half _ThirdColorMode;
				uniform half _ThirdBlendAlbedoValue;
				uniform half _ThirdIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
				uniform half4 _third_mask_coord_value;
				uniform half4 _ThirdMaskRemap;
				uniform half _ThirdMaskValue;
				uniform half4 _ThirdLumaRemap;
				uniform half _ThirdLumaValue;
				uniform half4 _third_vert_mode;
				uniform half4 _ThirdMeshRemap;
				uniform half _ThirdMeshValue;
				uniform half _ThirdMeshMode;
				uniform half4 _ThirdProjRemap;
				uniform half _ThirdProjValue;
				uniform half _ThirdElementMode;
				uniform half _ThirdGlobalValue;
				uniform half4 _ThirdBlendRemap;
				uniform half _ThirdBlendIntensityValue;
				uniform half _ThirdBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
				uniform half _ThirdNormalValue;
				uniform half _ThirdBlendShaderValue;
				uniform half _ThirdAlphaClipValue;
				uniform half4 _OcclusionColorTwo;
				uniform half4 _OcclusionColorOne;
				uniform half4 _occlusion_vert_mode;
				uniform half4 _OcclusionMeshRemap;
				uniform half _OcclusionMeshMode;
				uniform half _OcclusionIntensityValue;
				uniform half4 _GradientColorTwo;
				uniform half4 _GradientColorOne;
				uniform half4 _gradient_vert_mode;
				uniform half4 _GradientMeshRemap;
				uniform half _GradientMeshMode;
				uniform half _GradientIntensityValue;
				uniform half _GradientMultiValue;
				uniform half4 _VariationColorTwo;
				uniform half4 _VariationColorOne;
				uniform half _VariationNoisePivotValue;
				uniform half _VariationNoiseTillingValue;
				uniform half4 _VariationNoiseRemap;
				uniform half _VariationIntensityValue;
				uniform half _VariationMultiValue;
				uniform half _TintingElementMode;
				uniform half _TintingGlobalValue;
				uniform half _TintingGrayValue;
				uniform float4 _TintingColor;
				uniform half _TintingIntensityValue;
				uniform half _TintingMultiValue;
				uniform half4 _TintingLumaRemap;
				uniform half _TintingLumaValue;
				uniform half4 _tinting_vert_mode;
				uniform half4 _TintingMeshRemap;
				uniform half _TintingMeshValue;
				uniform half _TintingMeshMode;
				uniform half4 _TintingBlendRemap;
				uniform half _DrynessElementMode;
				uniform half _DrynessGlobalValue;
				uniform half _DrynessGrayValue;
				uniform float4 _DrynessColor;
				uniform half _DrynessIntensityValue;
				uniform half _DrynessMultiValue;
				uniform half4 _DrynessLumaRemap;
				uniform half _DrynessLumaValue;
				uniform half4 _dryness_vert_mode;
				uniform half4 _DrynessMeshRemap;
				uniform half _DrynessMeshValue;
				uniform half _DrynessMeshMode;
				uniform half4 _DrynessBlendRemap;
				uniform half _DrynessSmoothnessValue;
				uniform half _DrynessSubsurfaceValue;
				uniform half3 _motion_highlight_color;
				uniform half _MotionHighlightValue;
				uniform half4 _MotionHighlightColor;
				uniform half4 _OverlayColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
				uniform half4 _overlay_coord_value;
				uniform half _OverlaySampleMode;
				uniform half _OverlayCoordMode;
				uniform half4 _OverlayCoordValue;
				uniform half _OverlayTextureMode;
				uniform half _OverlayGlitterIntensityValue;
				uniform half4 _OverlayGlitterColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
				uniform half _OverlayGlitterTillingValue;
				uniform half _OverlayGlitterDistValue;
				uniform half _OverlayIntensityValue;
				uniform half4 _OverlayProjRemap;
				uniform half _OverlayProjValue;
				uniform half4 _OverlayLumaRemap;
				uniform half _OverlayLumaValue;
				uniform half4 _overlay_vert_mode;
				uniform half4 _OverlayMeshRemap;
				uniform half _OverlayMeshValue;
				uniform half _OverlayMeshMode;
				uniform half _OverlayElementMode;
				uniform half _OverlayGlobalValue;
				uniform half4 _OverlayBlendRemap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
				uniform half _OverlayNormalValue;
				uniform half _OverlaySmoothnessValue;
				uniform half _OverlaySubsurfaceValue;
				uniform half4 _WetnessWaterColor;
				uniform half _WetnessWaterIntensityValue;
				uniform half _WetnessIntensityValue;
				uniform half _WetnessElementMode;
				uniform half _WetnessGlobalValue;
				uniform half4 _wetness_vert_mode;
				uniform half4 _WetnessMeshRemap;
				uniform half _WetnessMeshValue;
				uniform half _WetnessMeshMode;
				uniform half4 _wetness_water_vert_mode;
				uniform half4 _WetnessWaterMeshRemap;
				uniform half _WetnessWaterMeshValue;
				uniform half _WetnessWaterMeshMode;
				uniform half _WetnessWaterBaseValue;
				uniform half4 _WetnessWaterBlendRemap;
				uniform half _WetnessContrastValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
				uniform half _WetnessDropsTillingValue;
				uniform half _WetnessDropsIntensityValue;
				uniform half _WetnessDropsNormalValue;
				uniform half _WetnessDropsDistValue;
				uniform half4 _wetness_drops_vert_mode;
				uniform half4 _WetnessDropsMeshRemap;
				uniform half _WetnessDropsMeshValue;
				uniform half _WetnessDropsMeshMode;
				uniform half _WetnessSmoothnessValue;
				uniform half _CutoutIntensityValue;
				uniform half _CutoutElementMode;
				uniform half _CutoutGlobalValue;
				uniform half _CutoutAlphaValue;
				uniform half _CutoutNoiseTillingValue;
				uniform half _CutoutNoiseValue;
				uniform half4 _cutout_vert_mode;
				uniform half4 _CutoutMeshRemap;
				uniform half _CutoutMeshValue;
				uniform half _CutoutMeshMode;
				uniform half _CutoutMultiValue;
				uniform half _DitherConstantValue;
				uniform half4 TVE_DitherParams;
				uniform half _DitherProximityMaxValue;
				uniform half _DitherProximityMinValue;
				uniform half _DitherProximityValue;
				uniform half _DitherDistanceMinValue;
				uniform half _DitherDistanceMaxValue;
				uniform half _DitherDistanceValue;
				uniform half _DitherGlancingAngleValue;
				uniform half _DitherGlancingValue;
				uniform half _DitherNoiseTillingValue;
				uniform half _DitherMultiValue;
				uniform half4 _emissive_vert_mode;
				uniform half4 _EmissiveMeshRemap;
				uniform half _EmissiveMeshValue;
				uniform half _EmissiveMeshMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
				uniform half4 _emissive_coord_value;
				uniform half _EmissiveSampleMode;
				uniform half _EmissiveCoordMode;
				uniform half4 _EmissiveCoordValue;
				uniform half4 _EmissiveMaskRemap;
				uniform half _EmissiveMaskValue;
				uniform half _EmissiveIntensityValue;
				uniform half4 _EmissiveColor;
				uniform half _EmissiveElementMode;
				uniform half _EmissiveGlobalValue;
				uniform half _EmissiveColorMode;
				uniform float _emissive_power_value;
				uniform half4 _SubsurfaceColor;
				uniform half _SubsurfaceIntensityValue;
				uniform half _SubsurfaceElementMode;
				uniform half _SubsurfaceGlobalValue;
				uniform half _SubsurfaceMultiValue;
				uniform half3 TVE_MainLightDirection;
				uniform half _SubsurfaceAproxInfo;
				uniform half3 _render_normal;
				uniform half _RenderSpecular;


				float4 mod289( float4 x )
				{
					return x - floor(x * 0.00346020761) * 289.0;
				}
				
				float4 perm( float4 x )
				{
					    return mod289((x * 34.0 + 1.0) * x);
				}
				
				float SimpleNoise3D( float3 p )
				{
					    // Compute integer and fractional parts.
					    float3 i = floor(p);
					    float3 f = p - i;
					    // Cubic interpolation (smoothstep)
					    f = f * f * (3.0 - 2.0 * f);
					    // Build 4-component vectors using swizzling.
					    // a = (i.x, i.x+1, i.y, i.y+1)
					    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
					    // Permutations along the x and y axes.
					    float4 k1 = perm(a.xyxy);
					    float4 k2 = perm(k1.xyxy + a.zzww);
					    // Incorporate the z component.
					    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
					    float4 k3 = perm(c);
					    float4 k4 = perm(c + 1.0);
					    // Map results to the [0,1] range.
					    float4 o1 = frac(k3 * 0.0243902439);
					    float4 o2 = frac(k4 * 0.0243902439);
					    // Interpolate along z, then x, then y.
					    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
					    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
					    return lerp(o4.x, o4.y, f.y); 
				}
				
				float2 DecodeFloatToVector2( float enc )
				{
					float2 result ;
					result.y = enc % 2048;
					result.x = floor(enc / 2048);
					return result / (2048 - 1);
				}
				
				float3 ASESafeNormalize(float3 inVec)
				{
					float dp3 = max(1.175494351e-38, dot(inVec, inVec));
					return inVec* rsqrt(dp3);
				}
				
				void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
				{
					ZX = WorldPosition.xz * Coords.xx - Coords.zz;
					ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
					XY = WorldPosition.xy * Coords.xy - Coords.zw;
				}
				
				half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
				{
					half3 powNormal = abs( WorldNormal.xyz );
					half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
					weights /= ( weights.x + weights.y + weights.z ).xxx;
					T1 = weights.y;
					T2 = weights.x;
					T3 = weights.z;
				}
				
				half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
					half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
					half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
					return tex1 * T1 + tex2 * T2 + tex3 * T3;
				}
				
				void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
				{
					half2 vertex1, vertex2, vertex3;
					// Scaling of the input
					half2 uv = UV * 3.464; // 2 * sqrt (3)
					// Skew input space into simplex triangle grid
					const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
					half2 skewedCoord = mul( gridToSkewedGrid, uv );
					// Compute local triangle vertex IDs and local barycentric coordinates
					int2 baseId = int2( floor( skewedCoord ) );
					half3 temp = half3( frac( skewedCoord ), 0 );
					temp.z = 1.0 - temp.x - temp.y;
					if ( temp.z > 0.0 )
					{
						W1 = temp.z;
						W2 = temp.y;
						W3 = temp.x;
						vertex1 = baseId;
						vertex2 = baseId + int2( 0, 1 );
						vertex3 = baseId + int2( 1, 0 );
					}
					else
					{
						W1 = -temp.z;
						W2 = 1.0 - temp.y;
						W3 = 1.0 - temp.x;
						vertex1 = baseId + int2( 1, 1 );
						vertex2 = baseId + int2( 1, 0 );
						vertex3 = baseId + int2( 0, 1 );
					}
					UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
					UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
					UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
					return;
				}
				
				float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
					half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
					half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
					half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
					return tex1 * W1 + tex2 * W2 + tex3 * W3;
				}
				
				half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					half4 tex1, tex2, tex3;
					ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
					half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
					half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
					half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					return texZX * T1 + texZY * T2 + texXY * T3;
				}
				
				half ShadowPassCheck33_g171048( half True, half False )
				{
					half result;
					#if defined(UNITY_PASS_DEFERRED)
						result = True;
					#else
						result = False;
					#endif
					return result;
				}
				
				half ShadowPassCheck33_g171049( half True, half False )
				{
					half result;
					#if defined(UNITY_PASS_DEFERRED)
						result = True;
					#else
						result = False;
					#endif
					return result;
				}
				

				v2f VertexFunction (appdata v  ) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f o;
					UNITY_INITIALIZE_OUTPUT(v2f,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

					TVEModelData Data16_g171023 = (TVEModelData)0;
					float In_Dummy16_g171023 = 0.0;
					TVEModelData Data16_g171012 = (TVEModelData)0;
					half Dummy1575_g170996 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
					float In_Dummy16_g171012 = Dummy1575_g170996;
					TVEModelData Data16_g170972 = (TVEModelData)0;
					float In_Dummy16_g170972 = 0.0;
					TVEModelData Data16_g170744 = (TVEModelData)0;
					half Dummy181_g170727 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
					float In_Dummy16_g170744 = Dummy181_g170727;
					TVEModelData Data16_g170681 = (TVEModelData)0;
					half Dummy181_g170679 = ( _SizeFadeCategory + _SizeFadeEnd );
					float In_Dummy16_g170681 = Dummy181_g170679;
					TVEModelData Data16_g170585 = (TVEModelData)0;
					half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
					float In_Dummy16_g170585 = Dummy181_g170582;
					TVEModelData Data16_g170580 = (TVEModelData)0;
					float In_Dummy16_g170580 = 0.0;
					TVEModelData Data16_g170482 = (TVEModelData)0;
					half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
					float In_Dummy16_g170482 = Dummy207_g170478;
					half3 PositionOS131_g170478 = v.vertex.xyz;
					float3 In_PositionOS16_g170482 = PositionOS131_g170478;
					float3 ase_positionWS = mul( unity_ObjectToWorld, float4( ( v.vertex ).xyz, 1 ) ).xyz;
					float3 vertexToFrag73_g170478 = ase_positionWS;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170482 = PositionWS122_g170478;
					float4x4 break19_g170488 = unity_ObjectToWorld;
					float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
					float3 temp_output_340_7_g170478 = appendResult20_g170488;
					float4x4 break19_g170490 = unity_ObjectToWorld;
					float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
					float3 _Vector0 = float3(0,0,0);
					float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
					float3 break233_g170478 = PositionOS131_g170478;
					float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch229_g170478 = _Vector0;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch229_g170478 = appendResult60_g170486;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch229_g170478 = appendResult234_g170478;
					#else
					float3 staticSwitch229_g170478 = _Vector0;
					#endif
					half3 PivotOS149_g170478 = staticSwitch229_g170478;
					float3 temp_output_122_0_g170490 = PivotOS149_g170478;
					float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
					float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#else
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#endif
					float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170482 = PositionWO132_g170478;
					float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
					float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
					float3 In_PivotOS16_g170482 = PivotOS149_g170478;
					float3 In_PivotWS16_g170482 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170482 = PivotWO133_g170478;
					half3 NormalOS134_g170478 = v.normal;
					float3 In_NormalOS16_g170482 = NormalOS134_g170478;
					float3 ase_normalWS = UnityObjectToWorldNormal( v.normal );
					float3 normalizedWorldNormal = normalize( ase_normalWS );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
					float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
					float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0.0 ) ).xyz );
					half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
					float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
					half4 TangentlOS153_g170478 = v.tangent;
					float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = v.ase_color;
					float4 In_VertexData16_g170482 = VertexMasks171_g170478;
					float mulTime113_g170485 = _Time.y * 0.52;
					float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float3 break319_g170478 = PivotWO133_g170478;
					half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
					float mulTime113_g170484 = _Time.y * 0.27;
					float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float4 break33_g170487 = _object_phase_mode;
					float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
					float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
					float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
					float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
					float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
					float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
					half4 MotionMasks176_g170478 = appendResult177_g170478;
					float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
					half Object_HeightValue267_g170478 = _ObjectHeightValue;
					half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
					float temp_output_270_0_g170478 = (PositionOS131_g170478).y;
					half Bounds_HeightMask274_g170478 = saturate( ( temp_output_270_0_g170478 / Object_HeightValue267_g170478 ) );
					half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
					float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
					half4 BoundsData254_g170478 = appendResult253_g170478;
					float4 In_BoundsData16_g170482 = BoundsData254_g170478;
					float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
					{
					Data16_g170482.Dummy = In_Dummy16_g170482;
					Data16_g170482.PositionOS = In_PositionOS16_g170482;
					Data16_g170482.PositionWS = In_PositionWS16_g170482;
					Data16_g170482.PositionWO = In_PositionWO16_g170482;
					Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
					Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
					Data16_g170482.PivotOS = In_PivotOS16_g170482;
					Data16_g170482.PivotWS = In_PivotWS16_g170482;
					Data16_g170482.PivotWO = In_PivotWO16_g170482;
					Data16_g170482.NormalOS = In_NormalOS16_g170482;
					Data16_g170482.NormalWS = In_NormalWS16_g170482;
					Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
					Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
					Data16_g170482.TangentOS = In_TangentOS16_g170482;
					Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
					Data16_g170482.VertexData = In_VertexData16_g170482;
					Data16_g170482.PhaseData = In_PhaseData16_g170482;
					Data16_g170482.BoundsData = In_BoundsData16_g170482;
					Data16_g170482.RotationData = In_RotationData16_g170482;
					}
					TVEModelData Data15_g170581 = Data16_g170482;
					float Out_Dummy15_g170581 = 0;
					float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
					float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170581 = Data15_g170581.Dummy;
					Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
					Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
					Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
					Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
					Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
					Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
					Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
					Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
					Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
					Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
					Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
					Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
					Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
					Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
					Out_VertexData15_g170581 = Data15_g170581.VertexData;
					Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
					Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
					Out_RotationData15_g170581 = Data15_g170581.RotationData;
					}
					float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
					float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
					float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
					float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
					float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
					float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
					float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
					float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
					float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
					float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
					float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
					float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
					float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
					float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
					float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
					float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
					float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
					float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
					float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
					{
					Data16_g170580.Dummy = In_Dummy16_g170580;
					Data16_g170580.PositionOS = In_PositionOS16_g170580;
					Data16_g170580.PositionWS = In_PositionWS16_g170580;
					Data16_g170580.PositionWO = In_PositionWO16_g170580;
					Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
					Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
					Data16_g170580.PivotOS = In_PivotOS16_g170580;
					Data16_g170580.PivotWS = In_PivotWS16_g170580;
					Data16_g170580.PivotWO = In_PivotWO16_g170580;
					Data16_g170580.NormalOS = In_NormalOS16_g170580;
					Data16_g170580.NormalWS = In_NormalWS16_g170580;
					Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
					Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
					Data16_g170580.TangentOS = In_TangentOS16_g170580;
					Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
					Data16_g170580.VertexData = In_VertexData16_g170580;
					Data16_g170580.PhaseData = In_PhaseData16_g170580;
					Data16_g170580.BoundsData = In_BoundsData16_g170580;
					Data16_g170580.RotationData = In_RotationData16_g170580;
					}
					TVEModelData Data15_g170583 = Data16_g170580;
					float Out_Dummy15_g170583 = 0;
					float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
					float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170583 = Data15_g170583.Dummy;
					Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
					Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
					Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
					Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
					Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
					Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
					Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
					Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
					Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
					Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
					Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
					Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
					Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
					Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
					Out_VertexData15_g170583 = Data15_g170583.VertexData;
					Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
					Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
					Out_RotationData15_g170583 = Data15_g170583.RotationData;
					}
					half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
					float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
					float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
					float4x4 break117_g170584 = unity_CameraToWorld;
					float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
					float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
					float3 break201_g170582 = cross( lerpResult209_g170582 , half3( 0, 1, 0 ) );
					float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
					float4 temp_output_149_27_g170582 = Out_PhaseData15_g170583;
					half4 Model_PhaseData218_g170582 = temp_output_149_27_g170582;
					float temp_output_222_0_g170582 = ( ((Model_PhaseData218_g170582).z*2.0 + -1.0) * _PerspectivePhaseValue );
					float3 appendResult224_g170582 = (float3(temp_output_222_0_g170582 , 0.0 , temp_output_222_0_g170582));
					float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
					float saferPower192_g170582 = abs( dotResult189_g170582 );
					#ifdef TVE_PERSPECTIVE
					float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz + appendResult224_g170582 ) * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
					#else
					float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
					#endif
					half3 Final_Position178_g170582 = staticSwitch211_g170582;
					float3 In_PositionOS16_g170585 = Final_Position178_g170582;
					float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
					float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
					float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
					float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
					float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
					float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
					float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
					float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
					float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
					float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
					float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
					float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
					float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
					float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
					float4 In_PhaseData16_g170585 = temp_output_149_27_g170582;
					float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
					float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
					{
					Data16_g170585.Dummy = In_Dummy16_g170585;
					Data16_g170585.PositionOS = In_PositionOS16_g170585;
					Data16_g170585.PositionWS = In_PositionWS16_g170585;
					Data16_g170585.PositionWO = In_PositionWO16_g170585;
					Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
					Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
					Data16_g170585.PivotOS = In_PivotOS16_g170585;
					Data16_g170585.PivotWS = In_PivotWS16_g170585;
					Data16_g170585.PivotWO = In_PivotWO16_g170585;
					Data16_g170585.NormalOS = In_NormalOS16_g170585;
					Data16_g170585.NormalWS = In_NormalWS16_g170585;
					Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
					Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
					Data16_g170585.TangentOS = In_TangentOS16_g170585;
					Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
					Data16_g170585.VertexData = In_VertexData16_g170585;
					Data16_g170585.PhaseData = In_PhaseData16_g170585;
					Data16_g170585.BoundsData = In_BoundsData16_g170585;
					Data16_g170585.RotationData = In_RotationData16_g170585;
					}
					TVEModelData Data15_g170680 = Data16_g170585;
					float Out_Dummy15_g170680 = 0;
					float3 Out_PositionOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170680 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170680 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170680 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170680 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170680 = float3( 0,0,0 );
					float4 Out_VertexData15_g170680 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170680 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170680 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170680 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170680 = Data15_g170680.Dummy;
					Out_PositionOS15_g170680 = Data15_g170680.PositionOS;
					Out_PositionWS15_g170680 = Data15_g170680.PositionWS;
					Out_PositionWO15_g170680 = Data15_g170680.PositionWO;
					Out_PositionRawOS15_g170680 = Data15_g170680.PositionRawOS;
					Out_PositionAddOS15_g170680 = Data15_g170680.PositionAddOS;
					Out_PivotOS15_g170680 = Data15_g170680.PivotOS;
					Out_PivotWS15_g170680 = Data15_g170680.PivotWS;
					Out_PivotWO15_g170680 = Data15_g170680.PivotWO;
					Out_NormalOS15_g170680 = Data15_g170680.NormalOS;
					Out_NormalWS15_g170680 = Data15_g170680.NormalWS;
					Out_NormalRawOS15_g170680 = Data15_g170680.NormalRawOS;
					Out_NormalRawWS15_g170680 = Data15_g170680.NormalRawWS;
					Out_TangentOS15_g170680 = Data15_g170680.TangentOS;
					Out_ViewDirWS15_g170680 = Data15_g170680.ViewDirWS;
					Out_VertexData15_g170680 = Data15_g170680.VertexData;
					Out_PhaseData15_g170680 = Data15_g170680.PhaseData;
					Out_BoundsData15_g170680 = Data15_g170680.BoundsData;
					Out_RotationData15_g170680 = Data15_g170680.RotationData;
					}
					half3 Model_PositionOS147_g170679 = Out_PositionOS15_g170680;
					float3 temp_cast_5 = (1.0).xxx;
					float3 temp_output_210_19_g170679 = Out_PivotWO15_g170680;
					half3 Model_PivotWO162_g170679 = temp_output_210_19_g170679;
					float lerpResult216_g170679 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
					float temp_output_7_0_g170685 = _SizeFadeDistMaxValue;
					float temp_output_9_0_g170685 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170679 ) * lerpResult216_g170679 ) - temp_output_7_0_g170685 );
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170682 = Data204_g170496;
					float Out_Dummy15_g170682 = 0;
					float4 Out_CoatDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170682 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170682 = Data15_g170682.Dummy;
					Out_CoatDataRT15_g170682 = Data15_g170682.CoatDataRT;
					Out_PaintDataRT15_g170682 = Data15_g170682.PaintDataRT;
					Out_GlowDataRT15_g170682= Data15_g170682.GlowDataRT;
					Out_AtmoDataRT15_g170682= Data15_g170682.AtmoDataRT;
					Out_FadeDataRT15_g170682= Data15_g170682.FadeDataRT;
					Out_FormDataRT15_g170682 = Data15_g170682.FormDataRT;
					Out_FlowDataRT15_g170682 = Data15_g170682.FlowDataRT;
					}
					half4 Input_FormParams188_g170679 = Out_FormDataRT15_g170682;
					float temp_output_6_0_g170683 = saturate( (Input_FormParams188_g170679).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170683 = ( temp_output_6_0_g170683 + _SizeFadeElementMode );
					#else
					float staticSwitch14_g170683 = temp_output_6_0_g170683;
					#endif
					#ifdef TVE_SIZEFADE_ELEMENT
					float staticSwitch194_g170679 = staticSwitch14_g170683;
					#else
					float staticSwitch194_g170679 = TVE_FormParams.w;
					#endif
					float lerpResult213_g170679 = lerp( 1.0 , staticSwitch194_g170679 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
					half SizeFade_MaskGlobal192_g170679 = lerpResult213_g170679;
					half User_Mask232_g170679 = 1.0;
					float temp_output_189_0_g170679 = ( saturate( ( ( temp_output_9_0_g170685 / ( _SizeFadeDistMinValue - temp_output_7_0_g170685 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170679 * User_Mask232_g170679 );
					float3 appendResult200_g170679 = (float3(temp_output_189_0_g170679 , temp_output_189_0_g170679 , temp_output_189_0_g170679));
					float3 appendResult201_g170679 = (float3(1.0 , temp_output_189_0_g170679 , 1.0));
					float3 lerpResult202_g170679 = lerp( appendResult200_g170679 , appendResult201_g170679 , _SizeFadeScaleMode);
					float3 lerpResult184_g170679 = lerp( temp_cast_5 , lerpResult202_g170679 , _SizeFadeIntensityValue);
					#ifdef TVE_SIZEFADE
					float3 staticSwitch199_g170679 = ( lerpResult184_g170679 * Model_PositionOS147_g170679 );
					#else
					float3 staticSwitch199_g170679 = Model_PositionOS147_g170679;
					#endif
					half3 Final_Position178_g170679 = staticSwitch199_g170679;
					float3 In_PositionOS16_g170681 = Final_Position178_g170679;
					float3 In_PositionWS16_g170681 = Out_PositionWS15_g170680;
					float3 In_PositionWO16_g170681 = Out_PositionWO15_g170680;
					float3 In_PositionRawOS16_g170681 = Out_PositionRawOS15_g170680;
					float3 In_PositionAddOS16_g170681 = Out_PositionAddOS15_g170680;
					float3 temp_output_210_24_g170679 = Out_PivotOS15_g170680;
					float3 In_PivotOS16_g170681 = temp_output_210_24_g170679;
					float3 In_PivotWS16_g170681 = Out_PivotWS15_g170680;
					float3 In_PivotWO16_g170681 = temp_output_210_19_g170679;
					float3 In_NormalOS16_g170681 = Out_NormalOS15_g170680;
					float3 In_NormalWS16_g170681 = Out_NormalWS15_g170680;
					float3 In_NormalRawOS16_g170681 = Out_NormalRawOS15_g170680;
					float3 In_NormalRawWS16_g170681 = Out_NormalRawWS15_g170680;
					float4 In_TangentOS16_g170681 = Out_TangentOS15_g170680;
					float3 In_ViewDirWS16_g170681 = Out_ViewDirWS15_g170680;
					float4 In_VertexData16_g170681 = Out_VertexData15_g170680;
					float4 In_PhaseData16_g170681 = Out_PhaseData15_g170680;
					float4 In_BoundsData16_g170681 = Out_BoundsData15_g170680;
					float4 In_RotationData16_g170681 = Out_RotationData15_g170680;
					{
					Data16_g170681.Dummy = In_Dummy16_g170681;
					Data16_g170681.PositionOS = In_PositionOS16_g170681;
					Data16_g170681.PositionWS = In_PositionWS16_g170681;
					Data16_g170681.PositionWO = In_PositionWO16_g170681;
					Data16_g170681.PositionRawOS = In_PositionRawOS16_g170681;
					Data16_g170681.PositionAddOS = In_PositionAddOS16_g170681;
					Data16_g170681.PivotOS = In_PivotOS16_g170681;
					Data16_g170681.PivotWS = In_PivotWS16_g170681;
					Data16_g170681.PivotWO = In_PivotWO16_g170681;
					Data16_g170681.NormalOS = In_NormalOS16_g170681;
					Data16_g170681.NormalWS = In_NormalWS16_g170681;
					Data16_g170681.NormalRawOS = In_NormalRawOS16_g170681;
					Data16_g170681.NormalRawWS = In_NormalRawWS16_g170681;
					Data16_g170681.TangentOS = In_TangentOS16_g170681;
					Data16_g170681.ViewDirWS = In_ViewDirWS16_g170681;
					Data16_g170681.VertexData = In_VertexData16_g170681;
					Data16_g170681.PhaseData = In_PhaseData16_g170681;
					Data16_g170681.BoundsData = In_BoundsData16_g170681;
					Data16_g170681.RotationData = In_RotationData16_g170681;
					}
					TVEModelData Data15_g170743 = Data16_g170681;
					float Out_Dummy15_g170743 = 0;
					float3 Out_PositionOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170743 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170743 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170743 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170743 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170743 = float3( 0,0,0 );
					float4 Out_VertexData15_g170743 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170743 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170743 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170743 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170743 = Data15_g170743.Dummy;
					Out_PositionOS15_g170743 = Data15_g170743.PositionOS;
					Out_PositionWS15_g170743 = Data15_g170743.PositionWS;
					Out_PositionWO15_g170743 = Data15_g170743.PositionWO;
					Out_PositionRawOS15_g170743 = Data15_g170743.PositionRawOS;
					Out_PositionAddOS15_g170743 = Data15_g170743.PositionAddOS;
					Out_PivotOS15_g170743 = Data15_g170743.PivotOS;
					Out_PivotWS15_g170743 = Data15_g170743.PivotWS;
					Out_PivotWO15_g170743 = Data15_g170743.PivotWO;
					Out_NormalOS15_g170743 = Data15_g170743.NormalOS;
					Out_NormalWS15_g170743 = Data15_g170743.NormalWS;
					Out_NormalRawOS15_g170743 = Data15_g170743.NormalRawOS;
					Out_NormalRawWS15_g170743 = Data15_g170743.NormalRawWS;
					Out_TangentOS15_g170743 = Data15_g170743.TangentOS;
					Out_ViewDirWS15_g170743 = Data15_g170743.ViewDirWS;
					Out_VertexData15_g170743 = Data15_g170743.VertexData;
					Out_PhaseData15_g170743 = Data15_g170743.PhaseData;
					Out_BoundsData15_g170743 = Data15_g170743.BoundsData;
					Out_RotationData15_g170743 = Data15_g170743.RotationData;
					}
					float3 temp_output_2503_0_g170727 = Out_PositionOS15_g170743;
					float3 In_PositionOS16_g170744 = temp_output_2503_0_g170727;
					float3 temp_output_2503_16_g170727 = Out_PositionWS15_g170743;
					float3 In_PositionWS16_g170744 = temp_output_2503_16_g170727;
					float3 temp_output_2503_17_g170727 = Out_PositionWO15_g170743;
					float3 In_PositionWO16_g170744 = temp_output_2503_17_g170727;
					float3 In_PositionRawOS16_g170744 = Out_PositionRawOS15_g170743;
					float3 temp_cast_35 = (0.0).xxx;
					float4 temp_output_2503_29_g170727 = Out_VertexData15_g170743;
					half4 Model_VertexMasks518_g170727 = temp_output_2503_29_g170727;
					float4 break1689_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170728 = _motion_small_vert_mode;
					float temp_output_30_0_g170728 = ( break1689_g170727.x * break33_g170728.x );
					float temp_output_29_0_g170728 = ( break1689_g170727.y * break33_g170728.y );
					float temp_output_31_0_g170728 = ( break1689_g170727.z * break33_g170728.z );
					float temp_output_28_0_g170728 = ( temp_output_30_0_g170728 + temp_output_29_0_g170728 + temp_output_31_0_g170728 + ( break1689_g170727.w * break33_g170728.w ) );
					float temp_output_1727_0_g170727 = temp_output_28_0_g170728;
					float4 temp_output_2503_30_g170727 = Out_BoundsData15_g170743;
					half4 Model_BoundsData1322_g170727 = temp_output_2503_30_g170727;
					float4 break33_g170730 = _motion_small_proc_mode;
					float temp_output_30_0_g170730 = ( (Model_BoundsData1322_g170727).z * break33_g170730.x );
					float temp_output_29_0_g170730 = ( (Model_BoundsData1322_g170727).w * break33_g170730.y );
					float temp_output_1734_0_g170727 = ( temp_output_30_0_g170730 + temp_output_29_0_g170730 );
					float lerpResult1906_g170727 = lerp( temp_output_1727_0_g170727 , temp_output_1734_0_g170727 , _motion_small_mask_mode);
					float enc1805_g170727 = v.ase_texcoord.z;
					float2 localDecodeFloatToVector21805_g170727 = DecodeFloatToVector2( enc1805_g170727 );
					float2 break1804_g170727 = localDecodeFloatToVector21805_g170727;
					half Small_Mask_Legacy1806_g170727 = break1804_g170727.x;
					#ifdef TVE_LEGACY
					float staticSwitch1800_g170727 = Small_Mask_Legacy1806_g170727;
					#else
					float staticSwitch1800_g170727 = lerpResult1906_g170727;
					#endif
					float clampResult17_g170732 = clamp( staticSwitch1800_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170741 = _MotionSmallMaskRemap.x;
					float temp_output_9_0_g170741 = ( clampResult17_g170732 - temp_output_7_0_g170741 );
					float temp_output_6_0_g170739 = saturate( ( ( temp_output_9_0_g170741 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170739 = ( temp_output_6_0_g170739 + _MotionSmallMaskMode );
					#else
					float staticSwitch14_g170739 = temp_output_6_0_g170739;
					#endif
					half Small_Mask640_g170727 = staticSwitch14_g170739;
					float4 lerpResult836_g170752 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
					float2 Global_WindDirWS2542_g170727 = (lerpResult836_g170752).xy;
					half2 Input_WindDirWS803_g170753 = Global_WindDirWS2542_g170727;
					half3 Model_PositionWO162_g170727 = temp_output_2503_17_g170727;
					half3 Input_ModelPositionWO761_g170745 = Model_PositionWO162_g170727;
					float3 temp_output_2503_19_g170727 = Out_PivotWO15_g170743;
					half3 Model_PivotWO402_g170727 = temp_output_2503_19_g170727;
					half3 Input_ModelPivotsWO419_g170745 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170745 = _MotionSmallPivotValue;
					float3 lerpResult771_g170745 = lerp( Input_ModelPositionWO761_g170745 , Input_ModelPivotsWO419_g170745 , Input_MotionPivots629_g170745);
					float4 temp_output_2503_27_g170727 = Out_PhaseData15_g170743;
					half4 Model_PhaseData489_g170727 = temp_output_2503_27_g170727;
					half4 Input_ModelMotionData763_g170745 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170745 = _MotionSmallPhaseValue;
					half3 Small_Position1421_g170727 = ( lerpResult771_g170745 + ( (Input_ModelMotionData763_g170745).z * Input_MotionPhase764_g170745 * 5.0 ) );
					half3 Input_PositionWO419_g170753 = Small_Position1421_g170727;
					half Input_MotionTilling321_g170753 = ( _MotionSmallTillingValue + 0.2 );
					half2 Noise_Coord515_g170753 = ( -(Input_PositionWO419_g170753).xz * Input_MotionTilling321_g170753 * 0.005 );
					float2 temp_output_3_0_g170755 = Noise_Coord515_g170753;
					float2 temp_output_21_0_g170755 = Input_WindDirWS803_g170753;
					float lerpResult128_g170754 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170753 = _MotionSmallSpeedValue;
					half Noise_Speed516_g170753 = ( lerpResult128_g170754 * 0.02 * Input_MotionSpeed62_g170753 );
					float temp_output_15_0_g170755 = Noise_Speed516_g170753;
					float temp_output_23_0_g170755 = frac( temp_output_15_0_g170755 );
					float4 lerpResult39_g170755 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * temp_output_23_0_g170755 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * frac( ( temp_output_15_0_g170755 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170755 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170753 = lerpResult39_g170755;
					half2 Noise_DirWS858_g170753 = ((temp_output_635_0_g170753).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170753 = _MotionSmallNoiseValue;
					half Global_WInd769_g170752 = (lerpResult836_g170752).z;
					TVEGlobalData Data15_g170751 = Data204_g170496;
					float Out_Dummy15_g170751 = 0;
					float4 Out_CoatDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170751 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170751 = Data15_g170751.Dummy;
					Out_CoatDataRT15_g170751 = Data15_g170751.CoatDataRT;
					Out_PaintDataRT15_g170751 = Data15_g170751.PaintDataRT;
					Out_GlowDataRT15_g170751= Data15_g170751.GlowDataRT;
					Out_AtmoDataRT15_g170751= Data15_g170751.AtmoDataRT;
					Out_FadeDataRT15_g170751= Data15_g170751.FadeDataRT;
					Out_FormDataRT15_g170751 = Data15_g170751.FormDataRT;
					Out_FlowDataRT15_g170751 = Data15_g170751.FlowDataRT;
					}
					half4 Global_FlowParams2668_g170727 = Out_FlowDataRT15_g170751;
					half4 Input_GlobalFlow826_g170752 = Global_FlowParams2668_g170727;
					float temp_output_764_0_g170752 = (Input_GlobalFlow826_g170752).w;
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch612_g170752 = saturate( temp_output_764_0_g170752 );
					#else
					float staticSwitch612_g170752 = Global_WInd769_g170752;
					#endif
					float lerpResult853_g170752 = lerp( staticSwitch612_g170752 , saturate( (staticSwitch612_g170752*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
					half Input_MotionValue629_g170752 = _MotionIntensityValue;
					half Global_WindValue1855_g170727 = ( lerpResult853_g170752 * Input_MotionValue629_g170752 );
					half Input_WindValue881_g170753 = Global_WindValue1855_g170727;
					float lerpResult701_g170753 = lerp( 1.0 , Input_MotionNoise552_g170753 , Input_WindValue881_g170753);
					float2 lerpResult646_g170753 = lerp( Input_WindDirWS803_g170753 , Noise_DirWS858_g170753 , lerpResult701_g170753);
					half2 Small_DirWS817_g170753 = lerpResult646_g170753;
					float2 break823_g170753 = Small_DirWS817_g170753;
					half4 Noise_Params685_g170753 = temp_output_635_0_g170753;
					half Wind_Sinus820_g170753 = ( ((Noise_Params685_g170753).b*2.0 + -1.0) * Input_MotionNoise552_g170753 * 0.6 );
					float3 appendResult824_g170753 = (float3(break823_g170753.x , Wind_Sinus820_g170753 , break823_g170753.y));
					half Input_MotionDelay753_g170753 = _MotionSmallDelayValue;
					float lerpResult756_g170753 = lerp( 1.0 , ( Input_WindValue881_g170753 * Input_WindValue881_g170753 ) , Input_MotionDelay753_g170753);
					half Wind_Delay815_g170753 = lerpResult756_g170753;
					float3 appendResult825_g170753 = (float3(Wind_Delay815_g170753 , 1.0 , Wind_Delay815_g170753));
					float3 temp_output_827_0_g170753 = ( ( appendResult824_g170753 * Input_WindValue881_g170753 ) * appendResult825_g170753 );
					float2 break857_g170753 = Noise_DirWS858_g170753;
					float3 appendResult833_g170753 = (float3(break857_g170753.x , Wind_Sinus820_g170753 , break857_g170753.y));
					half Global_PushWave2675_g170727 = (Input_GlobalFlow826_g170752).z;
					half Input_PushWave890_g170753 = Global_PushWave2675_g170727;
					float2 temp_output_790_0_g170752 = (Input_GlobalFlow826_g170752).xy;
					half Global_PushAlpha1504_g170727 = saturate( length( temp_output_790_0_g170752 ) );
					half Input_PushAlpha806_g170753 = ( Global_PushAlpha1504_g170727 * _MotionSmallPushValue );
					float3 lerpResult840_g170753 = lerp( temp_output_827_0_g170753 , ( appendResult833_g170753 * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float3 staticSwitch829_g170753 = lerpResult840_g170753;
					#else
					float3 staticSwitch829_g170753 = temp_output_827_0_g170753;
					#endif
					float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
					float3 temp_output_847_0_g170753 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170753 , 0.0 ) ).xyz * ase_parentObjectScale );
					half3 Small_Squash1489_g170727 = temp_output_847_0_g170753;
					half3 Small_Motion789_g170727 = ( _MotionSmallIntensityValue * Small_Mask640_g170727 * Small_Squash1489_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch495_g170727 = Small_Motion789_g170727;
					#else
					float3 staticSwitch495_g170727 = temp_cast_35;
					#endif
					float3 temp_cast_38 = (0.0).xxx;
					half3 Model_PositionWS1819_g170727 = temp_output_2503_16_g170727;
					half Global_DistMask1820_g170727 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170727 ) / _MotionDistValue ) ) );
					float4 break1710_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170729 = _motion_tiny_vert_mode;
					float temp_output_30_0_g170729 = ( break1710_g170727.x * break33_g170729.x );
					float temp_output_29_0_g170729 = ( break1710_g170727.y * break33_g170729.y );
					float temp_output_31_0_g170729 = ( break1710_g170727.z * break33_g170729.z );
					float temp_output_28_0_g170729 = ( temp_output_30_0_g170729 + temp_output_29_0_g170729 + temp_output_31_0_g170729 + ( break1710_g170727.w * break33_g170729.w ) );
					float temp_output_1729_0_g170727 = temp_output_28_0_g170729;
					float4 break33_g170731 = _motion_tiny_proc_mode;
					float temp_output_30_0_g170731 = ( (Model_BoundsData1322_g170727).z * break33_g170731.x );
					float temp_output_29_0_g170731 = ( (Model_BoundsData1322_g170727).w * break33_g170731.y );
					float temp_output_1735_0_g170727 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 );
					float lerpResult1908_g170727 = lerp( temp_output_1729_0_g170727 , temp_output_1735_0_g170727 , _motion_tiny_mask_mode);
					half Tiny_Mask_Legacy1807_g170727 = break1804_g170727.y;
					#ifdef TVE_LEGACY
					float staticSwitch1810_g170727 = Tiny_Mask_Legacy1807_g170727;
					#else
					float staticSwitch1810_g170727 = lerpResult1908_g170727;
					#endif
					float clampResult17_g170733 = clamp( staticSwitch1810_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170742 = _MotionTinyMaskRemap.x;
					float temp_output_9_0_g170742 = ( clampResult17_g170733 - temp_output_7_0_g170742 );
					float temp_output_6_0_g170734 = saturate( ( ( temp_output_9_0_g170742 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170734 = ( temp_output_6_0_g170734 + _MotionTinyMaskMode );
					#else
					float staticSwitch14_g170734 = temp_output_6_0_g170734;
					#endif
					half Tiny_Mask218_g170727 = staticSwitch14_g170734;
					float3 temp_output_2503_20_g170727 = Out_NormalOS15_g170743;
					half3 Model_NormalOS554_g170727 = temp_output_2503_20_g170727;
					half3 Input_NormalOS533_g170747 = Model_NormalOS554_g170727;
					half3 Tiny_Position2469_g170727 = Model_PositionWO162_g170727;
					half3 Input_PositionWO500_g170747 = Tiny_Position2469_g170727;
					half Input_MotionTilling321_g170747 = ( _MotionTinyTillingValue + 0.1 );
					float lerpResult128_g170749 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170747 = _MotionTinySpeedValue;
					half3 Flutter_Noise535_g170747 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170747).xz * Input_MotionTilling321_g170747 * 0.005 ) + ( lerpResult128_g170749 * Input_MotionSpeed62_g170747 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
					half Input_MotionNoise542_g170747 = _MotionTinyNoiseValue;
					float3 lerpResult537_g170747 = lerp( ( Input_NormalOS533_g170747 * Flutter_Noise535_g170747 ) , Flutter_Noise535_g170747 , Input_MotionNoise542_g170747);
					half2 Input_WindDirWS803_g170758 = Global_WindDirWS2542_g170727;
					half3 Input_ModelPositionWO761_g170746 = Model_PositionWO162_g170727;
					half3 Input_ModelPivotsWO419_g170746 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170746 = _MotionBasePivotValue;
					float3 lerpResult771_g170746 = lerp( Input_ModelPositionWO761_g170746 , Input_ModelPivotsWO419_g170746 , Input_MotionPivots629_g170746);
					half4 Input_ModelMotionData763_g170746 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170746 = _MotionBasePhaseValue;
					half3 Base_Position1394_g170727 = ( lerpResult771_g170746 + ( (Input_ModelMotionData763_g170746).z * Input_MotionPhase764_g170746 * 5.0 ) );
					half3 Input_PositionWO419_g170758 = Base_Position1394_g170727;
					half Input_MotionTilling321_g170758 = ( _MotionBaseTillingValue + 0.2 );
					half2 Noise_Coord515_g170758 = ( -(Input_PositionWO419_g170758).xz * Input_MotionTilling321_g170758 * 0.005 );
					float2 temp_output_3_0_g170762 = Noise_Coord515_g170758;
					float2 temp_output_21_0_g170762 = Input_WindDirWS803_g170758;
					float mulTime113_g170761 = _Time.y * 0.02;
					float lerpResult128_g170761 = lerp( mulTime113_g170761 , ( ( mulTime113_g170761 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170758 = _MotionBaseSpeedValue;
					half Noise_Speed516_g170758 = ( lerpResult128_g170761 * Input_MotionSpeed62_g170758 );
					float temp_output_15_0_g170762 = Noise_Speed516_g170758;
					float temp_output_23_0_g170762 = frac( temp_output_15_0_g170762 );
					float4 lerpResult39_g170762 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * temp_output_23_0_g170762 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * frac( ( temp_output_15_0_g170762 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170762 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170758 = lerpResult39_g170762;
					half2 Noise_DirWS825_g170758 = ((temp_output_635_0_g170758).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170758 = _MotionBaseNoiseValue;
					half Input_WindValue853_g170758 = Global_WindValue1855_g170727;
					float lerpResult701_g170758 = lerp( 1.0 , Input_MotionNoise552_g170758 , Input_WindValue853_g170758);
					float2 lerpResult646_g170758 = lerp( Input_WindDirWS803_g170758 , Noise_DirWS825_g170758 , lerpResult701_g170758);
					half Input_MotionDelay753_g170758 = _MotionBaseDelayValue;
					float lerpResult756_g170758 = lerp( 1.0 , ( Input_WindValue853_g170758 * Input_WindValue853_g170758 ) , Input_MotionDelay753_g170758);
					half Wind_Delay815_g170758 = lerpResult756_g170758;
					float2 temp_output_809_0_g170758 = ( lerpResult646_g170758 * Input_WindValue853_g170758 * Wind_Delay815_g170758 );
					half2 Bend_Dir859_g170758 = temp_output_809_0_g170758;
					float temp_output_862_0_g170758 = ( length( Bend_Dir859_g170758 ) * Input_MotionNoise552_g170758 );
					float2 Global_PushDirWS1972_g170727 = temp_output_790_0_g170752;
					half2 Input_PushDirWS807_g170758 = Global_PushDirWS1972_g170727;
					half Input_PushWave858_g170758 = Global_PushWave2675_g170727;
					half Input_PushAlpha806_g170758 = ( Global_PushAlpha1504_g170727 * _MotionBasePushValue );
					float lerpResult831_g170758 = lerp( temp_output_862_0_g170758 , ( saturate( length( Input_PushDirWS807_g170758 ) ) * Input_PushWave858_g170758 ) , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch828_g170758 = lerpResult831_g170758;
					#else
					float staticSwitch828_g170758 = temp_output_862_0_g170758;
					#endif
					half Base_Wave1159_g170727 = staticSwitch828_g170758;
					float temp_output_888_0_g170753 = ( (Noise_Params685_g170753).b * Input_WindValue881_g170753 );
					float lerpResult867_g170753 = lerp( temp_output_888_0_g170753 , ( (Noise_Params685_g170753).b * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch886_g170753 = lerpResult867_g170753;
					#else
					float staticSwitch886_g170753 = temp_output_888_0_g170753;
					#endif
					half Small_Wave1427_g170727 = staticSwitch886_g170753;
					float lerpResult2422_g170727 = lerp( Base_Wave1159_g170727 , Small_Wave1427_g170727 , _motion_small_mode);
					half Global_Wave1475_g170727 = lerpResult2422_g170727;
					half Input_GlobalWave546_g170747 = Global_Wave1475_g170727;
					float temp_output_548_0_g170747 = ( Input_GlobalWave546_g170747 * Input_GlobalWave546_g170747 );
					half Flutter_Wave556_g170747 = temp_output_548_0_g170747;
					half3 Tiny_Noise859_g170727 = ( lerpResult537_g170747 * Flutter_Wave556_g170747 );
					half3 Tiny_Flutter1451_g170727 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170727 * Tiny_Mask218_g170727 * Tiny_Noise859_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch414_g170727 = Tiny_Flutter1451_g170727;
					#else
					float3 staticSwitch414_g170727 = temp_cast_38;
					#endif
					half3 Final_PositionADD1569_g170727 = ( staticSwitch495_g170727 + staticSwitch414_g170727 );
					float3 In_PositionAddOS16_g170744 = Final_PositionADD1569_g170727;
					float3 temp_output_2503_24_g170727 = Out_PivotOS15_g170743;
					float3 In_PivotOS16_g170744 = temp_output_2503_24_g170727;
					float3 In_PivotWS16_g170744 = Out_PivotWS15_g170743;
					float3 In_PivotWO16_g170744 = temp_output_2503_19_g170727;
					float3 In_NormalOS16_g170744 = temp_output_2503_20_g170727;
					float3 In_NormalWS16_g170744 = Out_NormalWS15_g170743;
					float3 In_NormalRawOS16_g170744 = Out_NormalRawOS15_g170743;
					float3 In_NormalRawWS16_g170744 = Out_NormalRawWS15_g170743;
					float4 In_TangentOS16_g170744 = Out_TangentOS15_g170743;
					float3 In_ViewDirWS16_g170744 = Out_ViewDirWS15_g170743;
					float4 In_VertexData16_g170744 = temp_output_2503_29_g170727;
					float4 In_PhaseData16_g170744 = temp_output_2503_27_g170727;
					float4 In_BoundsData16_g170744 = temp_output_2503_30_g170727;
					float4 break748_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170736 = _motion_base_vert_mode;
					float temp_output_30_0_g170736 = ( break748_g170727.x * break33_g170736.x );
					float temp_output_29_0_g170736 = ( break748_g170727.y * break33_g170736.y );
					float temp_output_31_0_g170736 = ( break748_g170727.z * break33_g170736.z );
					float temp_output_28_0_g170736 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 + temp_output_31_0_g170736 + ( break748_g170727.w * break33_g170736.w ) );
					float temp_output_1731_0_g170727 = temp_output_28_0_g170736;
					float4 break33_g170737 = _motion_base_proc_mode;
					float temp_output_30_0_g170737 = ( (Model_BoundsData1322_g170727).z * break33_g170737.x );
					float temp_output_29_0_g170737 = ( (Model_BoundsData1322_g170727).w * break33_g170737.y );
					float temp_output_1733_0_g170727 = ( temp_output_30_0_g170737 + temp_output_29_0_g170737 );
					float lerpResult1904_g170727 = lerp( temp_output_1731_0_g170727 , temp_output_1733_0_g170727 , _motion_base_mask_mode);
					float clampResult17_g170735 = clamp( lerpResult1904_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170740 = _MotionBaseMaskRemap.x;
					float temp_output_9_0_g170740 = ( clampResult17_g170735 - temp_output_7_0_g170740 );
					float temp_output_6_0_g170738 = saturate( ( ( temp_output_9_0_g170740 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170738 = ( temp_output_6_0_g170738 + _MotionBaseMaskMode );
					#else
					float staticSwitch14_g170738 = temp_output_6_0_g170738;
					#endif
					half Base_Mask217_g170727 = staticSwitch14_g170738;
					float2 lerpResult811_g170758 = lerp( temp_output_809_0_g170758 , Input_PushDirWS807_g170758 , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float2 staticSwitch808_g170758 = lerpResult811_g170758;
					#else
					float2 staticSwitch808_g170758 = temp_output_809_0_g170758;
					#endif
					float2 temp_output_38_0_g170759 = staticSwitch808_g170758;
					float2 break83_g170759 = temp_output_38_0_g170759;
					float3 appendResult79_g170759 = (float3(break83_g170759.x , 0.0 , break83_g170759.y));
					half2 Base_Bending893_g170727 = (( mul( unity_WorldToObject, float4( appendResult79_g170759 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
					half2 Base_Motion1440_g170727 = ( _MotionBaseIntensityValue * Base_Mask217_g170727 * Base_Bending893_g170727 );
					#ifdef TVE_MOTION
					float2 staticSwitch2384_g170727 = Base_Motion1440_g170727;
					#else
					float2 staticSwitch2384_g170727 = float2( 0,0 );
					#endif
					float4 appendResult2023_g170727 = (float4(staticSwitch2384_g170727 , 0.0 , 0.0));
					half4 Final_RotationData1570_g170727 = appendResult2023_g170727;
					float4 In_RotationData16_g170744 = Final_RotationData1570_g170727;
					{
					Data16_g170744.Dummy = In_Dummy16_g170744;
					Data16_g170744.PositionOS = In_PositionOS16_g170744;
					Data16_g170744.PositionWS = In_PositionWS16_g170744;
					Data16_g170744.PositionWO = In_PositionWO16_g170744;
					Data16_g170744.PositionRawOS = In_PositionRawOS16_g170744;
					Data16_g170744.PositionAddOS = In_PositionAddOS16_g170744;
					Data16_g170744.PivotOS = In_PivotOS16_g170744;
					Data16_g170744.PivotWS = In_PivotWS16_g170744;
					Data16_g170744.PivotWO = In_PivotWO16_g170744;
					Data16_g170744.NormalOS = In_NormalOS16_g170744;
					Data16_g170744.NormalWS = In_NormalWS16_g170744;
					Data16_g170744.NormalRawOS = In_NormalRawOS16_g170744;
					Data16_g170744.NormalRawWS = In_NormalRawWS16_g170744;
					Data16_g170744.TangentOS = In_TangentOS16_g170744;
					Data16_g170744.ViewDirWS = In_ViewDirWS16_g170744;
					Data16_g170744.VertexData = In_VertexData16_g170744;
					Data16_g170744.PhaseData = In_PhaseData16_g170744;
					Data16_g170744.BoundsData = In_BoundsData16_g170744;
					Data16_g170744.RotationData = In_RotationData16_g170744;
					}
					TVEModelData Data15_g170971 = Data16_g170744;
					float Out_Dummy15_g170971 = 0;
					float3 Out_PositionOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170971 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170971 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170971 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170971 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170971 = float3( 0,0,0 );
					float4 Out_VertexData15_g170971 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170971 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170971 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170971 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170971 = Data15_g170971.Dummy;
					Out_PositionOS15_g170971 = Data15_g170971.PositionOS;
					Out_PositionWS15_g170971 = Data15_g170971.PositionWS;
					Out_PositionWO15_g170971 = Data15_g170971.PositionWO;
					Out_PositionRawOS15_g170971 = Data15_g170971.PositionRawOS;
					Out_PositionAddOS15_g170971 = Data15_g170971.PositionAddOS;
					Out_PivotOS15_g170971 = Data15_g170971.PivotOS;
					Out_PivotWS15_g170971 = Data15_g170971.PivotWS;
					Out_PivotWO15_g170971 = Data15_g170971.PivotWO;
					Out_NormalOS15_g170971 = Data15_g170971.NormalOS;
					Out_NormalWS15_g170971 = Data15_g170971.NormalWS;
					Out_NormalRawOS15_g170971 = Data15_g170971.NormalRawOS;
					Out_NormalRawWS15_g170971 = Data15_g170971.NormalRawWS;
					Out_TangentOS15_g170971 = Data15_g170971.TangentOS;
					Out_ViewDirWS15_g170971 = Data15_g170971.ViewDirWS;
					Out_VertexData15_g170971 = Data15_g170971.VertexData;
					Out_PhaseData15_g170971 = Data15_g170971.PhaseData;
					Out_BoundsData15_g170971 = Data15_g170971.BoundsData;
					Out_RotationData15_g170971 = Data15_g170971.RotationData;
					}
					half3 Model_PositionOS147_g170970 = Out_PositionOS15_g170971;
					half3 VertexPos40_g170974 = Model_PositionOS147_g170970;
					float3 appendResult74_g170974 = (float3(VertexPos40_g170974.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g170974 = appendResult74_g170974;
					float3 break84_g170974 = VertexPos40_g170974;
					float3 appendResult81_g170974 = (float3(0.0 , break84_g170974.y , break84_g170974.z));
					half3 VertexPosOtherAxis82_g170974 = appendResult81_g170974;
					float4 temp_output_1567_33_g170970 = Out_RotationData15_g170971;
					half4 Model_VertexBend1569_g170970 = temp_output_1567_33_g170970;
					float2 break1582_g170970 = (Model_VertexBend1569_g170970).xy;
					half Angle44_g170974 = break1582_g170970.y;
					half3 VertexPos40_g170977 = ( VertexPosRotationAxis50_g170974 + ( VertexPosOtherAxis82_g170974 * cos( Angle44_g170974 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170974 ) * sin( Angle44_g170974 ) ) );
					float3 appendResult74_g170977 = (float3(0.0 , 0.0 , VertexPos40_g170977.z));
					half3 VertexPosRotationAxis50_g170977 = appendResult74_g170977;
					float3 break84_g170977 = VertexPos40_g170977;
					float3 appendResult81_g170977 = (float3(break84_g170977.x , break84_g170977.y , 0.0));
					half3 VertexPosOtherAxis82_g170977 = appendResult81_g170977;
					half Angle44_g170977 = -break1582_g170970.x;
					float3 temp_output_1584_19_g170970 = ( VertexPosRotationAxis50_g170977 + ( VertexPosOtherAxis82_g170977 * cos( Angle44_g170977 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170977 ) * sin( Angle44_g170977 ) ) );
					float3 temp_output_6_0_g170976 = temp_output_1584_19_g170970;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch65_g170976 = Model_PositionOS147_g170970;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch69_g170976 = staticSwitch65_g170976;
					#endif
					float3 temp_output_1585_0_g170970 = staticSwitch69_g170976;
					float3 temp_output_1567_31_g170970 = Out_PositionAddOS15_g170971;
					half3 Model_PositionADD1568_g170970 = temp_output_1567_31_g170970;
					half3 Final_PositionOS178_g170970 = ( temp_output_1585_0_g170970 + Model_PositionADD1568_g170970 );
					float3 In_PositionOS16_g170972 = Final_PositionOS178_g170970;
					float3 In_PositionWS16_g170972 = Out_PositionWS15_g170971;
					float3 In_PositionWO16_g170972 = Out_PositionWO15_g170971;
					float3 In_PositionRawOS16_g170972 = Out_PositionRawOS15_g170971;
					float3 In_PositionAddOS16_g170972 = temp_output_1567_31_g170970;
					float3 In_PivotOS16_g170972 = Out_PivotOS15_g170971;
					float3 In_PivotWS16_g170972 = Out_PivotWS15_g170971;
					float3 In_PivotWO16_g170972 = Out_PivotWO15_g170971;
					float3 In_NormalOS16_g170972 = Out_NormalOS15_g170971;
					float3 In_NormalWS16_g170972 = Out_NormalWS15_g170971;
					float3 In_NormalRawOS16_g170972 = Out_NormalRawOS15_g170971;
					float3 In_NormalRawWS16_g170972 = Out_NormalRawWS15_g170971;
					float4 In_TangentOS16_g170972 = Out_TangentOS15_g170971;
					float3 In_ViewDirWS16_g170972 = Out_ViewDirWS15_g170971;
					float4 In_VertexData16_g170972 = Out_VertexData15_g170971;
					float4 In_PhaseData16_g170972 = Out_PhaseData15_g170971;
					float4 In_BoundsData16_g170972 = Out_BoundsData15_g170971;
					float4 In_RotationData16_g170972 = temp_output_1567_33_g170970;
					{
					Data16_g170972.Dummy = In_Dummy16_g170972;
					Data16_g170972.PositionOS = In_PositionOS16_g170972;
					Data16_g170972.PositionWS = In_PositionWS16_g170972;
					Data16_g170972.PositionWO = In_PositionWO16_g170972;
					Data16_g170972.PositionRawOS = In_PositionRawOS16_g170972;
					Data16_g170972.PositionAddOS = In_PositionAddOS16_g170972;
					Data16_g170972.PivotOS = In_PivotOS16_g170972;
					Data16_g170972.PivotWS = In_PivotWS16_g170972;
					Data16_g170972.PivotWO = In_PivotWO16_g170972;
					Data16_g170972.NormalOS = In_NormalOS16_g170972;
					Data16_g170972.NormalWS = In_NormalWS16_g170972;
					Data16_g170972.NormalRawOS = In_NormalRawOS16_g170972;
					Data16_g170972.NormalRawWS = In_NormalRawWS16_g170972;
					Data16_g170972.TangentOS = In_TangentOS16_g170972;
					Data16_g170972.ViewDirWS = In_ViewDirWS16_g170972;
					Data16_g170972.VertexData = In_VertexData16_g170972;
					Data16_g170972.PhaseData = In_PhaseData16_g170972;
					Data16_g170972.BoundsData = In_BoundsData16_g170972;
					Data16_g170972.RotationData = In_RotationData16_g170972;
					}
					TVEModelData Data15_g170997 = Data16_g170972;
					float Out_Dummy15_g170997 = 0;
					float3 Out_PositionOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170997 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170997 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170997 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170997 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170997 = float3( 0,0,0 );
					float4 Out_VertexData15_g170997 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170997 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170997 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170997 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170997 = Data15_g170997.Dummy;
					Out_PositionOS15_g170997 = Data15_g170997.PositionOS;
					Out_PositionWS15_g170997 = Data15_g170997.PositionWS;
					Out_PositionWO15_g170997 = Data15_g170997.PositionWO;
					Out_PositionRawOS15_g170997 = Data15_g170997.PositionRawOS;
					Out_PositionAddOS15_g170997 = Data15_g170997.PositionAddOS;
					Out_PivotOS15_g170997 = Data15_g170997.PivotOS;
					Out_PivotWS15_g170997 = Data15_g170997.PivotWS;
					Out_PivotWO15_g170997 = Data15_g170997.PivotWO;
					Out_NormalOS15_g170997 = Data15_g170997.NormalOS;
					Out_NormalWS15_g170997 = Data15_g170997.NormalWS;
					Out_NormalRawOS15_g170997 = Data15_g170997.NormalRawOS;
					Out_NormalRawWS15_g170997 = Data15_g170997.NormalRawWS;
					Out_TangentOS15_g170997 = Data15_g170997.TangentOS;
					Out_ViewDirWS15_g170997 = Data15_g170997.ViewDirWS;
					Out_VertexData15_g170997 = Data15_g170997.VertexData;
					Out_PhaseData15_g170997 = Data15_g170997.PhaseData;
					Out_BoundsData15_g170997 = Data15_g170997.BoundsData;
					Out_RotationData15_g170997 = Data15_g170997.RotationData;
					}
					float3 In_PositionOS16_g171012 = Out_PositionOS15_g170997;
					float3 In_PositionWS16_g171012 = Out_PositionWS15_g170997;
					float3 temp_output_1567_17_g170996 = Out_PositionWO15_g170997;
					float3 In_PositionWO16_g171012 = temp_output_1567_17_g170996;
					float3 temp_output_1567_26_g170996 = Out_PositionRawOS15_g170997;
					float3 In_PositionRawOS16_g171012 = temp_output_1567_26_g170996;
					float3 In_PositionAddOS16_g171012 = Out_PositionAddOS15_g170997;
					float3 In_PivotOS16_g171012 = Out_PivotOS15_g170997;
					float3 In_PivotWS16_g171012 = Out_PivotWS15_g170997;
					float3 In_PivotWO16_g171012 = Out_PivotWO15_g170997;
					half3 Model_NormalOS1568_g170996 = Out_NormalOS15_g170997;
					half3 _Vector1 = half3(0,1,0);
					float3 lerpResult1589_g170996 = lerp( Model_NormalOS1568_g170996 , _Vector1 , _NormalFlattenValue);
					half3 Model_PositionRAW1592_g170996 = temp_output_1567_26_g170996;
					float3 normalizeResult1594_g170996 = ASESafeNormalize( ( Model_PositionRAW1592_g170996 + _NormalSphereOffsetValue ) );
					float3 lerpResult1585_g170996 = lerp( lerpResult1589_g170996 , normalizeResult1594_g170996 , _NormalSphereValue);
					half3 VertexPos40_g170999 = lerpResult1585_g170996;
					half3 VertexPos40_g171000 = VertexPos40_g170999;
					float3 appendResult74_g171000 = (float3(VertexPos40_g171000.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g171000 = appendResult74_g171000;
					float3 break84_g171000 = VertexPos40_g171000;
					float3 appendResult81_g171000 = (float3(0.0 , break84_g171000.y , break84_g171000.z));
					half3 VertexPosOtherAxis82_g171000 = appendResult81_g171000;
					float4 temp_output_1567_33_g170996 = Out_RotationData15_g170997;
					half4 Model_RotationData1583_g170996 = temp_output_1567_33_g170996;
					half2 Angle44_g170999 = Model_RotationData1583_g170996.xy;
					half Angle44_g171000 = (Angle44_g170999).y;
					half3 VertexPos40_g171001 = ( VertexPosRotationAxis50_g171000 + ( VertexPosOtherAxis82_g171000 * cos( Angle44_g171000 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g171000 ) * sin( Angle44_g171000 ) ) );
					float3 appendResult74_g171001 = (float3(0.0 , 0.0 , VertexPos40_g171001.z));
					half3 VertexPosRotationAxis50_g171001 = appendResult74_g171001;
					float3 break84_g171001 = VertexPos40_g171001;
					float3 appendResult81_g171001 = (float3(break84_g171001.x , break84_g171001.y , 0.0));
					half3 VertexPosOtherAxis82_g171001 = appendResult81_g171001;
					half Angle44_g171001 = -(Angle44_g170999).x;
					float3 lerpResult1591_g170996 = lerp( lerpResult1585_g170996 , ( VertexPosRotationAxis50_g171001 + ( VertexPosOtherAxis82_g171001 * cos( Angle44_g171001 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g171001 ) * sin( Angle44_g171001 ) ) ) , _NormalComputeValue);
					float3 temp_output_6_0_g171011 = lerpResult1591_g170996;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch65_g171011 = lerpResult1585_g170996;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch69_g171011 = staticSwitch65_g171011;
					#endif
					float4 temp_output_1567_29_g170996 = Out_VertexData15_g170997;
					half4 Model_VertexData1608_g170996 = temp_output_1567_29_g170996;
					float4 break1683_g170996 = Model_VertexData1608_g170996;
					float4 break33_g171002 = _normal_vert_mode;
					float temp_output_30_0_g171002 = ( break1683_g170996.x * break33_g171002.x );
					float temp_output_29_0_g171002 = ( break1683_g170996.y * break33_g171002.y );
					float temp_output_31_0_g171002 = ( break1683_g170996.z * break33_g171002.z );
					float temp_output_28_0_g171002 = ( temp_output_30_0_g171002 + temp_output_29_0_g171002 + temp_output_31_0_g171002 + ( break1683_g170996.w * break33_g171002.w ) );
					float clampResult17_g171003 = clamp( temp_output_28_0_g171002 , 0.0001 , 0.9999 );
					float temp_output_7_0_g171007 = _NormalMeshRemap.x;
					float temp_output_9_0_g171007 = ( clampResult17_g171003 - temp_output_7_0_g171007 );
					float lerpResult1695_g170996 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g171007 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
					float temp_output_6_0_g171004 = lerpResult1695_g170996;
					#ifdef TVE_DUMMY
					float staticSwitch14_g171004 = ( temp_output_6_0_g171004 + _NormalMeshMode );
					#else
					float staticSwitch14_g171004 = temp_output_6_0_g171004;
					#endif
					float temp_output_1690_0_g170996 = staticSwitch14_g171004;
					half Normal_MeskMask1691_g170996 = temp_output_1690_0_g170996;
					half Normal_Proj_Mask1647_g170996 = 1.0;
					float temp_output_1699_0_g170996 = ( Normal_MeskMask1691_g170996 * Normal_Proj_Mask1647_g170996 );
					float3 lerpResult1670_g170996 = lerp( Model_NormalOS1568_g170996 , staticSwitch69_g171011 , temp_output_1699_0_g170996);
					#ifdef TVE_NORMAL
					float3 staticSwitch1716_g170996 = lerpResult1670_g170996;
					#else
					float3 staticSwitch1716_g170996 = Model_NormalOS1568_g170996;
					#endif
					half3 Final_NormalOS178_g170996 = staticSwitch1716_g170996;
					float3 In_NormalOS16_g171012 = Final_NormalOS178_g170996;
					float3 temp_output_1567_21_g170996 = Out_NormalWS15_g170997;
					float3 In_NormalWS16_g171012 = temp_output_1567_21_g170996;
					float3 In_NormalRawOS16_g171012 = Out_NormalRawOS15_g170997;
					float3 In_NormalRawWS16_g171012 = Out_NormalRawWS15_g170997;
					float4 In_TangentOS16_g171012 = Out_TangentOS15_g170997;
					float3 In_ViewDirWS16_g171012 = Out_ViewDirWS15_g170997;
					float4 In_VertexData16_g171012 = temp_output_1567_29_g170996;
					float4 In_PhaseData16_g171012 = Out_PhaseData15_g170997;
					float4 In_BoundsData16_g171012 = Out_BoundsData15_g170997;
					float4 In_RotationData16_g171012 = temp_output_1567_33_g170996;
					{
					Data16_g171012.Dummy = In_Dummy16_g171012;
					Data16_g171012.PositionOS = In_PositionOS16_g171012;
					Data16_g171012.PositionWS = In_PositionWS16_g171012;
					Data16_g171012.PositionWO = In_PositionWO16_g171012;
					Data16_g171012.PositionRawOS = In_PositionRawOS16_g171012;
					Data16_g171012.PositionAddOS = In_PositionAddOS16_g171012;
					Data16_g171012.PivotOS = In_PivotOS16_g171012;
					Data16_g171012.PivotWS = In_PivotWS16_g171012;
					Data16_g171012.PivotWO = In_PivotWO16_g171012;
					Data16_g171012.NormalOS = In_NormalOS16_g171012;
					Data16_g171012.NormalWS = In_NormalWS16_g171012;
					Data16_g171012.NormalRawOS = In_NormalRawOS16_g171012;
					Data16_g171012.NormalRawWS = In_NormalRawWS16_g171012;
					Data16_g171012.TangentOS = In_TangentOS16_g171012;
					Data16_g171012.ViewDirWS = In_ViewDirWS16_g171012;
					Data16_g171012.VertexData = In_VertexData16_g171012;
					Data16_g171012.PhaseData = In_PhaseData16_g171012;
					Data16_g171012.BoundsData = In_BoundsData16_g171012;
					Data16_g171012.RotationData = In_RotationData16_g171012;
					}
					TVEModelData Data15_g171022 = Data16_g171012;
					float Out_Dummy15_g171022 = 0;
					float3 Out_PositionOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171022 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171022 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171022 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171022 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171022 = float3( 0,0,0 );
					float4 Out_VertexData15_g171022 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171022 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171022 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171022 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171022 = Data15_g171022.Dummy;
					Out_PositionOS15_g171022 = Data15_g171022.PositionOS;
					Out_PositionWS15_g171022 = Data15_g171022.PositionWS;
					Out_PositionWO15_g171022 = Data15_g171022.PositionWO;
					Out_PositionRawOS15_g171022 = Data15_g171022.PositionRawOS;
					Out_PositionAddOS15_g171022 = Data15_g171022.PositionAddOS;
					Out_PivotOS15_g171022 = Data15_g171022.PivotOS;
					Out_PivotWS15_g171022 = Data15_g171022.PivotWS;
					Out_PivotWO15_g171022 = Data15_g171022.PivotWO;
					Out_NormalOS15_g171022 = Data15_g171022.NormalOS;
					Out_NormalWS15_g171022 = Data15_g171022.NormalWS;
					Out_NormalRawOS15_g171022 = Data15_g171022.NormalRawOS;
					Out_NormalRawWS15_g171022 = Data15_g171022.NormalRawWS;
					Out_TangentOS15_g171022 = Data15_g171022.TangentOS;
					Out_ViewDirWS15_g171022 = Data15_g171022.ViewDirWS;
					Out_VertexData15_g171022 = Data15_g171022.VertexData;
					Out_PhaseData15_g171022 = Data15_g171022.PhaseData;
					Out_BoundsData15_g171022 = Data15_g171022.BoundsData;
					Out_RotationData15_g171022 = Data15_g171022.RotationData;
					}
					float3 temp_output_217_24_g171021 = Out_PivotOS15_g171022;
					float3 In_PositionOS16_g171023 = ( Out_PositionOS15_g171022 + temp_output_217_24_g171021 );
					float3 In_PositionWS16_g171023 = Out_PositionWS15_g171022;
					float3 In_PositionWO16_g171023 = Out_PositionWO15_g171022;
					float3 In_PositionRawOS16_g171023 = Out_PositionRawOS15_g171022;
					float3 In_PositionAddOS16_g171023 = Out_PositionAddOS15_g171022;
					float3 In_PivotOS16_g171023 = temp_output_217_24_g171021;
					float3 In_PivotWS16_g171023 = Out_PivotWS15_g171022;
					float3 In_PivotWO16_g171023 = Out_PivotWO15_g171022;
					float3 In_NormalOS16_g171023 = Out_NormalOS15_g171022;
					float3 In_NormalWS16_g171023 = Out_NormalWS15_g171022;
					float3 In_NormalRawOS16_g171023 = Out_NormalRawOS15_g171022;
					float3 In_NormalRawWS16_g171023 = Out_NormalRawWS15_g171022;
					float4 In_TangentOS16_g171023 = Out_TangentOS15_g171022;
					float3 In_ViewDirWS16_g171023 = Out_ViewDirWS15_g171022;
					float4 In_VertexData16_g171023 = Out_VertexData15_g171022;
					float4 In_PhaseData16_g171023 = Out_PhaseData15_g171022;
					float4 In_BoundsData16_g171023 = Out_BoundsData15_g171022;
					float4 In_RotationData16_g171023 = Out_RotationData15_g171022;
					{
					Data16_g171023.Dummy = In_Dummy16_g171023;
					Data16_g171023.PositionOS = In_PositionOS16_g171023;
					Data16_g171023.PositionWS = In_PositionWS16_g171023;
					Data16_g171023.PositionWO = In_PositionWO16_g171023;
					Data16_g171023.PositionRawOS = In_PositionRawOS16_g171023;
					Data16_g171023.PositionAddOS = In_PositionAddOS16_g171023;
					Data16_g171023.PivotOS = In_PivotOS16_g171023;
					Data16_g171023.PivotWS = In_PivotWS16_g171023;
					Data16_g171023.PivotWO = In_PivotWO16_g171023;
					Data16_g171023.NormalOS = In_NormalOS16_g171023;
					Data16_g171023.NormalWS = In_NormalWS16_g171023;
					Data16_g171023.NormalRawOS = In_NormalRawOS16_g171023;
					Data16_g171023.NormalRawWS = In_NormalRawWS16_g171023;
					Data16_g171023.TangentOS = In_TangentOS16_g171023;
					Data16_g171023.ViewDirWS = In_ViewDirWS16_g171023;
					Data16_g171023.VertexData = In_VertexData16_g171023;
					Data16_g171023.PhaseData = In_PhaseData16_g171023;
					Data16_g171023.BoundsData = In_BoundsData16_g171023;
					Data16_g171023.RotationData = In_RotationData16_g171023;
					}
					TVEModelData Data15_g171037 = Data16_g171023;
					float Out_Dummy15_g171037 = 0;
					float3 Out_PositionOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171037 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171037 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171037 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171037 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171037 = float3( 0,0,0 );
					float4 Out_VertexData15_g171037 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171037 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171037 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171037 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171037 = Data15_g171037.Dummy;
					Out_PositionOS15_g171037 = Data15_g171037.PositionOS;
					Out_PositionWS15_g171037 = Data15_g171037.PositionWS;
					Out_PositionWO15_g171037 = Data15_g171037.PositionWO;
					Out_PositionRawOS15_g171037 = Data15_g171037.PositionRawOS;
					Out_PositionAddOS15_g171037 = Data15_g171037.PositionAddOS;
					Out_PivotOS15_g171037 = Data15_g171037.PivotOS;
					Out_PivotWS15_g171037 = Data15_g171037.PivotWS;
					Out_PivotWO15_g171037 = Data15_g171037.PivotWO;
					Out_NormalOS15_g171037 = Data15_g171037.NormalOS;
					Out_NormalWS15_g171037 = Data15_g171037.NormalWS;
					Out_NormalRawOS15_g171037 = Data15_g171037.NormalRawOS;
					Out_NormalRawWS15_g171037 = Data15_g171037.NormalRawWS;
					Out_TangentOS15_g171037 = Data15_g171037.TangentOS;
					Out_ViewDirWS15_g171037 = Data15_g171037.ViewDirWS;
					Out_VertexData15_g171037 = Data15_g171037.VertexData;
					Out_PhaseData15_g171037 = Data15_g171037.PhaseData;
					Out_BoundsData15_g171037 = Data15_g171037.BoundsData;
					Out_RotationData15_g171037 = Data15_g171037.RotationData;
					}
					float3 temp_output_6_0_g171050 = ( Out_PositionOS15_g171037 + _DisableSRPBatcher );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171050 = ( temp_output_6_0_g171050 + 0.0 );
					#else
					float3 staticSwitch14_g171050 = temp_output_6_0_g171050;
					#endif
					float3 temp_output_154_0_g171035 = staticSwitch14_g171050;
					
					o.ase_texcoord10.xyz = vertexToFrag73_g170478;
					o.ase_texcoord11.xyz = vertexToFrag76_g170478;
					float temp_output_6_0_g170750 = ( _MotionHighlightValue * Global_DistMask1820_g170727 * ( Tiny_Mask218_g170727 * Tiny_Mask218_g170727 ) * ( Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170750 = ( temp_output_6_0_g170750 + _MotionHighlightColor.r );
					#else
					float staticSwitch14_g170750 = temp_output_6_0_g170750;
					#endif
					half Wave_Mask1263 = staticSwitch14_g170750;
					float4 appendResult23_g170819 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
					float4 vertexToFrag24_g170819 = appendResult23_g170819;
					o.ase_texcoord12 = vertexToFrag24_g170819;
					
					o.ase_texcoord8 = v.ase_texcoord;
					o.ase_texcoord9.xy = v.texcoord2.xyzw.xy;
					o.ase_color = v.ase_color;
					
					//setting value to unused interpolator channels and avoid initialization warnings
					o.ase_texcoord9.zw = 0;
					o.ase_texcoord10.w = 0;
					o.ase_texcoord11.w = 0;

					#ifdef ASE_ABSOLUTE_VERTEX_POS
						float3 defaultVertexValue = v.vertex.xyz;
					#else
						float3 defaultVertexValue = float3(0, 0, 0);
					#endif
					float3 vertexValue = temp_output_154_0_g171035;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
						v.vertex.xyz = vertexValue;
					#else
						v.vertex.xyz += vertexValue;
					#endif
					v.vertex.w = 1;
					v.normal = Out_NormalOS15_g171037;
					v.tangent = Out_TangentOS15_g171037;

					float3 worldPos = mul( unity_ObjectToWorld, v.vertex ).xyz;
					half3 worldNormal = UnityObjectToWorldNormal( v.normal );
					half3 worldTangent = UnityObjectToWorldDir( v.tangent.xyz );
					half tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					half3 worldBitangent = cross( worldNormal, worldTangent ) * tangentSign;

					o.pos = UnityObjectToClipPos( v.vertex );
					o.worldNormal = float4( worldNormal, worldPos.x );
					o.worldTangent = float4( worldTangent, worldPos.y );
					o.worldBitangent = float4( worldBitangent, worldPos.z );

					o.ambientOrLightmapUV = 0;
					#ifdef LIGHTMAP_ON
						o.ambientOrLightmapUV.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
					#elif UNITY_SHOULD_SAMPLE_SH
						#ifdef VERTEXLIGHT_ON
							o.ambientOrLightmapUV.rgb += Shade4PointLights(
								unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
								unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
								unity_4LightAtten0, worldPos, worldNormal );
						#endif
						o.ambientOrLightmapUV.rgb = ShadeSHPerVertex( worldNormal, o.ambientOrLightmapUV.rgb );
					#endif
					#ifdef DYNAMICLIGHTMAP_ON
						o.ambientOrLightmapUV.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
					#endif

					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);

					#ifdef ASE_FOG
						UNITY_TRANSFER_FOG(o,o.pos);
					#endif
					return o;
				}

				#if defined(ASE_TESSELLATION)
				struct VertexControl
				{
					float4 vertex : INTERNALTESSPOS;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					float4 ase_texcoord : TEXCOORD0;

					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct TessellationFactors
				{
					float edge[3] : SV_TessFactor;
					float inside : SV_InsideTessFactor;
				};

				VertexControl vert ( appdata v )
				{
					VertexControl o;
					UNITY_SETUP_INSTANCE_ID(v);
					UNITY_TRANSFER_INSTANCE_ID(v, o);
					o.vertex = v.vertex;
					o.tangent = v.tangent;
					o.normal = v.normal;
					o.texcoord1 = v.texcoord1;
					o.texcoord2 = v.texcoord2;
					o.ase_texcoord3 = v.ase_texcoord3;
					o.ase_color = v.ase_color;
					o.ase_texcoord = v.ase_texcoord;
					return o;
				}

				TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
				{
					TessellationFactors o;
					float4 tf = 1;
					float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
					float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
					#if defined(ASE_FIXED_TESSELLATION)
					tf = FixedTess( tessValue );
					#elif defined(ASE_DISTANCE_TESSELLATION)
					tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
					#elif defined(ASE_LENGTH_TESSELLATION)
					tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
					#elif defined(ASE_LENGTH_CULL_TESSELLATION)
					tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
					#endif
					o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
					return o;
				}

				[domain("tri")]
				[partitioning("fractional_odd")]
				[outputtopology("triangle_cw")]
				[patchconstantfunc("TessellationFunction")]
				[outputcontrolpoints(3)]
				VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
				{
				   return patch[id];
				}

				[domain("tri")]
				v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
				{
					appdata o = (appdata) 0;
					o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
					o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
					o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
					o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
					o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
					o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
					o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
					o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
					#if defined(ASE_PHONG_TESSELLATION)
					float3 pp[3];
					for (int i = 0; i < 3; ++i)
						pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
					float phongStrength = _TessPhongStrength;
					o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
					#endif
					UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
					return VertexFunction(o);
				}
				#else
				v2f vert ( appdata v )
				{
					return VertexFunction( v );
				}
				#endif

				half4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
					#if defined( ASE_DEPTH_WRITE_ON )
					, out float outputDepth : SV_Depth
					#endif
					) : SV_Target
				{
					UNITY_SETUP_INSTANCE_ID(IN);

					#ifdef LOD_FADE_CROSSFADE
						UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
					#endif

					#if defined(ASE_LIGHTING_SIMPLE)
						SurfaceOutput o = (SurfaceOutput)0;
					#else
						#if defined(_SPECULAR_SETUP)
							SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
						#else
							SurfaceOutputStandard o = (SurfaceOutputStandard)0;
						#endif
					#endif

					float3 WorldNormal = IN.worldNormal;
					float3 WorldTangent = IN.worldTangent;
					float3 WorldBiTangent = IN.worldBitangent;
					float3 worldPos = float3(IN.worldNormal.w,IN.worldTangent.w,IN.worldBitangent.w);
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));

					#if defined( ASE_NEEDS_FRAG_SHADOWCOORDS )
						UNITY_LIGHT_ATTENUATION( atten, IN, worldPos )
					#else
						half atten = 1;
					#endif

					#if defined( ASE_NEEDS_FRAG_SCREEN_POSITION )
						float4 ScreenPos = IN.screenPos;
					#endif

					float localBreakData4_g171040 = ( 0.0 );
					float localCompData3_g171015 = ( 0.0 );
					TVEVisualData Data3_g171015 = (TVEVisualData)0;
					half Dummy145_g171013 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
					float In_Dummy3_g171015 = Dummy145_g171013;
					float localBreakData4_g171014 = ( 0.0 );
					float localCompData3_g170995 = ( 0.0 );
					TVEVisualData Data3_g170995 = (TVEVisualData)0;
					half Dummy145_g170980 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
					float In_Dummy3_g170995 = Dummy145_g170980;
					float localBreakData4_g170984 = ( 0.0 );
					float localCompData3_g170958 = ( 0.0 );
					TVEVisualData Data3_g170958 = (TVEVisualData)0;
					half Dummy594_g170955 = ( _DitherCategory + _DitherEnd );
					float In_Dummy3_g170958 = Dummy594_g170955;
					float localBreakData4_g170957 = ( 0.0 );
					float localCompData3_g170939 = ( 0.0 );
					TVEVisualData Data3_g170939 = (TVEVisualData)0;
					half Dummy594_g170938 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
					float In_Dummy3_g170939 = Dummy594_g170938;
					float localBreakData4_g170941 = ( 0.0 );
					float localCompData3_g170911 = ( 0.0 );
					TVEVisualData Data3_g170911 = (TVEVisualData)0;
					half Dummy594_g170909 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
					float In_Dummy3_g170911 = Dummy594_g170909;
					float localBreakData4_g170910 = ( 0.0 );
					float localCompData3_g170875 = ( 0.0 );
					TVEVisualData Data3_g170875 = (TVEVisualData)0;
					half Dummy594_g170872 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
					float In_Dummy3_g170875 = Dummy594_g170872;
					float localBreakData4_g170873 = ( 0.0 );
					float localCompData3_g170871 = ( 0.0 );
					TVEVisualData Data3_g170871 = (TVEVisualData)0;
					float In_Dummy3_g170871 = 0.0;
					float localBreakData4_g170870 = ( 0.0 );
					float localCompData3_g170848 = ( 0.0 );
					TVEVisualData Data3_g170848 = (TVEVisualData)0;
					half Dummy205_g170845 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
					float In_Dummy3_g170848 = Dummy205_g170845;
					float localBreakData4_g170847 = ( 0.0 );
					float localCompData3_g170840 = ( 0.0 );
					TVEVisualData Data3_g170840 = (TVEVisualData)0;
					half Dummy205_g170820 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
					float In_Dummy3_g170840 = Dummy205_g170820;
					float localBreakData4_g170824 = ( 0.0 );
					float localCompData3_g170810 = ( 0.0 );
					TVEVisualData Data3_g170810 = (TVEVisualData)0;
					half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
					float In_Dummy3_g170810 = Dummy220_g170808;
					float localBreakData4_g170809 = ( 0.0 );
					float localCompData3_g170801 = ( 0.0 );
					TVEVisualData Data3_g170801 = (TVEVisualData)0;
					half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
					float In_Dummy3_g170801 = Dummy220_g170798;
					float localBreakData4_g170800 = ( 0.0 );
					float localCompData3_g170790 = ( 0.0 );
					TVEVisualData Data3_g170790 = (TVEVisualData)0;
					half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
					float In_Dummy3_g170790 = Dummy202_g170788;
					float localBreakData4_g170789 = ( 0.0 );
					float localCompData3_g170695 = ( 0.0 );
					TVEVisualData Data3_g170695 = (TVEVisualData)0;
					half4 Dummy944_g170687 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
					float In_Dummy3_g170695 = Dummy944_g170687.x;
					float localBreakData4_g170694 = ( 0.0 );
					float localCompData3_g170656 = ( 0.0 );
					TVEVisualData Data3_g170656 = (TVEVisualData)0;
					half4 Dummy946_g170638 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
					float In_Dummy3_g170656 = Dummy946_g170638.x;
					float localBreakData4_g170646 = ( 0.0 );
					float localCompData3_g170628 = ( 0.0 );
					TVEVisualData Data3_g170628 = (TVEVisualData)0;
					half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
					float In_Dummy3_g170628 = Dummy130_g170617.x;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170621) = _MainAlbedoTex;
					float localFilterTexture19_g170624 = ( 0.0 );
					SamplerState SS19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170624 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170624 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170624 = SamplerDefault19_g170624;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170624 = SamplerDefault19_g170624;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170624 = SamplerPoint19_g170624;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170624 = SamplerLow19_g170624;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170624 = SamplerMedium19_g170624;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170624 = SamplerHigh19_g170624;
					#endif
					}
					SamplerState Sampler276_g170621 = SS19_g170624;
					half4 Local_Coords180_g170617 = _main_coord_value;
					float4 temp_output_37_0_g170621 = Local_Coords180_g170617;
					half4 Coords276_g170621 = temp_output_37_0_g170621;
					half2 TexCoord276_g170621 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170621 = SampleMain( Texture276_g170621 , Sampler276_g170621 , Coords276_g170621 , TexCoord276_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170621) = _MainAlbedoTex;
					SamplerState Sampler275_g170621 = SS19_g170624;
					half4 Coords275_g170621 = temp_output_37_0_g170621;
					half2 TexCoord275_g170621 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170621 = SampleExtra( Texture275_g170621 , Sampler275_g170621 , Coords275_g170621 , TexCoord275_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170621) = _MainAlbedoTex;
					SamplerState Sampler238_g170621 = SS19_g170624;
					half4 Coords238_g170621 = temp_output_37_0_g170621;
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 vertexToFrag73_g170478 = IN.ase_texcoord10.xyz;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 vertexToFrag76_g170478 = IN.ase_texcoord11.xyz;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 normalizedWorldNormal = normalize( WorldNormal );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = IN.ase_color;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170627 = Data16_g170483;
					float Out_Dummy15_g170627 = 0;
					float3 Out_PositionWS15_g170627 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170627 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170627 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170627 = float3( 0,0,0 );
					float4 Out_VertexData15_g170627 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170627 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170627 = Data15_g170627.Dummy;
					Out_PositionWS15_g170627 = Data15_g170627.PositionWS;
					Out_PositionWO15_g170627 = Data15_g170627.PositionWO;
					Out_PivotWS15_g170627 = Data15_g170627.PivotWS;
					Out_PivotWO15_g170627 = Data15_g170627.PivotWO;
					Out_NormalWS15_g170627 = Data15_g170627.NormalWS;
					Out_ViewDirWS15_g170627 = Data15_g170627.ViewDirWS;
					Out_VertexData15_g170627 = Data15_g170627.VertexData;
					Out_BoundsData15_g170627 = Data15_g170627.BoundsData;
					}
					half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170627;
					float3 temp_output_279_0_g170621 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
					half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170621) = _MainAlbedoTex;
					SamplerState Sampler246_g170621 = SS19_g170624;
					half4 Coords246_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
					half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170627;
					float3 temp_output_280_0_g170621 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
					half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170621) = _MainAlbedoTex;
					SamplerState Sampler234_g170621 = SS19_g170624;
					float4 Coords234_g170621 = temp_output_37_0_g170621;
					float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
					float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170621) = _MainAlbedoTex;
					SamplerState Sampler263_g170621 = SS19_g170624;
					half4 Coords263_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
					half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
					half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch184_g170617 = localSampleExtra275_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170621;
					#else
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#endif
					half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
					float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
					half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170623) = _MainShaderTex;
					float localFilterTexture30_g170626 = ( 0.0 );
					SamplerState SS30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170626 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170626 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170626 = SamplerDefault30_g170626;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170626 = SamplerDefault30_g170626;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170626 = SamplerPoint30_g170626;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170626 = SamplerLow30_g170626;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170626 = SamplerMedium30_g170626;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170626 = SamplerHigh30_g170626;
					#endif
					}
					SamplerState Sampler276_g170623 = SS30_g170626;
					float4 temp_output_37_0_g170623 = Local_Coords180_g170617;
					half4 Coords276_g170623 = temp_output_37_0_g170623;
					half2 TexCoord276_g170623 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170623 = SampleMain( Texture276_g170623 , Sampler276_g170623 , Coords276_g170623 , TexCoord276_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170623) = _MainShaderTex;
					SamplerState Sampler275_g170623 = SS30_g170626;
					half4 Coords275_g170623 = temp_output_37_0_g170623;
					half2 TexCoord275_g170623 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170623 = SampleExtra( Texture275_g170623 , Sampler275_g170623 , Coords275_g170623 , TexCoord275_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170623) = _MainShaderTex;
					SamplerState Sampler238_g170623 = SS30_g170626;
					half4 Coords238_g170623 = temp_output_37_0_g170623;
					float3 temp_output_279_0_g170623 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170623 = temp_output_279_0_g170623;
					half4 localSamplePlanar2D238_g170623 = SamplePlanar2D( Texture238_g170623 , Sampler238_g170623 , Coords238_g170623 , WorldPosition238_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170623) = _MainShaderTex;
					SamplerState Sampler246_g170623 = SS30_g170626;
					half4 Coords246_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition246_g170623 = temp_output_279_0_g170623;
					float3 temp_output_280_0_g170623 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170623 = temp_output_280_0_g170623;
					half4 localSamplePlanar3D246_g170623 = SamplePlanar3D( Texture246_g170623 , Sampler246_g170623 , Coords246_g170623 , WorldPosition246_g170623 , WorldNormal246_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170623) = _MainShaderTex;
					SamplerState Sampler234_g170623 = SS30_g170626;
					float4 Coords234_g170623 = temp_output_37_0_g170623;
					float3 WorldPosition234_g170623 = temp_output_279_0_g170623;
					float4 localSampleStochastic2D234_g170623 = SampleStochastic2D( Texture234_g170623 , Sampler234_g170623 , Coords234_g170623 , WorldPosition234_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170623) = _MainShaderTex;
					SamplerState Sampler263_g170623 = SS30_g170626;
					half4 Coords263_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition263_g170623 = temp_output_279_0_g170623;
					half3 WorldNormal263_g170623 = temp_output_280_0_g170623;
					half4 localSampleStochastic3D263_g170623 = SampleStochastic3D( Texture263_g170623 , Sampler263_g170623 , Coords263_g170623 , WorldPosition263_g170623 , WorldNormal263_g170623 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch198_g170617 = localSampleExtra275_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170623;
					#else
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#endif
					half4 Local_ShaderTex199_g170617 = staticSwitch198_g170617;
					float clampResult17_g170635 = clamp( (Local_ShaderTex199_g170617).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170634 = _MainOcclusionRemap.x;
					float temp_output_9_0_g170634 = ( clampResult17_g170635 - temp_output_7_0_g170634 );
					float lerpResult23_g170617 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170634 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
					half Local_Occlusion313_g170617 = lerpResult23_g170617;
					float clampResult17_g170637 = clamp( (Local_ShaderTex199_g170617).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170636 = _MainSmoothnessRemap.x;
					float temp_output_9_0_g170636 = ( clampResult17_g170637 - temp_output_7_0_g170636 );
					half Local_Smoothness317_g170617 = ( saturate( ( ( temp_output_9_0_g170636 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
					float4 appendResult73_g170617 = (float4(( (Local_ShaderTex199_g170617).x * _MainMetallicValue ) , Local_Occlusion313_g170617 , (Local_ShaderTex199_g170617).z , Local_Smoothness317_g170617));
					half4 Local_Masks109_g170617 = appendResult73_g170617;
					float clampResult17_g170632 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170633 = _MainMultiRemap.x;
					float temp_output_9_0_g170633 = ( clampResult17_g170632 - temp_output_7_0_g170633 );
					half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
					float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
					float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
					half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
					half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
					float3 In_Albedo3_g170628 = Local_Albedo139_g170617;
					float3 In_AlbedoRaw3_g170628 = Local_Albedo139_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170622) = _MainNormalTex;
					float localFilterTexture29_g170625 = ( 0.0 );
					SamplerState SS29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170625 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170625 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170625 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170625 = SamplerDefault29_g170625;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170625 = SamplerDefault29_g170625;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170625 = SamplerPoint29_g170625;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170625 = SamplerLow29_g170625;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170625 = SamplerMedium29_g170625;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170625 = SamplerHigh29_g170625;
					#endif
					}
					SamplerState Sampler276_g170622 = SS29_g170625;
					float4 temp_output_37_0_g170622 = Local_Coords180_g170617;
					half4 Coords276_g170622 = temp_output_37_0_g170622;
					half2 TexCoord276_g170622 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170622 = SampleMain( Texture276_g170622 , Sampler276_g170622 , Coords276_g170622 , TexCoord276_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170622) = _MainNormalTex;
					SamplerState Sampler275_g170622 = SS29_g170625;
					half4 Coords275_g170622 = temp_output_37_0_g170622;
					half2 TexCoord275_g170622 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170622 = SampleExtra( Texture275_g170622 , Sampler275_g170622 , Coords275_g170622 , TexCoord275_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170622) = _MainNormalTex;
					SamplerState Sampler238_g170622 = SS29_g170625;
					half4 Coords238_g170622 = temp_output_37_0_g170622;
					float3 temp_output_279_0_g170622 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170622 = temp_output_279_0_g170622;
					half4 localSamplePlanar2D238_g170622 = SamplePlanar2D( Texture238_g170622 , Sampler238_g170622 , Coords238_g170622 , WorldPosition238_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170622) = _MainNormalTex;
					SamplerState Sampler246_g170622 = SS29_g170625;
					half4 Coords246_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition246_g170622 = temp_output_279_0_g170622;
					float3 temp_output_280_0_g170622 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170622 = temp_output_280_0_g170622;
					half4 localSamplePlanar3D246_g170622 = SamplePlanar3D( Texture246_g170622 , Sampler246_g170622 , Coords246_g170622 , WorldPosition246_g170622 , WorldNormal246_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170622) = _MainNormalTex;
					SamplerState Sampler234_g170622 = SS29_g170625;
					float4 Coords234_g170622 = temp_output_37_0_g170622;
					float3 WorldPosition234_g170622 = temp_output_279_0_g170622;
					float4 localSampleStochastic2D234_g170622 = SampleStochastic2D( Texture234_g170622 , Sampler234_g170622 , Coords234_g170622 , WorldPosition234_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170622) = _MainNormalTex;
					SamplerState Sampler263_g170622 = SS29_g170625;
					half4 Coords263_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition263_g170622 = temp_output_279_0_g170622;
					half3 WorldNormal263_g170622 = temp_output_280_0_g170622;
					half4 localSampleStochastic3D263_g170622 = SampleStochastic3D( Texture263_g170622 , Sampler263_g170622 , Coords263_g170622 , WorldPosition263_g170622 , WorldNormal263_g170622 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch193_g170617 = localSampleExtra275_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170622;
					#else
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#endif
					half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
					half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
					float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
					half2 Normal_Default50_g170618 = appendResult58_g170618;
					half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
					#else
					float2 staticSwitch38_g170618 = Normal_Default50_g170618;
					#endif
					half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
					#else
					float2 staticSwitch37_g170618 = staticSwitch38_g170618;
					#endif
					float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
					float3x3 ase_worldToTangent = float3x3( WorldTangent, WorldBiTangent, WorldNormal );
					half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
					float2 break71_g170619 = Normal_Planar45_g170619;
					float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
					float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#else
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#endif
					half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
					float2 In_NormalTS3_g170628 = Local_NormalTS108_g170617;
					float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
					float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
					float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
					float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
					float3 tanNormal74_g170620 = appendResult68_g170620;
					float3 worldNormal74_g170620 = normalize( float3( dot( tanToWorld0, tanNormal74_g170620 ), dot( tanToWorld1, tanNormal74_g170620 ), dot( tanToWorld2, tanNormal74_g170620 ) ) );
					half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
					float3 In_NormalWS3_g170628 = Local_NormalWS250_g170617;
					float4 In_Shader3_g170628 = Local_Masks109_g170617;
					float4 In_Emissive3_g170628 = half4( 1, 1, 1, 1 );
					float3 temp_output_3_0_g170629 = Local_Albedo139_g170617;
					float dotResult20_g170629 = dot( temp_output_3_0_g170629 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Local_Grayscale110_g170617 = dotResult20_g170629;
					float In_Grayscale3_g170628 = Local_Grayscale110_g170617;
					float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
					half Local_Luminosity145_g170617 = clampResult144_g170617;
					float In_Luminosity3_g170628 = Local_Luminosity145_g170617;
					float In_MultiMask3_g170628 = Local_MultiMask78_g170617;
					float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
					#else
					float staticSwitch236_g170617 = temp_output_187_0_g170617;
					#endif
					half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
					float In_AlphaClip3_g170628 = Local_AlphaClip111_g170617;
					half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
					float In_AlphaFade3_g170628 = Local_AlphaFade246_g170617;
					float3 temp_cast_4 = (1.0).xxx;
					float3 In_Translucency3_g170628 = temp_cast_4;
					float In_Transmission3_g170628 = 1.0;
					float In_Thickness3_g170628 = 0.0;
					float In_Diffusion3_g170628 = 0.0;
					float In_Depth3_g170628 = 0.0;
					{
					Data3_g170628.Dummy = In_Dummy3_g170628;
					Data3_g170628.Albedo = In_Albedo3_g170628;
					Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
					Data3_g170628.NormalTS = In_NormalTS3_g170628;
					Data3_g170628.NormalWS = In_NormalWS3_g170628;
					Data3_g170628.Shader = In_Shader3_g170628;
					Data3_g170628.Emissive= In_Emissive3_g170628;
					Data3_g170628.MultiMask = In_MultiMask3_g170628;
					Data3_g170628.Grayscale = In_Grayscale3_g170628;
					Data3_g170628.Luminosity = In_Luminosity3_g170628;
					Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
					Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
					Data3_g170628.Translucency = In_Translucency3_g170628;
					Data3_g170628.Transmission = In_Transmission3_g170628;
					Data3_g170628.Thickness = In_Thickness3_g170628;
					Data3_g170628.Diffusion = In_Diffusion3_g170628;
					Data3_g170628.Depth = In_Depth3_g170628;
					}
					TVEVisualData Data4_g170646 = Data3_g170628;
					float Out_Dummy4_g170646 = 0;
					float3 Out_Albedo4_g170646 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170646 = float2( 0,0 );
					float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
					float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170646 = 0;
					float Out_Grayscale4_g170646 = 0;
					float Out_Luminosity4_g170646 = 0;
					float Out_AlphaClip4_g170646 = 0;
					float Out_AlphaFade4_g170646 = 0;
					float3 Out_Translucency4_g170646 = float3( 0,0,0 );
					float Out_Transmission4_g170646 = 0;
					float Out_Thickness4_g170646 = 0;
					float Out_Diffusion4_g170646 = 0;
					float Out_Depth4_g170646 = 0;
					{
					Out_Dummy4_g170646 = Data4_g170646.Dummy;
					Out_Albedo4_g170646 = Data4_g170646.Albedo;
					Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
					Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
					Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
					Out_Shader4_g170646 = Data4_g170646.Shader;
					Out_Emissive4_g170646= Data4_g170646.Emissive;
					Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
					Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
					Out_Luminosity4_g170646= Data4_g170646.Luminosity;
					Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
					Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
					Out_Translucency4_g170646 = Data4_g170646.Translucency;
					Out_Transmission4_g170646 = Data4_g170646.Transmission;
					Out_Thickness4_g170646 = Data4_g170646.Thickness;
					Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
					Out_Depth4_g170646= Data4_g170646.Depth;
					}
					half3 Visual_Albedo527_g170638 = Out_Albedo4_g170646;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170639) = _SecondAlbedoTex;
					float localFilterTexture19_g170652 = ( 0.0 );
					SamplerState SS19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170652 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170652 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170652 = SamplerDefault19_g170652;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170652 = SamplerDefault19_g170652;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170652 = SamplerPoint19_g170652;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170652 = SamplerLow19_g170652;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170652 = SamplerMedium19_g170652;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170652 = SamplerHigh19_g170652;
					#endif
					}
					SamplerState Sampler276_g170639 = SS19_g170652;
					half4 Local_LayerCoords790_g170638 = _second_coord_value;
					float4 temp_output_37_0_g170639 = Local_LayerCoords790_g170638;
					half4 Coords276_g170639 = temp_output_37_0_g170639;
					half2 TexCoord276_g170639 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170639 = SampleMain( Texture276_g170639 , Sampler276_g170639 , Coords276_g170639 , TexCoord276_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170639) = _SecondAlbedoTex;
					SamplerState Sampler275_g170639 = SS19_g170652;
					half4 Coords275_g170639 = temp_output_37_0_g170639;
					half2 TexCoord275_g170639 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170639 = SampleExtra( Texture275_g170639 , Sampler275_g170639 , Coords275_g170639 , TexCoord275_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170639) = _SecondAlbedoTex;
					SamplerState Sampler238_g170639 = SS19_g170652;
					half4 Coords238_g170639 = temp_output_37_0_g170639;
					TVEModelData Data15_g170655 = Data16_g170483;
					float Out_Dummy15_g170655 = 0;
					float3 Out_PositionWS15_g170655 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170655 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170655 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170655 = float3( 0,0,0 );
					float4 Out_VertexData15_g170655 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170655 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170655 = Data15_g170655.Dummy;
					Out_PositionWS15_g170655 = Data15_g170655.PositionWS;
					Out_PositionWO15_g170655 = Data15_g170655.PositionWO;
					Out_PivotWS15_g170655 = Data15_g170655.PivotWS;
					Out_PivotWO15_g170655 = Data15_g170655.PivotWO;
					Out_NormalWS15_g170655 = Data15_g170655.NormalWS;
					Out_ViewDirWS15_g170655 = Data15_g170655.ViewDirWS;
					Out_VertexData15_g170655 = Data15_g170655.VertexData;
					Out_BoundsData15_g170655 = Data15_g170655.BoundsData;
					}
					half3 Model_PositionWO636_g170638 = Out_PositionWO15_g170655;
					float3 temp_output_279_0_g170639 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170639 = temp_output_279_0_g170639;
					half4 localSamplePlanar2D238_g170639 = SamplePlanar2D( Texture238_g170639 , Sampler238_g170639 , Coords238_g170639 , WorldPosition238_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170639) = _SecondAlbedoTex;
					SamplerState Sampler246_g170639 = SS19_g170652;
					half4 Coords246_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition246_g170639 = temp_output_279_0_g170639;
					half3 Model_NormalWS869_g170638 = Out_NormalWS15_g170655;
					float3 temp_output_280_0_g170639 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170639 = temp_output_280_0_g170639;
					half4 localSamplePlanar3D246_g170639 = SamplePlanar3D( Texture246_g170639 , Sampler246_g170639 , Coords246_g170639 , WorldPosition246_g170639 , WorldNormal246_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170639) = _SecondAlbedoTex;
					SamplerState Sampler234_g170639 = SS19_g170652;
					float4 Coords234_g170639 = temp_output_37_0_g170639;
					float3 WorldPosition234_g170639 = temp_output_279_0_g170639;
					float4 localSampleStochastic2D234_g170639 = SampleStochastic2D( Texture234_g170639 , Sampler234_g170639 , Coords234_g170639 , WorldPosition234_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170639) = _SecondAlbedoTex;
					SamplerState Sampler263_g170639 = SS19_g170652;
					half4 Coords263_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition263_g170639 = temp_output_279_0_g170639;
					half3 WorldNormal263_g170639 = temp_output_280_0_g170639;
					half4 localSampleStochastic3D263_g170639 = SampleStochastic3D( Texture263_g170639 , Sampler263_g170639 , Coords263_g170639 , WorldPosition263_g170639 , WorldNormal263_g170639 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170638 = localSampleExtra275_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170638 = localSamplePlanar2D238_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170638 = localSamplePlanar3D246_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170638 = localSampleStochastic2D234_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170638 = localSampleStochastic3D263_g170639;
					#else
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#endif
					half4 Local_AlbedoTex777_g170638 = staticSwitch693_g170638;
					float3 lerpResult716_g170638 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170638).xyz , _SecondAlbedoValue);
					half3 Local_AlbedoRGB771_g170638 = lerpResult716_g170638;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170641) = _SecondShaderTex;
					float localFilterTexture30_g170654 = ( 0.0 );
					SamplerState SS30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170654 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170654 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170654 = SamplerDefault30_g170654;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170654 = SamplerDefault30_g170654;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170654 = SamplerPoint30_g170654;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170654 = SamplerLow30_g170654;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170654 = SamplerMedium30_g170654;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170654 = SamplerHigh30_g170654;
					#endif
					}
					SamplerState Sampler276_g170641 = SS30_g170654;
					float4 temp_output_37_0_g170641 = Local_LayerCoords790_g170638;
					half4 Coords276_g170641 = temp_output_37_0_g170641;
					half2 TexCoord276_g170641 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170641 = SampleMain( Texture276_g170641 , Sampler276_g170641 , Coords276_g170641 , TexCoord276_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170641) = _SecondShaderTex;
					SamplerState Sampler275_g170641 = SS30_g170654;
					half4 Coords275_g170641 = temp_output_37_0_g170641;
					half2 TexCoord275_g170641 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170641 = SampleExtra( Texture275_g170641 , Sampler275_g170641 , Coords275_g170641 , TexCoord275_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170641) = _SecondShaderTex;
					SamplerState Sampler238_g170641 = SS30_g170654;
					half4 Coords238_g170641 = temp_output_37_0_g170641;
					float3 temp_output_279_0_g170641 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170641 = temp_output_279_0_g170641;
					half4 localSamplePlanar2D238_g170641 = SamplePlanar2D( Texture238_g170641 , Sampler238_g170641 , Coords238_g170641 , WorldPosition238_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170641) = _SecondShaderTex;
					SamplerState Sampler246_g170641 = SS30_g170654;
					half4 Coords246_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition246_g170641 = temp_output_279_0_g170641;
					float3 temp_output_280_0_g170641 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170641 = temp_output_280_0_g170641;
					half4 localSamplePlanar3D246_g170641 = SamplePlanar3D( Texture246_g170641 , Sampler246_g170641 , Coords246_g170641 , WorldPosition246_g170641 , WorldNormal246_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170641) = _SecondShaderTex;
					SamplerState Sampler234_g170641 = SS30_g170654;
					float4 Coords234_g170641 = temp_output_37_0_g170641;
					float3 WorldPosition234_g170641 = temp_output_279_0_g170641;
					float4 localSampleStochastic2D234_g170641 = SampleStochastic2D( Texture234_g170641 , Sampler234_g170641 , Coords234_g170641 , WorldPosition234_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170641) = _SecondShaderTex;
					SamplerState Sampler263_g170641 = SS30_g170654;
					half4 Coords263_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition263_g170641 = temp_output_279_0_g170641;
					half3 WorldNormal263_g170641 = temp_output_280_0_g170641;
					half4 localSampleStochastic3D263_g170641 = SampleStochastic3D( Texture263_g170641 , Sampler263_g170641 , Coords263_g170641 , WorldPosition263_g170641 , WorldNormal263_g170641 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170638 = localSampleExtra275_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170638 = localSamplePlanar2D238_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170638 = localSamplePlanar3D246_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170638 = localSampleStochastic2D234_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170638 = localSampleStochastic3D263_g170641;
					#else
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#endif
					half4 Local_ShaderTex775_g170638 = staticSwitch722_g170638;
					float clampResult17_g170672 = clamp( (Local_ShaderTex775_g170638).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170671 = _SecondOcclusionRemap.x;
					float temp_output_9_0_g170671 = ( clampResult17_g170672 - temp_output_7_0_g170671 );
					float lerpResult1058_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170671 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
					half Local_Occlusion1067_g170638 = lerpResult1058_g170638;
					float clampResult17_g170674 = clamp( (Local_ShaderTex775_g170638).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170673 = _SecondSmoothnessRemap.x;
					float temp_output_9_0_g170673 = ( clampResult17_g170674 - temp_output_7_0_g170673 );
					half Local_Smoothness1068_g170638 = ( saturate( ( ( temp_output_9_0_g170673 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
					float4 appendResult749_g170638 = (float4(( (Local_ShaderTex775_g170638).x * _SecondMetallicValue ) , Local_Occlusion1067_g170638 , (Local_ShaderTex775_g170638).z , Local_Smoothness1068_g170638));
					half4 Local_Masks750_g170638 = appendResult749_g170638;
					float clampResult17_g170675 = clamp( (Local_Masks750_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170678 = _SecondMultiRemap.x;
					float temp_output_9_0_g170678 = ( clampResult17_g170675 - temp_output_7_0_g170678 );
					float temp_output_765_0_g170638 = saturate( ( ( temp_output_9_0_g170678 * _SecondMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170638 = temp_output_765_0_g170638;
					float lerpResult705_g170638 = lerp( 1.0 , Local_MultiMask767_g170638 , _SecondColorMode);
					float4 lerpResult706_g170638 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170638);
					half3 Local_ColorRGB774_g170638 = (lerpResult706_g170638).rgb;
					half3 Local_Albedo768_g170638 = ( Local_AlbedoRGB771_g170638 * Local_ColorRGB774_g170638 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170649 = 2.0;
					#else
					float staticSwitch1_g170649 = 4.594794;
					#endif
					float3 lerpResult985_g170638 = lerp( Local_Albedo768_g170638 , ( Visual_Albedo527_g170638 * Local_Albedo768_g170638 * staticSwitch1_g170649 ) , _SecondBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170642) = _SecondMaskTex;
					SamplerState Sampler276_g170642 = sampler_Linear_Repeat;
					half4 Local_BlendCoords813_g170638 = _second_mask_coord_value;
					float4 temp_output_37_0_g170642 = Local_BlendCoords813_g170638;
					half4 Coords276_g170642 = temp_output_37_0_g170642;
					half2 TexCoord276_g170642 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170642 = SampleMain( Texture276_g170642 , Sampler276_g170642 , Coords276_g170642 , TexCoord276_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170642) = _SecondMaskTex;
					SamplerState Sampler275_g170642 = sampler_Linear_Repeat;
					half4 Coords275_g170642 = temp_output_37_0_g170642;
					half2 TexCoord275_g170642 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170642 = SampleExtra( Texture275_g170642 , Sampler275_g170642 , Coords275_g170642 , TexCoord275_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170642) = _SecondMaskTex;
					SamplerState Sampler238_g170642 = sampler_Linear_Repeat;
					half4 Coords238_g170642 = temp_output_37_0_g170642;
					float3 temp_output_279_0_g170642 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170642 = temp_output_279_0_g170642;
					half4 localSamplePlanar2D238_g170642 = SamplePlanar2D( Texture238_g170642 , Sampler238_g170642 , Coords238_g170642 , WorldPosition238_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170642) = _SecondMaskTex;
					SamplerState Sampler246_g170642 = sampler_Linear_Repeat;
					half4 Coords246_g170642 = temp_output_37_0_g170642;
					half3 WorldPosition246_g170642 = temp_output_279_0_g170642;
					float3 temp_output_280_0_g170642 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170642 = temp_output_280_0_g170642;
					half4 localSamplePlanar3D246_g170642 = SamplePlanar3D( Texture246_g170642 , Sampler246_g170642 , Coords246_g170642 , WorldPosition246_g170642 , WorldNormal246_g170642 );
					#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170638 = localSampleExtra275_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170638 = localSamplePlanar2D238_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170638 = localSamplePlanar3D246_g170642;
					#else
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#endif
					half4 Local_MaskTex861_g170638 = staticSwitch817_g170638;
					float clampResult17_g170658 = clamp( (Local_MaskTex861_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170662 = _SecondMaskRemap.x;
					float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
					float lerpResult1015_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
					half Blend_TexMask429_g170638 = lerpResult1015_g170638;
					half Visual_Luminosity1041_g170638 = Out_Luminosity4_g170646;
					float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170638 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170668 = _SecondLumaRemap.x;
					float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
					float lerpResult1036_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
					half Blend_LumaMask1033_g170638 = lerpResult1036_g170638;
					half3 Visual_NormalWS951_g170638 = Out_NormalWS4_g170646;
					float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170638).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170665 = _SecondProjRemap.x;
					float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
					float lerpResult996_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
					half Blend_ProjMask434_g170638 = lerpResult996_g170638;
					half4 Model_VertexMasks964_g170638 = Out_VertexData15_g170655;
					float4 break965_g170638 = Model_VertexMasks964_g170638;
					float4 break33_g170659 = _second_vert_mode;
					float temp_output_30_0_g170659 = ( break965_g170638.x * break33_g170659.x );
					float temp_output_29_0_g170659 = ( break965_g170638.y * break33_g170659.y );
					float temp_output_31_0_g170659 = ( break965_g170638.z * break33_g170659.z );
					float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170638.w * break33_g170659.w ) );
					float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170661 = _SecondMeshRemap.x;
					float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
					float lerpResult1017_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
					float temp_output_6_0_g170660 = lerpResult1017_g170638;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + _SecondMeshMode );
					#else
					float staticSwitch14_g170660 = temp_output_6_0_g170660;
					#endif
					half Blend_VertMask918_g170638 = staticSwitch14_g170660;
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170645 = Data204_g170496;
					float Out_Dummy15_g170645 = 0;
					float4 Out_CoatDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170645 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170645 = Data15_g170645.Dummy;
					Out_CoatDataRT15_g170645 = Data15_g170645.CoatDataRT;
					Out_PaintDataRT15_g170645 = Data15_g170645.PaintDataRT;
					Out_GlowDataRT15_g170645= Data15_g170645.GlowDataRT;
					Out_AtmoDataRT15_g170645= Data15_g170645.AtmoDataRT;
					Out_FadeDataRT15_g170645= Data15_g170645.FadeDataRT;
					Out_FormDataRT15_g170645 = Data15_g170645.FormDataRT;
					Out_FlowDataRT15_g170645 = Data15_g170645.FlowDataRT;
					}
					half4 Global_CoatParams975_g170638 = Out_CoatDataRT15_g170645;
					float temp_output_6_0_g170669 = (Global_CoatParams975_g170638).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + _SecondElementMode );
					#else
					float staticSwitch14_g170669 = temp_output_6_0_g170669;
					#endif
					#ifdef TVE_SECOND_ELEMENT
					float staticSwitch971_g170638 = staticSwitch14_g170669;
					#else
					float staticSwitch971_g170638 = TVE_CoatParams.z;
					#endif
					float lerpResult1013_g170638 = lerp( 1.0 , staticSwitch971_g170638 , ( _SecondGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask972_g170638 = lerpResult1013_g170638;
					float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170638 * Blend_LumaMask1033_g170638 * Blend_ProjMask434_g170638 * Blend_VertMask918_g170638 * Blend_GlobalMask972_g170638 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170666 = _SecondBlendRemap.x;
					float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
					half Blend_Mask412_g170638 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
					float3 lerpResult403_g170638 = lerp( Visual_Albedo527_g170638 , lerpResult985_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float3 staticSwitch415_g170638 = lerpResult403_g170638;
					#else
					float3 staticSwitch415_g170638 = Visual_Albedo527_g170638;
					#endif
					half3 Final_Albedo601_g170638 = staticSwitch415_g170638;
					float3 In_Albedo3_g170656 = Final_Albedo601_g170638;
					float3 In_AlbedoRaw3_g170656 = Final_Albedo601_g170638;
					half2 Visual_NormalTS529_g170638 = Out_NormalTS4_g170646;
					float2 lerpResult40_g170647 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170638 , _SecondBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170640) = _SecondNormalTex;
					float localFilterTexture29_g170653 = ( 0.0 );
					SamplerState SS29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170653 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170653 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170653 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170653 = SamplerDefault29_g170653;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170653 = SamplerDefault29_g170653;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170653 = SamplerPoint29_g170653;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170653 = SamplerLow29_g170653;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170653 = SamplerMedium29_g170653;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170653 = SamplerHigh29_g170653;
					#endif
					}
					SamplerState Sampler276_g170640 = SS29_g170653;
					float4 temp_output_37_0_g170640 = Local_LayerCoords790_g170638;
					half4 Coords276_g170640 = temp_output_37_0_g170640;
					half2 TexCoord276_g170640 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170640 = SampleMain( Texture276_g170640 , Sampler276_g170640 , Coords276_g170640 , TexCoord276_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170640) = _SecondNormalTex;
					SamplerState Sampler275_g170640 = SS29_g170653;
					half4 Coords275_g170640 = temp_output_37_0_g170640;
					half2 TexCoord275_g170640 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170640 = SampleExtra( Texture275_g170640 , Sampler275_g170640 , Coords275_g170640 , TexCoord275_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170640) = _SecondNormalTex;
					SamplerState Sampler238_g170640 = SS29_g170653;
					half4 Coords238_g170640 = temp_output_37_0_g170640;
					float3 temp_output_279_0_g170640 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170640 = temp_output_279_0_g170640;
					half4 localSamplePlanar2D238_g170640 = SamplePlanar2D( Texture238_g170640 , Sampler238_g170640 , Coords238_g170640 , WorldPosition238_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170640) = _SecondNormalTex;
					SamplerState Sampler246_g170640 = SS29_g170653;
					half4 Coords246_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition246_g170640 = temp_output_279_0_g170640;
					float3 temp_output_280_0_g170640 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170640 = temp_output_280_0_g170640;
					half4 localSamplePlanar3D246_g170640 = SamplePlanar3D( Texture246_g170640 , Sampler246_g170640 , Coords246_g170640 , WorldPosition246_g170640 , WorldNormal246_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170640) = _SecondNormalTex;
					SamplerState Sampler234_g170640 = SS29_g170653;
					float4 Coords234_g170640 = temp_output_37_0_g170640;
					float3 WorldPosition234_g170640 = temp_output_279_0_g170640;
					float4 localSampleStochastic2D234_g170640 = SampleStochastic2D( Texture234_g170640 , Sampler234_g170640 , Coords234_g170640 , WorldPosition234_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170640) = _SecondNormalTex;
					SamplerState Sampler263_g170640 = SS29_g170653;
					half4 Coords263_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition263_g170640 = temp_output_279_0_g170640;
					half3 WorldNormal263_g170640 = temp_output_280_0_g170640;
					half4 localSampleStochastic3D263_g170640 = SampleStochastic3D( Texture263_g170640 , Sampler263_g170640 , Coords263_g170640 , WorldPosition263_g170640 , WorldNormal263_g170640 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170638 = localSampleExtra275_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170638 = localSamplePlanar2D238_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170638 = localSamplePlanar3D246_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170638 = localSampleStochastic2D234_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170638 = localSampleStochastic3D263_g170640;
					#else
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#endif
					half4 Local_NormalTex776_g170638 = staticSwitch698_g170638;
					half4 Normal_Packed45_g170643 = Local_NormalTex776_g170638;
					float2 appendResult58_g170643 = (float2(( (Normal_Packed45_g170643).x * (Normal_Packed45_g170643).w ) , (Normal_Packed45_g170643).y));
					half2 Normal_Default50_g170643 = appendResult58_g170643;
					half2 Normal_ASTC41_g170643 = (Normal_Packed45_g170643).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170643 = Normal_ASTC41_g170643;
					#else
					float2 staticSwitch38_g170643 = Normal_Default50_g170643;
					#endif
					half2 Normal_NO_DTX544_g170643 = (Normal_Packed45_g170643).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170643 = Normal_NO_DTX544_g170643;
					#else
					float2 staticSwitch37_g170643 = staticSwitch38_g170643;
					#endif
					float2 temp_output_724_0_g170638 = ( (staticSwitch37_g170643*2.0 + -1.0) * _SecondNormalValue );
					half2 Normal_Planar45_g170644 = temp_output_724_0_g170638;
					float2 break71_g170644 = Normal_Planar45_g170644;
					float3 appendResult72_g170644 = (float3(break71_g170644.x , 0.0 , break71_g170644.y));
					float2 temp_output_858_0_g170638 = (mul( ase_worldToTangent, appendResult72_g170644 )).xy;
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#else
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#endif
					half2 Local_NormalTS729_g170638 = staticSwitch727_g170638;
					float2 temp_output_36_0_g170647 = ( lerpResult40_g170647 + Local_NormalTS729_g170638 );
					float2 lerpResult405_g170638 = lerp( Visual_NormalTS529_g170638 , temp_output_36_0_g170647 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float2 staticSwitch418_g170638 = lerpResult405_g170638;
					#else
					float2 staticSwitch418_g170638 = Visual_NormalTS529_g170638;
					#endif
					half2 Final_NormalTS612_g170638 = staticSwitch418_g170638;
					float2 In_NormalTS3_g170656 = Final_NormalTS612_g170638;
					float3 appendResult68_g170648 = (float3(Final_NormalTS612_g170638 , 1.0));
					float3 tanNormal74_g170648 = appendResult68_g170648;
					float3 worldNormal74_g170648 = normalize( float3( dot( tanToWorld0, tanNormal74_g170648 ), dot( tanToWorld1, tanNormal74_g170648 ), dot( tanToWorld2, tanNormal74_g170648 ) ) );
					half3 Final_NormalWS950_g170638 = worldNormal74_g170648;
					float3 In_NormalWS3_g170656 = Final_NormalWS950_g170638;
					half4 Visual_Shader531_g170638 = Out_Shader4_g170646;
					float4 lerpResult994_g170638 = lerp( Local_Masks750_g170638 , ( Visual_Shader531_g170638 * Local_Masks750_g170638 ) , _SecondBlendShaderValue);
					float4 lerpResult440_g170638 = lerp( Visual_Shader531_g170638 , lerpResult994_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float4 staticSwitch451_g170638 = lerpResult440_g170638;
					#else
					float4 staticSwitch451_g170638 = Visual_Shader531_g170638;
					#endif
					half4 Final_Masks613_g170638 = staticSwitch451_g170638;
					float4 In_Shader3_g170656 = Final_Masks613_g170638;
					float4 In_Emissive3_g170656 = Out_Emissive4_g170646;
					float3 temp_output_3_0_g170650 = Final_Albedo601_g170638;
					float dotResult20_g170650 = dot( temp_output_3_0_g170650 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170638 = dotResult20_g170650;
					float In_Grayscale3_g170656 = Final_Grayscale615_g170638;
					float clampResult651_g170638 = clamp( saturate( ( Final_Grayscale615_g170638 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170638 = clampResult651_g170638;
					float In_Luminosity3_g170656 = Final_Luminosity652_g170638;
					half Visual_MultiMask547_g170638 = Out_MultiMask4_g170646;
					float lerpResult477_g170638 = lerp( Visual_MultiMask547_g170638 , Local_MultiMask767_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch482_g170638 = lerpResult477_g170638;
					#else
					float staticSwitch482_g170638 = Visual_MultiMask547_g170638;
					#endif
					half Final_MultiMask572_g170638 = staticSwitch482_g170638;
					float In_MultiMask3_g170656 = Final_MultiMask572_g170638;
					half Visual_AlphaClip559_g170638 = Out_AlphaClip4_g170646;
					float temp_output_718_0_g170638 = (Local_AlbedoTex777_g170638).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch932_g170638 = ( temp_output_718_0_g170638 - _SecondAlphaClipValue );
					#else
					float staticSwitch932_g170638 = temp_output_718_0_g170638;
					#endif
					half Local_AlphaClip772_g170638 = staticSwitch932_g170638;
					float lerpResult448_g170638 = lerp( Visual_AlphaClip559_g170638 , Local_AlphaClip772_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch564_g170638 = lerpResult448_g170638;
					#else
					float staticSwitch564_g170638 = Visual_AlphaClip559_g170638;
					#endif
					half Final_AlphaClip602_g170638 = staticSwitch564_g170638;
					float In_AlphaClip3_g170656 = Final_AlphaClip602_g170638;
					half Visual_AlphaFade588_g170638 = Out_AlphaFade4_g170646;
					half Local_AlphaFade773_g170638 = (lerpResult706_g170638).a;
					float lerpResult604_g170638 = lerp( Visual_AlphaFade588_g170638 , Local_AlphaFade773_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch608_g170638 = lerpResult604_g170638;
					#else
					float staticSwitch608_g170638 = Visual_AlphaFade588_g170638;
					#endif
					half Final_AlphaFade611_g170638 = staticSwitch608_g170638;
					float In_AlphaFade3_g170656 = Final_AlphaFade611_g170638;
					float3 In_Translucency3_g170656 = Out_Translucency4_g170646;
					float In_Transmission3_g170656 = Out_Transmission4_g170646;
					float In_Thickness3_g170656 = Out_Thickness4_g170646;
					float In_Diffusion3_g170656 = Out_Diffusion4_g170646;
					float In_Depth3_g170656 = Out_Depth4_g170646;
					{
					Data3_g170656.Dummy = In_Dummy3_g170656;
					Data3_g170656.Albedo = In_Albedo3_g170656;
					Data3_g170656.AlbedoRaw = In_AlbedoRaw3_g170656;
					Data3_g170656.NormalTS = In_NormalTS3_g170656;
					Data3_g170656.NormalWS = In_NormalWS3_g170656;
					Data3_g170656.Shader = In_Shader3_g170656;
					Data3_g170656.Emissive= In_Emissive3_g170656;
					Data3_g170656.MultiMask = In_MultiMask3_g170656;
					Data3_g170656.Grayscale = In_Grayscale3_g170656;
					Data3_g170656.Luminosity = In_Luminosity3_g170656;
					Data3_g170656.AlphaClip = In_AlphaClip3_g170656;
					Data3_g170656.AlphaFade = In_AlphaFade3_g170656;
					Data3_g170656.Translucency = In_Translucency3_g170656;
					Data3_g170656.Transmission = In_Transmission3_g170656;
					Data3_g170656.Thickness = In_Thickness3_g170656;
					Data3_g170656.Diffusion = In_Diffusion3_g170656;
					Data3_g170656.Depth = In_Depth3_g170656;
					}
					TVEVisualData Data4_g170694 = Data3_g170656;
					float Out_Dummy4_g170694 = 0;
					float3 Out_Albedo4_g170694 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170694 = float2( 0,0 );
					float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
					float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170694 = 0;
					float Out_Grayscale4_g170694 = 0;
					float Out_Luminosity4_g170694 = 0;
					float Out_AlphaClip4_g170694 = 0;
					float Out_AlphaFade4_g170694 = 0;
					float3 Out_Translucency4_g170694 = float3( 0,0,0 );
					float Out_Transmission4_g170694 = 0;
					float Out_Thickness4_g170694 = 0;
					float Out_Diffusion4_g170694 = 0;
					float Out_Depth4_g170694 = 0;
					{
					Out_Dummy4_g170694 = Data4_g170694.Dummy;
					Out_Albedo4_g170694 = Data4_g170694.Albedo;
					Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
					Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
					Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
					Out_Shader4_g170694 = Data4_g170694.Shader;
					Out_Emissive4_g170694= Data4_g170694.Emissive;
					Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
					Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
					Out_Luminosity4_g170694= Data4_g170694.Luminosity;
					Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
					Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
					Out_Translucency4_g170694 = Data4_g170694.Translucency;
					Out_Transmission4_g170694 = Data4_g170694.Transmission;
					Out_Thickness4_g170694 = Data4_g170694.Thickness;
					Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
					Out_Depth4_g170694= Data4_g170694.Depth;
					}
					half3 Visual_Albedo527_g170687 = Out_Albedo4_g170694;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170688) = _ThirdAlbedoTex;
					float localFilterTexture19_g170703 = ( 0.0 );
					SamplerState SS19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170703 = SamplerDefault19_g170703;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170703 = SamplerDefault19_g170703;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170703 = SamplerPoint19_g170703;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170703 = SamplerLow19_g170703;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170703 = SamplerMedium19_g170703;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170703 = SamplerHigh19_g170703;
					#endif
					}
					SamplerState Sampler276_g170688 = SS19_g170703;
					half4 Local_LayerCoords790_g170687 = _third_coord_value;
					float4 temp_output_37_0_g170688 = Local_LayerCoords790_g170687;
					half4 Coords276_g170688 = temp_output_37_0_g170688;
					half2 TexCoord276_g170688 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170688 = SampleMain( Texture276_g170688 , Sampler276_g170688 , Coords276_g170688 , TexCoord276_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler275_g170688 = SS19_g170703;
					half4 Coords275_g170688 = temp_output_37_0_g170688;
					half2 TexCoord275_g170688 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170688 = SampleExtra( Texture275_g170688 , Sampler275_g170688 , Coords275_g170688 , TexCoord275_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler238_g170688 = SS19_g170703;
					half4 Coords238_g170688 = temp_output_37_0_g170688;
					TVEModelData Data15_g170706 = Data16_g170483;
					float Out_Dummy15_g170706 = 0;
					float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
					float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170706 = Data15_g170706.Dummy;
					Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
					Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
					Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
					Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
					Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
					Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
					Out_VertexData15_g170706 = Data15_g170706.VertexData;
					Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
					}
					half3 Model_PositionWO636_g170687 = Out_PositionWO15_g170706;
					float3 temp_output_279_0_g170688 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170688 = temp_output_279_0_g170688;
					half4 localSamplePlanar2D238_g170688 = SamplePlanar2D( Texture238_g170688 , Sampler238_g170688 , Coords238_g170688 , WorldPosition238_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler246_g170688 = SS19_g170703;
					half4 Coords246_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition246_g170688 = temp_output_279_0_g170688;
					half3 Model_NormalWS869_g170687 = Out_NormalWS15_g170706;
					float3 temp_output_280_0_g170688 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170688 = temp_output_280_0_g170688;
					half4 localSamplePlanar3D246_g170688 = SamplePlanar3D( Texture246_g170688 , Sampler246_g170688 , Coords246_g170688 , WorldPosition246_g170688 , WorldNormal246_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler234_g170688 = SS19_g170703;
					float4 Coords234_g170688 = temp_output_37_0_g170688;
					float3 WorldPosition234_g170688 = temp_output_279_0_g170688;
					float4 localSampleStochastic2D234_g170688 = SampleStochastic2D( Texture234_g170688 , Sampler234_g170688 , Coords234_g170688 , WorldPosition234_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler263_g170688 = SS19_g170703;
					half4 Coords263_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition263_g170688 = temp_output_279_0_g170688;
					half3 WorldNormal263_g170688 = temp_output_280_0_g170688;
					half4 localSampleStochastic3D263_g170688 = SampleStochastic3D( Texture263_g170688 , Sampler263_g170688 , Coords263_g170688 , WorldPosition263_g170688 , WorldNormal263_g170688 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170687 = localSampleExtra275_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170687 = localSamplePlanar2D238_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170687 = localSamplePlanar3D246_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170687 = localSampleStochastic2D234_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170687 = localSampleStochastic3D263_g170688;
					#else
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#endif
					half4 Local_AlbedoTex777_g170687 = staticSwitch693_g170687;
					float3 lerpResult716_g170687 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170687).xyz , _ThirdAlbedoValue);
					half3 Local_AlbedoRGB771_g170687 = lerpResult716_g170687;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170690) = _ThirdShaderTex;
					float localFilterTexture30_g170705 = ( 0.0 );
					SamplerState SS30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170705 = SamplerDefault30_g170705;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170705 = SamplerDefault30_g170705;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170705 = SamplerPoint30_g170705;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170705 = SamplerLow30_g170705;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170705 = SamplerMedium30_g170705;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170705 = SamplerHigh30_g170705;
					#endif
					}
					SamplerState Sampler276_g170690 = SS30_g170705;
					float4 temp_output_37_0_g170690 = Local_LayerCoords790_g170687;
					half4 Coords276_g170690 = temp_output_37_0_g170690;
					half2 TexCoord276_g170690 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170690 = SampleMain( Texture276_g170690 , Sampler276_g170690 , Coords276_g170690 , TexCoord276_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170690) = _ThirdShaderTex;
					SamplerState Sampler275_g170690 = SS30_g170705;
					half4 Coords275_g170690 = temp_output_37_0_g170690;
					half2 TexCoord275_g170690 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170690 = SampleExtra( Texture275_g170690 , Sampler275_g170690 , Coords275_g170690 , TexCoord275_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170690) = _ThirdShaderTex;
					SamplerState Sampler238_g170690 = SS30_g170705;
					half4 Coords238_g170690 = temp_output_37_0_g170690;
					float3 temp_output_279_0_g170690 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170690 = temp_output_279_0_g170690;
					half4 localSamplePlanar2D238_g170690 = SamplePlanar2D( Texture238_g170690 , Sampler238_g170690 , Coords238_g170690 , WorldPosition238_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170690) = _ThirdShaderTex;
					SamplerState Sampler246_g170690 = SS30_g170705;
					half4 Coords246_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition246_g170690 = temp_output_279_0_g170690;
					float3 temp_output_280_0_g170690 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170690 = temp_output_280_0_g170690;
					half4 localSamplePlanar3D246_g170690 = SamplePlanar3D( Texture246_g170690 , Sampler246_g170690 , Coords246_g170690 , WorldPosition246_g170690 , WorldNormal246_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170690) = _ThirdShaderTex;
					SamplerState Sampler234_g170690 = SS30_g170705;
					float4 Coords234_g170690 = temp_output_37_0_g170690;
					float3 WorldPosition234_g170690 = temp_output_279_0_g170690;
					float4 localSampleStochastic2D234_g170690 = SampleStochastic2D( Texture234_g170690 , Sampler234_g170690 , Coords234_g170690 , WorldPosition234_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170690) = _ThirdShaderTex;
					SamplerState Sampler263_g170690 = SS30_g170705;
					half4 Coords263_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition263_g170690 = temp_output_279_0_g170690;
					half3 WorldNormal263_g170690 = temp_output_280_0_g170690;
					half4 localSampleStochastic3D263_g170690 = SampleStochastic3D( Texture263_g170690 , Sampler263_g170690 , Coords263_g170690 , WorldPosition263_g170690 , WorldNormal263_g170690 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170687 = localSampleExtra275_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170687 = localSamplePlanar2D238_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170687 = localSamplePlanar3D246_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170687 = localSampleStochastic2D234_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170687 = localSampleStochastic3D263_g170690;
					#else
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#endif
					half4 Local_ShaderTex775_g170687 = staticSwitch722_g170687;
					float clampResult17_g170724 = clamp( (Local_ShaderTex775_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170723 = _ThirdOcclusionRemap.x;
					float temp_output_9_0_g170723 = ( clampResult17_g170724 - temp_output_7_0_g170723 );
					float lerpResult1072_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170723 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
					half Local_Occlusion1084_g170687 = lerpResult1072_g170687;
					float clampResult17_g170726 = clamp( (Local_ShaderTex775_g170687).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170725 = _ThirdSmoothnessRemap.x;
					float temp_output_9_0_g170725 = ( clampResult17_g170726 - temp_output_7_0_g170725 );
					half Local_Smoothness1085_g170687 = ( saturate( ( ( temp_output_9_0_g170725 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
					float4 appendResult749_g170687 = (float4(( (Local_ShaderTex775_g170687).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170687 , (Local_ShaderTex775_g170687).z , Local_Smoothness1085_g170687));
					half4 Local_Masks750_g170687 = appendResult749_g170687;
					float clampResult17_g170721 = clamp( (Local_Masks750_g170687).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170722 = _ThirdMultiRemap.x;
					float temp_output_9_0_g170722 = ( clampResult17_g170721 - temp_output_7_0_g170722 );
					float temp_output_765_0_g170687 = saturate( ( ( temp_output_9_0_g170722 * _ThirdMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170687 = temp_output_765_0_g170687;
					float lerpResult705_g170687 = lerp( 1.0 , Local_MultiMask767_g170687 , _ThirdColorMode);
					float4 lerpResult706_g170687 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170687);
					half3 Local_ColorRGB774_g170687 = (lerpResult706_g170687).rgb;
					half3 Local_Albedo768_g170687 = ( Local_AlbedoRGB771_g170687 * Local_ColorRGB774_g170687 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170699 = 2.0;
					#else
					float staticSwitch1_g170699 = 4.594794;
					#endif
					float3 lerpResult985_g170687 = lerp( Local_Albedo768_g170687 , ( Visual_Albedo527_g170687 * Local_Albedo768_g170687 * staticSwitch1_g170699 ) , _ThirdBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
					SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
					half4 Local_MaskCoords813_g170687 = _third_mask_coord_value;
					float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170687;
					half4 Coords276_g170701 = temp_output_37_0_g170701;
					half2 TexCoord276_g170701 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
					SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
					half4 Coords275_g170701 = temp_output_37_0_g170701;
					half2 TexCoord275_g170701 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
					SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
					half4 Coords238_g170701 = temp_output_37_0_g170701;
					float3 temp_output_279_0_g170701 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
					half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
					SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
					half4 Coords246_g170701 = temp_output_37_0_g170701;
					half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
					float3 temp_output_280_0_g170701 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
					half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
					#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170687 = localSampleExtra275_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170687 = localSamplePlanar2D238_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170687 = localSamplePlanar3D246_g170701;
					#else
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#endif
					half4 Local_MaskTex861_g170687 = staticSwitch817_g170687;
					float clampResult17_g170708 = clamp( (Local_MaskTex861_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170712 = _ThirdMaskRemap.x;
					float temp_output_9_0_g170712 = ( clampResult17_g170708 - temp_output_7_0_g170712 );
					float lerpResult1028_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170712 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
					half Detail_TexMask429_g170687 = lerpResult1028_g170687;
					half Visual_Luminosity1049_g170687 = Out_Luminosity4_g170694;
					float clampResult17_g170717 = clamp( Visual_Luminosity1049_g170687 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170718 = _ThirdLumaRemap.x;
					float temp_output_9_0_g170718 = ( clampResult17_g170717 - temp_output_7_0_g170718 );
					float lerpResult1040_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170718 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
					half Blend_LumaMask1046_g170687 = lerpResult1040_g170687;
					half4 Model_VertexMasks960_g170687 = Out_VertexData15_g170706;
					float4 break961_g170687 = Model_VertexMasks960_g170687;
					float4 break33_g170709 = _third_vert_mode;
					float temp_output_30_0_g170709 = ( break961_g170687.x * break33_g170709.x );
					float temp_output_29_0_g170709 = ( break961_g170687.y * break33_g170709.y );
					float temp_output_31_0_g170709 = ( break961_g170687.z * break33_g170709.z );
					float temp_output_28_0_g170709 = ( temp_output_30_0_g170709 + temp_output_29_0_g170709 + temp_output_31_0_g170709 + ( break961_g170687.w * break33_g170709.w ) );
					float clampResult17_g170707 = clamp( temp_output_28_0_g170709 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170711 = _ThirdMeshRemap.x;
					float temp_output_9_0_g170711 = ( clampResult17_g170707 - temp_output_7_0_g170711 );
					float lerpResult1026_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
					float temp_output_6_0_g170710 = lerpResult1026_g170687;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170710 = ( temp_output_6_0_g170710 + _ThirdMeshMode );
					#else
					float staticSwitch14_g170710 = temp_output_6_0_g170710;
					#endif
					half Blend_VertMask913_g170687 = staticSwitch14_g170710;
					half3 Visual_NormalWS953_g170687 = Out_NormalWS4_g170694;
					float clampResult17_g170713 = clamp( saturate( (Visual_NormalWS953_g170687).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170715 = _ThirdProjRemap.x;
					float temp_output_9_0_g170715 = ( clampResult17_g170713 - temp_output_7_0_g170715 );
					float lerpResult1004_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170715 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
					half Blend_ProjMask912_g170687 = lerpResult1004_g170687;
					TVEGlobalData Data15_g170696 = Data204_g170496;
					float Out_Dummy15_g170696 = 0;
					float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170696 = Data15_g170696.Dummy;
					Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
					Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
					Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
					Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
					Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
					Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
					Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
					}
					half4 Global_CoatParams972_g170687 = Out_CoatDataRT15_g170696;
					float temp_output_6_0_g170719 = (Global_CoatParams972_g170687).y;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _ThirdElementMode );
					#else
					float staticSwitch14_g170719 = temp_output_6_0_g170719;
					#endif
					#ifdef TVE_THIRD_ELEMENT
					float staticSwitch1056_g170687 = staticSwitch14_g170719;
					#else
					float staticSwitch1056_g170687 = TVE_CoatParams.y;
					#endif
					float lerpResult1060_g170687 = lerp( 1.0 , staticSwitch1056_g170687 , ( _ThirdGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask968_g170687 = lerpResult1060_g170687;
					float clampResult17_g170714 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170687 * Blend_LumaMask1046_g170687 * Blend_VertMask913_g170687 * Blend_ProjMask912_g170687 * Blend_GlobalMask968_g170687 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170716 = _ThirdBlendRemap.x;
					float temp_output_9_0_g170716 = ( clampResult17_g170714 - temp_output_7_0_g170716 );
					half Detail_Mask412_g170687 = ( saturate( ( ( temp_output_9_0_g170716 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
					float3 lerpResult989_g170687 = lerp( Visual_Albedo527_g170687 , lerpResult985_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float3 staticSwitch415_g170687 = lerpResult989_g170687;
					#else
					float3 staticSwitch415_g170687 = Visual_Albedo527_g170687;
					#endif
					half3 Final_Albedo601_g170687 = staticSwitch415_g170687;
					float3 In_Albedo3_g170695 = Final_Albedo601_g170687;
					float3 In_AlbedoRaw3_g170695 = Final_Albedo601_g170687;
					half2 Visual_NormalTS529_g170687 = Out_NormalTS4_g170694;
					float2 lerpResult40_g170697 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170687 , _ThirdBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170689) = _ThirdNormalTex;
					float localFilterTexture29_g170704 = ( 0.0 );
					SamplerState SS29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170704 = SamplerDefault29_g170704;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170704 = SamplerDefault29_g170704;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170704 = SamplerPoint29_g170704;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170704 = SamplerLow29_g170704;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170704 = SamplerMedium29_g170704;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170704 = SamplerHigh29_g170704;
					#endif
					}
					SamplerState Sampler276_g170689 = SS29_g170704;
					float4 temp_output_37_0_g170689 = Local_LayerCoords790_g170687;
					half4 Coords276_g170689 = temp_output_37_0_g170689;
					half2 TexCoord276_g170689 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170689 = SampleMain( Texture276_g170689 , Sampler276_g170689 , Coords276_g170689 , TexCoord276_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170689) = _ThirdNormalTex;
					SamplerState Sampler275_g170689 = SS29_g170704;
					half4 Coords275_g170689 = temp_output_37_0_g170689;
					half2 TexCoord275_g170689 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170689 = SampleExtra( Texture275_g170689 , Sampler275_g170689 , Coords275_g170689 , TexCoord275_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170689) = _ThirdNormalTex;
					SamplerState Sampler238_g170689 = SS29_g170704;
					half4 Coords238_g170689 = temp_output_37_0_g170689;
					float3 temp_output_279_0_g170689 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170689 = temp_output_279_0_g170689;
					half4 localSamplePlanar2D238_g170689 = SamplePlanar2D( Texture238_g170689 , Sampler238_g170689 , Coords238_g170689 , WorldPosition238_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170689) = _ThirdNormalTex;
					SamplerState Sampler246_g170689 = SS29_g170704;
					half4 Coords246_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition246_g170689 = temp_output_279_0_g170689;
					float3 temp_output_280_0_g170689 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170689 = temp_output_280_0_g170689;
					half4 localSamplePlanar3D246_g170689 = SamplePlanar3D( Texture246_g170689 , Sampler246_g170689 , Coords246_g170689 , WorldPosition246_g170689 , WorldNormal246_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170689) = _ThirdNormalTex;
					SamplerState Sampler234_g170689 = SS29_g170704;
					float4 Coords234_g170689 = temp_output_37_0_g170689;
					float3 WorldPosition234_g170689 = temp_output_279_0_g170689;
					float4 localSampleStochastic2D234_g170689 = SampleStochastic2D( Texture234_g170689 , Sampler234_g170689 , Coords234_g170689 , WorldPosition234_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170689) = _ThirdNormalTex;
					SamplerState Sampler263_g170689 = SS29_g170704;
					half4 Coords263_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition263_g170689 = temp_output_279_0_g170689;
					half3 WorldNormal263_g170689 = temp_output_280_0_g170689;
					half4 localSampleStochastic3D263_g170689 = SampleStochastic3D( Texture263_g170689 , Sampler263_g170689 , Coords263_g170689 , WorldPosition263_g170689 , WorldNormal263_g170689 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170687 = localSampleExtra275_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170687 = localSamplePlanar2D238_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170687 = localSamplePlanar3D246_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170687 = localSampleStochastic2D234_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170687 = localSampleStochastic3D263_g170689;
					#else
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#endif
					half4 Local_NormalTex776_g170687 = staticSwitch698_g170687;
					half4 Normal_Packed45_g170691 = Local_NormalTex776_g170687;
					float2 appendResult58_g170691 = (float2(( (Normal_Packed45_g170691).x * (Normal_Packed45_g170691).w ) , (Normal_Packed45_g170691).y));
					half2 Normal_Default50_g170691 = appendResult58_g170691;
					half2 Normal_ASTC41_g170691 = (Normal_Packed45_g170691).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170691 = Normal_ASTC41_g170691;
					#else
					float2 staticSwitch38_g170691 = Normal_Default50_g170691;
					#endif
					half2 Normal_NO_DTX544_g170691 = (Normal_Packed45_g170691).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170691 = Normal_NO_DTX544_g170691;
					#else
					float2 staticSwitch37_g170691 = staticSwitch38_g170691;
					#endif
					float2 temp_output_724_0_g170687 = ( (staticSwitch37_g170691*2.0 + -1.0) * _ThirdNormalValue );
					half2 Normal_Planar45_g170692 = temp_output_724_0_g170687;
					float2 break71_g170692 = Normal_Planar45_g170692;
					float3 appendResult72_g170692 = (float3(break71_g170692.x , 0.0 , break71_g170692.y));
					float2 temp_output_858_0_g170687 = (mul( ase_worldToTangent, appendResult72_g170692 )).xy;
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#else
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#endif
					half2 Local_NormalTS729_g170687 = staticSwitch727_g170687;
					float2 temp_output_36_0_g170697 = ( lerpResult40_g170697 + Local_NormalTS729_g170687 );
					float2 lerpResult405_g170687 = lerp( Visual_NormalTS529_g170687 , temp_output_36_0_g170697 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float2 staticSwitch418_g170687 = lerpResult405_g170687;
					#else
					float2 staticSwitch418_g170687 = Visual_NormalTS529_g170687;
					#endif
					half2 Final_NormalTS612_g170687 = staticSwitch418_g170687;
					float2 In_NormalTS3_g170695 = Final_NormalTS612_g170687;
					float3 appendResult68_g170698 = (float3(Final_NormalTS612_g170687 , 1.0));
					float3 tanNormal74_g170698 = appendResult68_g170698;
					float3 worldNormal74_g170698 = normalize( float3( dot( tanToWorld0, tanNormal74_g170698 ), dot( tanToWorld1, tanNormal74_g170698 ), dot( tanToWorld2, tanNormal74_g170698 ) ) );
					half3 Final_NormalWS956_g170687 = worldNormal74_g170698;
					float3 In_NormalWS3_g170695 = Final_NormalWS956_g170687;
					half4 Visual_Shader531_g170687 = Out_Shader4_g170694;
					float4 lerpResult1000_g170687 = lerp( Local_Masks750_g170687 , ( Visual_Shader531_g170687 * Local_Masks750_g170687 ) , _ThirdBlendShaderValue);
					float4 lerpResult998_g170687 = lerp( Visual_Shader531_g170687 , lerpResult1000_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float4 staticSwitch451_g170687 = lerpResult998_g170687;
					#else
					float4 staticSwitch451_g170687 = Visual_Shader531_g170687;
					#endif
					half4 Final_Masks613_g170687 = staticSwitch451_g170687;
					float4 In_Shader3_g170695 = Final_Masks613_g170687;
					float4 In_Emissive3_g170695 = Out_Emissive4_g170694;
					float3 temp_output_3_0_g170700 = Final_Albedo601_g170687;
					float dotResult20_g170700 = dot( temp_output_3_0_g170700 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170687 = dotResult20_g170700;
					float In_Grayscale3_g170695 = Final_Grayscale615_g170687;
					float clampResult651_g170687 = clamp( saturate( ( Final_Grayscale615_g170687 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170687 = clampResult651_g170687;
					float In_Luminosity3_g170695 = Final_Luminosity652_g170687;
					half Visual_MultiMask547_g170687 = Out_MultiMask4_g170694;
					float lerpResult477_g170687 = lerp( Visual_MultiMask547_g170687 , Local_MultiMask767_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch482_g170687 = lerpResult477_g170687;
					#else
					float staticSwitch482_g170687 = Visual_MultiMask547_g170687;
					#endif
					half Final_MultiMask572_g170687 = staticSwitch482_g170687;
					float In_MultiMask3_g170695 = Final_MultiMask572_g170687;
					half Visual_AlphaClip559_g170687 = Out_AlphaClip4_g170694;
					float temp_output_718_0_g170687 = (Local_AlbedoTex777_g170687).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch924_g170687 = ( temp_output_718_0_g170687 - _ThirdAlphaClipValue );
					#else
					float staticSwitch924_g170687 = temp_output_718_0_g170687;
					#endif
					half Local_AlphaClip772_g170687 = staticSwitch924_g170687;
					float lerpResult448_g170687 = lerp( Visual_AlphaClip559_g170687 , Local_AlphaClip772_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch564_g170687 = lerpResult448_g170687;
					#else
					float staticSwitch564_g170687 = Visual_AlphaClip559_g170687;
					#endif
					half Final_AlphaClip602_g170687 = staticSwitch564_g170687;
					float In_AlphaClip3_g170695 = Final_AlphaClip602_g170687;
					half Visual_AlphaFade588_g170687 = Out_AlphaFade4_g170694;
					half Local_AlphaFade773_g170687 = (lerpResult706_g170687).a;
					float lerpResult604_g170687 = lerp( Visual_AlphaFade588_g170687 , Local_AlphaFade773_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch608_g170687 = lerpResult604_g170687;
					#else
					float staticSwitch608_g170687 = Visual_AlphaFade588_g170687;
					#endif
					half Final_AlphaFade611_g170687 = staticSwitch608_g170687;
					float In_AlphaFade3_g170695 = Final_AlphaFade611_g170687;
					float3 In_Translucency3_g170695 = Out_Translucency4_g170694;
					float In_Transmission3_g170695 = Out_Transmission4_g170694;
					float In_Thickness3_g170695 = Out_Thickness4_g170694;
					float In_Diffusion3_g170695 = Out_Diffusion4_g170694;
					float In_Depth3_g170695 = Out_Depth4_g170694;
					{
					Data3_g170695.Dummy = In_Dummy3_g170695;
					Data3_g170695.Albedo = In_Albedo3_g170695;
					Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
					Data3_g170695.NormalTS = In_NormalTS3_g170695;
					Data3_g170695.NormalWS = In_NormalWS3_g170695;
					Data3_g170695.Shader = In_Shader3_g170695;
					Data3_g170695.Emissive= In_Emissive3_g170695;
					Data3_g170695.MultiMask = In_MultiMask3_g170695;
					Data3_g170695.Grayscale = In_Grayscale3_g170695;
					Data3_g170695.Luminosity = In_Luminosity3_g170695;
					Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
					Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
					Data3_g170695.Translucency = In_Translucency3_g170695;
					Data3_g170695.Transmission = In_Transmission3_g170695;
					Data3_g170695.Thickness = In_Thickness3_g170695;
					Data3_g170695.Diffusion = In_Diffusion3_g170695;
					Data3_g170695.Depth = In_Depth3_g170695;
					}
					TVEVisualData Data4_g170789 = Data3_g170695;
					float Out_Dummy4_g170789 = 0;
					float3 Out_Albedo4_g170789 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170789 = float2( 0,0 );
					float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
					float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170789 = 0;
					float Out_Grayscale4_g170789 = 0;
					float Out_Luminosity4_g170789 = 0;
					float Out_AlphaClip4_g170789 = 0;
					float Out_AlphaFade4_g170789 = 0;
					float3 Out_Translucency4_g170789 = float3( 0,0,0 );
					float Out_Transmission4_g170789 = 0;
					float Out_Thickness4_g170789 = 0;
					float Out_Diffusion4_g170789 = 0;
					float Out_Depth4_g170789 = 0;
					{
					Out_Dummy4_g170789 = Data4_g170789.Dummy;
					Out_Albedo4_g170789 = Data4_g170789.Albedo;
					Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
					Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
					Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
					Out_Shader4_g170789 = Data4_g170789.Shader;
					Out_Emissive4_g170789= Data4_g170789.Emissive;
					Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
					Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
					Out_Luminosity4_g170789= Data4_g170789.Luminosity;
					Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
					Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
					Out_Translucency4_g170789 = Data4_g170789.Translucency;
					Out_Transmission4_g170789 = Data4_g170789.Transmission;
					Out_Thickness4_g170789 = Data4_g170789.Thickness;
					Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
					Out_Depth4_g170789= Data4_g170789.Depth;
					}
					half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
					TVEModelData Data15_g170796 = Data16_g170483;
					float Out_Dummy15_g170796 = 0;
					float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
					float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170796 = Data15_g170796.Dummy;
					Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
					Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
					Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
					Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
					Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
					Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
					Out_VertexData15_g170796 = Data15_g170796.VertexData;
					Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
					}
					half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
					float4 break208_g170788 = Model_VertexData206_g170788;
					float4 break33_g170794 = _occlusion_vert_mode;
					float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
					float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
					float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
					float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
					float temp_output_194_0_g170788 = temp_output_28_0_g170794;
					float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
					float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
					float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + _OcclusionMeshMode );
					#else
					float staticSwitch14_g170793 = temp_output_6_0_g170793;
					#endif
					half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
					float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
					float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
					#ifdef TVE_OCCLUSION
					float3 staticSwitch171_g170788 = lerpResult186_g170788;
					#else
					float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
					#endif
					half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
					float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
					float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
					float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
					float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
					float4 In_Shader3_g170790 = Out_Shader4_g170789;
					float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
					float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
					float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170788 = dotResult20_g170791;
					float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
					float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Shading181_g170788 = clampResult180_g170788;
					float In_Luminosity3_g170790 = Final_Shading181_g170788;
					float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
					float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
					float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
					float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
					float In_Transmission3_g170790 = Out_Transmission4_g170789;
					float In_Thickness3_g170790 = Out_Thickness4_g170789;
					float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
					float In_Depth3_g170790 = Out_Depth4_g170789;
					{
					Data3_g170790.Dummy = In_Dummy3_g170790;
					Data3_g170790.Albedo = In_Albedo3_g170790;
					Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
					Data3_g170790.NormalTS = In_NormalTS3_g170790;
					Data3_g170790.NormalWS = In_NormalWS3_g170790;
					Data3_g170790.Shader = In_Shader3_g170790;
					Data3_g170790.Emissive= In_Emissive3_g170790;
					Data3_g170790.MultiMask = In_MultiMask3_g170790;
					Data3_g170790.Grayscale = In_Grayscale3_g170790;
					Data3_g170790.Luminosity = In_Luminosity3_g170790;
					Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
					Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
					Data3_g170790.Translucency = In_Translucency3_g170790;
					Data3_g170790.Transmission = In_Transmission3_g170790;
					Data3_g170790.Thickness = In_Thickness3_g170790;
					Data3_g170790.Diffusion = In_Diffusion3_g170790;
					Data3_g170790.Depth = In_Depth3_g170790;
					}
					TVEVisualData Data4_g170800 = Data3_g170790;
					float Out_Dummy4_g170800 = 0;
					float3 Out_Albedo4_g170800 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170800 = float2( 0,0 );
					float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
					float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170800 = 0;
					float Out_Grayscale4_g170800 = 0;
					float Out_Luminosity4_g170800 = 0;
					float Out_AlphaClip4_g170800 = 0;
					float Out_AlphaFade4_g170800 = 0;
					float3 Out_Translucency4_g170800 = float3( 0,0,0 );
					float Out_Transmission4_g170800 = 0;
					float Out_Thickness4_g170800 = 0;
					float Out_Diffusion4_g170800 = 0;
					float Out_Depth4_g170800 = 0;
					{
					Out_Dummy4_g170800 = Data4_g170800.Dummy;
					Out_Albedo4_g170800 = Data4_g170800.Albedo;
					Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
					Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
					Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
					Out_Shader4_g170800 = Data4_g170800.Shader;
					Out_Emissive4_g170800= Data4_g170800.Emissive;
					Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
					Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
					Out_Luminosity4_g170800= Data4_g170800.Luminosity;
					Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
					Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
					Out_Translucency4_g170800 = Data4_g170800.Translucency;
					Out_Transmission4_g170800 = Data4_g170800.Transmission;
					Out_Thickness4_g170800 = Data4_g170800.Thickness;
					Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
					Out_Depth4_g170800= Data4_g170800.Depth;
					}
					half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
					TVEModelData Data15_g170806 = Data16_g170483;
					float Out_Dummy15_g170806 = 0;
					float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
					float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170806 = Data15_g170806.Dummy;
					Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
					Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
					Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
					Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
					Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
					Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
					Out_VertexData15_g170806 = Data15_g170806.VertexData;
					Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
					}
					half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
					float4 break226_g170798 = Model_VertexData224_g170798;
					float4 break33_g170799 = _gradient_vert_mode;
					float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
					float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
					float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
					float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
					float temp_output_211_0_g170798 = temp_output_28_0_g170799;
					float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170807 = _GradientMeshRemap.x;
					float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
					float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + _GradientMeshMode );
					#else
					float staticSwitch14_g170805 = temp_output_6_0_g170805;
					#endif
					half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
					half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
					float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
					float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
					half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
					float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
					half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
					float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
					#ifdef TVE_GRADIENT
					float3 staticSwitch171_g170798 = lerpResult186_g170798;
					#else
					float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
					#endif
					half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
					float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
					float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
					float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
					float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
					float4 In_Shader3_g170801 = Out_Shader4_g170800;
					float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
					float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
					float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170798 = dotResult20_g170802;
					float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
					float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170798 = clampResult180_g170798;
					float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
					float In_MultiMask3_g170801 = temp_output_162_11_g170798;
					float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
					float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
					float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
					float In_Transmission3_g170801 = Out_Transmission4_g170800;
					float In_Thickness3_g170801 = Out_Thickness4_g170800;
					float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
					float In_Depth3_g170801 = Out_Depth4_g170800;
					{
					Data3_g170801.Dummy = In_Dummy3_g170801;
					Data3_g170801.Albedo = In_Albedo3_g170801;
					Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
					Data3_g170801.NormalTS = In_NormalTS3_g170801;
					Data3_g170801.NormalWS = In_NormalWS3_g170801;
					Data3_g170801.Shader = In_Shader3_g170801;
					Data3_g170801.Emissive= In_Emissive3_g170801;
					Data3_g170801.MultiMask = In_MultiMask3_g170801;
					Data3_g170801.Grayscale = In_Grayscale3_g170801;
					Data3_g170801.Luminosity = In_Luminosity3_g170801;
					Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
					Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
					Data3_g170801.Translucency = In_Translucency3_g170801;
					Data3_g170801.Transmission = In_Transmission3_g170801;
					Data3_g170801.Thickness = In_Thickness3_g170801;
					Data3_g170801.Diffusion = In_Diffusion3_g170801;
					Data3_g170801.Depth = In_Depth3_g170801;
					}
					TVEVisualData Data4_g170809 = Data3_g170801;
					float Out_Dummy4_g170809 = 0;
					float3 Out_Albedo4_g170809 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170809 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170809 = float2( 0,0 );
					float3 Out_NormalWS4_g170809 = float3( 0,0,0 );
					float4 Out_Shader4_g170809 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170809 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170809 = 0;
					float Out_Grayscale4_g170809 = 0;
					float Out_Luminosity4_g170809 = 0;
					float Out_AlphaClip4_g170809 = 0;
					float Out_AlphaFade4_g170809 = 0;
					float3 Out_Translucency4_g170809 = float3( 0,0,0 );
					float Out_Transmission4_g170809 = 0;
					float Out_Thickness4_g170809 = 0;
					float Out_Diffusion4_g170809 = 0;
					float Out_Depth4_g170809 = 0;
					{
					Out_Dummy4_g170809 = Data4_g170809.Dummy;
					Out_Albedo4_g170809 = Data4_g170809.Albedo;
					Out_AlbedoRaw4_g170809 = Data4_g170809.AlbedoRaw;
					Out_NormalTS4_g170809 = Data4_g170809.NormalTS;
					Out_NormalWS4_g170809 = Data4_g170809.NormalWS;
					Out_Shader4_g170809 = Data4_g170809.Shader;
					Out_Emissive4_g170809= Data4_g170809.Emissive;
					Out_MultiMask4_g170809 = Data4_g170809.MultiMask;
					Out_Grayscale4_g170809 = Data4_g170809.Grayscale;
					Out_Luminosity4_g170809= Data4_g170809.Luminosity;
					Out_AlphaClip4_g170809 = Data4_g170809.AlphaClip;
					Out_AlphaFade4_g170809 = Data4_g170809.AlphaFade;
					Out_Translucency4_g170809 = Data4_g170809.Translucency;
					Out_Transmission4_g170809 = Data4_g170809.Transmission;
					Out_Thickness4_g170809 = Data4_g170809.Thickness;
					Out_Diffusion4_g170809 = Data4_g170809.Diffusion;
					Out_Depth4_g170809= Data4_g170809.Depth;
					}
					half3 Visual_Albedo127_g170808 = Out_Albedo4_g170809;
					TVEModelData Data15_g170811 = Data16_g170483;
					float Out_Dummy15_g170811 = 0;
					float3 Out_PositionWS15_g170811 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170811 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170811 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170811 = float3( 0,0,0 );
					float4 Out_VertexData15_g170811 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170811 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170811 = Data15_g170811.Dummy;
					Out_PositionWS15_g170811 = Data15_g170811.PositionWS;
					Out_PositionWO15_g170811 = Data15_g170811.PositionWO;
					Out_PivotWS15_g170811 = Data15_g170811.PivotWS;
					Out_PivotWO15_g170811 = Data15_g170811.PivotWO;
					Out_NormalWS15_g170811 = Data15_g170811.NormalWS;
					Out_ViewDirWS15_g170811 = Data15_g170811.ViewDirWS;
					Out_VertexData15_g170811 = Data15_g170811.VertexData;
					Out_BoundsData15_g170811 = Data15_g170811.BoundsData;
					}
					half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170811;
					half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170811;
					float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
					float clampResult17_g170813 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
					float temp_output_7_0_g170814 = _VariationNoiseRemap.x;
					float temp_output_9_0_g170814 = ( clampResult17_g170813 - temp_output_7_0_g170814 );
					float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170814 * _VariationNoiseRemap.z ) + 0.0001 ) );
					half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
					half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
					float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
					float temp_output_162_11_g170808 = Out_MultiMask4_g170809;
					half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
					float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
					half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
					float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
					#ifdef TVE_VARIATION
					float3 staticSwitch171_g170808 = lerpResult186_g170808;
					#else
					float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
					#endif
					half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
					float3 In_Albedo3_g170810 = Final_Albedo160_g170808;
					float3 In_AlbedoRaw3_g170810 = Final_Albedo160_g170808;
					float2 In_NormalTS3_g170810 = Out_NormalTS4_g170809;
					float3 In_NormalWS3_g170810 = Out_NormalWS4_g170809;
					float4 In_Shader3_g170810 = Out_Shader4_g170809;
					float4 In_Emissive3_g170810 = Out_Emissive4_g170809;
					float3 temp_output_3_0_g170812 = Final_Albedo160_g170808;
					float dotResult20_g170812 = dot( temp_output_3_0_g170812 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170808 = dotResult20_g170812;
					float In_Grayscale3_g170810 = Final_Grayscale164_g170808;
					float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170808 = clampResult180_g170808;
					float In_Luminosity3_g170810 = Final_Luminosity181_g170808;
					float In_MultiMask3_g170810 = temp_output_162_11_g170808;
					float In_AlphaClip3_g170810 = Out_AlphaClip4_g170809;
					float In_AlphaFade3_g170810 = Out_AlphaFade4_g170809;
					float3 In_Translucency3_g170810 = Out_Translucency4_g170809;
					float In_Transmission3_g170810 = Out_Transmission4_g170809;
					float In_Thickness3_g170810 = Out_Thickness4_g170809;
					float In_Diffusion3_g170810 = Out_Diffusion4_g170809;
					float In_Depth3_g170810 = Out_Depth4_g170809;
					{
					Data3_g170810.Dummy = In_Dummy3_g170810;
					Data3_g170810.Albedo = In_Albedo3_g170810;
					Data3_g170810.AlbedoRaw = In_AlbedoRaw3_g170810;
					Data3_g170810.NormalTS = In_NormalTS3_g170810;
					Data3_g170810.NormalWS = In_NormalWS3_g170810;
					Data3_g170810.Shader = In_Shader3_g170810;
					Data3_g170810.Emissive= In_Emissive3_g170810;
					Data3_g170810.MultiMask = In_MultiMask3_g170810;
					Data3_g170810.Grayscale = In_Grayscale3_g170810;
					Data3_g170810.Luminosity = In_Luminosity3_g170810;
					Data3_g170810.AlphaClip = In_AlphaClip3_g170810;
					Data3_g170810.AlphaFade = In_AlphaFade3_g170810;
					Data3_g170810.Translucency = In_Translucency3_g170810;
					Data3_g170810.Transmission = In_Transmission3_g170810;
					Data3_g170810.Thickness = In_Thickness3_g170810;
					Data3_g170810.Diffusion = In_Diffusion3_g170810;
					Data3_g170810.Depth = In_Depth3_g170810;
					}
					TVEVisualData Data4_g170824 = Data3_g170810;
					float Out_Dummy4_g170824 = 0;
					float3 Out_Albedo4_g170824 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170824 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170824 = float2( 0,0 );
					float3 Out_NormalWS4_g170824 = float3( 0,0,0 );
					float4 Out_Shader4_g170824 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170824 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170824 = 0;
					float Out_Grayscale4_g170824 = 0;
					float Out_Luminosity4_g170824 = 0;
					float Out_AlphaClip4_g170824 = 0;
					float Out_AlphaFade4_g170824 = 0;
					float3 Out_Translucency4_g170824 = float3( 0,0,0 );
					float Out_Transmission4_g170824 = 0;
					float Out_Thickness4_g170824 = 0;
					float Out_Diffusion4_g170824 = 0;
					float Out_Depth4_g170824 = 0;
					{
					Out_Dummy4_g170824 = Data4_g170824.Dummy;
					Out_Albedo4_g170824 = Data4_g170824.Albedo;
					Out_AlbedoRaw4_g170824 = Data4_g170824.AlbedoRaw;
					Out_NormalTS4_g170824 = Data4_g170824.NormalTS;
					Out_NormalWS4_g170824 = Data4_g170824.NormalWS;
					Out_Shader4_g170824 = Data4_g170824.Shader;
					Out_Emissive4_g170824= Data4_g170824.Emissive;
					Out_MultiMask4_g170824 = Data4_g170824.MultiMask;
					Out_Grayscale4_g170824 = Data4_g170824.Grayscale;
					Out_Luminosity4_g170824= Data4_g170824.Luminosity;
					Out_AlphaClip4_g170824 = Data4_g170824.AlphaClip;
					Out_AlphaFade4_g170824 = Data4_g170824.AlphaFade;
					Out_Translucency4_g170824 = Data4_g170824.Translucency;
					Out_Transmission4_g170824 = Data4_g170824.Transmission;
					Out_Thickness4_g170824 = Data4_g170824.Thickness;
					Out_Diffusion4_g170824 = Data4_g170824.Diffusion;
					Out_Depth4_g170824= Data4_g170824.Depth;
					}
					half3 Visual_Albedo139_g170820 = Out_Albedo4_g170824;
					float temp_output_200_12_g170820 = Out_Grayscale4_g170824;
					half Visual_Grayscale150_g170820 = temp_output_200_12_g170820;
					float3 temp_cast_33 = (Visual_Grayscale150_g170820).xxx;
					TVEGlobalData Data15_g170821 = Data204_g170496;
					float Out_Dummy15_g170821 = 0;
					float4 Out_CoatDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170821 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170821 = Data15_g170821.Dummy;
					Out_CoatDataRT15_g170821 = Data15_g170821.CoatDataRT;
					Out_PaintDataRT15_g170821 = Data15_g170821.PaintDataRT;
					Out_GlowDataRT15_g170821= Data15_g170821.GlowDataRT;
					Out_AtmoDataRT15_g170821= Data15_g170821.AtmoDataRT;
					Out_FadeDataRT15_g170821= Data15_g170821.FadeDataRT;
					Out_FormDataRT15_g170821 = Data15_g170821.FormDataRT;
					Out_FlowDataRT15_g170821 = Data15_g170821.FlowDataRT;
					}
					half4 Global_PaintParams209_g170820 = Out_PaintDataRT15_g170821;
					float4 temp_output_6_0_g170838 = Global_PaintParams209_g170820;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170838 = ( temp_output_6_0_g170838 + _TintingElementMode );
					#else
					float4 staticSwitch14_g170838 = temp_output_6_0_g170838;
					#endif
					#ifdef TVE_TINTING_ELEMENT
					float4 staticSwitch283_g170820 = staticSwitch14_g170838;
					#else
					float4 staticSwitch283_g170820 = TVE_PaintParams;
					#endif
					float4 lerpResult412_g170820 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170820 , ( _TintingGlobalValue * TVE_IsEnabled ));
					half Tinting_GlobalValue285_g170820 = saturate( (lerpResult412_g170820).w );
					float3 lerpResult368_g170820 = lerp( Visual_Albedo139_g170820 , temp_cast_33 , ( Tinting_GlobalValue285_g170820 * _TintingGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170844 = 2.0;
					#else
					float staticSwitch1_g170844 = 4.594794;
					#endif
					half3 Tinting_GlobalColor290_g170820 = (lerpResult412_g170820).xyz;
					float temp_output_200_11_g170820 = Out_MultiMask4_g170824;
					half Visual_MultiMask181_g170820 = temp_output_200_11_g170820;
					float lerpResult147_g170820 = lerp( 1.0 , Visual_MultiMask181_g170820 , _TintingMultiValue);
					half Tinting_MutiMask121_g170820 = lerpResult147_g170820;
					half Tinting_TexMask385_g170820 = 1.0;
					float temp_output_200_15_g170820 = Out_Luminosity4_g170824;
					half Visual_Luminosity257_g170820 = temp_output_200_15_g170820;
					float clampResult17_g170831 = clamp( Visual_Luminosity257_g170820 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170835 = _TintingLumaRemap.x;
					float temp_output_9_0_g170835 = ( clampResult17_g170831 - temp_output_7_0_g170835 );
					float lerpResult228_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
					half Tinting_LumaMask153_g170820 = lerpResult228_g170820;
					TVEModelData Data15_g170825 = Data16_g170483;
					float Out_Dummy15_g170825 = 0;
					float3 Out_PositionWS15_g170825 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170825 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170825 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170825 = float3( 0,0,0 );
					float4 Out_VertexData15_g170825 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170825 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170825 = Data15_g170825.Dummy;
					Out_PositionWS15_g170825 = Data15_g170825.PositionWS;
					Out_PositionWO15_g170825 = Data15_g170825.PositionWO;
					Out_PivotWS15_g170825 = Data15_g170825.PivotWS;
					Out_PivotWO15_g170825 = Data15_g170825.PivotWO;
					Out_NormalWS15_g170825 = Data15_g170825.NormalWS;
					Out_ViewDirWS15_g170825 = Data15_g170825.ViewDirWS;
					Out_VertexData15_g170825 = Data15_g170825.VertexData;
					Out_BoundsData15_g170825 = Data15_g170825.BoundsData;
					}
					half4 Model_VertexMasks307_g170820 = Out_VertexData15_g170825;
					float4 break311_g170820 = Model_VertexMasks307_g170820;
					float4 break33_g170828 = _tinting_vert_mode;
					float temp_output_30_0_g170828 = ( break311_g170820.x * break33_g170828.x );
					float temp_output_29_0_g170828 = ( break311_g170820.y * break33_g170828.y );
					float temp_output_31_0_g170828 = ( break311_g170820.z * break33_g170828.z );
					float temp_output_28_0_g170828 = ( temp_output_30_0_g170828 + temp_output_29_0_g170828 + temp_output_31_0_g170828 + ( break311_g170820.w * break33_g170828.w ) );
					float clampResult17_g170830 = clamp( temp_output_28_0_g170828 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170836 = _TintingMeshRemap.x;
					float temp_output_9_0_g170836 = ( clampResult17_g170830 - temp_output_7_0_g170836 );
					float lerpResult370_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
					float temp_output_6_0_g170832 = lerpResult370_g170820;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170832 = ( temp_output_6_0_g170832 + _TintingMeshMode );
					#else
					float staticSwitch14_g170832 = temp_output_6_0_g170832;
					#endif
					half Tinting_VertMask309_g170820 = staticSwitch14_g170832;
					half Tinting_NoiseMask213_g170820 = 1.0;
					half Custom_Mask345_g170820 = 1.0;
					half Tinting_CoreMasks433_g170820 = ( Tinting_MutiMask121_g170820 * Tinting_TexMask385_g170820 * Tinting_LumaMask153_g170820 * Tinting_VertMask309_g170820 * Tinting_NoiseMask213_g170820 * Custom_Mask345_g170820 );
					float temp_output_7_0_g170842 = _TintingBlendRemap.x;
					float temp_output_9_0_g170842 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170820 * Tinting_GlobalValue285_g170820 ) - temp_output_7_0_g170842 );
					half Tinting_Mask242_g170820 = ( saturate( ( ( temp_output_9_0_g170842 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
					float3 lerpResult90_g170820 = lerp( Visual_Albedo139_g170820 , ( lerpResult368_g170820 * staticSwitch1_g170844 * Tinting_GlobalColor290_g170820 * (_TintingColor).rgb ) , Tinting_Mask242_g170820);
					#ifdef TVE_TINTING
					float3 staticSwitch286_g170820 = lerpResult90_g170820;
					#else
					float3 staticSwitch286_g170820 = Visual_Albedo139_g170820;
					#endif
					half3 Final_Albedo97_g170820 = staticSwitch286_g170820;
					float3 In_Albedo3_g170840 = Final_Albedo97_g170820;
					float3 In_AlbedoRaw3_g170840 = Out_AlbedoRaw4_g170824;
					float2 In_NormalTS3_g170840 = Out_NormalTS4_g170824;
					float3 In_NormalWS3_g170840 = Out_NormalWS4_g170824;
					float4 In_Shader3_g170840 = Out_Shader4_g170824;
					float4 In_Emissive3_g170840 = Out_Emissive4_g170824;
					float In_Grayscale3_g170840 = temp_output_200_12_g170820;
					float In_Luminosity3_g170840 = temp_output_200_15_g170820;
					float In_MultiMask3_g170840 = temp_output_200_11_g170820;
					float In_AlphaClip3_g170840 = Out_AlphaClip4_g170824;
					float In_AlphaFade3_g170840 = Out_AlphaFade4_g170824;
					float3 In_Translucency3_g170840 = Out_Translucency4_g170824;
					float In_Transmission3_g170840 = Out_Transmission4_g170824;
					float In_Thickness3_g170840 = Out_Thickness4_g170824;
					float In_Diffusion3_g170840 = Out_Diffusion4_g170824;
					float In_Depth3_g170840 = Out_Depth4_g170824;
					{
					Data3_g170840.Dummy = In_Dummy3_g170840;
					Data3_g170840.Albedo = In_Albedo3_g170840;
					Data3_g170840.AlbedoRaw = In_AlbedoRaw3_g170840;
					Data3_g170840.NormalTS = In_NormalTS3_g170840;
					Data3_g170840.NormalWS = In_NormalWS3_g170840;
					Data3_g170840.Shader = In_Shader3_g170840;
					Data3_g170840.Emissive= In_Emissive3_g170840;
					Data3_g170840.MultiMask = In_MultiMask3_g170840;
					Data3_g170840.Grayscale = In_Grayscale3_g170840;
					Data3_g170840.Luminosity = In_Luminosity3_g170840;
					Data3_g170840.AlphaClip = In_AlphaClip3_g170840;
					Data3_g170840.AlphaFade = In_AlphaFade3_g170840;
					Data3_g170840.Translucency = In_Translucency3_g170840;
					Data3_g170840.Transmission = In_Transmission3_g170840;
					Data3_g170840.Thickness = In_Thickness3_g170840;
					Data3_g170840.Diffusion = In_Diffusion3_g170840;
					Data3_g170840.Depth = In_Depth3_g170840;
					}
					TVEVisualData Data4_g170847 = Data3_g170840;
					float Out_Dummy4_g170847 = 0;
					float3 Out_Albedo4_g170847 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170847 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170847 = float2( 0,0 );
					float3 Out_NormalWS4_g170847 = float3( 0,0,0 );
					float4 Out_Shader4_g170847 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170847 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170847 = 0;
					float Out_Grayscale4_g170847 = 0;
					float Out_Luminosity4_g170847 = 0;
					float Out_AlphaClip4_g170847 = 0;
					float Out_AlphaFade4_g170847 = 0;
					float3 Out_Translucency4_g170847 = float3( 0,0,0 );
					float Out_Transmission4_g170847 = 0;
					float Out_Thickness4_g170847 = 0;
					float Out_Diffusion4_g170847 = 0;
					float Out_Depth4_g170847 = 0;
					{
					Out_Dummy4_g170847 = Data4_g170847.Dummy;
					Out_Albedo4_g170847 = Data4_g170847.Albedo;
					Out_AlbedoRaw4_g170847 = Data4_g170847.AlbedoRaw;
					Out_NormalTS4_g170847 = Data4_g170847.NormalTS;
					Out_NormalWS4_g170847 = Data4_g170847.NormalWS;
					Out_Shader4_g170847 = Data4_g170847.Shader;
					Out_Emissive4_g170847= Data4_g170847.Emissive;
					Out_MultiMask4_g170847 = Data4_g170847.MultiMask;
					Out_Grayscale4_g170847 = Data4_g170847.Grayscale;
					Out_Luminosity4_g170847= Data4_g170847.Luminosity;
					Out_AlphaClip4_g170847 = Data4_g170847.AlphaClip;
					Out_AlphaFade4_g170847 = Data4_g170847.AlphaFade;
					Out_Translucency4_g170847 = Data4_g170847.Translucency;
					Out_Transmission4_g170847 = Data4_g170847.Transmission;
					Out_Thickness4_g170847 = Data4_g170847.Thickness;
					Out_Diffusion4_g170847 = Data4_g170847.Diffusion;
					Out_Depth4_g170847= Data4_g170847.Depth;
					}
					half3 Visual_Albedo292_g170845 = Out_Albedo4_g170847;
					float temp_output_280_12_g170845 = Out_Grayscale4_g170847;
					half Visual_Grayscale308_g170845 = temp_output_280_12_g170845;
					float3 temp_cast_34 = (Visual_Grayscale308_g170845).xxx;
					TVEGlobalData Data15_g170846 = Data204_g170496;
					float Out_Dummy15_g170846 = 0;
					float4 Out_CoatDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170846 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170846 = Data15_g170846.Dummy;
					Out_CoatDataRT15_g170846 = Data15_g170846.CoatDataRT;
					Out_PaintDataRT15_g170846 = Data15_g170846.PaintDataRT;
					Out_GlowDataRT15_g170846= Data15_g170846.GlowDataRT;
					Out_AtmoDataRT15_g170846= Data15_g170846.AtmoDataRT;
					Out_FadeDataRT15_g170846= Data15_g170846.FadeDataRT;
					Out_FormDataRT15_g170846 = Data15_g170846.FormDataRT;
					Out_FlowDataRT15_g170846 = Data15_g170846.FlowDataRT;
					}
					half4 Global_AtmoParams314_g170845 = Out_AtmoDataRT15_g170846;
					float temp_output_6_0_g170864 = (Global_AtmoParams314_g170845).x;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170864 = ( temp_output_6_0_g170864 + _DrynessElementMode );
					#else
					float staticSwitch14_g170864 = temp_output_6_0_g170864;
					#endif
					#ifdef TVE_DRYNESS_ELEMENT
					float staticSwitch351_g170845 = staticSwitch14_g170864;
					#else
					float staticSwitch351_g170845 = TVE_AtmoParams.x;
					#endif
					float lerpResult505_g170845 = lerp( 1.0 , ( staticSwitch351_g170845 * TVE_IsEnabled ) , _DrynessGlobalValue);
					half Dryness_GlobalValue352_g170845 = lerpResult505_g170845;
					float3 lerpResult485_g170845 = lerp( Visual_Albedo292_g170845 , temp_cast_34 , ( Dryness_GlobalValue352_g170845 * _DrynessGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170868 = 2.0;
					#else
					float staticSwitch1_g170868 = 4.594794;
					#endif
					half Dryness_TexMask478_g170845 = 1.0;
					float temp_output_280_11_g170845 = Out_MultiMask4_g170847;
					half Visual_MultiMask310_g170845 = temp_output_280_11_g170845;
					float lerpResult283_g170845 = lerp( 1.0 , Visual_MultiMask310_g170845 , _DrynessMultiValue);
					half Dryness_MultiMask302_g170845 = lerpResult283_g170845;
					float temp_output_280_15_g170845 = Out_Luminosity4_g170847;
					half Visual_Luminosity309_g170845 = temp_output_280_15_g170845;
					float clampResult17_g170857 = clamp( Visual_Luminosity309_g170845 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170861 = _DrynessLumaRemap.x;
					float temp_output_9_0_g170861 = ( clampResult17_g170857 - temp_output_7_0_g170861 );
					float lerpResult295_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170861 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
					half Dryness_LumaMask301_g170845 = lerpResult295_g170845;
					TVEModelData Data15_g170851 = Data16_g170483;
					float Out_Dummy15_g170851 = 0;
					float3 Out_PositionWS15_g170851 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170851 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170851 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170851 = float3( 0,0,0 );
					float4 Out_VertexData15_g170851 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170851 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170851 = Data15_g170851.Dummy;
					Out_PositionWS15_g170851 = Data15_g170851.PositionWS;
					Out_PositionWO15_g170851 = Data15_g170851.PositionWO;
					Out_PivotWS15_g170851 = Data15_g170851.PivotWS;
					Out_PivotWO15_g170851 = Data15_g170851.PivotWO;
					Out_NormalWS15_g170851 = Data15_g170851.NormalWS;
					Out_ViewDirWS15_g170851 = Data15_g170851.ViewDirWS;
					Out_VertexData15_g170851 = Data15_g170851.VertexData;
					Out_BoundsData15_g170851 = Data15_g170851.BoundsData;
					}
					half4 Model_VertexMasks386_g170845 = Out_VertexData15_g170851;
					float4 break375_g170845 = Model_VertexMasks386_g170845;
					float4 break33_g170854 = _dryness_vert_mode;
					float temp_output_30_0_g170854 = ( break375_g170845.x * break33_g170854.x );
					float temp_output_29_0_g170854 = ( break375_g170845.y * break33_g170854.y );
					float temp_output_31_0_g170854 = ( break375_g170845.z * break33_g170854.z );
					float temp_output_28_0_g170854 = ( temp_output_30_0_g170854 + temp_output_29_0_g170854 + temp_output_31_0_g170854 + ( break375_g170845.w * break33_g170854.w ) );
					float clampResult17_g170855 = clamp( temp_output_28_0_g170854 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170862 = _DrynessMeshRemap.x;
					float temp_output_9_0_g170862 = ( clampResult17_g170855 - temp_output_7_0_g170862 );
					float lerpResult452_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170862 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
					float temp_output_6_0_g170858 = lerpResult452_g170845;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170858 = ( temp_output_6_0_g170858 + _DrynessMeshMode );
					#else
					float staticSwitch14_g170858 = temp_output_6_0_g170858;
					#endif
					half Dryness_VertMask378_g170845 = staticSwitch14_g170858;
					half Dryness_MaskNoise291_g170845 = 1.0;
					half Custom_Mask411_g170845 = 1.0;
					float temp_output_7_0_g170866 = _DrynessBlendRemap.x;
					float temp_output_9_0_g170866 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170845 * Dryness_MultiMask302_g170845 * Dryness_LumaMask301_g170845 * Dryness_VertMask378_g170845 * Dryness_MaskNoise291_g170845 * Dryness_GlobalValue352_g170845 * Custom_Mask411_g170845 ) - temp_output_7_0_g170866 );
					half Dryness_Mask329_g170845 = saturate( ( ( temp_output_9_0_g170866 * _DrynessBlendRemap.z ) + 0.0001 ) );
					float3 lerpResult336_g170845 = lerp( Visual_Albedo292_g170845 , ( lerpResult485_g170845 * staticSwitch1_g170868 * (_DrynessColor).rgb ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float3 staticSwitch356_g170845 = lerpResult336_g170845;
					#else
					float3 staticSwitch356_g170845 = Visual_Albedo292_g170845;
					#endif
					half3 Final_Albedo331_g170845 = staticSwitch356_g170845;
					float3 In_Albedo3_g170848 = Final_Albedo331_g170845;
					float3 In_AlbedoRaw3_g170848 = Out_AlbedoRaw4_g170847;
					float2 In_NormalTS3_g170848 = Out_NormalTS4_g170847;
					float3 In_NormalWS3_g170848 = Out_NormalWS4_g170847;
					half4 Visual_Shader415_g170845 = Out_Shader4_g170847;
					float4 break438_g170845 = Visual_Shader415_g170845;
					float4 appendResult439_g170845 = (float4(break438_g170845.x , break438_g170845.y , break438_g170845.z , ( break438_g170845.w * _DrynessSmoothnessValue )));
					float4 lerpResult427_g170845 = lerp( Visual_Shader415_g170845 , appendResult439_g170845 , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float4 staticSwitch426_g170845 = lerpResult427_g170845;
					#else
					float4 staticSwitch426_g170845 = Visual_Shader415_g170845;
					#endif
					half4 Final_Shader433_g170845 = staticSwitch426_g170845;
					float4 In_Shader3_g170848 = Final_Shader433_g170845;
					float4 In_Emissive3_g170848 = Out_Emissive4_g170847;
					float In_Grayscale3_g170848 = temp_output_280_12_g170845;
					float In_Luminosity3_g170848 = temp_output_280_15_g170845;
					float In_MultiMask3_g170848 = temp_output_280_11_g170845;
					float In_AlphaClip3_g170848 = Out_AlphaClip4_g170847;
					float In_AlphaFade3_g170848 = Out_AlphaFade4_g170847;
					float3 In_Translucency3_g170848 = Out_Translucency4_g170847;
					half Visual_Transmission416_g170845 = Out_Transmission4_g170847;
					float lerpResult421_g170845 = lerp( Visual_Transmission416_g170845 , ( Visual_Transmission416_g170845 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float staticSwitch418_g170845 = lerpResult421_g170845;
					#else
					float staticSwitch418_g170845 = Visual_Transmission416_g170845;
					#endif
					half Final_Transmission425_g170845 = staticSwitch418_g170845;
					float In_Transmission3_g170848 = Final_Transmission425_g170845;
					float In_Thickness3_g170848 = Out_Thickness4_g170847;
					float In_Diffusion3_g170848 = Out_Diffusion4_g170847;
					float In_Depth3_g170848 = Out_Depth4_g170847;
					{
					Data3_g170848.Dummy = In_Dummy3_g170848;
					Data3_g170848.Albedo = In_Albedo3_g170848;
					Data3_g170848.AlbedoRaw = In_AlbedoRaw3_g170848;
					Data3_g170848.NormalTS = In_NormalTS3_g170848;
					Data3_g170848.NormalWS = In_NormalWS3_g170848;
					Data3_g170848.Shader = In_Shader3_g170848;
					Data3_g170848.Emissive= In_Emissive3_g170848;
					Data3_g170848.MultiMask = In_MultiMask3_g170848;
					Data3_g170848.Grayscale = In_Grayscale3_g170848;
					Data3_g170848.Luminosity = In_Luminosity3_g170848;
					Data3_g170848.AlphaClip = In_AlphaClip3_g170848;
					Data3_g170848.AlphaFade = In_AlphaFade3_g170848;
					Data3_g170848.Translucency = In_Translucency3_g170848;
					Data3_g170848.Transmission = In_Transmission3_g170848;
					Data3_g170848.Thickness = In_Thickness3_g170848;
					Data3_g170848.Diffusion = In_Diffusion3_g170848;
					Data3_g170848.Depth = In_Depth3_g170848;
					}
					TVEVisualData Data4_g170870 = Data3_g170848;
					float Out_Dummy4_g170870 = 0;
					float3 Out_Albedo4_g170870 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170870 = float2( 0,0 );
					float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
					float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170870 = 0;
					float Out_Grayscale4_g170870 = 0;
					float Out_Luminosity4_g170870 = 0;
					float Out_AlphaClip4_g170870 = 0;
					float Out_AlphaFade4_g170870 = 0;
					float3 Out_Translucency4_g170870 = float3( 0,0,0 );
					float Out_Transmission4_g170870 = 0;
					float Out_Thickness4_g170870 = 0;
					float Out_Diffusion4_g170870 = 0;
					float Out_Depth4_g170870 = 0;
					{
					Out_Dummy4_g170870 = Data4_g170870.Dummy;
					Out_Albedo4_g170870 = Data4_g170870.Albedo;
					Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
					Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
					Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
					Out_Shader4_g170870 = Data4_g170870.Shader;
					Out_Emissive4_g170870= Data4_g170870.Emissive;
					Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
					Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
					Out_Luminosity4_g170870= Data4_g170870.Luminosity;
					Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
					Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
					Out_Translucency4_g170870 = Data4_g170870.Translucency;
					Out_Transmission4_g170870 = Data4_g170870.Transmission;
					Out_Thickness4_g170870 = Data4_g170870.Thickness;
					Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
					Out_Depth4_g170870= Data4_g170870.Depth;
					}
					half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
					float4 vertexToFrag24_g170819 = IN.ase_texcoord12;
					half4 Interp_Data1269 = vertexToFrag24_g170819;
					float clampResult208_g170869 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
					#ifdef TVE_MOTION
					float3 staticSwitch214_g170869 = ( Visual_Albedo127_g170869 + ( ( Visual_Albedo127_g170869 * Visual_Albedo127_g170869 * 200.0 * _motion_highlight_color ) * clampResult208_g170869 ) );
					#else
					float3 staticSwitch214_g170869 = Visual_Albedo127_g170869;
					#endif
					half3 Final_Albedo160_g170869 = staticSwitch214_g170869;
					float3 In_Albedo3_g170871 = Final_Albedo160_g170869;
					float3 In_AlbedoRaw3_g170871 = Out_AlbedoRaw4_g170870;
					float2 In_NormalTS3_g170871 = Out_NormalTS4_g170870;
					float3 In_NormalWS3_g170871 = Out_NormalWS4_g170870;
					float4 In_Shader3_g170871 = Out_Shader4_g170870;
					float4 In_Emissive3_g170871 = Out_Emissive4_g170870;
					float In_Grayscale3_g170871 = Out_Grayscale4_g170870;
					float In_Luminosity3_g170871 = Out_Luminosity4_g170870;
					float In_MultiMask3_g170871 = Out_MultiMask4_g170870;
					float In_AlphaClip3_g170871 = Out_AlphaClip4_g170870;
					float In_AlphaFade3_g170871 = Out_AlphaFade4_g170870;
					float3 In_Translucency3_g170871 = Out_Translucency4_g170870;
					float In_Transmission3_g170871 = Out_Transmission4_g170870;
					float In_Thickness3_g170871 = Out_Thickness4_g170870;
					float In_Diffusion3_g170871 = Out_Diffusion4_g170870;
					float In_Depth3_g170871 = Out_Depth4_g170870;
					{
					Data3_g170871.Dummy = In_Dummy3_g170871;
					Data3_g170871.Albedo = In_Albedo3_g170871;
					Data3_g170871.AlbedoRaw = In_AlbedoRaw3_g170871;
					Data3_g170871.NormalTS = In_NormalTS3_g170871;
					Data3_g170871.NormalWS = In_NormalWS3_g170871;
					Data3_g170871.Shader = In_Shader3_g170871;
					Data3_g170871.Emissive= In_Emissive3_g170871;
					Data3_g170871.MultiMask = In_MultiMask3_g170871;
					Data3_g170871.Grayscale = In_Grayscale3_g170871;
					Data3_g170871.Luminosity = In_Luminosity3_g170871;
					Data3_g170871.AlphaClip = In_AlphaClip3_g170871;
					Data3_g170871.AlphaFade = In_AlphaFade3_g170871;
					Data3_g170871.Translucency = In_Translucency3_g170871;
					Data3_g170871.Transmission = In_Transmission3_g170871;
					Data3_g170871.Thickness = In_Thickness3_g170871;
					Data3_g170871.Diffusion = In_Diffusion3_g170871;
					Data3_g170871.Depth = In_Depth3_g170871;
					}
					TVEVisualData Data4_g170873 = Data3_g170871;
					float Out_Dummy4_g170873 = 0;
					float3 Out_Albedo4_g170873 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170873 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170873 = float2( 0,0 );
					float3 Out_NormalWS4_g170873 = float3( 0,0,0 );
					float4 Out_Shader4_g170873 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170873 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170873 = 0;
					float Out_Grayscale4_g170873 = 0;
					float Out_Luminosity4_g170873 = 0;
					float Out_AlphaClip4_g170873 = 0;
					float Out_AlphaFade4_g170873 = 0;
					float3 Out_Translucency4_g170873 = float3( 0,0,0 );
					float Out_Transmission4_g170873 = 0;
					float Out_Thickness4_g170873 = 0;
					float Out_Diffusion4_g170873 = 0;
					float Out_Depth4_g170873 = 0;
					{
					Out_Dummy4_g170873 = Data4_g170873.Dummy;
					Out_Albedo4_g170873 = Data4_g170873.Albedo;
					Out_AlbedoRaw4_g170873 = Data4_g170873.AlbedoRaw;
					Out_NormalTS4_g170873 = Data4_g170873.NormalTS;
					Out_NormalWS4_g170873 = Data4_g170873.NormalWS;
					Out_Shader4_g170873 = Data4_g170873.Shader;
					Out_Emissive4_g170873= Data4_g170873.Emissive;
					Out_MultiMask4_g170873 = Data4_g170873.MultiMask;
					Out_Grayscale4_g170873 = Data4_g170873.Grayscale;
					Out_Luminosity4_g170873= Data4_g170873.Luminosity;
					Out_AlphaClip4_g170873 = Data4_g170873.AlphaClip;
					Out_AlphaFade4_g170873 = Data4_g170873.AlphaFade;
					Out_Translucency4_g170873 = Data4_g170873.Translucency;
					Out_Transmission4_g170873 = Data4_g170873.Transmission;
					Out_Thickness4_g170873 = Data4_g170873.Thickness;
					Out_Diffusion4_g170873 = Data4_g170873.Diffusion;
					Out_Depth4_g170873= Data4_g170873.Depth;
					}
					half3 Visual_Albedo127_g170872 = Out_Albedo4_g170873;
					float3 temp_output_622_0_g170872 = (_OverlayColor).rgb;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170876) = _OverlayAlbedoTex;
					float localFilterTexture19_g170887 = ( 0.0 );
					SamplerState SS19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170887 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170887 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170887 = SamplerDefault19_g170887;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170887 = SamplerDefault19_g170887;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170887 = SamplerPoint19_g170887;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170887 = SamplerLow19_g170887;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170887 = SamplerMedium19_g170887;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170887 = SamplerHigh19_g170887;
					#endif
					}
					SamplerState Sampler238_g170876 = SS19_g170887;
					float4 temp_output_6_0_g170877 = _overlay_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170877 = ( temp_output_6_0_g170877 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
					#else
					float4 staticSwitch14_g170877 = temp_output_6_0_g170877;
					#endif
					half4 Overlay_Coords639_g170872 = staticSwitch14_g170877;
					float4 temp_output_37_0_g170876 = Overlay_Coords639_g170872;
					half4 Coords238_g170876 = temp_output_37_0_g170876;
					TVEModelData Data15_g170889 = Data16_g170483;
					float Out_Dummy15_g170889 = 0;
					float3 Out_PositionWS15_g170889 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170889 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170889 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170889 = float3( 0,0,0 );
					float4 Out_VertexData15_g170889 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170889 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170889 = Data15_g170889.Dummy;
					Out_PositionWS15_g170889 = Data15_g170889.PositionWS;
					Out_PositionWO15_g170889 = Data15_g170889.PositionWO;
					Out_PivotWS15_g170889 = Data15_g170889.PivotWS;
					Out_PivotWO15_g170889 = Data15_g170889.PivotWO;
					Out_NormalWS15_g170889 = Data15_g170889.NormalWS;
					Out_ViewDirWS15_g170889 = Data15_g170889.ViewDirWS;
					Out_VertexData15_g170889 = Data15_g170889.VertexData;
					Out_BoundsData15_g170889 = Data15_g170889.BoundsData;
					}
					half3 Model_PositionWO602_g170872 = Out_PositionWO15_g170889;
					float3 temp_output_279_0_g170876 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170876 = temp_output_279_0_g170876;
					half4 localSamplePlanar2D238_g170876 = SamplePlanar2D( Texture238_g170876 , Sampler238_g170876 , Coords238_g170876 , WorldPosition238_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler246_g170876 = SS19_g170887;
					half4 Coords246_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition246_g170876 = temp_output_279_0_g170876;
					half3 Model_NormalWS712_g170872 = Out_NormalWS15_g170889;
					float3 temp_output_280_0_g170876 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170876 = temp_output_280_0_g170876;
					half4 localSamplePlanar3D246_g170876 = SamplePlanar3D( Texture246_g170876 , Sampler246_g170876 , Coords246_g170876 , WorldPosition246_g170876 , WorldNormal246_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler234_g170876 = SS19_g170887;
					float4 Coords234_g170876 = temp_output_37_0_g170876;
					float3 WorldPosition234_g170876 = temp_output_279_0_g170876;
					float4 localSampleStochastic2D234_g170876 = SampleStochastic2D( Texture234_g170876 , Sampler234_g170876 , Coords234_g170876 , WorldPosition234_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler263_g170876 = SS19_g170887;
					half4 Coords263_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition263_g170876 = temp_output_279_0_g170876;
					half3 WorldNormal263_g170876 = temp_output_280_0_g170876;
					half4 localSampleStochastic3D263_g170876 = SampleStochastic3D( Texture263_g170876 , Sampler263_g170876 , Coords263_g170876 , WorldPosition263_g170876 , WorldNormal263_g170876 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch676_g170872 = localSamplePlanar3D246_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch676_g170872 = localSampleStochastic2D234_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch676_g170872 = localSampleStochastic3D263_g170876;
					#else
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#endif
					half3 Overlay_Albedo526_g170872 = (staticSwitch676_g170872).xyz;
					#ifdef TVE_OVERLAY_TEX
					float3 staticSwitch578_g170872 = ( temp_output_622_0_g170872 * Overlay_Albedo526_g170872 );
					#else
					float3 staticSwitch578_g170872 = temp_output_622_0_g170872;
					#endif
					float3 temp_output_6_0_g170890 = staticSwitch578_g170872;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + _OverlayTextureMode );
					#else
					float3 staticSwitch14_g170890 = temp_output_6_0_g170890;
					#endif
					float3 temp_cast_35 = (0.0).xxx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170880) = _OverlayGlitterTexRT;
					SamplerState Sampler246_g170880 = sampler_Linear_Repeat;
					float4 appendResult863_g170872 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170880 = appendResult863_g170872;
					half4 Coords246_g170880 = temp_output_37_0_g170880;
					float3 temp_output_279_0_g170880 = Model_PositionWO602_g170872;
					half3 WorldPosition246_g170880 = temp_output_279_0_g170880;
					float3 temp_output_280_0_g170880 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170880 = temp_output_280_0_g170880;
					half4 localSamplePlanar3D246_g170880 = SamplePlanar3D( Texture246_g170880 , Sampler246_g170880 , Coords246_g170880 , WorldPosition246_g170880 , WorldNormal246_g170880 );
					half Overlay_GlitterTex854_g170872 = (localSamplePlanar3D246_g170880).x;
					half3 Model_PositionWS879_g170872 = Out_PositionWS15_g170889;
					#ifdef TVE_OVERLAY_GLITTER
					float3 staticSwitch868_g170872 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170872 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170872 ) / _OverlayGlitterDistValue ) ) ) );
					#else
					float3 staticSwitch868_g170872 = temp_cast_35;
					#endif
					half3 Overlay_GlitterColor865_g170872 = staticSwitch868_g170872;
					half Overlay_TexMask908_g170872 = 1.0;
					float3 temp_output_739_21_g170872 = Out_NormalWS4_g170873;
					half3 Visual_NormalWS749_g170872 = temp_output_739_21_g170872;
					float clampResult17_g170896 = clamp( saturate( (Visual_NormalWS749_g170872).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170900 = _OverlayProjRemap.x;
					float temp_output_9_0_g170900 = ( clampResult17_g170896 - temp_output_7_0_g170900 );
					float lerpResult842_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170900 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
					half Overlay_MaskProj457_g170872 = lerpResult842_g170872;
					float temp_output_739_15_g170872 = Out_Luminosity4_g170873;
					half Visual_Luminosity654_g170872 = temp_output_739_15_g170872;
					float clampResult17_g170904 = clamp( Visual_Luminosity654_g170872 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170905 = _OverlayLumaRemap.x;
					float temp_output_9_0_g170905 = ( clampResult17_g170904 - temp_output_7_0_g170905 );
					float lerpResult587_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170905 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
					half Overlay_MaskLuma438_g170872 = lerpResult587_g170872;
					half4 Model_VertexMasks791_g170872 = Out_VertexData15_g170889;
					float4 break792_g170872 = Model_VertexMasks791_g170872;
					float4 break33_g170891 = _overlay_vert_mode;
					float temp_output_30_0_g170891 = ( break792_g170872.x * break33_g170891.x );
					float temp_output_29_0_g170891 = ( break792_g170872.y * break33_g170891.y );
					float temp_output_31_0_g170891 = ( break792_g170872.z * break33_g170891.z );
					float temp_output_28_0_g170891 = ( temp_output_30_0_g170891 + temp_output_29_0_g170891 + temp_output_31_0_g170891 + ( break792_g170872.w * break33_g170891.w ) );
					float clampResult17_g170892 = clamp( temp_output_28_0_g170891 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170901 = _OverlayMeshRemap.x;
					float temp_output_9_0_g170901 = ( clampResult17_g170892 - temp_output_7_0_g170901 );
					float lerpResult881_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170901 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
					float temp_output_6_0_g170897 = lerpResult881_g170872;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170897 = ( temp_output_6_0_g170897 + _OverlayMeshMode );
					#else
					float staticSwitch14_g170897 = temp_output_6_0_g170897;
					#endif
					half Overlay_VertMask801_g170872 = staticSwitch14_g170897;
					half Overlay_MaskNoise427_g170872 = 1.0;
					TVEGlobalData Data15_g170874 = Data204_g170496;
					float Out_Dummy15_g170874 = 0;
					float4 Out_CoatDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170874 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170874 = Data15_g170874.Dummy;
					Out_CoatDataRT15_g170874 = Data15_g170874.CoatDataRT;
					Out_PaintDataRT15_g170874 = Data15_g170874.PaintDataRT;
					Out_GlowDataRT15_g170874= Data15_g170874.GlowDataRT;
					Out_AtmoDataRT15_g170874= Data15_g170874.AtmoDataRT;
					Out_FadeDataRT15_g170874= Data15_g170874.FadeDataRT;
					Out_FormDataRT15_g170874 = Data15_g170874.FormDataRT;
					Out_FlowDataRT15_g170874 = Data15_g170874.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170872 = Out_AtmoDataRT15_g170874;
					float temp_output_6_0_g170906 = (Global_AtmoParams516_g170872).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170906 = ( temp_output_6_0_g170906 + _OverlayElementMode );
					#else
					float staticSwitch14_g170906 = temp_output_6_0_g170906;
					#endif
					#ifdef TVE_OVERLAY_ELEMENT
					float staticSwitch705_g170872 = staticSwitch14_g170906;
					#else
					float staticSwitch705_g170872 = TVE_AtmoParams.z;
					#endif
					float lerpResult937_g170872 = lerp( 1.0 , ( staticSwitch705_g170872 * TVE_IsEnabled ) , _OverlayGlobalValue);
					half Overlay_MaskGlobal429_g170872 = lerpResult937_g170872;
					half Custom_Mask646_g170872 = 1.0;
					float temp_output_7_0_g170903 = _OverlayBlendRemap.x;
					float temp_output_9_0_g170903 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170872 * Overlay_MaskProj457_g170872 * Overlay_MaskLuma438_g170872 * Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 * Custom_Mask646_g170872 ) - temp_output_7_0_g170903 );
					half Overlay_Mask494_g170872 = saturate( ( ( temp_output_9_0_g170903 / ( _OverlayBlendRemap.y - temp_output_7_0_g170903 ) ) + 0.0001 ) );
					float3 lerpResult467_g170872 = lerp( Visual_Albedo127_g170872 , ( staticSwitch14_g170890 + Overlay_GlitterColor865_g170872 ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float3 staticSwitch577_g170872 = lerpResult467_g170872;
					#else
					float3 staticSwitch577_g170872 = Visual_Albedo127_g170872;
					#endif
					half3 Final_Albedo493_g170872 = staticSwitch577_g170872;
					float3 In_Albedo3_g170875 = Final_Albedo493_g170872;
					float3 In_AlbedoRaw3_g170875 = Out_AlbedoRaw4_g170873;
					half2 Visual_NormalTS535_g170872 = Out_NormalTS4_g170873;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170878) = _OverlayNormalTex;
					float localFilterTexture29_g170888 = ( 0.0 );
					SamplerState SS29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170888 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170888 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170888 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170888 = SamplerDefault29_g170888;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170888 = SamplerDefault29_g170888;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170888 = SamplerPoint29_g170888;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170888 = SamplerLow29_g170888;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170888 = SamplerMedium29_g170888;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170888 = SamplerHigh29_g170888;
					#endif
					}
					SamplerState Sampler238_g170878 = SS29_g170888;
					float4 temp_output_37_0_g170878 = Overlay_Coords639_g170872;
					half4 Coords238_g170878 = temp_output_37_0_g170878;
					float3 temp_output_279_0_g170878 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170878 = temp_output_279_0_g170878;
					half4 localSamplePlanar2D238_g170878 = SamplePlanar2D( Texture238_g170878 , Sampler238_g170878 , Coords238_g170878 , WorldPosition238_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170878) = _OverlayNormalTex;
					SamplerState Sampler246_g170878 = SS29_g170888;
					half4 Coords246_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition246_g170878 = temp_output_279_0_g170878;
					float3 temp_output_280_0_g170878 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170878 = temp_output_280_0_g170878;
					half4 localSamplePlanar3D246_g170878 = SamplePlanar3D( Texture246_g170878 , Sampler246_g170878 , Coords246_g170878 , WorldPosition246_g170878 , WorldNormal246_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170878) = _OverlayNormalTex;
					SamplerState Sampler234_g170878 = SS29_g170888;
					float4 Coords234_g170878 = temp_output_37_0_g170878;
					float3 WorldPosition234_g170878 = temp_output_279_0_g170878;
					float4 localSampleStochastic2D234_g170878 = SampleStochastic2D( Texture234_g170878 , Sampler234_g170878 , Coords234_g170878 , WorldPosition234_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170878) = _OverlayNormalTex;
					SamplerState Sampler263_g170878 = SS29_g170888;
					half4 Coords263_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition263_g170878 = temp_output_279_0_g170878;
					half3 WorldNormal263_g170878 = temp_output_280_0_g170878;
					half4 localSampleStochastic3D263_g170878 = SampleStochastic3D( Texture263_g170878 , Sampler263_g170878 , Coords263_g170878 , WorldPosition263_g170878 , WorldNormal263_g170878 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch686_g170872 = localSamplePlanar3D246_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch686_g170872 = localSampleStochastic2D234_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch686_g170872 = localSampleStochastic3D263_g170878;
					#else
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#endif
					half4 Normal_Packed45_g170881 = staticSwitch686_g170872;
					float2 appendResult58_g170881 = (float2(( (Normal_Packed45_g170881).x * (Normal_Packed45_g170881).w ) , (Normal_Packed45_g170881).y));
					half2 Normal_Default50_g170881 = appendResult58_g170881;
					half2 Normal_ASTC41_g170881 = (Normal_Packed45_g170881).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170881 = Normal_ASTC41_g170881;
					#else
					float2 staticSwitch38_g170881 = Normal_Default50_g170881;
					#endif
					half2 Normal_NO_DTX544_g170881 = (Normal_Packed45_g170881).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170881 = Normal_NO_DTX544_g170881;
					#else
					float2 staticSwitch37_g170881 = staticSwitch38_g170881;
					#endif
					float2 temp_output_623_0_g170872 = (staticSwitch37_g170881*2.0 + -1.0);
					half2 Overlay_Normal528_g170872 = temp_output_623_0_g170872;
					#ifdef TVE_OVERLAY_TEX
					float2 staticSwitch579_g170872 = Overlay_Normal528_g170872;
					#else
					float2 staticSwitch579_g170872 = Visual_NormalTS535_g170872;
					#endif
					float2 lerpResult551_g170872 = lerp( Visual_NormalTS535_g170872 , ( staticSwitch579_g170872 * _OverlayNormalValue ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float2 staticSwitch583_g170872 = lerpResult551_g170872;
					#else
					float2 staticSwitch583_g170872 = Visual_NormalTS535_g170872;
					#endif
					half2 Final_NormalTS499_g170872 = staticSwitch583_g170872;
					float2 In_NormalTS3_g170875 = Final_NormalTS499_g170872;
					float3 In_NormalWS3_g170875 = temp_output_739_21_g170872;
					half4 Visual_Masks536_g170872 = Out_Shader4_g170873;
					float4 appendResult585_g170872 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
					float4 lerpResult584_g170872 = lerp( Visual_Masks536_g170872 , appendResult585_g170872 , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float4 staticSwitch586_g170872 = lerpResult584_g170872;
					#else
					float4 staticSwitch586_g170872 = Visual_Masks536_g170872;
					#endif
					half4 Final_Masks482_g170872 = staticSwitch586_g170872;
					float4 In_Shader3_g170875 = Final_Masks482_g170872;
					float4 In_Emissive3_g170875 = Out_Emissive4_g170873;
					float temp_output_739_12_g170872 = Out_Grayscale4_g170873;
					float In_Grayscale3_g170875 = temp_output_739_12_g170872;
					float In_Luminosity3_g170875 = temp_output_739_15_g170872;
					float In_MultiMask3_g170875 = Out_MultiMask4_g170873;
					float In_AlphaClip3_g170875 = Out_AlphaClip4_g170873;
					float In_AlphaFade3_g170875 = Out_AlphaFade4_g170873;
					float3 In_Translucency3_g170875 = Out_Translucency4_g170873;
					half Visual_Transmission699_g170872 = Out_Transmission4_g170873;
					float lerpResult746_g170872 = lerp( Visual_Transmission699_g170872 , ( Visual_Transmission699_g170872 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 ));
					#ifdef TVE_OVERLAY
					float staticSwitch703_g170872 = lerpResult746_g170872;
					#else
					float staticSwitch703_g170872 = Visual_Transmission699_g170872;
					#endif
					half Final_Transmission702_g170872 = staticSwitch703_g170872;
					float In_Transmission3_g170875 = Final_Transmission702_g170872;
					float In_Thickness3_g170875 = Out_Thickness4_g170873;
					float In_Diffusion3_g170875 = Out_Diffusion4_g170873;
					float In_Depth3_g170875 = Out_Depth4_g170873;
					{
					Data3_g170875.Dummy = In_Dummy3_g170875;
					Data3_g170875.Albedo = In_Albedo3_g170875;
					Data3_g170875.AlbedoRaw = In_AlbedoRaw3_g170875;
					Data3_g170875.NormalTS = In_NormalTS3_g170875;
					Data3_g170875.NormalWS = In_NormalWS3_g170875;
					Data3_g170875.Shader = In_Shader3_g170875;
					Data3_g170875.Emissive= In_Emissive3_g170875;
					Data3_g170875.MultiMask = In_MultiMask3_g170875;
					Data3_g170875.Grayscale = In_Grayscale3_g170875;
					Data3_g170875.Luminosity = In_Luminosity3_g170875;
					Data3_g170875.AlphaClip = In_AlphaClip3_g170875;
					Data3_g170875.AlphaFade = In_AlphaFade3_g170875;
					Data3_g170875.Translucency = In_Translucency3_g170875;
					Data3_g170875.Transmission = In_Transmission3_g170875;
					Data3_g170875.Thickness = In_Thickness3_g170875;
					Data3_g170875.Diffusion = In_Diffusion3_g170875;
					Data3_g170875.Depth = In_Depth3_g170875;
					}
					TVEVisualData Data4_g170910 = Data3_g170875;
					float Out_Dummy4_g170910 = 0;
					float3 Out_Albedo4_g170910 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170910 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170910 = float2( 0,0 );
					float3 Out_NormalWS4_g170910 = float3( 0,0,0 );
					float4 Out_Shader4_g170910 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170910 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170910 = 0;
					float Out_Grayscale4_g170910 = 0;
					float Out_Luminosity4_g170910 = 0;
					float Out_AlphaClip4_g170910 = 0;
					float Out_AlphaFade4_g170910 = 0;
					float3 Out_Translucency4_g170910 = float3( 0,0,0 );
					float Out_Transmission4_g170910 = 0;
					float Out_Thickness4_g170910 = 0;
					float Out_Diffusion4_g170910 = 0;
					float Out_Depth4_g170910 = 0;
					{
					Out_Dummy4_g170910 = Data4_g170910.Dummy;
					Out_Albedo4_g170910 = Data4_g170910.Albedo;
					Out_AlbedoRaw4_g170910 = Data4_g170910.AlbedoRaw;
					Out_NormalTS4_g170910 = Data4_g170910.NormalTS;
					Out_NormalWS4_g170910 = Data4_g170910.NormalWS;
					Out_Shader4_g170910 = Data4_g170910.Shader;
					Out_Emissive4_g170910= Data4_g170910.Emissive;
					Out_MultiMask4_g170910 = Data4_g170910.MultiMask;
					Out_Grayscale4_g170910 = Data4_g170910.Grayscale;
					Out_Luminosity4_g170910= Data4_g170910.Luminosity;
					Out_AlphaClip4_g170910 = Data4_g170910.AlphaClip;
					Out_AlphaFade4_g170910 = Data4_g170910.AlphaFade;
					Out_Translucency4_g170910 = Data4_g170910.Translucency;
					Out_Transmission4_g170910 = Data4_g170910.Transmission;
					Out_Thickness4_g170910 = Data4_g170910.Thickness;
					Out_Diffusion4_g170910 = Data4_g170910.Diffusion;
					Out_Depth4_g170910= Data4_g170910.Depth;
					}
					half3 Visual_Albedo127_g170909 = Out_Albedo4_g170910;
					TVEGlobalData Data15_g170915 = Data204_g170496;
					float Out_Dummy15_g170915 = 0;
					float4 Out_CoatDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170915 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170915 = Data15_g170915.Dummy;
					Out_CoatDataRT15_g170915 = Data15_g170915.CoatDataRT;
					Out_PaintDataRT15_g170915 = Data15_g170915.PaintDataRT;
					Out_GlowDataRT15_g170915= Data15_g170915.GlowDataRT;
					Out_AtmoDataRT15_g170915= Data15_g170915.AtmoDataRT;
					Out_FadeDataRT15_g170915= Data15_g170915.FadeDataRT;
					Out_FormDataRT15_g170915 = Data15_g170915.FormDataRT;
					Out_FlowDataRT15_g170915 = Data15_g170915.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170909 = Out_AtmoDataRT15_g170915;
					float4 temp_output_6_0_g170936 = Global_AtmoParams516_g170909;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170936 = ( temp_output_6_0_g170936 + _WetnessElementMode );
					#else
					float4 staticSwitch14_g170936 = temp_output_6_0_g170936;
					#endif
					#ifdef TVE_WETNESS_ELEMENT
					float4 staticSwitch663_g170909 = staticSwitch14_g170936;
					#else
					float4 staticSwitch663_g170909 = TVE_AtmoParams;
					#endif
					float2 lerpResult1121_g170909 = lerp( float2( 1,1 ) , (( staticSwitch663_g170909 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
					float2 break1123_g170909 = lerpResult1121_g170909;
					half Global_Wetness429_g170909 = break1123_g170909.x;
					half Wetness_Value1042_g170909 = ( _WetnessIntensityValue * Global_Wetness429_g170909 );
					TVEModelData Data15_g170921 = Data16_g170483;
					float Out_Dummy15_g170921 = 0;
					float3 Out_PositionWS15_g170921 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170921 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170921 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170921 = float3( 0,0,0 );
					float4 Out_VertexData15_g170921 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170921 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170921 = Data15_g170921.Dummy;
					Out_PositionWS15_g170921 = Data15_g170921.PositionWS;
					Out_PositionWO15_g170921 = Data15_g170921.PositionWO;
					Out_PivotWS15_g170921 = Data15_g170921.PivotWS;
					Out_PivotWO15_g170921 = Data15_g170921.PivotWO;
					Out_NormalWS15_g170921 = Data15_g170921.NormalWS;
					Out_ViewDirWS15_g170921 = Data15_g170921.ViewDirWS;
					Out_VertexData15_g170921 = Data15_g170921.VertexData;
					Out_BoundsData15_g170921 = Data15_g170921.BoundsData;
					}
					half4 Model_VertexData1030_g170909 = Out_VertexData15_g170921;
					float4 break1019_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170924 = _wetness_vert_mode;
					float temp_output_30_0_g170924 = ( break1019_g170909.x * break33_g170924.x );
					float temp_output_29_0_g170924 = ( break1019_g170909.y * break33_g170924.y );
					float temp_output_31_0_g170924 = ( break1019_g170909.z * break33_g170924.z );
					float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1019_g170909.w * break33_g170924.w ) );
					float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170932 = _WetnessMeshRemap.x;
					float temp_output_9_0_g170932 = ( clampResult17_g170923 - temp_output_7_0_g170932 );
					float lerpResult1026_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170932 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
					float temp_output_6_0_g170925 = lerpResult1026_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + _WetnessMeshMode );
					#else
					float staticSwitch14_g170925 = temp_output_6_0_g170925;
					#endif
					float temp_output_1025_0_g170909 = staticSwitch14_g170925;
					half Wetness_VertMask1024_g170909 = temp_output_1025_0_g170909;
					float temp_output_1043_0_g170909 = ( Wetness_Value1042_g170909 * Wetness_VertMask1024_g170909 );
					half Wetness_Mask866_g170909 = temp_output_1043_0_g170909;
					float4 break1083_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170927 = _wetness_water_vert_mode;
					float temp_output_30_0_g170927 = ( break1083_g170909.x * break33_g170927.x );
					float temp_output_29_0_g170927 = ( break1083_g170909.y * break33_g170927.y );
					float temp_output_31_0_g170927 = ( break1083_g170909.z * break33_g170927.z );
					float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1083_g170909.w * break33_g170927.w ) );
					float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170933 = _WetnessWaterMeshRemap.x;
					float temp_output_9_0_g170933 = ( clampResult17_g170926 - temp_output_7_0_g170933 );
					float lerpResult1089_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170933 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
					float temp_output_6_0_g170928 = lerpResult1089_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + _WetnessWaterMeshMode );
					#else
					float staticSwitch14_g170928 = temp_output_6_0_g170928;
					#endif
					float temp_output_1091_0_g170909 = staticSwitch14_g170928;
					half Water_VertMask1094_g170909 = temp_output_1091_0_g170909;
					half4 Visual_Masks536_g170909 = Out_Shader4_g170910;
					float lerpResult1013_g170909 = lerp( 1.0 , (Visual_Masks536_g170909).z , _WetnessWaterBaseValue);
					half Water_HeightMask782_g170909 = lerpResult1013_g170909;
					float clampResult17_g170922 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170909 * Water_VertMask1094_g170909 ) - Water_HeightMask782_g170909 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170935 = _WetnessWaterBlendRemap.x;
					float temp_output_9_0_g170935 = ( clampResult17_g170922 - temp_output_7_0_g170935 );
					half3 Model_NormalWS798_g170909 = Out_NormalWS15_g170921;
					float temp_output_786_0_g170909 = saturate( (Model_NormalWS798_g170909).y );
					half Wetness_ProjMask790_g170909 = temp_output_786_0_g170909;
					half Water_Mask760_g170909 = ( saturate( ( ( temp_output_9_0_g170935 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170909 );
					float3 lerpResult918_g170909 = lerp( Visual_Albedo127_g170909 , ( Visual_Albedo127_g170909 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float3 staticSwitch946_g170909 = lerpResult918_g170909;
					#else
					float3 staticSwitch946_g170909 = Visual_Albedo127_g170909;
					#endif
					float3 lerpResult768_g170909 = lerp( staticSwitch946_g170909 , ( staticSwitch946_g170909 * staticSwitch946_g170909 ) , _WetnessContrastValue);
					float3 lerpResult651_g170909 = lerp( Visual_Albedo127_g170909 , lerpResult768_g170909 , Wetness_Mask866_g170909);
					#ifdef TVE_WETNESS
					float3 staticSwitch577_g170909 = lerpResult651_g170909;
					#else
					float3 staticSwitch577_g170909 = Visual_Albedo127_g170909;
					#endif
					half3 Final_Albedo493_g170909 = staticSwitch577_g170909;
					float3 In_Albedo3_g170911 = Final_Albedo493_g170909;
					float3 In_AlbedoRaw3_g170911 = Out_AlbedoRaw4_g170910;
					half2 Visual_Normal535_g170909 = Out_NormalTS4_g170910;
					float lerpResult877_g170909 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch957_g170909 = ( Visual_Normal535_g170909 * lerpResult877_g170909 );
					#else
					float2 staticSwitch957_g170909 = Visual_Normal535_g170909;
					#endif
					float2 temp_cast_36 = (0.0).xx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170919) = _WetnessDropsTexRT;
					SamplerState Sampler238_g170919 = sampler_Linear_Repeat_Aniso8;
					float4 appendResult924_g170909 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170919 = appendResult924_g170909;
					half4 Coords238_g170919 = temp_output_37_0_g170919;
					half3 Model_PositionWO602_g170909 = Out_PositionWO15_g170921;
					float3 temp_output_279_0_g170919 = Model_PositionWO602_g170909;
					half3 WorldPosition238_g170919 = temp_output_279_0_g170919;
					half4 localSamplePlanar2D238_g170919 = SamplePlanar2D( Texture238_g170919 , Sampler238_g170919 , Coords238_g170919 , WorldPosition238_g170919 );
					float4 temp_output_1010_0_g170909 = localSamplePlanar2D238_g170919;
					half2 Rain_DropsNormal919_g170909 = (temp_output_1010_0_g170909).zw;
					float2 temp_output_903_0_g170909 = (Rain_DropsNormal919_g170909*2.0 + -1.0);
					half2 Rain_RingsNormal713_g170909 = (temp_output_1010_0_g170909).xy;
					float2 lerpResult904_g170909 = lerp( temp_output_903_0_g170909 , (Rain_RingsNormal713_g170909*2.0 + -1.0) , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch960_g170909 = lerpResult904_g170909;
					#else
					float2 staticSwitch960_g170909 = temp_output_903_0_g170909;
					#endif
					half2 Rain_Drops1002_g170909 = ( staticSwitch960_g170909 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
					half3 Model_PositionWS823_g170909 = Out_PositionWS15_g170921;
					half Global_Rain955_g170909 = break1123_g170909.y;
					half Rain_Value1067_g170909 = Global_Rain955_g170909;
					float4 break1097_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170930 = _wetness_drops_vert_mode;
					float temp_output_30_0_g170930 = ( break1097_g170909.x * break33_g170930.x );
					float temp_output_29_0_g170930 = ( break1097_g170909.y * break33_g170930.y );
					float temp_output_31_0_g170930 = ( break1097_g170909.z * break33_g170930.z );
					float temp_output_28_0_g170930 = ( temp_output_30_0_g170930 + temp_output_29_0_g170930 + temp_output_31_0_g170930 + ( break1097_g170909.w * break33_g170930.w ) );
					float clampResult17_g170929 = clamp( temp_output_28_0_g170930 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170934 = _WetnessDropsMeshRemap.x;
					float temp_output_9_0_g170934 = ( clampResult17_g170929 - temp_output_7_0_g170934 );
					float lerpResult1100_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170934 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
					float temp_output_6_0_g170931 = lerpResult1100_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170931 = ( temp_output_6_0_g170931 + _WetnessDropsMeshMode );
					#else
					float staticSwitch14_g170931 = temp_output_6_0_g170931;
					#endif
					float temp_output_1101_0_g170909 = staticSwitch14_g170931;
					half Rain_VertMask1108_g170909 = temp_output_1101_0_g170909;
					half Rain_Mask999_g170909 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170909 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170909 * Rain_VertMask1108_g170909 );
					half2 Normal_Planar45_g170918 = ( Rain_Drops1002_g170909 * Rain_Mask999_g170909 * Wetness_ProjMask790_g170909 );
					float2 break71_g170918 = Normal_Planar45_g170918;
					float3 appendResult72_g170918 = (float3(break71_g170918.x , 0.0 , break71_g170918.y));
					half2 Wetness_Normal526_g170909 = (mul( ase_worldToTangent, appendResult72_g170918 )).xy;
					#ifdef TVE_WETNESS_DROPS
					float2 staticSwitch583_g170909 = Wetness_Normal526_g170909;
					#else
					float2 staticSwitch583_g170909 = temp_cast_36;
					#endif
					#ifdef TVE_WETNESS
					float2 staticSwitch774_g170909 = ( staticSwitch957_g170909 + staticSwitch583_g170909 );
					#else
					float2 staticSwitch774_g170909 = Visual_Normal535_g170909;
					#endif
					half2 Final_Normal499_g170909 = staticSwitch774_g170909;
					float2 In_NormalTS3_g170911 = Final_Normal499_g170909;
					float3 In_NormalWS3_g170911 = Out_NormalWS4_g170910;
					float4 break658_g170909 = Visual_Masks536_g170909;
					float temp_output_935_0_g170909 = ( Wetness_Mask866_g170909 * _WetnessSmoothnessValue );
					float lerpResult941_g170909 = lerp( temp_output_935_0_g170909 , 2.0 , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float staticSwitch959_g170909 = lerpResult941_g170909;
					#else
					float staticSwitch959_g170909 = temp_output_935_0_g170909;
					#endif
					float4 appendResult661_g170909 = (float4(break658_g170909.x , break658_g170909.y , break658_g170909.z , saturate( ( break658_g170909.w + staticSwitch959_g170909 ) )));
					#ifdef TVE_WETNESS
					float4 staticSwitch586_g170909 = appendResult661_g170909;
					#else
					float4 staticSwitch586_g170909 = Visual_Masks536_g170909;
					#endif
					half4 Final_Masks482_g170909 = staticSwitch586_g170909;
					float4 In_Shader3_g170911 = Final_Masks482_g170909;
					float4 In_Emissive3_g170911 = Out_Emissive4_g170910;
					float In_Grayscale3_g170911 = Out_Grayscale4_g170910;
					float In_Luminosity3_g170911 = Out_Luminosity4_g170910;
					float In_MultiMask3_g170911 = Out_MultiMask4_g170910;
					float In_AlphaClip3_g170911 = Out_AlphaClip4_g170910;
					float In_AlphaFade3_g170911 = Out_AlphaFade4_g170910;
					float3 In_Translucency3_g170911 = Out_Translucency4_g170910;
					float In_Transmission3_g170911 = Out_Transmission4_g170910;
					float In_Thickness3_g170911 = Out_Thickness4_g170910;
					float In_Diffusion3_g170911 = Out_Diffusion4_g170910;
					float In_Depth3_g170911 = Out_Depth4_g170910;
					{
					Data3_g170911.Dummy = In_Dummy3_g170911;
					Data3_g170911.Albedo = In_Albedo3_g170911;
					Data3_g170911.AlbedoRaw = In_AlbedoRaw3_g170911;
					Data3_g170911.NormalTS = In_NormalTS3_g170911;
					Data3_g170911.NormalWS = In_NormalWS3_g170911;
					Data3_g170911.Shader = In_Shader3_g170911;
					Data3_g170911.Emissive= In_Emissive3_g170911;
					Data3_g170911.MultiMask = In_MultiMask3_g170911;
					Data3_g170911.Grayscale = In_Grayscale3_g170911;
					Data3_g170911.Luminosity = In_Luminosity3_g170911;
					Data3_g170911.AlphaClip = In_AlphaClip3_g170911;
					Data3_g170911.AlphaFade = In_AlphaFade3_g170911;
					Data3_g170911.Translucency = In_Translucency3_g170911;
					Data3_g170911.Transmission = In_Transmission3_g170911;
					Data3_g170911.Thickness = In_Thickness3_g170911;
					Data3_g170911.Diffusion = In_Diffusion3_g170911;
					Data3_g170911.Depth = In_Depth3_g170911;
					}
					TVEVisualData Data4_g170941 = Data3_g170911;
					float Out_Dummy4_g170941 = 0;
					float3 Out_Albedo4_g170941 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170941 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170941 = float2( 0,0 );
					float3 Out_NormalWS4_g170941 = float3( 0,0,0 );
					float4 Out_Shader4_g170941 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170941 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170941 = 0;
					float Out_Grayscale4_g170941 = 0;
					float Out_Luminosity4_g170941 = 0;
					float Out_AlphaClip4_g170941 = 0;
					float Out_AlphaFade4_g170941 = 0;
					float3 Out_Translucency4_g170941 = float3( 0,0,0 );
					float Out_Transmission4_g170941 = 0;
					float Out_Thickness4_g170941 = 0;
					float Out_Diffusion4_g170941 = 0;
					float Out_Depth4_g170941 = 0;
					{
					Out_Dummy4_g170941 = Data4_g170941.Dummy;
					Out_Albedo4_g170941 = Data4_g170941.Albedo;
					Out_AlbedoRaw4_g170941 = Data4_g170941.AlbedoRaw;
					Out_NormalTS4_g170941 = Data4_g170941.NormalTS;
					Out_NormalWS4_g170941 = Data4_g170941.NormalWS;
					Out_Shader4_g170941 = Data4_g170941.Shader;
					Out_Emissive4_g170941= Data4_g170941.Emissive;
					Out_MultiMask4_g170941 = Data4_g170941.MultiMask;
					Out_Grayscale4_g170941 = Data4_g170941.Grayscale;
					Out_Luminosity4_g170941= Data4_g170941.Luminosity;
					Out_AlphaClip4_g170941 = Data4_g170941.AlphaClip;
					Out_AlphaFade4_g170941 = Data4_g170941.AlphaFade;
					Out_Translucency4_g170941 = Data4_g170941.Translucency;
					Out_Transmission4_g170941 = Data4_g170941.Transmission;
					Out_Thickness4_g170941 = Data4_g170941.Thickness;
					Out_Diffusion4_g170941 = Data4_g170941.Diffusion;
					Out_Depth4_g170941= Data4_g170941.Depth;
					}
					float3 In_Albedo3_g170939 = Out_Albedo4_g170941;
					float3 In_AlbedoRaw3_g170939 = Out_AlbedoRaw4_g170941;
					float2 In_NormalTS3_g170939 = Out_NormalTS4_g170941;
					float3 In_NormalWS3_g170939 = Out_NormalWS4_g170941;
					float4 In_Shader3_g170939 = Out_Shader4_g170941;
					float4 In_Emissive3_g170939 = Out_Emissive4_g170941;
					float In_Grayscale3_g170939 = Out_Grayscale4_g170941;
					float In_Luminosity3_g170939 = Out_Luminosity4_g170941;
					float temp_output_836_11_g170938 = Out_MultiMask4_g170941;
					float In_MultiMask3_g170939 = temp_output_836_11_g170938;
					half Visual_AlphaClip667_g170938 = Out_AlphaClip4_g170941;
					TVEGlobalData Data15_g170940 = Data204_g170496;
					float Out_Dummy15_g170940 = 0;
					float4 Out_CoatDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170940 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170940 = Data15_g170940.Dummy;
					Out_CoatDataRT15_g170940 = Data15_g170940.CoatDataRT;
					Out_PaintDataRT15_g170940 = Data15_g170940.PaintDataRT;
					Out_GlowDataRT15_g170940= Data15_g170940.GlowDataRT;
					Out_AtmoDataRT15_g170940= Data15_g170940.AtmoDataRT;
					Out_FadeDataRT15_g170940= Data15_g170940.FadeDataRT;
					Out_FormDataRT15_g170940 = Data15_g170940.FormDataRT;
					Out_FlowDataRT15_g170940 = Data15_g170940.FlowDataRT;
					}
					half4 Global_FadeParams516_g170938 = Out_FadeDataRT15_g170940;
					float temp_output_6_0_g170947 = saturate( (Global_FadeParams516_g170938).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170947 = ( temp_output_6_0_g170947 + _CutoutElementMode );
					#else
					float staticSwitch14_g170947 = temp_output_6_0_g170947;
					#endif
					#ifdef TVE_CUTOUT_ELEMENT
					float staticSwitch663_g170938 = staticSwitch14_g170947;
					#else
					float staticSwitch663_g170938 = TVE_FadeParams.w;
					#endif
					float lerpResult843_g170938 = lerp( 1.0 , ( staticSwitch663_g170938 * TVE_IsEnabled ) , _CutoutGlobalValue);
					half Local_GlobalMask429_g170938 = lerpResult843_g170938;
					float lerpResult811_g170938 = lerp( 1.0 , Visual_AlphaClip667_g170938 , _CutoutAlphaValue);
					half Local_AlphaMask814_g170938 = lerpResult811_g170938;
					TVEModelData Data15_g170942 = Data16_g170483;
					float Out_Dummy15_g170942 = 0;
					float3 Out_PositionWS15_g170942 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170942 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170942 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170942 = float3( 0,0,0 );
					float4 Out_VertexData15_g170942 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170942 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170942 = Data15_g170942.Dummy;
					Out_PositionWS15_g170942 = Data15_g170942.PositionWS;
					Out_PositionWO15_g170942 = Data15_g170942.PositionWO;
					Out_PivotWS15_g170942 = Data15_g170942.PivotWS;
					Out_PivotWO15_g170942 = Data15_g170942.PivotWO;
					Out_NormalWS15_g170942 = Data15_g170942.NormalWS;
					Out_ViewDirWS15_g170942 = Data15_g170942.ViewDirWS;
					Out_VertexData15_g170942 = Data15_g170942.VertexData;
					Out_BoundsData15_g170942 = Data15_g170942.BoundsData;
					}
					half3 Model_PositionWO602_g170938 = Out_PositionWO15_g170942;
					float lerpResult673_g170938 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170938 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
					half Local_NoiseMask678_g170938 = lerpResult673_g170938;
					half4 Model_VertexMasks752_g170938 = Out_VertexData15_g170942;
					float4 break755_g170938 = Model_VertexMasks752_g170938;
					float4 break33_g170943 = _cutout_vert_mode;
					float temp_output_30_0_g170943 = ( break755_g170938.x * break33_g170943.x );
					float temp_output_29_0_g170943 = ( break755_g170938.y * break33_g170943.y );
					float temp_output_31_0_g170943 = ( break755_g170938.z * break33_g170943.z );
					float temp_output_28_0_g170943 = ( temp_output_30_0_g170943 + temp_output_29_0_g170943 + temp_output_31_0_g170943 + ( break755_g170938.w * break33_g170943.w ) );
					float clampResult17_g170944 = clamp( temp_output_28_0_g170943 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170946 = _CutoutMeshRemap.x;
					float temp_output_9_0_g170946 = ( clampResult17_g170944 - temp_output_7_0_g170946 );
					float lerpResult820_g170938 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170946 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
					float temp_output_6_0_g170945 = lerpResult820_g170938;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170945 = ( temp_output_6_0_g170945 + _CutoutMeshMode );
					#else
					float staticSwitch14_g170945 = temp_output_6_0_g170945;
					#endif
					float temp_output_801_0_g170938 = staticSwitch14_g170945;
					half Local_VertMask766_g170938 = temp_output_801_0_g170938;
					half Visual_MultiMask671_g170938 = temp_output_836_11_g170938;
					float lerpResult683_g170938 = lerp( 1.0 , Visual_MultiMask671_g170938 , _CutoutMultiValue);
					half Local_MultiMask685_g170938 = lerpResult683_g170938;
					float lerpResult728_g170938 = lerp( Visual_AlphaClip667_g170938 , min( Visual_AlphaClip667_g170938 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170938 ) - ( Local_AlphaMask814_g170938 * Local_NoiseMask678_g170938 * Local_VertMask766_g170938 ) ) ) ) , Local_MultiMask685_g170938);
					half Local_AlphaClip784_g170938 = lerpResult728_g170938;
					#ifdef TVE_CUTOUT
					float staticSwitch577_g170938 = Local_AlphaClip784_g170938;
					#else
					float staticSwitch577_g170938 = Visual_AlphaClip667_g170938;
					#endif
					half Final_AlphaClip795_g170938 = staticSwitch577_g170938;
					float In_AlphaClip3_g170939 = Final_AlphaClip795_g170938;
					float In_AlphaFade3_g170939 = Out_AlphaFade4_g170941;
					float3 In_Translucency3_g170939 = Out_Translucency4_g170941;
					float In_Transmission3_g170939 = Out_Transmission4_g170941;
					float In_Thickness3_g170939 = Out_Thickness4_g170941;
					float In_Diffusion3_g170939 = Out_Diffusion4_g170941;
					float In_Depth3_g170939 = Out_Depth4_g170941;
					{
					Data3_g170939.Dummy = In_Dummy3_g170939;
					Data3_g170939.Albedo = In_Albedo3_g170939;
					Data3_g170939.AlbedoRaw = In_AlbedoRaw3_g170939;
					Data3_g170939.NormalTS = In_NormalTS3_g170939;
					Data3_g170939.NormalWS = In_NormalWS3_g170939;
					Data3_g170939.Shader = In_Shader3_g170939;
					Data3_g170939.Emissive= In_Emissive3_g170939;
					Data3_g170939.MultiMask = In_MultiMask3_g170939;
					Data3_g170939.Grayscale = In_Grayscale3_g170939;
					Data3_g170939.Luminosity = In_Luminosity3_g170939;
					Data3_g170939.AlphaClip = In_AlphaClip3_g170939;
					Data3_g170939.AlphaFade = In_AlphaFade3_g170939;
					Data3_g170939.Translucency = In_Translucency3_g170939;
					Data3_g170939.Transmission = In_Transmission3_g170939;
					Data3_g170939.Thickness = In_Thickness3_g170939;
					Data3_g170939.Diffusion = In_Diffusion3_g170939;
					Data3_g170939.Depth = In_Depth3_g170939;
					}
					TVEVisualData Data4_g170957 = Data3_g170939;
					float Out_Dummy4_g170957 = 0;
					float3 Out_Albedo4_g170957 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170957 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170957 = float2( 0,0 );
					float3 Out_NormalWS4_g170957 = float3( 0,0,0 );
					float4 Out_Shader4_g170957 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170957 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170957 = 0;
					float Out_Grayscale4_g170957 = 0;
					float Out_Luminosity4_g170957 = 0;
					float Out_AlphaClip4_g170957 = 0;
					float Out_AlphaFade4_g170957 = 0;
					float3 Out_Translucency4_g170957 = float3( 0,0,0 );
					float Out_Transmission4_g170957 = 0;
					float Out_Thickness4_g170957 = 0;
					float Out_Diffusion4_g170957 = 0;
					float Out_Depth4_g170957 = 0;
					{
					Out_Dummy4_g170957 = Data4_g170957.Dummy;
					Out_Albedo4_g170957 = Data4_g170957.Albedo;
					Out_AlbedoRaw4_g170957 = Data4_g170957.AlbedoRaw;
					Out_NormalTS4_g170957 = Data4_g170957.NormalTS;
					Out_NormalWS4_g170957 = Data4_g170957.NormalWS;
					Out_Shader4_g170957 = Data4_g170957.Shader;
					Out_Emissive4_g170957= Data4_g170957.Emissive;
					Out_MultiMask4_g170957 = Data4_g170957.MultiMask;
					Out_Grayscale4_g170957 = Data4_g170957.Grayscale;
					Out_Luminosity4_g170957= Data4_g170957.Luminosity;
					Out_AlphaClip4_g170957 = Data4_g170957.AlphaClip;
					Out_AlphaFade4_g170957 = Data4_g170957.AlphaFade;
					Out_Translucency4_g170957 = Data4_g170957.Translucency;
					Out_Transmission4_g170957 = Data4_g170957.Transmission;
					Out_Thickness4_g170957 = Data4_g170957.Thickness;
					Out_Diffusion4_g170957 = Data4_g170957.Diffusion;
					Out_Depth4_g170957= Data4_g170957.Depth;
					}
					float3 In_Albedo3_g170958 = Out_Albedo4_g170957;
					float3 In_AlbedoRaw3_g170958 = Out_AlbedoRaw4_g170957;
					float2 In_NormalTS3_g170958 = Out_NormalTS4_g170957;
					float3 In_NormalWS3_g170958 = Out_NormalWS4_g170957;
					float4 In_Shader3_g170958 = Out_Shader4_g170957;
					float4 In_Emissive3_g170958 = Out_Emissive4_g170957;
					float In_Grayscale3_g170958 = Out_Grayscale4_g170957;
					float In_Luminosity3_g170958 = Out_Luminosity4_g170957;
					float temp_output_821_11_g170955 = Out_MultiMask4_g170957;
					float In_MultiMask3_g170958 = temp_output_821_11_g170955;
					half Visual_AlphaClip754_g170955 = Out_AlphaClip4_g170957;
					half Dither_Constant768_g170955 = _DitherConstantValue;
					half Dither_BiasProximity881_g170955 = TVE_DitherParams.x;
					half Dither_BiasEnabled883_g170955 = TVE_DitherParams.w;
					float lerpResult884_g170955 = lerp( 1.0 , Dither_BiasProximity881_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170960 = _DitherProximityMaxValue;
					float temp_output_9_0_g170960 = ( ( distance( worldPos , _WorldSpaceCameraPos ) * lerpResult884_g170955 ) - temp_output_7_0_g170960 );
					half Dither_Proximity767_g170955 = ( saturate( ( ( temp_output_9_0_g170960 / ( _DitherProximityMinValue - temp_output_7_0_g170960 ) ) + 0.0001 ) ) * _DitherProximityValue );
					TVEModelData Data15_g170959 = Data16_g170483;
					float Out_Dummy15_g170959 = 0;
					float3 Out_PositionWS15_g170959 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170959 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170959 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170959 = float3( 0,0,0 );
					float4 Out_VertexData15_g170959 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170959 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170959 = Data15_g170959.Dummy;
					Out_PositionWS15_g170959 = Data15_g170959.PositionWS;
					Out_PositionWO15_g170959 = Data15_g170959.PositionWO;
					Out_PivotWS15_g170959 = Data15_g170959.PivotWS;
					Out_PivotWO15_g170959 = Data15_g170959.PivotWO;
					Out_NormalWS15_g170959 = Data15_g170959.NormalWS;
					Out_ViewDirWS15_g170959 = Data15_g170959.ViewDirWS;
					Out_VertexData15_g170959 = Data15_g170959.VertexData;
					Out_BoundsData15_g170959 = Data15_g170959.BoundsData;
					}
					half3 Model_PositionWS776_g170955 = Out_PositionWS15_g170959;
					half Dither_BiasDistance882_g170955 = TVE_DitherParams.z;
					float lerpResult888_g170955 = lerp( 1.0 , Dither_BiasDistance882_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170961 = _DitherDistanceMinValue;
					float temp_output_9_0_g170961 = ( ( distance( Model_PositionWS776_g170955 , _WorldSpaceCameraPos ) * lerpResult888_g170955 ) - temp_output_7_0_g170961 );
					half Dither_Distance856_g170955 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherDistanceMaxValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherDistanceValue );
					half3 Model_ViewDirWS845_g170955 = Out_ViewDirWS15_g170959;
					float3 normalizeResult792_g170955 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
					float dotResult778_g170955 = dot( Model_ViewDirWS845_g170955 , normalizeResult792_g170955 );
					half Dither_Glancing784_g170955 = ( saturate( ( ( 1.0 - abs( dotResult778_g170955 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
					half Dither_Value429_g170955 = max( max( max( Dither_Constant768_g170955 , Dither_Proximity767_g170955 ) , Dither_Distance856_g170955 ) , Dither_Glancing784_g170955 );
					half3 Model_PositionWO602_g170955 = Out_PositionWO15_g170959;
					half3 Dither_PositionWO895_g170955 = ( Model_PositionWO602_g170955 * 20.0 );
					half Local_MaskNoise678_g170955 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170955 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
					half Visual_MultiMask671_g170955 = temp_output_821_11_g170955;
					float lerpResult683_g170955 = lerp( 1.0 , Visual_MultiMask671_g170955 , _DitherMultiValue);
					half Local_MaskMulti685_g170955 = lerpResult683_g170955;
					half Custom_Mask826_g170955 = 1.0;
					float lerpResult728_g170955 = lerp( Visual_AlphaClip754_g170955 , min( Visual_AlphaClip754_g170955 , ( -0.001 - ( Dither_Value429_g170955 - Local_MaskNoise678_g170955 ) ) ) , ( Local_MaskMulti685_g170955 * Custom_Mask826_g170955 ));
					half Local_AlphaClip834_g170955 = lerpResult728_g170955;
					#ifdef TVE_DITHER
					float staticSwitch577_g170955 = Local_AlphaClip834_g170955;
					#else
					float staticSwitch577_g170955 = Visual_AlphaClip754_g170955;
					#endif
					half Final_AlphaClip493_g170955 = staticSwitch577_g170955;
					float In_AlphaClip3_g170958 = Final_AlphaClip493_g170955;
					float In_AlphaFade3_g170958 = Out_AlphaFade4_g170957;
					float3 In_Translucency3_g170958 = Out_Translucency4_g170957;
					float In_Transmission3_g170958 = Out_Transmission4_g170957;
					float In_Thickness3_g170958 = Out_Thickness4_g170957;
					float In_Diffusion3_g170958 = Out_Diffusion4_g170957;
					float In_Depth3_g170958 = Out_Depth4_g170957;
					{
					Data3_g170958.Dummy = In_Dummy3_g170958;
					Data3_g170958.Albedo = In_Albedo3_g170958;
					Data3_g170958.AlbedoRaw = In_AlbedoRaw3_g170958;
					Data3_g170958.NormalTS = In_NormalTS3_g170958;
					Data3_g170958.NormalWS = In_NormalWS3_g170958;
					Data3_g170958.Shader = In_Shader3_g170958;
					Data3_g170958.Emissive= In_Emissive3_g170958;
					Data3_g170958.MultiMask = In_MultiMask3_g170958;
					Data3_g170958.Grayscale = In_Grayscale3_g170958;
					Data3_g170958.Luminosity = In_Luminosity3_g170958;
					Data3_g170958.AlphaClip = In_AlphaClip3_g170958;
					Data3_g170958.AlphaFade = In_AlphaFade3_g170958;
					Data3_g170958.Translucency = In_Translucency3_g170958;
					Data3_g170958.Transmission = In_Transmission3_g170958;
					Data3_g170958.Thickness = In_Thickness3_g170958;
					Data3_g170958.Diffusion = In_Diffusion3_g170958;
					Data3_g170958.Depth = In_Depth3_g170958;
					}
					TVEVisualData Data4_g170984 = Data3_g170958;
					float Out_Dummy4_g170984 = 0;
					float3 Out_Albedo4_g170984 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170984 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170984 = float2( 0,0 );
					float3 Out_NormalWS4_g170984 = float3( 0,0,0 );
					float4 Out_Shader4_g170984 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170984 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170984 = 0;
					float Out_Grayscale4_g170984 = 0;
					float Out_Luminosity4_g170984 = 0;
					float Out_AlphaClip4_g170984 = 0;
					float Out_AlphaFade4_g170984 = 0;
					float3 Out_Translucency4_g170984 = float3( 0,0,0 );
					float Out_Transmission4_g170984 = 0;
					float Out_Thickness4_g170984 = 0;
					float Out_Diffusion4_g170984 = 0;
					float Out_Depth4_g170984 = 0;
					{
					Out_Dummy4_g170984 = Data4_g170984.Dummy;
					Out_Albedo4_g170984 = Data4_g170984.Albedo;
					Out_AlbedoRaw4_g170984 = Data4_g170984.AlbedoRaw;
					Out_NormalTS4_g170984 = Data4_g170984.NormalTS;
					Out_NormalWS4_g170984 = Data4_g170984.NormalWS;
					Out_Shader4_g170984 = Data4_g170984.Shader;
					Out_Emissive4_g170984= Data4_g170984.Emissive;
					Out_MultiMask4_g170984 = Data4_g170984.MultiMask;
					Out_Grayscale4_g170984 = Data4_g170984.Grayscale;
					Out_Luminosity4_g170984= Data4_g170984.Luminosity;
					Out_AlphaClip4_g170984 = Data4_g170984.AlphaClip;
					Out_AlphaFade4_g170984 = Data4_g170984.AlphaFade;
					Out_Translucency4_g170984 = Data4_g170984.Translucency;
					Out_Transmission4_g170984 = Data4_g170984.Transmission;
					Out_Thickness4_g170984 = Data4_g170984.Thickness;
					Out_Diffusion4_g170984 = Data4_g170984.Diffusion;
					Out_Depth4_g170984= Data4_g170984.Depth;
					}
					float3 temp_output_297_0_g170980 = Out_Albedo4_g170984;
					float3 In_Albedo3_g170995 = temp_output_297_0_g170980;
					float3 temp_output_297_23_g170980 = Out_AlbedoRaw4_g170984;
					float3 In_AlbedoRaw3_g170995 = temp_output_297_23_g170980;
					float2 In_NormalTS3_g170995 = Out_NormalTS4_g170984;
					float3 In_NormalWS3_g170995 = Out_NormalWS4_g170984;
					float4 In_Shader3_g170995 = Out_Shader4_g170984;
					float4 temp_cast_37 = (0.0).xxxx;
					half4 Visual_Emissive255_g170980 = Out_Emissive4_g170984;
					TVEModelData Data15_g170985 = Data16_g170483;
					float Out_Dummy15_g170985 = 0;
					float3 Out_PositionWS15_g170985 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170985 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170985 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170985 = float3( 0,0,0 );
					float4 Out_VertexData15_g170985 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170985 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170985 = Data15_g170985.Dummy;
					Out_PositionWS15_g170985 = Data15_g170985.PositionWS;
					Out_PositionWO15_g170985 = Data15_g170985.PositionWO;
					Out_PivotWS15_g170985 = Data15_g170985.PivotWS;
					Out_PivotWO15_g170985 = Data15_g170985.PivotWO;
					Out_NormalWS15_g170985 = Data15_g170985.NormalWS;
					Out_ViewDirWS15_g170985 = Data15_g170985.ViewDirWS;
					Out_VertexData15_g170985 = Data15_g170985.VertexData;
					Out_BoundsData15_g170985 = Data15_g170985.BoundsData;
					}
					half4 Model_VertexMasks216_g170980 = Out_VertexData15_g170985;
					float4 break251_g170980 = Model_VertexMasks216_g170980;
					float4 break33_g170990 = _emissive_vert_mode;
					float temp_output_30_0_g170990 = ( break251_g170980.x * break33_g170990.x );
					float temp_output_29_0_g170990 = ( break251_g170980.y * break33_g170990.y );
					float temp_output_31_0_g170990 = ( break251_g170980.z * break33_g170990.z );
					float temp_output_28_0_g170990 = ( temp_output_30_0_g170990 + temp_output_29_0_g170990 + temp_output_31_0_g170990 + ( break251_g170980.w * break33_g170990.w ) );
					float clampResult17_g170989 = clamp( temp_output_28_0_g170990 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170993 = _EmissiveMeshRemap.x;
					float temp_output_9_0_g170993 = ( clampResult17_g170989 - temp_output_7_0_g170993 );
					float lerpResult303_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170993 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
					float temp_output_6_0_g170992 = lerpResult303_g170980;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170992 = ( temp_output_6_0_g170992 + _EmissiveMeshMode );
					#else
					float staticSwitch14_g170992 = temp_output_6_0_g170992;
					#endif
					half Emissive_MeshMask221_g170980 = staticSwitch14_g170992;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170982) = _EmissiveMaskTex;
					SamplerState Sampler276_g170982 = sampler_Linear_Repeat;
					float4 temp_output_6_0_g170983 = _emissive_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170983 = ( temp_output_6_0_g170983 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
					#else
					float4 staticSwitch14_g170983 = temp_output_6_0_g170983;
					#endif
					half4 Emissive_Coords167_g170980 = staticSwitch14_g170983;
					float4 temp_output_37_0_g170982 = Emissive_Coords167_g170980;
					half4 Coords276_g170982 = temp_output_37_0_g170982;
					half2 TexCoord276_g170982 = IN.ase_texcoord8.xy;
					half4 localSampleMain276_g170982 = SampleMain( Texture276_g170982 , Sampler276_g170982 , Coords276_g170982 , TexCoord276_g170982 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170982) = _EmissiveMaskTex;
					SamplerState Sampler275_g170982 = sampler_Linear_Repeat;
					half4 Coords275_g170982 = temp_output_37_0_g170982;
					half2 TexCoord275_g170982 = IN.ase_texcoord9.xy;
					half4 localSampleExtra275_g170982 = SampleExtra( Texture275_g170982 , Sampler275_g170982 , Coords275_g170982 , TexCoord275_g170982 );
					#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
					float4 staticSwitch176_g170980 = localSampleExtra275_g170982;
					#else
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#endif
					half4 Emissive_MaskTex201_g170980 = staticSwitch176_g170980;
					float clampResult17_g170991 = clamp( (Emissive_MaskTex201_g170980).x , 0.0001 , 0.9999 );
					float temp_output_7_0_g170994 = _EmissiveMaskRemap.x;
					float temp_output_9_0_g170994 = ( clampResult17_g170991 - temp_output_7_0_g170994 );
					float lerpResult302_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170994 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
					half Emissive_Mask103_g170980 = lerpResult302_g170980;
					float temp_output_279_0_g170980 = ( Emissive_MeshMask221_g170980 * Emissive_Mask103_g170980 );
					float3 appendResult293_g170980 = (float3(temp_output_279_0_g170980 , temp_output_279_0_g170980 , temp_output_279_0_g170980));
					half3 Local_EmissiveColor278_g170980 = appendResult293_g170980;
					float3 temp_output_316_0_g170980 = (TVE_GlowParams).xyz;
					TVEGlobalData Data15_g170981 = Data204_g170496;
					float Out_Dummy15_g170981 = 0;
					float4 Out_CoatDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170981 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170981 = Data15_g170981.Dummy;
					Out_CoatDataRT15_g170981 = Data15_g170981.CoatDataRT;
					Out_PaintDataRT15_g170981 = Data15_g170981.PaintDataRT;
					Out_GlowDataRT15_g170981= Data15_g170981.GlowDataRT;
					Out_AtmoDataRT15_g170981= Data15_g170981.AtmoDataRT;
					Out_FadeDataRT15_g170981= Data15_g170981.FadeDataRT;
					Out_FormDataRT15_g170981 = Data15_g170981.FormDataRT;
					Out_FlowDataRT15_g170981 = Data15_g170981.FlowDataRT;
					}
					half4 Global_GlowParams179_g170980 = Out_GlowDataRT15_g170981;
					float3 temp_output_6_0_g170987 = (Global_GlowParams179_g170980).xyz;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170987 = ( temp_output_6_0_g170987 + _EmissiveElementMode );
					#else
					float3 staticSwitch14_g170987 = temp_output_6_0_g170987;
					#endif
					#ifdef TVE_EMISSIVE_ELEMENT
					float3 staticSwitch228_g170980 = staticSwitch14_g170987;
					#else
					float3 staticSwitch228_g170980 = temp_output_316_0_g170980;
					#endif
					float3 lerpResult299_g170980 = lerp( float3( 1,1,1 ) , staticSwitch228_g170980 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
					half3 Emissive_GlobalMask248_g170980 = lerpResult299_g170980;
					half3 Visual_AlbedoRaw306_g170980 = temp_output_297_23_g170980;
					float3 lerpResult307_g170980 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170980 , _EmissiveColorMode);
					half3 Local_EmissiveValue88_g170980 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170980 * lerpResult307_g170980 );
					half3 Emissive_Blend260_g170980 = ( ( (Visual_Emissive255_g170980).xyz * Local_EmissiveColor278_g170980 ) * Local_EmissiveValue88_g170980 );
					float3 temp_output_3_0_g170986 = Emissive_Blend260_g170980;
					float temp_output_15_0_g170986 = _emissive_power_value;
					float3 temp_output_23_0_g170986 = ( temp_output_3_0_g170986 * temp_output_15_0_g170986 );
					half Local_EmissiveMask294_g170980 = temp_output_279_0_g170980;
					float4 appendResult295_g170980 = (float4(temp_output_23_0_g170986 , Local_EmissiveMask294_g170980));
					#ifdef TVE_EMISSIVE
					float4 staticSwitch129_g170980 = appendResult295_g170980;
					#else
					float4 staticSwitch129_g170980 = temp_cast_37;
					#endif
					half4 Final_Emissive184_g170980 = staticSwitch129_g170980;
					float4 In_Emissive3_g170995 = Final_Emissive184_g170980;
					float In_Grayscale3_g170995 = Out_Grayscale4_g170984;
					float In_Luminosity3_g170995 = Out_Luminosity4_g170984;
					float temp_output_297_11_g170980 = Out_MultiMask4_g170984;
					float In_MultiMask3_g170995 = temp_output_297_11_g170980;
					float In_AlphaClip3_g170995 = Out_AlphaClip4_g170984;
					float In_AlphaFade3_g170995 = Out_AlphaFade4_g170984;
					float3 In_Translucency3_g170995 = Out_Translucency4_g170984;
					float In_Transmission3_g170995 = Out_Transmission4_g170984;
					float In_Thickness3_g170995 = Out_Thickness4_g170984;
					float In_Diffusion3_g170995 = Out_Diffusion4_g170984;
					float In_Depth3_g170995 = Out_Depth4_g170984;
					{
					Data3_g170995.Dummy = In_Dummy3_g170995;
					Data3_g170995.Albedo = In_Albedo3_g170995;
					Data3_g170995.AlbedoRaw = In_AlbedoRaw3_g170995;
					Data3_g170995.NormalTS = In_NormalTS3_g170995;
					Data3_g170995.NormalWS = In_NormalWS3_g170995;
					Data3_g170995.Shader = In_Shader3_g170995;
					Data3_g170995.Emissive= In_Emissive3_g170995;
					Data3_g170995.MultiMask = In_MultiMask3_g170995;
					Data3_g170995.Grayscale = In_Grayscale3_g170995;
					Data3_g170995.Luminosity = In_Luminosity3_g170995;
					Data3_g170995.AlphaClip = In_AlphaClip3_g170995;
					Data3_g170995.AlphaFade = In_AlphaFade3_g170995;
					Data3_g170995.Translucency = In_Translucency3_g170995;
					Data3_g170995.Transmission = In_Transmission3_g170995;
					Data3_g170995.Thickness = In_Thickness3_g170995;
					Data3_g170995.Diffusion = In_Diffusion3_g170995;
					Data3_g170995.Depth = In_Depth3_g170995;
					}
					TVEVisualData Data4_g171014 = Data3_g170995;
					float Out_Dummy4_g171014 = 0;
					float3 Out_Albedo4_g171014 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171014 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171014 = float2( 0,0 );
					float3 Out_NormalWS4_g171014 = float3( 0,0,0 );
					float4 Out_Shader4_g171014 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171014 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171014 = 0;
					float Out_Grayscale4_g171014 = 0;
					float Out_Luminosity4_g171014 = 0;
					float Out_AlphaClip4_g171014 = 0;
					float Out_AlphaFade4_g171014 = 0;
					float3 Out_Translucency4_g171014 = float3( 0,0,0 );
					float Out_Transmission4_g171014 = 0;
					float Out_Thickness4_g171014 = 0;
					float Out_Diffusion4_g171014 = 0;
					float Out_Depth4_g171014 = 0;
					{
					Out_Dummy4_g171014 = Data4_g171014.Dummy;
					Out_Albedo4_g171014 = Data4_g171014.Albedo;
					Out_AlbedoRaw4_g171014 = Data4_g171014.AlbedoRaw;
					Out_NormalTS4_g171014 = Data4_g171014.NormalTS;
					Out_NormalWS4_g171014 = Data4_g171014.NormalWS;
					Out_Shader4_g171014 = Data4_g171014.Shader;
					Out_Emissive4_g171014= Data4_g171014.Emissive;
					Out_MultiMask4_g171014 = Data4_g171014.MultiMask;
					Out_Grayscale4_g171014 = Data4_g171014.Grayscale;
					Out_Luminosity4_g171014= Data4_g171014.Luminosity;
					Out_AlphaClip4_g171014 = Data4_g171014.AlphaClip;
					Out_AlphaFade4_g171014 = Data4_g171014.AlphaFade;
					Out_Translucency4_g171014 = Data4_g171014.Translucency;
					Out_Transmission4_g171014 = Data4_g171014.Transmission;
					Out_Thickness4_g171014 = Data4_g171014.Thickness;
					Out_Diffusion4_g171014 = Data4_g171014.Diffusion;
					Out_Depth4_g171014= Data4_g171014.Depth;
					}
					half3 Visual_Albedo199_g171013 = Out_Albedo4_g171014;
					float3 temp_cast_38 = (0.0).xxx;
					half3 Subsurface_Color264_g171013 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171013 );
					half Visual_Transmission138_g171013 = Out_Transmission4_g171014;
					half Subsurface_Value268_g171013 = _SubsurfaceIntensityValue;
					TVEGlobalData Data15_g171016 = Data204_g170496;
					float Out_Dummy15_g171016 = 0;
					float4 Out_CoatDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g171016 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171016 = Data15_g171016.Dummy;
					Out_CoatDataRT15_g171016 = Data15_g171016.CoatDataRT;
					Out_PaintDataRT15_g171016 = Data15_g171016.PaintDataRT;
					Out_GlowDataRT15_g171016= Data15_g171016.GlowDataRT;
					Out_AtmoDataRT15_g171016= Data15_g171016.AtmoDataRT;
					Out_FadeDataRT15_g171016= Data15_g171016.FadeDataRT;
					Out_FormDataRT15_g171016 = Data15_g171016.FormDataRT;
					Out_FlowDataRT15_g171016 = Data15_g171016.FlowDataRT;
					}
					half4 Global_GlowParams373_g171013 = Out_GlowDataRT15_g171016;
					float temp_output_6_0_g171019 = saturate( (Global_GlowParams373_g171013).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g171019 = ( temp_output_6_0_g171019 + _SubsurfaceElementMode );
					#else
					float staticSwitch14_g171019 = temp_output_6_0_g171019;
					#endif
					#ifdef TVE_SUBSURFACE_ELEMENT
					float staticSwitch367_g171013 = staticSwitch14_g171019;
					#else
					float staticSwitch367_g171013 = TVE_GlowParams.w;
					#endif
					float lerpResult403_g171013 = lerp( 1.0 , staticSwitch367_g171013 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
					half Subsurface_GlobalMask369_g171013 = lerpResult403_g171013;
					float temp_output_301_11_g171013 = Out_MultiMask4_g171014;
					half Visual_MultiMask292_g171013 = temp_output_301_11_g171013;
					float lerpResult293_g171013 = lerp( 1.0 , Visual_MultiMask292_g171013 , _SubsurfaceMultiValue);
					half Subsurface_MultiMask296_g171013 = lerpResult293_g171013;
					half Custom_Mask363_g171013 = 1.0;
					#ifdef TVE_SUBSURFACE
					float staticSwitch345_g171013 = ( Visual_Transmission138_g171013 * Subsurface_Value268_g171013 * Subsurface_GlobalMask369_g171013 * Subsurface_MultiMask296_g171013 * Custom_Mask363_g171013 );
					#else
					float staticSwitch345_g171013 = 0.0;
					#endif
					half Final_Transmission269_g171013 = staticSwitch345_g171013;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch348_g171013 = ( Subsurface_Color264_g171013 * Final_Transmission269_g171013 * 10.0 );
					#else
					float3 staticSwitch348_g171013 = temp_cast_38;
					#endif
					half3 Final_Translucency254_g171013 = staticSwitch348_g171013;
					TVEModelData Data15_g171017 = Data16_g170483;
					float Out_Dummy15_g171017 = 0;
					float3 Out_PositionWS15_g171017 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171017 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171017 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g171017 = float3( 0,0,0 );
					float4 Out_VertexData15_g171017 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171017 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171017 = Data15_g171017.Dummy;
					Out_PositionWS15_g171017 = Data15_g171017.PositionWS;
					Out_PositionWO15_g171017 = Data15_g171017.PositionWO;
					Out_PivotWS15_g171017 = Data15_g171017.PivotWS;
					Out_PivotWO15_g171017 = Data15_g171017.PivotWO;
					Out_NormalWS15_g171017 = Data15_g171017.NormalWS;
					Out_ViewDirWS15_g171017 = Data15_g171017.ViewDirWS;
					Out_VertexData15_g171017 = Data15_g171017.VertexData;
					Out_BoundsData15_g171017 = Data15_g171017.BoundsData;
					}
					half3 Model_ViewDirWS392_g171013 = Out_ViewDirWS15_g171017;
					float dotResult324_g171013 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171013 );
					float saferPower323_g171013 = abs( saturate( dotResult324_g171013 ) );
					#ifdef UNITY_PASS_FORWARDADD
					float staticSwitch330_g171013 = 0.0;
					#else
					float staticSwitch330_g171013 = ( pow( saferPower323_g171013 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
					#endif
					half Mask_Subsurface_View320_g171013 = staticSwitch330_g171013;
					float3 temp_output_6_0_g171018 = ( Final_Translucency254_g171013 * Mask_Subsurface_View320_g171013 );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171018 = ( temp_output_6_0_g171018 + _SubsurfaceAproxInfo );
					#else
					float3 staticSwitch14_g171018 = temp_output_6_0_g171018;
					#endif
					half3 Subsurface_Approximation333_g171013 = staticSwitch14_g171018;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch353_g171013 = ( Visual_Albedo199_g171013 + Subsurface_Approximation333_g171013 );
					#else
					float3 staticSwitch353_g171013 = Visual_Albedo199_g171013;
					#endif
					half3 Final_Albedo312_g171013 = staticSwitch353_g171013;
					float3 In_Albedo3_g171015 = Final_Albedo312_g171013;
					float3 In_AlbedoRaw3_g171015 = Out_AlbedoRaw4_g171014;
					float2 In_NormalTS3_g171015 = Out_NormalTS4_g171014;
					float3 In_NormalWS3_g171015 = Out_NormalWS4_g171014;
					float4 In_Shader3_g171015 = Out_Shader4_g171014;
					float4 In_Emissive3_g171015 = Out_Emissive4_g171014;
					float In_Grayscale3_g171015 = Out_Grayscale4_g171014;
					float In_Luminosity3_g171015 = Out_Luminosity4_g171014;
					float In_MultiMask3_g171015 = temp_output_301_11_g171013;
					float In_AlphaClip3_g171015 = Out_AlphaClip4_g171014;
					float In_AlphaFade3_g171015 = Out_AlphaFade4_g171014;
					float3 In_Translucency3_g171015 = Final_Translucency254_g171013;
					float In_Transmission3_g171015 = Final_Transmission269_g171013;
					#ifdef TVE_SUBSURFACE
					float staticSwitch351_g171013 = 0.0;
					#else
					float staticSwitch351_g171013 = 1.0;
					#endif
					half Final_Thickness275_g171013 = staticSwitch351_g171013;
					float In_Thickness3_g171015 = Final_Thickness275_g171013;
					float Final_Diffusion340_g171013 = _SubsurfaceDiffusion;
					float In_Diffusion3_g171015 = Final_Diffusion340_g171013;
					float In_Depth3_g171015 = Out_Depth4_g171014;
					{
					Data3_g171015.Dummy = In_Dummy3_g171015;
					Data3_g171015.Albedo = In_Albedo3_g171015;
					Data3_g171015.AlbedoRaw = In_AlbedoRaw3_g171015;
					Data3_g171015.NormalTS = In_NormalTS3_g171015;
					Data3_g171015.NormalWS = In_NormalWS3_g171015;
					Data3_g171015.Shader = In_Shader3_g171015;
					Data3_g171015.Emissive= In_Emissive3_g171015;
					Data3_g171015.MultiMask = In_MultiMask3_g171015;
					Data3_g171015.Grayscale = In_Grayscale3_g171015;
					Data3_g171015.Luminosity = In_Luminosity3_g171015;
					Data3_g171015.AlphaClip = In_AlphaClip3_g171015;
					Data3_g171015.AlphaFade = In_AlphaFade3_g171015;
					Data3_g171015.Translucency = In_Translucency3_g171015;
					Data3_g171015.Transmission = In_Transmission3_g171015;
					Data3_g171015.Thickness = In_Thickness3_g171015;
					Data3_g171015.Diffusion = In_Diffusion3_g171015;
					Data3_g171015.Depth = In_Depth3_g171015;
					}
					TVEVisualData Data4_g171040 = Data3_g171015;
					float Out_Dummy4_g171040 = 0;
					float3 Out_Albedo4_g171040 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171040 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171040 = float2( 0,0 );
					float3 Out_NormalWS4_g171040 = float3( 0,0,0 );
					float4 Out_Shader4_g171040 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171040 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171040 = 0;
					float Out_Grayscale4_g171040 = 0;
					float Out_Luminosity4_g171040 = 0;
					float Out_AlphaClip4_g171040 = 0;
					float Out_AlphaFade4_g171040 = 0;
					float3 Out_Translucency4_g171040 = float3( 0,0,0 );
					float Out_Transmission4_g171040 = 0;
					float Out_Thickness4_g171040 = 0;
					float Out_Diffusion4_g171040 = 0;
					float Out_Depth4_g171040 = 0;
					{
					Out_Dummy4_g171040 = Data4_g171040.Dummy;
					Out_Albedo4_g171040 = Data4_g171040.Albedo;
					Out_AlbedoRaw4_g171040 = Data4_g171040.AlbedoRaw;
					Out_NormalTS4_g171040 = Data4_g171040.NormalTS;
					Out_NormalWS4_g171040 = Data4_g171040.NormalWS;
					Out_Shader4_g171040 = Data4_g171040.Shader;
					Out_Emissive4_g171040= Data4_g171040.Emissive;
					Out_MultiMask4_g171040 = Data4_g171040.MultiMask;
					Out_Grayscale4_g171040 = Data4_g171040.Grayscale;
					Out_Luminosity4_g171040= Data4_g171040.Luminosity;
					Out_AlphaClip4_g171040 = Data4_g171040.AlphaClip;
					Out_AlphaFade4_g171040 = Data4_g171040.AlphaFade;
					Out_Translucency4_g171040 = Data4_g171040.Translucency;
					Out_Transmission4_g171040 = Data4_g171040.Transmission;
					Out_Thickness4_g171040 = Data4_g171040.Thickness;
					Out_Diffusion4_g171040 = Data4_g171040.Diffusion;
					Out_Depth4_g171040= Data4_g171040.Depth;
					}
					half3 Input_Albedo24_g171039 = Out_Albedo4_g171040;
					#ifdef UNITY_COLORSPACE_GAMMA
					float4 staticSwitch22_g171039 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
					#else
					float4 staticSwitch22_g171039 = half4( 0.04, 0.04, 0.04, 0.96 );
					#endif
					half4 ColorSpaceDielectricSpec23_g171039 = staticSwitch22_g171039;
					float4 break24_g171035 = Out_Shader4_g171040;
					half Metallic95_g171035 = break24_g171035.x;
					half Input_Metallic25_g171039 = Metallic95_g171035;
					half OneMinusReflectivity31_g171039 = ( (ColorSpaceDielectricSpec23_g171039).w - ( (ColorSpaceDielectricSpec23_g171039).w * Input_Metallic25_g171039 ) );
					
					float3 appendResult23_g171035 = (float3(Out_NormalTS4_g171040 , 1.0));
					float3 temp_output_13_0_g171038 = appendResult23_g171035;
					float3 temp_output_33_0_g171038 = ( temp_output_13_0_g171038 * _render_normal );
					float3 switchResult12_g171038 = (((ase_vface>0)?(temp_output_13_0_g171038):(temp_output_33_0_g171038)));
					
					half Smoothness105_g171035 = break24_g171035.w;
					half Input_Smoothness43_g171046 = Smoothness105_g171035;
					half Input_True57_g171048 = Input_Smoothness43_g171046;
					half True33_g171048 = Input_True57_g171048;
					half RenderSpec102_g171035 = _RenderSpecular;
					half Input_RenderSpec58_g171046 = RenderSpec102_g171035;
					float temp_output_46_0_g171046 = max( ( Input_Smoothness43_g171046 * Input_RenderSpec58_g171046 ) , 0.001 );
					float temp_output_6_0_g171047 = temp_output_46_0_g171046;
					#ifdef TVE_DUMMY
					float staticSwitch14_g171047 = ( temp_output_6_0_g171047 + _SpecColor.r );
					#else
					float staticSwitch14_g171047 = temp_output_6_0_g171047;
					#endif
					float temp_output_61_0_g171046 = staticSwitch14_g171047;
					half Input_False58_g171048 = temp_output_61_0_g171046;
					half False33_g171048 = Input_False58_g171048;
					half localShadowPassCheck33_g171048 = ShadowPassCheck33_g171048( True33_g171048 , False33_g171048 );
					
					half Input_True57_g171049 = 0.04;
					half True33_g171049 = Input_True57_g171049;
					half Input_False58_g171049 = temp_output_46_0_g171046;
					half False33_g171049 = Input_False58_g171049;
					half localShadowPassCheck33_g171049 = ShadowPassCheck33_g171049( True33_g171049 , False33_g171049 );
					
					float localCustomAlphaClip20_g171045 = ( 0.0 );
					float temp_output_3_0_g171045 = Out_AlphaClip4_g171040;
					float Alpha20_g171045 = temp_output_3_0_g171045;
					float temp_output_15_0_g171045 = 0.0;
					float Treshold20_g171045 = temp_output_15_0_g171045;
					{
					#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
					clip(Alpha20_g171045 - Treshold20_g171045);
					#endif
					}
					

					o.Albedo = ( Input_Albedo24_g171039 * OneMinusReflectivity31_g171039 );
					o.Normal = switchResult12_g171038;
					#if defined(ASE_LIGHTING_SIMPLE)
						o.Specular = localShadowPassCheck33_g171048;
						o.Gloss = localShadowPassCheck33_g171049;
					#else
						#if defined(_SPECULAR_SETUP)
							o.Specular = fixed3( 1, 1, 1 );
						#else
							o.Metallic = 0;
						#endif
						o.Occlusion = 1;
						o.Smoothness = 0;
					#endif
					o.Emission = (Out_Emissive4_g171040).xyz;
					o.Alpha = saturate( ( Alpha20_g171045 * Out_AlphaFade4_g171040 ) );
					float3 BakedGI = 0;
					float3 Transmission = 1;
					float3 Translucency = 1;

					#if defined( ASE_DEPTH_WRITE_ON )
						float DeviceDepth = IN.pos.z;
					#endif

					#ifdef _ALPHATEST_ON
						clip( o.Alpha - AlphaClipThreshold );
					#endif

					#if ( ASE_FRAGMENT_NORMAL == 0 )
						o.Normal = normalize(o.Normal.x * IN.worldTangent.xyz + o.Normal.y * IN.worldBitangent.xyz + o.Normal.z * IN.worldNormal.xyz);
					#elif ( ASE_FRAGMENT_NORMAL == 1 )
						o.Normal = UnityObjectToWorldNormal( o.Normal );
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						// @diogo: already in world-space; do nothing
					#endif

					#if defined( ASE_DEPTH_WRITE_ON )
						outputDepth = DeviceDepth;
					#endif

					#ifndef USING_DIRECTIONAL_LIGHT
						half3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						half3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif

					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;

					UnityGIInput giInput;
					UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
					giInput.light = gi.light;
					giInput.worldPos = worldPos;
					giInput.worldViewDir = worldViewDir;
					giInput.atten = atten;
					#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
						giInput.lightmapUV = IN.ambientOrLightmapUV;
					#else
						giInput.lightmapUV = 0.0;
					#endif
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						giInput.ambient = IN.ambientOrLightmapUV.rgb;
					#else
						giInput.ambient.rgb = 0.0;
					#endif
					giInput.probeHDR[0] = unity_SpecCube0_HDR;
					giInput.probeHDR[1] = unity_SpecCube1_HDR;
					#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
						giInput.boxMin[0] = unity_SpecCube0_BoxMin;
					#endif
					#ifdef UNITY_SPECCUBE_BOX_PROJECTION
						giInput.boxMax[0] = unity_SpecCube0_BoxMax;
						giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
						giInput.boxMax[1] = unity_SpecCube1_BoxMax;
						giInput.boxMin[1] = unity_SpecCube1_BoxMin;
						giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
					#endif

					#if defined(ASE_LIGHTING_SIMPLE)
						#if defined(_SPECULAR_SETUP)
							LightingBlinnPhong_GI(o, giInput, gi);
						#else
							LightingLambert_GI(o, giInput, gi);
						#endif
					#else
						#if defined(_SPECULAR_SETUP)
							LightingStandardSpecular_GI(o, giInput, gi);
						#else
							LightingStandard_GI(o, giInput, gi);
						#endif
					#endif

					#ifdef ASE_BAKEDGI
						gi.indirect.diffuse = BakedGI;
					#endif

					#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
						gi.indirect.diffuse = 0;
					#endif

					half4 c = 0;
					#if defined(ASE_LIGHTING_SIMPLE)
						#if defined(_SPECULAR_SETUP)
							c += LightingBlinnPhong (o, worldViewDir, gi);
						#else
							c += LightingLambert( o, gi );
						#endif
					#else
						#if defined(_SPECULAR_SETUP)
							c += LightingStandardSpecular (o, worldViewDir, gi);
						#else
							c += LightingStandard(o, worldViewDir, gi);
						#endif
					#endif

					#ifdef ASE_TRANSMISSION
					{
						float shadow = _TransmissionShadow;
						#ifdef DIRECTIONAL
							float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
						#else
							float3 lightAtten = gi.light.color;
						#endif
						half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
						c.rgb += o.Albedo * transmission;
					}
					#endif

					#ifdef ASE_TRANSLUCENCY
					{
						float shadow = _TransShadow;
						float normal = _TransNormal;
						float scattering = _TransScattering;
						float direct = _TransDirect;
						float ambient = _TransAmbient;
						float strength = _TransStrength;

						#ifdef DIRECTIONAL
							float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
						#else
							float3 lightAtten = gi.light.color;
						#endif
						half3 lightDir = gi.light.dir + o.Normal * normal;
						half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
						half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
						c.rgb += o.Albedo * translucency * strength;
					}
					#endif

					c.rgb += o.Emission;

					#ifdef ASE_FOG
						UNITY_APPLY_FOG(IN.fogCoord, c);
					#endif
					return c;
				}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
				#define ASE_GEOMETRY 1
				#define ASE_FRAGMENT_NORMAL 0
				#define ASE_NEEDS_FRAG_SHADOWCOORDS
				#pragma shader_feature_local_fragment _SPECULARHIGHLIGHTS_OFF
				#pragma multi_compile_instancing
				#pragma multi_compile __ LOD_FADE_CROSSFADE
				#pragma multi_compile_fog
				#define _SPECULAR_SETUP 1
				#define ASE_LIGHTING_SIMPLE 1
				#define _ENVIRONMENTREFLECTIONS_OFF 1
				#define ASE_ABSOLUTE_VERTEX_POS 1
				#define ASE_VERSION 19802
				#define ASE_USING_SAMPLING_MACROS 1

				#pragma vertex vert
				#pragma fragment frag
				#pragma skip_variants INSTANCING_ON
				#pragma multi_compile_fwdadd_fullshadows
				#ifndef UNITY_PASS_FORWARDADD
					#define UNITY_PASS_FORWARDADD
				#endif
				#include "HLSLSupport.cginc"
				#ifdef ASE_GEOMETRY
					#ifndef UNITY_INSTANCED_LOD_FADE
						#define UNITY_INSTANCED_LOD_FADE
					#endif
					#ifndef UNITY_INSTANCED_SH
						#define UNITY_INSTANCED_SH
					#endif
					#ifndef UNITY_INSTANCED_LIGHTMAPSTS
						#define UNITY_INSTANCED_LIGHTMAPSTS
					#endif
				#endif
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				#include "UnityPBSLighting.cginc"
				#include "AutoLight.cginc"

				#include "UnityStandardBRDF.cginc"
				#define ASE_NEEDS_VERT_POSITION
				#define ASE_NEEDS_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_NORMAL
				#define ASE_NEEDS_VERT_TANGENT
				#define ASE_NEEDS_TEXTURE_COORDINATES0
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
				#define ASE_NEEDS_TEXTURE_COORDINATES2
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
				#define ASE_NEEDS_WORLD_NORMAL
				#define ASE_NEEDS_FRAG_WORLD_NORMAL
				#define ASE_NEEDS_WORLD_TANGENT
				#define ASE_NEEDS_FRAG_WORLD_TANGENT
				#define ASE_NEEDS_WORLD_BITANGENT
				#define ASE_NEEDS_FRAG_WORLD_BITANGENT
				#define ASE_NEEDS_WORLD_POSITION
				#define ASE_NEEDS_FRAG_WORLD_POSITION
				#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
				#pragma shader_feature_local_vertex TVE_SIZEFADE
				#pragma shader_feature_local_vertex TVE_PERSPECTIVE
				#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
				#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
				#pragma shader_feature_local_vertex TVE_MOTION
				#pragma shader_feature_local TVE_LEGACY
				#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
				#pragma shader_feature_local_vertex TVE_NORMAL
				#pragma shader_feature_local_fragment TVE_SUBSURFACE
				#pragma shader_feature_local_fragment TVE_WETNESS
				#pragma shader_feature_local_fragment TVE_OVERLAY
				#pragma shader_feature_local_fragment TVE_MOTION
				#pragma shader_feature_local_fragment TVE_DRYNESS
				#pragma shader_feature_local_fragment TVE_TINTING
				#pragma shader_feature_local_fragment TVE_VARIATION
				#pragma shader_feature_local_fragment TVE_GRADIENT
				#pragma shader_feature_local_fragment TVE_OCCLUSION
				#pragma shader_feature_local_fragment TVE_THIRD
				#pragma shader_feature_local_fragment TVE_SECOND
				#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
				#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
				#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
				#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
				#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
				#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
				#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_WATER
				#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
				#pragma shader_feature_local_fragment TVE_CUTOUT
				#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
				#pragma shader_feature_local_fragment TVE_DITHER
				#pragma shader_feature_local_fragment TVE_EMISSIVE
				#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
				#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
				#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
				//SHADER INJECTION POINT BEGIN
				//SHADER INJECTION POINT END
				  
				struct TVEVisualData
				{  
					half Dummy;  
					half3 Albedo;
					half3 AlbedoRaw;
					half2 NormalTS;
					half3 NormalWS; 
					half4 Shader;
					half4 Emissive;
					half AlphaClip;
					half AlphaFade;
					half MultiMask;
					half Grayscale;
					half Luminosity;
					half3 Translucency;
					half Transmission;
					half Thickness;
					float Diffusion;
					float Depth;
				};  
				    
				struct TVEModelData
				{    
					half Dummy;    
					half3 PositionOS;
					half3 PositionWS;
					half3 PositionWO;
					half3 PositionRawOS;
					half3 PositionAddOS;
					half3 PivotOS;
					half3 PivotWS;
					half3 PivotWO;
					half3 NormalOS;
					half3 NormalWS;
					half3 NormalRawOS;
					half3 NormalRawWS;
					half4 TangentOS;
					half3 ViewDirWS;
					half4 VertexData;
					half4 PhaseData;
					half4 BoundsData;
					half4 RotationData;
				};    
				      
				struct TVEGlobalData
				{      
					half Dummy;      
					half4 CoatDataRT;
					half4 PaintDataRT;
					half4 GlowDataRT;
					half4 AtmoDataRT;
					half4 FadeDataRT;
					half4 FormDataRT;
					half4 FlowDataRT;
				};      
				        
				struct TVEMasksData
				{        
					half4 Mask0;
					half4 Mask1;
					half4 Mask2;
					half4 Mask3;
				};        
				#define TVE_GEOMETRY_SHADER
				//#pragma editor_sync_compilation
				#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
					#define ASE_NEEDS_TEXTURE_COORDINATES2
				#endif
				#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#else//ASE Sampling Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
				#endif//ASE Sampling Macros
				


				struct appdata
				{
					float4 vertex : POSITION;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					float4 ase_texcoord : TEXCOORD0;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct v2f
				{
					UNITY_POSITION( pos );
					UNITY_LIGHTING_COORDS( 0, 1 )
					UNITY_FOG_COORDS( 2 )
					float4 worldNormal : TEXCOORD3;
					float4 worldTangent : TEXCOORD4;
					float4 worldBitangent : TEXCOORD5;
					#if defined( ASE_NEEDS_FRAG_SCREEN_POSITION )
						float4 screenPos : TEXCOORD6;
					#endif
					float4 ase_texcoord7 : TEXCOORD7;
					float4 ase_texcoord8 : TEXCOORD8;
					float4 ase_texcoord9 : TEXCOORD9;
					float4 ase_texcoord10 : TEXCOORD10;
					float4 ase_color : COLOR;
					float4 ase_texcoord11 : TEXCOORD11;
					UNITY_VERTEX_INPUT_INSTANCE_ID
					UNITY_VERTEX_OUTPUT_STEREO
				};

				#ifdef ASE_TRANSMISSION
					float _TransmissionShadow;
				#endif
				#ifdef ASE_TRANSLUCENCY
					float _TransStrength;
					float _TransNormal;
					float _TransScattering;
					float _TransDirect;
					float _TransAmbient;
					float _TransShadow;
				#endif
				#ifdef ASE_TESSELLATION
					float _TessPhongStrength;
					float _TessValue;
					float _TessMin;
					float _TessMax;
					float _TessEdgeLength;
					float _TessMaxDisp;
				#endif

				uniform half _SubsurfaceAngleValue;
				uniform float _SubsurfaceDiffusion;
				uniform float4 _SubsurfaceDiffusion_Asset;
				uniform half _SubsurfaceSpace;
				uniform half _SubsurfaceScatteringValue;
				uniform half _render_cull;
				uniform half _render_src;
				uniform half _render_dst;
				uniform half _render_zw;
				uniform half _render_coverage;
				uniform half _IsGeneralShader;
				uniform half _IsSimpleShader;
				uniform half _RenderZWrite;
				uniform half _IsVersion;
				uniform half _RenderCategory;
				uniform half _RenderEnd;
				uniform half _RenderMode;
				uniform half _RenderCull;
				uniform half _RenderNormal;
				uniform half _RenderBakeGI;
				uniform half _RenderDecals;
				uniform half _RenderSSR;
				uniform half _RenderPriority;
				uniform half _RenderQueue;
				uniform half _RenderMotion;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
				SamplerState sampler_BumpMap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
				SamplerState sampler_MainTex;
				uniform half _Cutoff;
				uniform half4 _Color;
				uniform half _IsTVEShader;
				uniform half _IsCustomShader;
				uniform half _IsShared;
				uniform half _IsCollected;
				uniform half _IsConverted;
				uniform half _IsIdentifier;
				uniform half _RenderFilter;
				uniform half _RenderShadow;
				uniform half _RenderClip;
				UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
				SamplerState sampler_NoiseTex3D;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
				SamplerState sampler_NoiseTexSS;
				uniform half _NormalCategory;
				uniform half _NormalEnd;
				uniform half _NormalSpace;
				uniform half _NormalBakeMode;
				uniform half _MotionCategory;
				uniform half _MotionWindEnd;
				uniform half _MotionElementMode;
				uniform half _MotionPushInfo;
				uniform half _SizeFadeCategory;
				uniform half _SizeFadeEnd;
				uniform half _PerspectiveCategory;
				uniform half _PerspectiveEnd;
				uniform half _ObjectCategory;
				uniform half _ObjectEnd;
				uniform half _ObjectModelMode;
				uniform half _ObjectPivotMode;
				uniform half _ObjectPhaseMode;
				uniform half _ObjectBoundsInfo;
				uniform float3 TVE_WorldOrigin;
				uniform half4 TVE_TimeParams;
				uniform half4 _object_phase_mode;
				uniform half _ObjectHeightValue;
				uniform half _ObjectRadiusValue;
				uniform half _PerspectivePhaseValue;
				uniform half _PerspectiveIntensityValue;
				uniform half _PerspectiveAngleValue;
				uniform half4 TVE_SizeFadeParams;
				uniform half _SizeFadeDistMaxValue;
				uniform half _SizeFadeDistMinValue;
				uniform half _SizeFadeScaleValue;
				uniform half4 TVE_FormParams;
				uniform half _GlobalCategory;
				uniform half _GlobalEnd;
				uniform half _GlobalPivotInfo;
				uniform half _GlobalCoatLayerValue;
				uniform float TVE_CoatLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
				uniform half4 TVE_RenderBaseCoords;
				uniform half _GlobalCoatPivotValue;
				SamplerState sampler_Linear_Clamp;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
				uniform half4 TVE_RenderNearCoords;
				SamplerState sampler_Linear_Repeat;
				uniform float4 TVE_RenderNearPositionR;
				uniform half TVE_RenderNearFadeValue;
				uniform half4 TVE_CoatParams;
				uniform half _GlobalPaintLayerValue;
				uniform float TVE_PaintLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
				uniform half _GlobalPaintPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
				uniform half4 TVE_PaintParams;
				uniform half _GlobalGlowLayerValue;
				uniform float TVE_GlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
				uniform half _GlobalGlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
				uniform half4 TVE_GlowParams;
				uniform half _GlobalAtmoLayerValue;
				uniform float TVE_AtmoLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
				uniform half _GlobalAtmoPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
				uniform half4 TVE_AtmoParams;
				uniform half _GlobalFadeLayerValue;
				uniform float TVE_FadeLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
				uniform half _GlobalFadePivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
				uniform half4 TVE_FadeParams;
				uniform half _GlobalFormLayerValue;
				uniform float TVE_FormLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
				uniform half _GlobalFormPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
				uniform half _GlobalFlowLayerValue;
				uniform float TVE_FlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
				uniform half _GlobalFlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
				uniform half4 TVE_FlowParams;
				uniform half _SizeFadeElementMode;
				uniform half _SizeFadeGlobalValue;
				uniform half TVE_IsEnabled;
				uniform half _SizeFadeScaleMode;
				uniform half _SizeFadeIntensityValue;
				uniform half _MotionSmallIntensityValue;
				uniform half4 _motion_small_vert_mode;
				uniform half4 _motion_small_proc_mode;
				uniform half _motion_small_mask_mode;
				uniform half4 _MotionSmallMaskRemap;
				uniform half _MotionSmallMaskMode;
				uniform half4 TVE_MotionParams;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
				uniform half _MotionSmallPivotValue;
				uniform half _MotionSmallPhaseValue;
				uniform half _MotionSmallTillingValue;
				uniform half _MotionSmallSpeedValue;
				uniform half _MotionSmallNoiseValue;
				uniform half4 TVE_MotionParamsEditor;
				uniform half _MotionIntensityValue;
				uniform half _MotionSmallDelayValue;
				uniform half _MotionSmallPushValue;
				uniform half _MotionTinyIntensityValue;
				uniform half _MotionDistValue;
				uniform half4 _motion_tiny_vert_mode;
				uniform half4 _motion_tiny_proc_mode;
				uniform half _motion_tiny_mask_mode;
				uniform half4 _MotionTinyMaskRemap;
				uniform half _MotionTinyMaskMode;
				uniform half _MotionTinyTillingValue;
				uniform half _MotionTinySpeedValue;
				uniform half _MotionTinyNoiseValue;
				uniform half _MotionBasePivotValue;
				uniform half _MotionBasePhaseValue;
				uniform half _MotionBaseTillingValue;
				uniform half _MotionBaseSpeedValue;
				uniform half _MotionBaseNoiseValue;
				uniform half _MotionBaseDelayValue;
				uniform half _MotionBasePushValue;
				uniform half _motion_small_mode;
				uniform half _MotionBaseIntensityValue;
				uniform half4 _motion_base_vert_mode;
				uniform half4 _motion_base_proc_mode;
				uniform half _motion_base_mask_mode;
				uniform half4 _MotionBaseMaskRemap;
				uniform half _MotionBaseMaskMode;
				uniform half _NormalFlattenValue;
				uniform half3 _NormalSphereOffsetValue;
				uniform half _NormalSphereValue;
				uniform half _NormalComputeValue;
				uniform half4 _normal_vert_mode;
				uniform half4 _NormalMeshRemap;
				uniform half _NormalMeshValue;
				uniform half _NormalMeshMode;
				uniform half _DisableSRPBatcher;
				uniform half _SubsurfaceCategory;
				uniform half _SubsurfaceEnd;
				uniform half _SubsurfaceDirectValue;
				uniform half _SubsurfaceNormalValue;
				uniform half _SubsurfaceAmbientValue;
				uniform half _SubsurfaceShadowValue;
				uniform half _EmissiveCategory;
				uniform half _EmissiveEnd;
				uniform half _EmissivePowerMode;
				uniform half _EmissivePowerValue;
				uniform half _EmissiveFlagMode;
				uniform half _DitherCategory;
				uniform half _DitherEnd;
				uniform half _CutoutCategory;
				uniform half _CutoutEnd;
				uniform half _CutoutSpace;
				uniform half _CutoutBakeMode;
				uniform half _WetnessCategory;
				uniform half _WetnessEnd;
				uniform half _WetnessBakeMode;
				uniform half _OverlayCategory;
				uniform half _OverlayEnd;
				uniform half _OverlaySpace;
				uniform half _OverlayBakeMode;
				uniform half _DrynessCategory;
				uniform half _DrynessEnd;
				uniform half _DrynessSpace;
				uniform half _DrynessBakeMode;
				uniform half _TintingCategory;
				uniform half _TintingEnd;
				uniform half _TintingSpace;
				uniform half _TintingBakeMode;
				uniform half _VariationCategory;
				uniform half _VariationEnd;
				uniform half _GradientCategory;
				uniform half _GradientEnd;
				uniform half _GradientBakeMode;
				uniform half _OcclusionCategory;
				uniform half _OcclusionEnd;
				uniform half _OcclusionBakeMode;
				uniform half _DetailCategory;
				uniform half _DetailEnd;
				uniform half _ThirdSampleMode;
				uniform half _ThirdCoordMode;
				uniform half4 _ThirdCoordValue;
				uniform half _ThirdMaskSampleMode;
				uniform half _ThirdMaskCoordMode;
				uniform half4 _ThirdMaskCoordValue;
				uniform half _ThirdBakeMode;
				uniform half _LayerCategory;
				uniform half _LayerEnd;
				uniform half _SecondSampleMode;
				uniform half _SecondCoordMode;
				uniform half4 _SecondCoordValue;
				uniform half _SecondMaskSampleMode;
				uniform half _SecondMaskCoordMode;
				uniform half4 _SecondMaskCoordValue;
				uniform half _SecondBakeMode;
				uniform half _MainCategory;
				uniform half _MainEnd;
				uniform half _MainSampleMode;
				uniform half _MainCoordMode;
				uniform half4 _MainCoordValue;
				uniform half _MainMultiMaskInfo;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
				SamplerState sampler_Linear_Repeat_Aniso8;
				SamplerState sampler_Point_Repeat;
				uniform half4 _main_coord_value;
				uniform half _MainAlbedoValue;
				uniform half4 _MainColorTwo;
				uniform half4 _MainColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
				uniform half _MainMetallicValue;
				uniform half4 _MainOcclusionRemap;
				uniform half _MainOcclusionValue;
				uniform half4 _MainSmoothnessRemap;
				uniform half _MainSmoothnessValue;
				uniform half4 _MainMultiRemap;
				uniform half _MainColorMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
				uniform half _MainNormalValue;
				uniform half _MainAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
				uniform half4 _second_coord_value;
				uniform half _SecondAlbedoValue;
				uniform half4 _SecondColorTwo;
				uniform half4 _SecondColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
				uniform half _SecondMetallicValue;
				uniform half4 _SecondOcclusionRemap;
				uniform half _SecondOcclusionValue;
				uniform half4 _SecondSmoothnessRemap;
				uniform half _SecondSmoothnessValue;
				uniform half4 _SecondMultiRemap;
				uniform half _SecondColorMode;
				uniform half _SecondBlendAlbedoValue;
				uniform half _SecondIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
				uniform half4 _second_mask_coord_value;
				uniform half4 _SecondMaskRemap;
				uniform half _SecondMaskValue;
				uniform half4 _SecondLumaRemap;
				uniform half _SecondLumaValue;
				uniform half4 _SecondProjRemap;
				uniform half _SecondProjValue;
				uniform half4 _second_vert_mode;
				uniform half4 _SecondMeshRemap;
				uniform half _SecondMeshValue;
				uniform half _SecondMeshMode;
				uniform half _SecondElementMode;
				uniform half _SecondGlobalValue;
				uniform half4 _SecondBlendRemap;
				uniform half _SecondBlendIntensityValue;
				uniform half _SecondBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
				uniform half _SecondNormalValue;
				uniform half _SecondBlendShaderValue;
				uniform half _SecondAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
				uniform half4 _third_coord_value;
				uniform half _ThirdAlbedoValue;
				uniform half4 _ThirdColorTwo;
				uniform half4 _ThirdColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
				uniform half _ThirdMetallicValue;
				uniform half4 _ThirdOcclusionRemap;
				uniform half _ThirdOcclusionValue;
				uniform half4 _ThirdSmoothnessRemap;
				uniform half _ThirdSmoothnessValue;
				uniform half4 _ThirdMultiRemap;
				uniform half _ThirdColorMode;
				uniform half _ThirdBlendAlbedoValue;
				uniform half _ThirdIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
				uniform half4 _third_mask_coord_value;
				uniform half4 _ThirdMaskRemap;
				uniform half _ThirdMaskValue;
				uniform half4 _ThirdLumaRemap;
				uniform half _ThirdLumaValue;
				uniform half4 _third_vert_mode;
				uniform half4 _ThirdMeshRemap;
				uniform half _ThirdMeshValue;
				uniform half _ThirdMeshMode;
				uniform half4 _ThirdProjRemap;
				uniform half _ThirdProjValue;
				uniform half _ThirdElementMode;
				uniform half _ThirdGlobalValue;
				uniform half4 _ThirdBlendRemap;
				uniform half _ThirdBlendIntensityValue;
				uniform half _ThirdBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
				uniform half _ThirdNormalValue;
				uniform half _ThirdBlendShaderValue;
				uniform half _ThirdAlphaClipValue;
				uniform half4 _OcclusionColorTwo;
				uniform half4 _OcclusionColorOne;
				uniform half4 _occlusion_vert_mode;
				uniform half4 _OcclusionMeshRemap;
				uniform half _OcclusionMeshMode;
				uniform half _OcclusionIntensityValue;
				uniform half4 _GradientColorTwo;
				uniform half4 _GradientColorOne;
				uniform half4 _gradient_vert_mode;
				uniform half4 _GradientMeshRemap;
				uniform half _GradientMeshMode;
				uniform half _GradientIntensityValue;
				uniform half _GradientMultiValue;
				uniform half4 _VariationColorTwo;
				uniform half4 _VariationColorOne;
				uniform half _VariationNoisePivotValue;
				uniform half _VariationNoiseTillingValue;
				uniform half4 _VariationNoiseRemap;
				uniform half _VariationIntensityValue;
				uniform half _VariationMultiValue;
				uniform half _TintingElementMode;
				uniform half _TintingGlobalValue;
				uniform half _TintingGrayValue;
				uniform float4 _TintingColor;
				uniform half _TintingIntensityValue;
				uniform half _TintingMultiValue;
				uniform half4 _TintingLumaRemap;
				uniform half _TintingLumaValue;
				uniform half4 _tinting_vert_mode;
				uniform half4 _TintingMeshRemap;
				uniform half _TintingMeshValue;
				uniform half _TintingMeshMode;
				uniform half4 _TintingBlendRemap;
				uniform half _DrynessElementMode;
				uniform half _DrynessGlobalValue;
				uniform half _DrynessGrayValue;
				uniform float4 _DrynessColor;
				uniform half _DrynessIntensityValue;
				uniform half _DrynessMultiValue;
				uniform half4 _DrynessLumaRemap;
				uniform half _DrynessLumaValue;
				uniform half4 _dryness_vert_mode;
				uniform half4 _DrynessMeshRemap;
				uniform half _DrynessMeshValue;
				uniform half _DrynessMeshMode;
				uniform half4 _DrynessBlendRemap;
				uniform half _DrynessSmoothnessValue;
				uniform half _DrynessSubsurfaceValue;
				uniform half3 _motion_highlight_color;
				uniform half _MotionHighlightValue;
				uniform half4 _MotionHighlightColor;
				uniform half4 _OverlayColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
				uniform half4 _overlay_coord_value;
				uniform half _OverlaySampleMode;
				uniform half _OverlayCoordMode;
				uniform half4 _OverlayCoordValue;
				uniform half _OverlayTextureMode;
				uniform half _OverlayGlitterIntensityValue;
				uniform half4 _OverlayGlitterColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
				uniform half _OverlayGlitterTillingValue;
				uniform half _OverlayGlitterDistValue;
				uniform half _OverlayIntensityValue;
				uniform half4 _OverlayProjRemap;
				uniform half _OverlayProjValue;
				uniform half4 _OverlayLumaRemap;
				uniform half _OverlayLumaValue;
				uniform half4 _overlay_vert_mode;
				uniform half4 _OverlayMeshRemap;
				uniform half _OverlayMeshValue;
				uniform half _OverlayMeshMode;
				uniform half _OverlayElementMode;
				uniform half _OverlayGlobalValue;
				uniform half4 _OverlayBlendRemap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
				uniform half _OverlayNormalValue;
				uniform half _OverlaySmoothnessValue;
				uniform half _OverlaySubsurfaceValue;
				uniform half4 _WetnessWaterColor;
				uniform half _WetnessWaterIntensityValue;
				uniform half _WetnessIntensityValue;
				uniform half _WetnessElementMode;
				uniform half _WetnessGlobalValue;
				uniform half4 _wetness_vert_mode;
				uniform half4 _WetnessMeshRemap;
				uniform half _WetnessMeshValue;
				uniform half _WetnessMeshMode;
				uniform half4 _wetness_water_vert_mode;
				uniform half4 _WetnessWaterMeshRemap;
				uniform half _WetnessWaterMeshValue;
				uniform half _WetnessWaterMeshMode;
				uniform half _WetnessWaterBaseValue;
				uniform half4 _WetnessWaterBlendRemap;
				uniform half _WetnessContrastValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
				uniform half _WetnessDropsTillingValue;
				uniform half _WetnessDropsIntensityValue;
				uniform half _WetnessDropsNormalValue;
				uniform half _WetnessDropsDistValue;
				uniform half4 _wetness_drops_vert_mode;
				uniform half4 _WetnessDropsMeshRemap;
				uniform half _WetnessDropsMeshValue;
				uniform half _WetnessDropsMeshMode;
				uniform half _WetnessSmoothnessValue;
				uniform half _CutoutIntensityValue;
				uniform half _CutoutElementMode;
				uniform half _CutoutGlobalValue;
				uniform half _CutoutAlphaValue;
				uniform half _CutoutNoiseTillingValue;
				uniform half _CutoutNoiseValue;
				uniform half4 _cutout_vert_mode;
				uniform half4 _CutoutMeshRemap;
				uniform half _CutoutMeshValue;
				uniform half _CutoutMeshMode;
				uniform half _CutoutMultiValue;
				uniform half _DitherConstantValue;
				uniform half4 TVE_DitherParams;
				uniform half _DitherProximityMaxValue;
				uniform half _DitherProximityMinValue;
				uniform half _DitherProximityValue;
				uniform half _DitherDistanceMinValue;
				uniform half _DitherDistanceMaxValue;
				uniform half _DitherDistanceValue;
				uniform half _DitherGlancingAngleValue;
				uniform half _DitherGlancingValue;
				uniform half _DitherNoiseTillingValue;
				uniform half _DitherMultiValue;
				uniform half4 _emissive_vert_mode;
				uniform half4 _EmissiveMeshRemap;
				uniform half _EmissiveMeshValue;
				uniform half _EmissiveMeshMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
				uniform half4 _emissive_coord_value;
				uniform half _EmissiveSampleMode;
				uniform half _EmissiveCoordMode;
				uniform half4 _EmissiveCoordValue;
				uniform half4 _EmissiveMaskRemap;
				uniform half _EmissiveMaskValue;
				uniform half _EmissiveIntensityValue;
				uniform half4 _EmissiveColor;
				uniform half _EmissiveElementMode;
				uniform half _EmissiveGlobalValue;
				uniform half _EmissiveColorMode;
				uniform float _emissive_power_value;
				uniform half4 _SubsurfaceColor;
				uniform half _SubsurfaceIntensityValue;
				uniform half _SubsurfaceElementMode;
				uniform half _SubsurfaceGlobalValue;
				uniform half _SubsurfaceMultiValue;
				uniform half3 TVE_MainLightDirection;
				uniform half _SubsurfaceAproxInfo;
				uniform half3 _render_normal;
				uniform half _RenderSpecular;


				float4 mod289( float4 x )
				{
					return x - floor(x * 0.00346020761) * 289.0;
				}
				
				float4 perm( float4 x )
				{
					    return mod289((x * 34.0 + 1.0) * x);
				}
				
				float SimpleNoise3D( float3 p )
				{
					    // Compute integer and fractional parts.
					    float3 i = floor(p);
					    float3 f = p - i;
					    // Cubic interpolation (smoothstep)
					    f = f * f * (3.0 - 2.0 * f);
					    // Build 4-component vectors using swizzling.
					    // a = (i.x, i.x+1, i.y, i.y+1)
					    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
					    // Permutations along the x and y axes.
					    float4 k1 = perm(a.xyxy);
					    float4 k2 = perm(k1.xyxy + a.zzww);
					    // Incorporate the z component.
					    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
					    float4 k3 = perm(c);
					    float4 k4 = perm(c + 1.0);
					    // Map results to the [0,1] range.
					    float4 o1 = frac(k3 * 0.0243902439);
					    float4 o2 = frac(k4 * 0.0243902439);
					    // Interpolate along z, then x, then y.
					    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
					    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
					    return lerp(o4.x, o4.y, f.y); 
				}
				
				float2 DecodeFloatToVector2( float enc )
				{
					float2 result ;
					result.y = enc % 2048;
					result.x = floor(enc / 2048);
					return result / (2048 - 1);
				}
				
				float3 ASESafeNormalize(float3 inVec)
				{
					float dp3 = max(1.175494351e-38, dot(inVec, inVec));
					return inVec* rsqrt(dp3);
				}
				
				void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
				{
					ZX = WorldPosition.xz * Coords.xx - Coords.zz;
					ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
					XY = WorldPosition.xy * Coords.xy - Coords.zw;
				}
				
				half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
				{
					half3 powNormal = abs( WorldNormal.xyz );
					half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
					weights /= ( weights.x + weights.y + weights.z ).xxx;
					T1 = weights.y;
					T2 = weights.x;
					T3 = weights.z;
				}
				
				half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
					half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
					half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
					return tex1 * T1 + tex2 * T2 + tex3 * T3;
				}
				
				void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
				{
					half2 vertex1, vertex2, vertex3;
					// Scaling of the input
					half2 uv = UV * 3.464; // 2 * sqrt (3)
					// Skew input space into simplex triangle grid
					const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
					half2 skewedCoord = mul( gridToSkewedGrid, uv );
					// Compute local triangle vertex IDs and local barycentric coordinates
					int2 baseId = int2( floor( skewedCoord ) );
					half3 temp = half3( frac( skewedCoord ), 0 );
					temp.z = 1.0 - temp.x - temp.y;
					if ( temp.z > 0.0 )
					{
						W1 = temp.z;
						W2 = temp.y;
						W3 = temp.x;
						vertex1 = baseId;
						vertex2 = baseId + int2( 0, 1 );
						vertex3 = baseId + int2( 1, 0 );
					}
					else
					{
						W1 = -temp.z;
						W2 = 1.0 - temp.y;
						W3 = 1.0 - temp.x;
						vertex1 = baseId + int2( 1, 1 );
						vertex2 = baseId + int2( 1, 0 );
						vertex3 = baseId + int2( 0, 1 );
					}
					UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
					UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
					UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
					return;
				}
				
				float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
					half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
					half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
					half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
					return tex1 * W1 + tex2 * W2 + tex3 * W3;
				}
				
				half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					half4 tex1, tex2, tex3;
					ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
					half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
					half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
					half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					return texZX * T1 + texZY * T2 + texXY * T3;
				}
				
				half ShadowPassCheck33_g171048( half True, half False )
				{
					half result;
					#if defined(UNITY_PASS_DEFERRED)
						result = True;
					#else
						result = False;
					#endif
					return result;
				}
				
				half ShadowPassCheck33_g171049( half True, half False )
				{
					half result;
					#if defined(UNITY_PASS_DEFERRED)
						result = True;
					#else
						result = False;
					#endif
					return result;
				}
				

				v2f VertexFunction (appdata v  ) {
					UNITY_SETUP_INSTANCE_ID(v);
					v2f o;
					UNITY_INITIALIZE_OUTPUT(v2f,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

					TVEModelData Data16_g171023 = (TVEModelData)0;
					float In_Dummy16_g171023 = 0.0;
					TVEModelData Data16_g171012 = (TVEModelData)0;
					half Dummy1575_g170996 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
					float In_Dummy16_g171012 = Dummy1575_g170996;
					TVEModelData Data16_g170972 = (TVEModelData)0;
					float In_Dummy16_g170972 = 0.0;
					TVEModelData Data16_g170744 = (TVEModelData)0;
					half Dummy181_g170727 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
					float In_Dummy16_g170744 = Dummy181_g170727;
					TVEModelData Data16_g170681 = (TVEModelData)0;
					half Dummy181_g170679 = ( _SizeFadeCategory + _SizeFadeEnd );
					float In_Dummy16_g170681 = Dummy181_g170679;
					TVEModelData Data16_g170585 = (TVEModelData)0;
					half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
					float In_Dummy16_g170585 = Dummy181_g170582;
					TVEModelData Data16_g170580 = (TVEModelData)0;
					float In_Dummy16_g170580 = 0.0;
					TVEModelData Data16_g170482 = (TVEModelData)0;
					half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
					float In_Dummy16_g170482 = Dummy207_g170478;
					half3 PositionOS131_g170478 = v.vertex.xyz;
					float3 In_PositionOS16_g170482 = PositionOS131_g170478;
					float3 ase_positionWS = mul( unity_ObjectToWorld, float4( ( v.vertex ).xyz, 1 ) ).xyz;
					float3 vertexToFrag73_g170478 = ase_positionWS;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170482 = PositionWS122_g170478;
					float4x4 break19_g170488 = unity_ObjectToWorld;
					float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
					float3 temp_output_340_7_g170478 = appendResult20_g170488;
					float4x4 break19_g170490 = unity_ObjectToWorld;
					float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
					float3 _Vector0 = float3(0,0,0);
					float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
					float3 break233_g170478 = PositionOS131_g170478;
					float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch229_g170478 = _Vector0;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch229_g170478 = appendResult60_g170486;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch229_g170478 = appendResult234_g170478;
					#else
					float3 staticSwitch229_g170478 = _Vector0;
					#endif
					half3 PivotOS149_g170478 = staticSwitch229_g170478;
					float3 temp_output_122_0_g170490 = PivotOS149_g170478;
					float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
					float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#else
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#endif
					float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170482 = PositionWO132_g170478;
					float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
					float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
					float3 In_PivotOS16_g170482 = PivotOS149_g170478;
					float3 In_PivotWS16_g170482 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170482 = PivotWO133_g170478;
					half3 NormalOS134_g170478 = v.normal;
					float3 In_NormalOS16_g170482 = NormalOS134_g170478;
					float3 ase_normalWS = UnityObjectToWorldNormal( v.normal );
					float3 normalizedWorldNormal = normalize( ase_normalWS );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
					float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
					float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0.0 ) ).xyz );
					half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
					float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
					half4 TangentlOS153_g170478 = v.tangent;
					float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = v.ase_color;
					float4 In_VertexData16_g170482 = VertexMasks171_g170478;
					float mulTime113_g170485 = _Time.y * 0.52;
					float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float3 break319_g170478 = PivotWO133_g170478;
					half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
					float mulTime113_g170484 = _Time.y * 0.27;
					float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float4 break33_g170487 = _object_phase_mode;
					float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
					float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
					float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
					float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
					float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
					float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
					half4 MotionMasks176_g170478 = appendResult177_g170478;
					float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
					half Object_HeightValue267_g170478 = _ObjectHeightValue;
					half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
					float temp_output_270_0_g170478 = (PositionOS131_g170478).y;
					half Bounds_HeightMask274_g170478 = saturate( ( temp_output_270_0_g170478 / Object_HeightValue267_g170478 ) );
					half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
					float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
					half4 BoundsData254_g170478 = appendResult253_g170478;
					float4 In_BoundsData16_g170482 = BoundsData254_g170478;
					float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
					{
					Data16_g170482.Dummy = In_Dummy16_g170482;
					Data16_g170482.PositionOS = In_PositionOS16_g170482;
					Data16_g170482.PositionWS = In_PositionWS16_g170482;
					Data16_g170482.PositionWO = In_PositionWO16_g170482;
					Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
					Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
					Data16_g170482.PivotOS = In_PivotOS16_g170482;
					Data16_g170482.PivotWS = In_PivotWS16_g170482;
					Data16_g170482.PivotWO = In_PivotWO16_g170482;
					Data16_g170482.NormalOS = In_NormalOS16_g170482;
					Data16_g170482.NormalWS = In_NormalWS16_g170482;
					Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
					Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
					Data16_g170482.TangentOS = In_TangentOS16_g170482;
					Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
					Data16_g170482.VertexData = In_VertexData16_g170482;
					Data16_g170482.PhaseData = In_PhaseData16_g170482;
					Data16_g170482.BoundsData = In_BoundsData16_g170482;
					Data16_g170482.RotationData = In_RotationData16_g170482;
					}
					TVEModelData Data15_g170581 = Data16_g170482;
					float Out_Dummy15_g170581 = 0;
					float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
					float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170581 = Data15_g170581.Dummy;
					Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
					Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
					Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
					Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
					Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
					Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
					Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
					Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
					Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
					Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
					Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
					Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
					Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
					Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
					Out_VertexData15_g170581 = Data15_g170581.VertexData;
					Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
					Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
					Out_RotationData15_g170581 = Data15_g170581.RotationData;
					}
					float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
					float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
					float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
					float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
					float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
					float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
					float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
					float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
					float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
					float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
					float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
					float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
					float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
					float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
					float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
					float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
					float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
					float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
					float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
					{
					Data16_g170580.Dummy = In_Dummy16_g170580;
					Data16_g170580.PositionOS = In_PositionOS16_g170580;
					Data16_g170580.PositionWS = In_PositionWS16_g170580;
					Data16_g170580.PositionWO = In_PositionWO16_g170580;
					Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
					Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
					Data16_g170580.PivotOS = In_PivotOS16_g170580;
					Data16_g170580.PivotWS = In_PivotWS16_g170580;
					Data16_g170580.PivotWO = In_PivotWO16_g170580;
					Data16_g170580.NormalOS = In_NormalOS16_g170580;
					Data16_g170580.NormalWS = In_NormalWS16_g170580;
					Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
					Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
					Data16_g170580.TangentOS = In_TangentOS16_g170580;
					Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
					Data16_g170580.VertexData = In_VertexData16_g170580;
					Data16_g170580.PhaseData = In_PhaseData16_g170580;
					Data16_g170580.BoundsData = In_BoundsData16_g170580;
					Data16_g170580.RotationData = In_RotationData16_g170580;
					}
					TVEModelData Data15_g170583 = Data16_g170580;
					float Out_Dummy15_g170583 = 0;
					float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
					float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170583 = Data15_g170583.Dummy;
					Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
					Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
					Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
					Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
					Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
					Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
					Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
					Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
					Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
					Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
					Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
					Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
					Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
					Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
					Out_VertexData15_g170583 = Data15_g170583.VertexData;
					Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
					Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
					Out_RotationData15_g170583 = Data15_g170583.RotationData;
					}
					half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
					float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
					float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
					float4x4 break117_g170584 = unity_CameraToWorld;
					float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
					float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
					float3 break201_g170582 = cross( lerpResult209_g170582 , half3( 0, 1, 0 ) );
					float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
					float4 temp_output_149_27_g170582 = Out_PhaseData15_g170583;
					half4 Model_PhaseData218_g170582 = temp_output_149_27_g170582;
					float temp_output_222_0_g170582 = ( ((Model_PhaseData218_g170582).z*2.0 + -1.0) * _PerspectivePhaseValue );
					float3 appendResult224_g170582 = (float3(temp_output_222_0_g170582 , 0.0 , temp_output_222_0_g170582));
					float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
					float saferPower192_g170582 = abs( dotResult189_g170582 );
					#ifdef TVE_PERSPECTIVE
					float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz + appendResult224_g170582 ) * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
					#else
					float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
					#endif
					half3 Final_Position178_g170582 = staticSwitch211_g170582;
					float3 In_PositionOS16_g170585 = Final_Position178_g170582;
					float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
					float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
					float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
					float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
					float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
					float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
					float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
					float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
					float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
					float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
					float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
					float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
					float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
					float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
					float4 In_PhaseData16_g170585 = temp_output_149_27_g170582;
					float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
					float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
					{
					Data16_g170585.Dummy = In_Dummy16_g170585;
					Data16_g170585.PositionOS = In_PositionOS16_g170585;
					Data16_g170585.PositionWS = In_PositionWS16_g170585;
					Data16_g170585.PositionWO = In_PositionWO16_g170585;
					Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
					Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
					Data16_g170585.PivotOS = In_PivotOS16_g170585;
					Data16_g170585.PivotWS = In_PivotWS16_g170585;
					Data16_g170585.PivotWO = In_PivotWO16_g170585;
					Data16_g170585.NormalOS = In_NormalOS16_g170585;
					Data16_g170585.NormalWS = In_NormalWS16_g170585;
					Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
					Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
					Data16_g170585.TangentOS = In_TangentOS16_g170585;
					Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
					Data16_g170585.VertexData = In_VertexData16_g170585;
					Data16_g170585.PhaseData = In_PhaseData16_g170585;
					Data16_g170585.BoundsData = In_BoundsData16_g170585;
					Data16_g170585.RotationData = In_RotationData16_g170585;
					}
					TVEModelData Data15_g170680 = Data16_g170585;
					float Out_Dummy15_g170680 = 0;
					float3 Out_PositionOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170680 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170680 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170680 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170680 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170680 = float3( 0,0,0 );
					float4 Out_VertexData15_g170680 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170680 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170680 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170680 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170680 = Data15_g170680.Dummy;
					Out_PositionOS15_g170680 = Data15_g170680.PositionOS;
					Out_PositionWS15_g170680 = Data15_g170680.PositionWS;
					Out_PositionWO15_g170680 = Data15_g170680.PositionWO;
					Out_PositionRawOS15_g170680 = Data15_g170680.PositionRawOS;
					Out_PositionAddOS15_g170680 = Data15_g170680.PositionAddOS;
					Out_PivotOS15_g170680 = Data15_g170680.PivotOS;
					Out_PivotWS15_g170680 = Data15_g170680.PivotWS;
					Out_PivotWO15_g170680 = Data15_g170680.PivotWO;
					Out_NormalOS15_g170680 = Data15_g170680.NormalOS;
					Out_NormalWS15_g170680 = Data15_g170680.NormalWS;
					Out_NormalRawOS15_g170680 = Data15_g170680.NormalRawOS;
					Out_NormalRawWS15_g170680 = Data15_g170680.NormalRawWS;
					Out_TangentOS15_g170680 = Data15_g170680.TangentOS;
					Out_ViewDirWS15_g170680 = Data15_g170680.ViewDirWS;
					Out_VertexData15_g170680 = Data15_g170680.VertexData;
					Out_PhaseData15_g170680 = Data15_g170680.PhaseData;
					Out_BoundsData15_g170680 = Data15_g170680.BoundsData;
					Out_RotationData15_g170680 = Data15_g170680.RotationData;
					}
					half3 Model_PositionOS147_g170679 = Out_PositionOS15_g170680;
					float3 temp_cast_5 = (1.0).xxx;
					float3 temp_output_210_19_g170679 = Out_PivotWO15_g170680;
					half3 Model_PivotWO162_g170679 = temp_output_210_19_g170679;
					float lerpResult216_g170679 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
					float temp_output_7_0_g170685 = _SizeFadeDistMaxValue;
					float temp_output_9_0_g170685 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170679 ) * lerpResult216_g170679 ) - temp_output_7_0_g170685 );
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170682 = Data204_g170496;
					float Out_Dummy15_g170682 = 0;
					float4 Out_CoatDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170682 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170682 = Data15_g170682.Dummy;
					Out_CoatDataRT15_g170682 = Data15_g170682.CoatDataRT;
					Out_PaintDataRT15_g170682 = Data15_g170682.PaintDataRT;
					Out_GlowDataRT15_g170682= Data15_g170682.GlowDataRT;
					Out_AtmoDataRT15_g170682= Data15_g170682.AtmoDataRT;
					Out_FadeDataRT15_g170682= Data15_g170682.FadeDataRT;
					Out_FormDataRT15_g170682 = Data15_g170682.FormDataRT;
					Out_FlowDataRT15_g170682 = Data15_g170682.FlowDataRT;
					}
					half4 Input_FormParams188_g170679 = Out_FormDataRT15_g170682;
					float temp_output_6_0_g170683 = saturate( (Input_FormParams188_g170679).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170683 = ( temp_output_6_0_g170683 + _SizeFadeElementMode );
					#else
					float staticSwitch14_g170683 = temp_output_6_0_g170683;
					#endif
					#ifdef TVE_SIZEFADE_ELEMENT
					float staticSwitch194_g170679 = staticSwitch14_g170683;
					#else
					float staticSwitch194_g170679 = TVE_FormParams.w;
					#endif
					float lerpResult213_g170679 = lerp( 1.0 , staticSwitch194_g170679 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
					half SizeFade_MaskGlobal192_g170679 = lerpResult213_g170679;
					half User_Mask232_g170679 = 1.0;
					float temp_output_189_0_g170679 = ( saturate( ( ( temp_output_9_0_g170685 / ( _SizeFadeDistMinValue - temp_output_7_0_g170685 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170679 * User_Mask232_g170679 );
					float3 appendResult200_g170679 = (float3(temp_output_189_0_g170679 , temp_output_189_0_g170679 , temp_output_189_0_g170679));
					float3 appendResult201_g170679 = (float3(1.0 , temp_output_189_0_g170679 , 1.0));
					float3 lerpResult202_g170679 = lerp( appendResult200_g170679 , appendResult201_g170679 , _SizeFadeScaleMode);
					float3 lerpResult184_g170679 = lerp( temp_cast_5 , lerpResult202_g170679 , _SizeFadeIntensityValue);
					#ifdef TVE_SIZEFADE
					float3 staticSwitch199_g170679 = ( lerpResult184_g170679 * Model_PositionOS147_g170679 );
					#else
					float3 staticSwitch199_g170679 = Model_PositionOS147_g170679;
					#endif
					half3 Final_Position178_g170679 = staticSwitch199_g170679;
					float3 In_PositionOS16_g170681 = Final_Position178_g170679;
					float3 In_PositionWS16_g170681 = Out_PositionWS15_g170680;
					float3 In_PositionWO16_g170681 = Out_PositionWO15_g170680;
					float3 In_PositionRawOS16_g170681 = Out_PositionRawOS15_g170680;
					float3 In_PositionAddOS16_g170681 = Out_PositionAddOS15_g170680;
					float3 temp_output_210_24_g170679 = Out_PivotOS15_g170680;
					float3 In_PivotOS16_g170681 = temp_output_210_24_g170679;
					float3 In_PivotWS16_g170681 = Out_PivotWS15_g170680;
					float3 In_PivotWO16_g170681 = temp_output_210_19_g170679;
					float3 In_NormalOS16_g170681 = Out_NormalOS15_g170680;
					float3 In_NormalWS16_g170681 = Out_NormalWS15_g170680;
					float3 In_NormalRawOS16_g170681 = Out_NormalRawOS15_g170680;
					float3 In_NormalRawWS16_g170681 = Out_NormalRawWS15_g170680;
					float4 In_TangentOS16_g170681 = Out_TangentOS15_g170680;
					float3 In_ViewDirWS16_g170681 = Out_ViewDirWS15_g170680;
					float4 In_VertexData16_g170681 = Out_VertexData15_g170680;
					float4 In_PhaseData16_g170681 = Out_PhaseData15_g170680;
					float4 In_BoundsData16_g170681 = Out_BoundsData15_g170680;
					float4 In_RotationData16_g170681 = Out_RotationData15_g170680;
					{
					Data16_g170681.Dummy = In_Dummy16_g170681;
					Data16_g170681.PositionOS = In_PositionOS16_g170681;
					Data16_g170681.PositionWS = In_PositionWS16_g170681;
					Data16_g170681.PositionWO = In_PositionWO16_g170681;
					Data16_g170681.PositionRawOS = In_PositionRawOS16_g170681;
					Data16_g170681.PositionAddOS = In_PositionAddOS16_g170681;
					Data16_g170681.PivotOS = In_PivotOS16_g170681;
					Data16_g170681.PivotWS = In_PivotWS16_g170681;
					Data16_g170681.PivotWO = In_PivotWO16_g170681;
					Data16_g170681.NormalOS = In_NormalOS16_g170681;
					Data16_g170681.NormalWS = In_NormalWS16_g170681;
					Data16_g170681.NormalRawOS = In_NormalRawOS16_g170681;
					Data16_g170681.NormalRawWS = In_NormalRawWS16_g170681;
					Data16_g170681.TangentOS = In_TangentOS16_g170681;
					Data16_g170681.ViewDirWS = In_ViewDirWS16_g170681;
					Data16_g170681.VertexData = In_VertexData16_g170681;
					Data16_g170681.PhaseData = In_PhaseData16_g170681;
					Data16_g170681.BoundsData = In_BoundsData16_g170681;
					Data16_g170681.RotationData = In_RotationData16_g170681;
					}
					TVEModelData Data15_g170743 = Data16_g170681;
					float Out_Dummy15_g170743 = 0;
					float3 Out_PositionOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170743 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170743 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170743 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170743 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170743 = float3( 0,0,0 );
					float4 Out_VertexData15_g170743 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170743 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170743 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170743 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170743 = Data15_g170743.Dummy;
					Out_PositionOS15_g170743 = Data15_g170743.PositionOS;
					Out_PositionWS15_g170743 = Data15_g170743.PositionWS;
					Out_PositionWO15_g170743 = Data15_g170743.PositionWO;
					Out_PositionRawOS15_g170743 = Data15_g170743.PositionRawOS;
					Out_PositionAddOS15_g170743 = Data15_g170743.PositionAddOS;
					Out_PivotOS15_g170743 = Data15_g170743.PivotOS;
					Out_PivotWS15_g170743 = Data15_g170743.PivotWS;
					Out_PivotWO15_g170743 = Data15_g170743.PivotWO;
					Out_NormalOS15_g170743 = Data15_g170743.NormalOS;
					Out_NormalWS15_g170743 = Data15_g170743.NormalWS;
					Out_NormalRawOS15_g170743 = Data15_g170743.NormalRawOS;
					Out_NormalRawWS15_g170743 = Data15_g170743.NormalRawWS;
					Out_TangentOS15_g170743 = Data15_g170743.TangentOS;
					Out_ViewDirWS15_g170743 = Data15_g170743.ViewDirWS;
					Out_VertexData15_g170743 = Data15_g170743.VertexData;
					Out_PhaseData15_g170743 = Data15_g170743.PhaseData;
					Out_BoundsData15_g170743 = Data15_g170743.BoundsData;
					Out_RotationData15_g170743 = Data15_g170743.RotationData;
					}
					float3 temp_output_2503_0_g170727 = Out_PositionOS15_g170743;
					float3 In_PositionOS16_g170744 = temp_output_2503_0_g170727;
					float3 temp_output_2503_16_g170727 = Out_PositionWS15_g170743;
					float3 In_PositionWS16_g170744 = temp_output_2503_16_g170727;
					float3 temp_output_2503_17_g170727 = Out_PositionWO15_g170743;
					float3 In_PositionWO16_g170744 = temp_output_2503_17_g170727;
					float3 In_PositionRawOS16_g170744 = Out_PositionRawOS15_g170743;
					float3 temp_cast_35 = (0.0).xxx;
					float4 temp_output_2503_29_g170727 = Out_VertexData15_g170743;
					half4 Model_VertexMasks518_g170727 = temp_output_2503_29_g170727;
					float4 break1689_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170728 = _motion_small_vert_mode;
					float temp_output_30_0_g170728 = ( break1689_g170727.x * break33_g170728.x );
					float temp_output_29_0_g170728 = ( break1689_g170727.y * break33_g170728.y );
					float temp_output_31_0_g170728 = ( break1689_g170727.z * break33_g170728.z );
					float temp_output_28_0_g170728 = ( temp_output_30_0_g170728 + temp_output_29_0_g170728 + temp_output_31_0_g170728 + ( break1689_g170727.w * break33_g170728.w ) );
					float temp_output_1727_0_g170727 = temp_output_28_0_g170728;
					float4 temp_output_2503_30_g170727 = Out_BoundsData15_g170743;
					half4 Model_BoundsData1322_g170727 = temp_output_2503_30_g170727;
					float4 break33_g170730 = _motion_small_proc_mode;
					float temp_output_30_0_g170730 = ( (Model_BoundsData1322_g170727).z * break33_g170730.x );
					float temp_output_29_0_g170730 = ( (Model_BoundsData1322_g170727).w * break33_g170730.y );
					float temp_output_1734_0_g170727 = ( temp_output_30_0_g170730 + temp_output_29_0_g170730 );
					float lerpResult1906_g170727 = lerp( temp_output_1727_0_g170727 , temp_output_1734_0_g170727 , _motion_small_mask_mode);
					float enc1805_g170727 = v.ase_texcoord.z;
					float2 localDecodeFloatToVector21805_g170727 = DecodeFloatToVector2( enc1805_g170727 );
					float2 break1804_g170727 = localDecodeFloatToVector21805_g170727;
					half Small_Mask_Legacy1806_g170727 = break1804_g170727.x;
					#ifdef TVE_LEGACY
					float staticSwitch1800_g170727 = Small_Mask_Legacy1806_g170727;
					#else
					float staticSwitch1800_g170727 = lerpResult1906_g170727;
					#endif
					float clampResult17_g170732 = clamp( staticSwitch1800_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170741 = _MotionSmallMaskRemap.x;
					float temp_output_9_0_g170741 = ( clampResult17_g170732 - temp_output_7_0_g170741 );
					float temp_output_6_0_g170739 = saturate( ( ( temp_output_9_0_g170741 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170739 = ( temp_output_6_0_g170739 + _MotionSmallMaskMode );
					#else
					float staticSwitch14_g170739 = temp_output_6_0_g170739;
					#endif
					half Small_Mask640_g170727 = staticSwitch14_g170739;
					float4 lerpResult836_g170752 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
					float2 Global_WindDirWS2542_g170727 = (lerpResult836_g170752).xy;
					half2 Input_WindDirWS803_g170753 = Global_WindDirWS2542_g170727;
					half3 Model_PositionWO162_g170727 = temp_output_2503_17_g170727;
					half3 Input_ModelPositionWO761_g170745 = Model_PositionWO162_g170727;
					float3 temp_output_2503_19_g170727 = Out_PivotWO15_g170743;
					half3 Model_PivotWO402_g170727 = temp_output_2503_19_g170727;
					half3 Input_ModelPivotsWO419_g170745 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170745 = _MotionSmallPivotValue;
					float3 lerpResult771_g170745 = lerp( Input_ModelPositionWO761_g170745 , Input_ModelPivotsWO419_g170745 , Input_MotionPivots629_g170745);
					float4 temp_output_2503_27_g170727 = Out_PhaseData15_g170743;
					half4 Model_PhaseData489_g170727 = temp_output_2503_27_g170727;
					half4 Input_ModelMotionData763_g170745 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170745 = _MotionSmallPhaseValue;
					half3 Small_Position1421_g170727 = ( lerpResult771_g170745 + ( (Input_ModelMotionData763_g170745).z * Input_MotionPhase764_g170745 * 5.0 ) );
					half3 Input_PositionWO419_g170753 = Small_Position1421_g170727;
					half Input_MotionTilling321_g170753 = ( _MotionSmallTillingValue + 0.2 );
					half2 Noise_Coord515_g170753 = ( -(Input_PositionWO419_g170753).xz * Input_MotionTilling321_g170753 * 0.005 );
					float2 temp_output_3_0_g170755 = Noise_Coord515_g170753;
					float2 temp_output_21_0_g170755 = Input_WindDirWS803_g170753;
					float lerpResult128_g170754 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170753 = _MotionSmallSpeedValue;
					half Noise_Speed516_g170753 = ( lerpResult128_g170754 * 0.02 * Input_MotionSpeed62_g170753 );
					float temp_output_15_0_g170755 = Noise_Speed516_g170753;
					float temp_output_23_0_g170755 = frac( temp_output_15_0_g170755 );
					float4 lerpResult39_g170755 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * temp_output_23_0_g170755 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * frac( ( temp_output_15_0_g170755 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170755 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170753 = lerpResult39_g170755;
					half2 Noise_DirWS858_g170753 = ((temp_output_635_0_g170753).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170753 = _MotionSmallNoiseValue;
					half Global_WInd769_g170752 = (lerpResult836_g170752).z;
					TVEGlobalData Data15_g170751 = Data204_g170496;
					float Out_Dummy15_g170751 = 0;
					float4 Out_CoatDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170751 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170751 = Data15_g170751.Dummy;
					Out_CoatDataRT15_g170751 = Data15_g170751.CoatDataRT;
					Out_PaintDataRT15_g170751 = Data15_g170751.PaintDataRT;
					Out_GlowDataRT15_g170751= Data15_g170751.GlowDataRT;
					Out_AtmoDataRT15_g170751= Data15_g170751.AtmoDataRT;
					Out_FadeDataRT15_g170751= Data15_g170751.FadeDataRT;
					Out_FormDataRT15_g170751 = Data15_g170751.FormDataRT;
					Out_FlowDataRT15_g170751 = Data15_g170751.FlowDataRT;
					}
					half4 Global_FlowParams2668_g170727 = Out_FlowDataRT15_g170751;
					half4 Input_GlobalFlow826_g170752 = Global_FlowParams2668_g170727;
					float temp_output_764_0_g170752 = (Input_GlobalFlow826_g170752).w;
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch612_g170752 = saturate( temp_output_764_0_g170752 );
					#else
					float staticSwitch612_g170752 = Global_WInd769_g170752;
					#endif
					float lerpResult853_g170752 = lerp( staticSwitch612_g170752 , saturate( (staticSwitch612_g170752*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
					half Input_MotionValue629_g170752 = _MotionIntensityValue;
					half Global_WindValue1855_g170727 = ( lerpResult853_g170752 * Input_MotionValue629_g170752 );
					half Input_WindValue881_g170753 = Global_WindValue1855_g170727;
					float lerpResult701_g170753 = lerp( 1.0 , Input_MotionNoise552_g170753 , Input_WindValue881_g170753);
					float2 lerpResult646_g170753 = lerp( Input_WindDirWS803_g170753 , Noise_DirWS858_g170753 , lerpResult701_g170753);
					half2 Small_DirWS817_g170753 = lerpResult646_g170753;
					float2 break823_g170753 = Small_DirWS817_g170753;
					half4 Noise_Params685_g170753 = temp_output_635_0_g170753;
					half Wind_Sinus820_g170753 = ( ((Noise_Params685_g170753).b*2.0 + -1.0) * Input_MotionNoise552_g170753 * 0.6 );
					float3 appendResult824_g170753 = (float3(break823_g170753.x , Wind_Sinus820_g170753 , break823_g170753.y));
					half Input_MotionDelay753_g170753 = _MotionSmallDelayValue;
					float lerpResult756_g170753 = lerp( 1.0 , ( Input_WindValue881_g170753 * Input_WindValue881_g170753 ) , Input_MotionDelay753_g170753);
					half Wind_Delay815_g170753 = lerpResult756_g170753;
					float3 appendResult825_g170753 = (float3(Wind_Delay815_g170753 , 1.0 , Wind_Delay815_g170753));
					float3 temp_output_827_0_g170753 = ( ( appendResult824_g170753 * Input_WindValue881_g170753 ) * appendResult825_g170753 );
					float2 break857_g170753 = Noise_DirWS858_g170753;
					float3 appendResult833_g170753 = (float3(break857_g170753.x , Wind_Sinus820_g170753 , break857_g170753.y));
					half Global_PushWave2675_g170727 = (Input_GlobalFlow826_g170752).z;
					half Input_PushWave890_g170753 = Global_PushWave2675_g170727;
					float2 temp_output_790_0_g170752 = (Input_GlobalFlow826_g170752).xy;
					half Global_PushAlpha1504_g170727 = saturate( length( temp_output_790_0_g170752 ) );
					half Input_PushAlpha806_g170753 = ( Global_PushAlpha1504_g170727 * _MotionSmallPushValue );
					float3 lerpResult840_g170753 = lerp( temp_output_827_0_g170753 , ( appendResult833_g170753 * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float3 staticSwitch829_g170753 = lerpResult840_g170753;
					#else
					float3 staticSwitch829_g170753 = temp_output_827_0_g170753;
					#endif
					float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
					float3 temp_output_847_0_g170753 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170753 , 0.0 ) ).xyz * ase_parentObjectScale );
					half3 Small_Squash1489_g170727 = temp_output_847_0_g170753;
					half3 Small_Motion789_g170727 = ( _MotionSmallIntensityValue * Small_Mask640_g170727 * Small_Squash1489_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch495_g170727 = Small_Motion789_g170727;
					#else
					float3 staticSwitch495_g170727 = temp_cast_35;
					#endif
					float3 temp_cast_38 = (0.0).xxx;
					half3 Model_PositionWS1819_g170727 = temp_output_2503_16_g170727;
					half Global_DistMask1820_g170727 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170727 ) / _MotionDistValue ) ) );
					float4 break1710_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170729 = _motion_tiny_vert_mode;
					float temp_output_30_0_g170729 = ( break1710_g170727.x * break33_g170729.x );
					float temp_output_29_0_g170729 = ( break1710_g170727.y * break33_g170729.y );
					float temp_output_31_0_g170729 = ( break1710_g170727.z * break33_g170729.z );
					float temp_output_28_0_g170729 = ( temp_output_30_0_g170729 + temp_output_29_0_g170729 + temp_output_31_0_g170729 + ( break1710_g170727.w * break33_g170729.w ) );
					float temp_output_1729_0_g170727 = temp_output_28_0_g170729;
					float4 break33_g170731 = _motion_tiny_proc_mode;
					float temp_output_30_0_g170731 = ( (Model_BoundsData1322_g170727).z * break33_g170731.x );
					float temp_output_29_0_g170731 = ( (Model_BoundsData1322_g170727).w * break33_g170731.y );
					float temp_output_1735_0_g170727 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 );
					float lerpResult1908_g170727 = lerp( temp_output_1729_0_g170727 , temp_output_1735_0_g170727 , _motion_tiny_mask_mode);
					half Tiny_Mask_Legacy1807_g170727 = break1804_g170727.y;
					#ifdef TVE_LEGACY
					float staticSwitch1810_g170727 = Tiny_Mask_Legacy1807_g170727;
					#else
					float staticSwitch1810_g170727 = lerpResult1908_g170727;
					#endif
					float clampResult17_g170733 = clamp( staticSwitch1810_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170742 = _MotionTinyMaskRemap.x;
					float temp_output_9_0_g170742 = ( clampResult17_g170733 - temp_output_7_0_g170742 );
					float temp_output_6_0_g170734 = saturate( ( ( temp_output_9_0_g170742 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170734 = ( temp_output_6_0_g170734 + _MotionTinyMaskMode );
					#else
					float staticSwitch14_g170734 = temp_output_6_0_g170734;
					#endif
					half Tiny_Mask218_g170727 = staticSwitch14_g170734;
					float3 temp_output_2503_20_g170727 = Out_NormalOS15_g170743;
					half3 Model_NormalOS554_g170727 = temp_output_2503_20_g170727;
					half3 Input_NormalOS533_g170747 = Model_NormalOS554_g170727;
					half3 Tiny_Position2469_g170727 = Model_PositionWO162_g170727;
					half3 Input_PositionWO500_g170747 = Tiny_Position2469_g170727;
					half Input_MotionTilling321_g170747 = ( _MotionTinyTillingValue + 0.1 );
					float lerpResult128_g170749 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170747 = _MotionTinySpeedValue;
					half3 Flutter_Noise535_g170747 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170747).xz * Input_MotionTilling321_g170747 * 0.005 ) + ( lerpResult128_g170749 * Input_MotionSpeed62_g170747 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
					half Input_MotionNoise542_g170747 = _MotionTinyNoiseValue;
					float3 lerpResult537_g170747 = lerp( ( Input_NormalOS533_g170747 * Flutter_Noise535_g170747 ) , Flutter_Noise535_g170747 , Input_MotionNoise542_g170747);
					half2 Input_WindDirWS803_g170758 = Global_WindDirWS2542_g170727;
					half3 Input_ModelPositionWO761_g170746 = Model_PositionWO162_g170727;
					half3 Input_ModelPivotsWO419_g170746 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170746 = _MotionBasePivotValue;
					float3 lerpResult771_g170746 = lerp( Input_ModelPositionWO761_g170746 , Input_ModelPivotsWO419_g170746 , Input_MotionPivots629_g170746);
					half4 Input_ModelMotionData763_g170746 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170746 = _MotionBasePhaseValue;
					half3 Base_Position1394_g170727 = ( lerpResult771_g170746 + ( (Input_ModelMotionData763_g170746).z * Input_MotionPhase764_g170746 * 5.0 ) );
					half3 Input_PositionWO419_g170758 = Base_Position1394_g170727;
					half Input_MotionTilling321_g170758 = ( _MotionBaseTillingValue + 0.2 );
					half2 Noise_Coord515_g170758 = ( -(Input_PositionWO419_g170758).xz * Input_MotionTilling321_g170758 * 0.005 );
					float2 temp_output_3_0_g170762 = Noise_Coord515_g170758;
					float2 temp_output_21_0_g170762 = Input_WindDirWS803_g170758;
					float mulTime113_g170761 = _Time.y * 0.02;
					float lerpResult128_g170761 = lerp( mulTime113_g170761 , ( ( mulTime113_g170761 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170758 = _MotionBaseSpeedValue;
					half Noise_Speed516_g170758 = ( lerpResult128_g170761 * Input_MotionSpeed62_g170758 );
					float temp_output_15_0_g170762 = Noise_Speed516_g170758;
					float temp_output_23_0_g170762 = frac( temp_output_15_0_g170762 );
					float4 lerpResult39_g170762 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * temp_output_23_0_g170762 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * frac( ( temp_output_15_0_g170762 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170762 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170758 = lerpResult39_g170762;
					half2 Noise_DirWS825_g170758 = ((temp_output_635_0_g170758).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170758 = _MotionBaseNoiseValue;
					half Input_WindValue853_g170758 = Global_WindValue1855_g170727;
					float lerpResult701_g170758 = lerp( 1.0 , Input_MotionNoise552_g170758 , Input_WindValue853_g170758);
					float2 lerpResult646_g170758 = lerp( Input_WindDirWS803_g170758 , Noise_DirWS825_g170758 , lerpResult701_g170758);
					half Input_MotionDelay753_g170758 = _MotionBaseDelayValue;
					float lerpResult756_g170758 = lerp( 1.0 , ( Input_WindValue853_g170758 * Input_WindValue853_g170758 ) , Input_MotionDelay753_g170758);
					half Wind_Delay815_g170758 = lerpResult756_g170758;
					float2 temp_output_809_0_g170758 = ( lerpResult646_g170758 * Input_WindValue853_g170758 * Wind_Delay815_g170758 );
					half2 Bend_Dir859_g170758 = temp_output_809_0_g170758;
					float temp_output_862_0_g170758 = ( length( Bend_Dir859_g170758 ) * Input_MotionNoise552_g170758 );
					float2 Global_PushDirWS1972_g170727 = temp_output_790_0_g170752;
					half2 Input_PushDirWS807_g170758 = Global_PushDirWS1972_g170727;
					half Input_PushWave858_g170758 = Global_PushWave2675_g170727;
					half Input_PushAlpha806_g170758 = ( Global_PushAlpha1504_g170727 * _MotionBasePushValue );
					float lerpResult831_g170758 = lerp( temp_output_862_0_g170758 , ( saturate( length( Input_PushDirWS807_g170758 ) ) * Input_PushWave858_g170758 ) , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch828_g170758 = lerpResult831_g170758;
					#else
					float staticSwitch828_g170758 = temp_output_862_0_g170758;
					#endif
					half Base_Wave1159_g170727 = staticSwitch828_g170758;
					float temp_output_888_0_g170753 = ( (Noise_Params685_g170753).b * Input_WindValue881_g170753 );
					float lerpResult867_g170753 = lerp( temp_output_888_0_g170753 , ( (Noise_Params685_g170753).b * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch886_g170753 = lerpResult867_g170753;
					#else
					float staticSwitch886_g170753 = temp_output_888_0_g170753;
					#endif
					half Small_Wave1427_g170727 = staticSwitch886_g170753;
					float lerpResult2422_g170727 = lerp( Base_Wave1159_g170727 , Small_Wave1427_g170727 , _motion_small_mode);
					half Global_Wave1475_g170727 = lerpResult2422_g170727;
					half Input_GlobalWave546_g170747 = Global_Wave1475_g170727;
					float temp_output_548_0_g170747 = ( Input_GlobalWave546_g170747 * Input_GlobalWave546_g170747 );
					half Flutter_Wave556_g170747 = temp_output_548_0_g170747;
					half3 Tiny_Noise859_g170727 = ( lerpResult537_g170747 * Flutter_Wave556_g170747 );
					half3 Tiny_Flutter1451_g170727 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170727 * Tiny_Mask218_g170727 * Tiny_Noise859_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch414_g170727 = Tiny_Flutter1451_g170727;
					#else
					float3 staticSwitch414_g170727 = temp_cast_38;
					#endif
					half3 Final_PositionADD1569_g170727 = ( staticSwitch495_g170727 + staticSwitch414_g170727 );
					float3 In_PositionAddOS16_g170744 = Final_PositionADD1569_g170727;
					float3 temp_output_2503_24_g170727 = Out_PivotOS15_g170743;
					float3 In_PivotOS16_g170744 = temp_output_2503_24_g170727;
					float3 In_PivotWS16_g170744 = Out_PivotWS15_g170743;
					float3 In_PivotWO16_g170744 = temp_output_2503_19_g170727;
					float3 In_NormalOS16_g170744 = temp_output_2503_20_g170727;
					float3 In_NormalWS16_g170744 = Out_NormalWS15_g170743;
					float3 In_NormalRawOS16_g170744 = Out_NormalRawOS15_g170743;
					float3 In_NormalRawWS16_g170744 = Out_NormalRawWS15_g170743;
					float4 In_TangentOS16_g170744 = Out_TangentOS15_g170743;
					float3 In_ViewDirWS16_g170744 = Out_ViewDirWS15_g170743;
					float4 In_VertexData16_g170744 = temp_output_2503_29_g170727;
					float4 In_PhaseData16_g170744 = temp_output_2503_27_g170727;
					float4 In_BoundsData16_g170744 = temp_output_2503_30_g170727;
					float4 break748_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170736 = _motion_base_vert_mode;
					float temp_output_30_0_g170736 = ( break748_g170727.x * break33_g170736.x );
					float temp_output_29_0_g170736 = ( break748_g170727.y * break33_g170736.y );
					float temp_output_31_0_g170736 = ( break748_g170727.z * break33_g170736.z );
					float temp_output_28_0_g170736 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 + temp_output_31_0_g170736 + ( break748_g170727.w * break33_g170736.w ) );
					float temp_output_1731_0_g170727 = temp_output_28_0_g170736;
					float4 break33_g170737 = _motion_base_proc_mode;
					float temp_output_30_0_g170737 = ( (Model_BoundsData1322_g170727).z * break33_g170737.x );
					float temp_output_29_0_g170737 = ( (Model_BoundsData1322_g170727).w * break33_g170737.y );
					float temp_output_1733_0_g170727 = ( temp_output_30_0_g170737 + temp_output_29_0_g170737 );
					float lerpResult1904_g170727 = lerp( temp_output_1731_0_g170727 , temp_output_1733_0_g170727 , _motion_base_mask_mode);
					float clampResult17_g170735 = clamp( lerpResult1904_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170740 = _MotionBaseMaskRemap.x;
					float temp_output_9_0_g170740 = ( clampResult17_g170735 - temp_output_7_0_g170740 );
					float temp_output_6_0_g170738 = saturate( ( ( temp_output_9_0_g170740 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170738 = ( temp_output_6_0_g170738 + _MotionBaseMaskMode );
					#else
					float staticSwitch14_g170738 = temp_output_6_0_g170738;
					#endif
					half Base_Mask217_g170727 = staticSwitch14_g170738;
					float2 lerpResult811_g170758 = lerp( temp_output_809_0_g170758 , Input_PushDirWS807_g170758 , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float2 staticSwitch808_g170758 = lerpResult811_g170758;
					#else
					float2 staticSwitch808_g170758 = temp_output_809_0_g170758;
					#endif
					float2 temp_output_38_0_g170759 = staticSwitch808_g170758;
					float2 break83_g170759 = temp_output_38_0_g170759;
					float3 appendResult79_g170759 = (float3(break83_g170759.x , 0.0 , break83_g170759.y));
					half2 Base_Bending893_g170727 = (( mul( unity_WorldToObject, float4( appendResult79_g170759 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
					half2 Base_Motion1440_g170727 = ( _MotionBaseIntensityValue * Base_Mask217_g170727 * Base_Bending893_g170727 );
					#ifdef TVE_MOTION
					float2 staticSwitch2384_g170727 = Base_Motion1440_g170727;
					#else
					float2 staticSwitch2384_g170727 = float2( 0,0 );
					#endif
					float4 appendResult2023_g170727 = (float4(staticSwitch2384_g170727 , 0.0 , 0.0));
					half4 Final_RotationData1570_g170727 = appendResult2023_g170727;
					float4 In_RotationData16_g170744 = Final_RotationData1570_g170727;
					{
					Data16_g170744.Dummy = In_Dummy16_g170744;
					Data16_g170744.PositionOS = In_PositionOS16_g170744;
					Data16_g170744.PositionWS = In_PositionWS16_g170744;
					Data16_g170744.PositionWO = In_PositionWO16_g170744;
					Data16_g170744.PositionRawOS = In_PositionRawOS16_g170744;
					Data16_g170744.PositionAddOS = In_PositionAddOS16_g170744;
					Data16_g170744.PivotOS = In_PivotOS16_g170744;
					Data16_g170744.PivotWS = In_PivotWS16_g170744;
					Data16_g170744.PivotWO = In_PivotWO16_g170744;
					Data16_g170744.NormalOS = In_NormalOS16_g170744;
					Data16_g170744.NormalWS = In_NormalWS16_g170744;
					Data16_g170744.NormalRawOS = In_NormalRawOS16_g170744;
					Data16_g170744.NormalRawWS = In_NormalRawWS16_g170744;
					Data16_g170744.TangentOS = In_TangentOS16_g170744;
					Data16_g170744.ViewDirWS = In_ViewDirWS16_g170744;
					Data16_g170744.VertexData = In_VertexData16_g170744;
					Data16_g170744.PhaseData = In_PhaseData16_g170744;
					Data16_g170744.BoundsData = In_BoundsData16_g170744;
					Data16_g170744.RotationData = In_RotationData16_g170744;
					}
					TVEModelData Data15_g170971 = Data16_g170744;
					float Out_Dummy15_g170971 = 0;
					float3 Out_PositionOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170971 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170971 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170971 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170971 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170971 = float3( 0,0,0 );
					float4 Out_VertexData15_g170971 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170971 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170971 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170971 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170971 = Data15_g170971.Dummy;
					Out_PositionOS15_g170971 = Data15_g170971.PositionOS;
					Out_PositionWS15_g170971 = Data15_g170971.PositionWS;
					Out_PositionWO15_g170971 = Data15_g170971.PositionWO;
					Out_PositionRawOS15_g170971 = Data15_g170971.PositionRawOS;
					Out_PositionAddOS15_g170971 = Data15_g170971.PositionAddOS;
					Out_PivotOS15_g170971 = Data15_g170971.PivotOS;
					Out_PivotWS15_g170971 = Data15_g170971.PivotWS;
					Out_PivotWO15_g170971 = Data15_g170971.PivotWO;
					Out_NormalOS15_g170971 = Data15_g170971.NormalOS;
					Out_NormalWS15_g170971 = Data15_g170971.NormalWS;
					Out_NormalRawOS15_g170971 = Data15_g170971.NormalRawOS;
					Out_NormalRawWS15_g170971 = Data15_g170971.NormalRawWS;
					Out_TangentOS15_g170971 = Data15_g170971.TangentOS;
					Out_ViewDirWS15_g170971 = Data15_g170971.ViewDirWS;
					Out_VertexData15_g170971 = Data15_g170971.VertexData;
					Out_PhaseData15_g170971 = Data15_g170971.PhaseData;
					Out_BoundsData15_g170971 = Data15_g170971.BoundsData;
					Out_RotationData15_g170971 = Data15_g170971.RotationData;
					}
					half3 Model_PositionOS147_g170970 = Out_PositionOS15_g170971;
					half3 VertexPos40_g170974 = Model_PositionOS147_g170970;
					float3 appendResult74_g170974 = (float3(VertexPos40_g170974.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g170974 = appendResult74_g170974;
					float3 break84_g170974 = VertexPos40_g170974;
					float3 appendResult81_g170974 = (float3(0.0 , break84_g170974.y , break84_g170974.z));
					half3 VertexPosOtherAxis82_g170974 = appendResult81_g170974;
					float4 temp_output_1567_33_g170970 = Out_RotationData15_g170971;
					half4 Model_VertexBend1569_g170970 = temp_output_1567_33_g170970;
					float2 break1582_g170970 = (Model_VertexBend1569_g170970).xy;
					half Angle44_g170974 = break1582_g170970.y;
					half3 VertexPos40_g170977 = ( VertexPosRotationAxis50_g170974 + ( VertexPosOtherAxis82_g170974 * cos( Angle44_g170974 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170974 ) * sin( Angle44_g170974 ) ) );
					float3 appendResult74_g170977 = (float3(0.0 , 0.0 , VertexPos40_g170977.z));
					half3 VertexPosRotationAxis50_g170977 = appendResult74_g170977;
					float3 break84_g170977 = VertexPos40_g170977;
					float3 appendResult81_g170977 = (float3(break84_g170977.x , break84_g170977.y , 0.0));
					half3 VertexPosOtherAxis82_g170977 = appendResult81_g170977;
					half Angle44_g170977 = -break1582_g170970.x;
					float3 temp_output_1584_19_g170970 = ( VertexPosRotationAxis50_g170977 + ( VertexPosOtherAxis82_g170977 * cos( Angle44_g170977 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170977 ) * sin( Angle44_g170977 ) ) );
					float3 temp_output_6_0_g170976 = temp_output_1584_19_g170970;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch65_g170976 = Model_PositionOS147_g170970;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch69_g170976 = staticSwitch65_g170976;
					#endif
					float3 temp_output_1585_0_g170970 = staticSwitch69_g170976;
					float3 temp_output_1567_31_g170970 = Out_PositionAddOS15_g170971;
					half3 Model_PositionADD1568_g170970 = temp_output_1567_31_g170970;
					half3 Final_PositionOS178_g170970 = ( temp_output_1585_0_g170970 + Model_PositionADD1568_g170970 );
					float3 In_PositionOS16_g170972 = Final_PositionOS178_g170970;
					float3 In_PositionWS16_g170972 = Out_PositionWS15_g170971;
					float3 In_PositionWO16_g170972 = Out_PositionWO15_g170971;
					float3 In_PositionRawOS16_g170972 = Out_PositionRawOS15_g170971;
					float3 In_PositionAddOS16_g170972 = temp_output_1567_31_g170970;
					float3 In_PivotOS16_g170972 = Out_PivotOS15_g170971;
					float3 In_PivotWS16_g170972 = Out_PivotWS15_g170971;
					float3 In_PivotWO16_g170972 = Out_PivotWO15_g170971;
					float3 In_NormalOS16_g170972 = Out_NormalOS15_g170971;
					float3 In_NormalWS16_g170972 = Out_NormalWS15_g170971;
					float3 In_NormalRawOS16_g170972 = Out_NormalRawOS15_g170971;
					float3 In_NormalRawWS16_g170972 = Out_NormalRawWS15_g170971;
					float4 In_TangentOS16_g170972 = Out_TangentOS15_g170971;
					float3 In_ViewDirWS16_g170972 = Out_ViewDirWS15_g170971;
					float4 In_VertexData16_g170972 = Out_VertexData15_g170971;
					float4 In_PhaseData16_g170972 = Out_PhaseData15_g170971;
					float4 In_BoundsData16_g170972 = Out_BoundsData15_g170971;
					float4 In_RotationData16_g170972 = temp_output_1567_33_g170970;
					{
					Data16_g170972.Dummy = In_Dummy16_g170972;
					Data16_g170972.PositionOS = In_PositionOS16_g170972;
					Data16_g170972.PositionWS = In_PositionWS16_g170972;
					Data16_g170972.PositionWO = In_PositionWO16_g170972;
					Data16_g170972.PositionRawOS = In_PositionRawOS16_g170972;
					Data16_g170972.PositionAddOS = In_PositionAddOS16_g170972;
					Data16_g170972.PivotOS = In_PivotOS16_g170972;
					Data16_g170972.PivotWS = In_PivotWS16_g170972;
					Data16_g170972.PivotWO = In_PivotWO16_g170972;
					Data16_g170972.NormalOS = In_NormalOS16_g170972;
					Data16_g170972.NormalWS = In_NormalWS16_g170972;
					Data16_g170972.NormalRawOS = In_NormalRawOS16_g170972;
					Data16_g170972.NormalRawWS = In_NormalRawWS16_g170972;
					Data16_g170972.TangentOS = In_TangentOS16_g170972;
					Data16_g170972.ViewDirWS = In_ViewDirWS16_g170972;
					Data16_g170972.VertexData = In_VertexData16_g170972;
					Data16_g170972.PhaseData = In_PhaseData16_g170972;
					Data16_g170972.BoundsData = In_BoundsData16_g170972;
					Data16_g170972.RotationData = In_RotationData16_g170972;
					}
					TVEModelData Data15_g170997 = Data16_g170972;
					float Out_Dummy15_g170997 = 0;
					float3 Out_PositionOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170997 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170997 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170997 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170997 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170997 = float3( 0,0,0 );
					float4 Out_VertexData15_g170997 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170997 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170997 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170997 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170997 = Data15_g170997.Dummy;
					Out_PositionOS15_g170997 = Data15_g170997.PositionOS;
					Out_PositionWS15_g170997 = Data15_g170997.PositionWS;
					Out_PositionWO15_g170997 = Data15_g170997.PositionWO;
					Out_PositionRawOS15_g170997 = Data15_g170997.PositionRawOS;
					Out_PositionAddOS15_g170997 = Data15_g170997.PositionAddOS;
					Out_PivotOS15_g170997 = Data15_g170997.PivotOS;
					Out_PivotWS15_g170997 = Data15_g170997.PivotWS;
					Out_PivotWO15_g170997 = Data15_g170997.PivotWO;
					Out_NormalOS15_g170997 = Data15_g170997.NormalOS;
					Out_NormalWS15_g170997 = Data15_g170997.NormalWS;
					Out_NormalRawOS15_g170997 = Data15_g170997.NormalRawOS;
					Out_NormalRawWS15_g170997 = Data15_g170997.NormalRawWS;
					Out_TangentOS15_g170997 = Data15_g170997.TangentOS;
					Out_ViewDirWS15_g170997 = Data15_g170997.ViewDirWS;
					Out_VertexData15_g170997 = Data15_g170997.VertexData;
					Out_PhaseData15_g170997 = Data15_g170997.PhaseData;
					Out_BoundsData15_g170997 = Data15_g170997.BoundsData;
					Out_RotationData15_g170997 = Data15_g170997.RotationData;
					}
					float3 In_PositionOS16_g171012 = Out_PositionOS15_g170997;
					float3 In_PositionWS16_g171012 = Out_PositionWS15_g170997;
					float3 temp_output_1567_17_g170996 = Out_PositionWO15_g170997;
					float3 In_PositionWO16_g171012 = temp_output_1567_17_g170996;
					float3 temp_output_1567_26_g170996 = Out_PositionRawOS15_g170997;
					float3 In_PositionRawOS16_g171012 = temp_output_1567_26_g170996;
					float3 In_PositionAddOS16_g171012 = Out_PositionAddOS15_g170997;
					float3 In_PivotOS16_g171012 = Out_PivotOS15_g170997;
					float3 In_PivotWS16_g171012 = Out_PivotWS15_g170997;
					float3 In_PivotWO16_g171012 = Out_PivotWO15_g170997;
					half3 Model_NormalOS1568_g170996 = Out_NormalOS15_g170997;
					half3 _Vector1 = half3(0,1,0);
					float3 lerpResult1589_g170996 = lerp( Model_NormalOS1568_g170996 , _Vector1 , _NormalFlattenValue);
					half3 Model_PositionRAW1592_g170996 = temp_output_1567_26_g170996;
					float3 normalizeResult1594_g170996 = ASESafeNormalize( ( Model_PositionRAW1592_g170996 + _NormalSphereOffsetValue ) );
					float3 lerpResult1585_g170996 = lerp( lerpResult1589_g170996 , normalizeResult1594_g170996 , _NormalSphereValue);
					half3 VertexPos40_g170999 = lerpResult1585_g170996;
					half3 VertexPos40_g171000 = VertexPos40_g170999;
					float3 appendResult74_g171000 = (float3(VertexPos40_g171000.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g171000 = appendResult74_g171000;
					float3 break84_g171000 = VertexPos40_g171000;
					float3 appendResult81_g171000 = (float3(0.0 , break84_g171000.y , break84_g171000.z));
					half3 VertexPosOtherAxis82_g171000 = appendResult81_g171000;
					float4 temp_output_1567_33_g170996 = Out_RotationData15_g170997;
					half4 Model_RotationData1583_g170996 = temp_output_1567_33_g170996;
					half2 Angle44_g170999 = Model_RotationData1583_g170996.xy;
					half Angle44_g171000 = (Angle44_g170999).y;
					half3 VertexPos40_g171001 = ( VertexPosRotationAxis50_g171000 + ( VertexPosOtherAxis82_g171000 * cos( Angle44_g171000 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g171000 ) * sin( Angle44_g171000 ) ) );
					float3 appendResult74_g171001 = (float3(0.0 , 0.0 , VertexPos40_g171001.z));
					half3 VertexPosRotationAxis50_g171001 = appendResult74_g171001;
					float3 break84_g171001 = VertexPos40_g171001;
					float3 appendResult81_g171001 = (float3(break84_g171001.x , break84_g171001.y , 0.0));
					half3 VertexPosOtherAxis82_g171001 = appendResult81_g171001;
					half Angle44_g171001 = -(Angle44_g170999).x;
					float3 lerpResult1591_g170996 = lerp( lerpResult1585_g170996 , ( VertexPosRotationAxis50_g171001 + ( VertexPosOtherAxis82_g171001 * cos( Angle44_g171001 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g171001 ) * sin( Angle44_g171001 ) ) ) , _NormalComputeValue);
					float3 temp_output_6_0_g171011 = lerpResult1591_g170996;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch65_g171011 = lerpResult1585_g170996;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch69_g171011 = staticSwitch65_g171011;
					#endif
					float4 temp_output_1567_29_g170996 = Out_VertexData15_g170997;
					half4 Model_VertexData1608_g170996 = temp_output_1567_29_g170996;
					float4 break1683_g170996 = Model_VertexData1608_g170996;
					float4 break33_g171002 = _normal_vert_mode;
					float temp_output_30_0_g171002 = ( break1683_g170996.x * break33_g171002.x );
					float temp_output_29_0_g171002 = ( break1683_g170996.y * break33_g171002.y );
					float temp_output_31_0_g171002 = ( break1683_g170996.z * break33_g171002.z );
					float temp_output_28_0_g171002 = ( temp_output_30_0_g171002 + temp_output_29_0_g171002 + temp_output_31_0_g171002 + ( break1683_g170996.w * break33_g171002.w ) );
					float clampResult17_g171003 = clamp( temp_output_28_0_g171002 , 0.0001 , 0.9999 );
					float temp_output_7_0_g171007 = _NormalMeshRemap.x;
					float temp_output_9_0_g171007 = ( clampResult17_g171003 - temp_output_7_0_g171007 );
					float lerpResult1695_g170996 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g171007 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
					float temp_output_6_0_g171004 = lerpResult1695_g170996;
					#ifdef TVE_DUMMY
					float staticSwitch14_g171004 = ( temp_output_6_0_g171004 + _NormalMeshMode );
					#else
					float staticSwitch14_g171004 = temp_output_6_0_g171004;
					#endif
					float temp_output_1690_0_g170996 = staticSwitch14_g171004;
					half Normal_MeskMask1691_g170996 = temp_output_1690_0_g170996;
					half Normal_Proj_Mask1647_g170996 = 1.0;
					float temp_output_1699_0_g170996 = ( Normal_MeskMask1691_g170996 * Normal_Proj_Mask1647_g170996 );
					float3 lerpResult1670_g170996 = lerp( Model_NormalOS1568_g170996 , staticSwitch69_g171011 , temp_output_1699_0_g170996);
					#ifdef TVE_NORMAL
					float3 staticSwitch1716_g170996 = lerpResult1670_g170996;
					#else
					float3 staticSwitch1716_g170996 = Model_NormalOS1568_g170996;
					#endif
					half3 Final_NormalOS178_g170996 = staticSwitch1716_g170996;
					float3 In_NormalOS16_g171012 = Final_NormalOS178_g170996;
					float3 temp_output_1567_21_g170996 = Out_NormalWS15_g170997;
					float3 In_NormalWS16_g171012 = temp_output_1567_21_g170996;
					float3 In_NormalRawOS16_g171012 = Out_NormalRawOS15_g170997;
					float3 In_NormalRawWS16_g171012 = Out_NormalRawWS15_g170997;
					float4 In_TangentOS16_g171012 = Out_TangentOS15_g170997;
					float3 In_ViewDirWS16_g171012 = Out_ViewDirWS15_g170997;
					float4 In_VertexData16_g171012 = temp_output_1567_29_g170996;
					float4 In_PhaseData16_g171012 = Out_PhaseData15_g170997;
					float4 In_BoundsData16_g171012 = Out_BoundsData15_g170997;
					float4 In_RotationData16_g171012 = temp_output_1567_33_g170996;
					{
					Data16_g171012.Dummy = In_Dummy16_g171012;
					Data16_g171012.PositionOS = In_PositionOS16_g171012;
					Data16_g171012.PositionWS = In_PositionWS16_g171012;
					Data16_g171012.PositionWO = In_PositionWO16_g171012;
					Data16_g171012.PositionRawOS = In_PositionRawOS16_g171012;
					Data16_g171012.PositionAddOS = In_PositionAddOS16_g171012;
					Data16_g171012.PivotOS = In_PivotOS16_g171012;
					Data16_g171012.PivotWS = In_PivotWS16_g171012;
					Data16_g171012.PivotWO = In_PivotWO16_g171012;
					Data16_g171012.NormalOS = In_NormalOS16_g171012;
					Data16_g171012.NormalWS = In_NormalWS16_g171012;
					Data16_g171012.NormalRawOS = In_NormalRawOS16_g171012;
					Data16_g171012.NormalRawWS = In_NormalRawWS16_g171012;
					Data16_g171012.TangentOS = In_TangentOS16_g171012;
					Data16_g171012.ViewDirWS = In_ViewDirWS16_g171012;
					Data16_g171012.VertexData = In_VertexData16_g171012;
					Data16_g171012.PhaseData = In_PhaseData16_g171012;
					Data16_g171012.BoundsData = In_BoundsData16_g171012;
					Data16_g171012.RotationData = In_RotationData16_g171012;
					}
					TVEModelData Data15_g171022 = Data16_g171012;
					float Out_Dummy15_g171022 = 0;
					float3 Out_PositionOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171022 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171022 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171022 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171022 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171022 = float3( 0,0,0 );
					float4 Out_VertexData15_g171022 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171022 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171022 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171022 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171022 = Data15_g171022.Dummy;
					Out_PositionOS15_g171022 = Data15_g171022.PositionOS;
					Out_PositionWS15_g171022 = Data15_g171022.PositionWS;
					Out_PositionWO15_g171022 = Data15_g171022.PositionWO;
					Out_PositionRawOS15_g171022 = Data15_g171022.PositionRawOS;
					Out_PositionAddOS15_g171022 = Data15_g171022.PositionAddOS;
					Out_PivotOS15_g171022 = Data15_g171022.PivotOS;
					Out_PivotWS15_g171022 = Data15_g171022.PivotWS;
					Out_PivotWO15_g171022 = Data15_g171022.PivotWO;
					Out_NormalOS15_g171022 = Data15_g171022.NormalOS;
					Out_NormalWS15_g171022 = Data15_g171022.NormalWS;
					Out_NormalRawOS15_g171022 = Data15_g171022.NormalRawOS;
					Out_NormalRawWS15_g171022 = Data15_g171022.NormalRawWS;
					Out_TangentOS15_g171022 = Data15_g171022.TangentOS;
					Out_ViewDirWS15_g171022 = Data15_g171022.ViewDirWS;
					Out_VertexData15_g171022 = Data15_g171022.VertexData;
					Out_PhaseData15_g171022 = Data15_g171022.PhaseData;
					Out_BoundsData15_g171022 = Data15_g171022.BoundsData;
					Out_RotationData15_g171022 = Data15_g171022.RotationData;
					}
					float3 temp_output_217_24_g171021 = Out_PivotOS15_g171022;
					float3 In_PositionOS16_g171023 = ( Out_PositionOS15_g171022 + temp_output_217_24_g171021 );
					float3 In_PositionWS16_g171023 = Out_PositionWS15_g171022;
					float3 In_PositionWO16_g171023 = Out_PositionWO15_g171022;
					float3 In_PositionRawOS16_g171023 = Out_PositionRawOS15_g171022;
					float3 In_PositionAddOS16_g171023 = Out_PositionAddOS15_g171022;
					float3 In_PivotOS16_g171023 = temp_output_217_24_g171021;
					float3 In_PivotWS16_g171023 = Out_PivotWS15_g171022;
					float3 In_PivotWO16_g171023 = Out_PivotWO15_g171022;
					float3 In_NormalOS16_g171023 = Out_NormalOS15_g171022;
					float3 In_NormalWS16_g171023 = Out_NormalWS15_g171022;
					float3 In_NormalRawOS16_g171023 = Out_NormalRawOS15_g171022;
					float3 In_NormalRawWS16_g171023 = Out_NormalRawWS15_g171022;
					float4 In_TangentOS16_g171023 = Out_TangentOS15_g171022;
					float3 In_ViewDirWS16_g171023 = Out_ViewDirWS15_g171022;
					float4 In_VertexData16_g171023 = Out_VertexData15_g171022;
					float4 In_PhaseData16_g171023 = Out_PhaseData15_g171022;
					float4 In_BoundsData16_g171023 = Out_BoundsData15_g171022;
					float4 In_RotationData16_g171023 = Out_RotationData15_g171022;
					{
					Data16_g171023.Dummy = In_Dummy16_g171023;
					Data16_g171023.PositionOS = In_PositionOS16_g171023;
					Data16_g171023.PositionWS = In_PositionWS16_g171023;
					Data16_g171023.PositionWO = In_PositionWO16_g171023;
					Data16_g171023.PositionRawOS = In_PositionRawOS16_g171023;
					Data16_g171023.PositionAddOS = In_PositionAddOS16_g171023;
					Data16_g171023.PivotOS = In_PivotOS16_g171023;
					Data16_g171023.PivotWS = In_PivotWS16_g171023;
					Data16_g171023.PivotWO = In_PivotWO16_g171023;
					Data16_g171023.NormalOS = In_NormalOS16_g171023;
					Data16_g171023.NormalWS = In_NormalWS16_g171023;
					Data16_g171023.NormalRawOS = In_NormalRawOS16_g171023;
					Data16_g171023.NormalRawWS = In_NormalRawWS16_g171023;
					Data16_g171023.TangentOS = In_TangentOS16_g171023;
					Data16_g171023.ViewDirWS = In_ViewDirWS16_g171023;
					Data16_g171023.VertexData = In_VertexData16_g171023;
					Data16_g171023.PhaseData = In_PhaseData16_g171023;
					Data16_g171023.BoundsData = In_BoundsData16_g171023;
					Data16_g171023.RotationData = In_RotationData16_g171023;
					}
					TVEModelData Data15_g171037 = Data16_g171023;
					float Out_Dummy15_g171037 = 0;
					float3 Out_PositionOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171037 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171037 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171037 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171037 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171037 = float3( 0,0,0 );
					float4 Out_VertexData15_g171037 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171037 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171037 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171037 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171037 = Data15_g171037.Dummy;
					Out_PositionOS15_g171037 = Data15_g171037.PositionOS;
					Out_PositionWS15_g171037 = Data15_g171037.PositionWS;
					Out_PositionWO15_g171037 = Data15_g171037.PositionWO;
					Out_PositionRawOS15_g171037 = Data15_g171037.PositionRawOS;
					Out_PositionAddOS15_g171037 = Data15_g171037.PositionAddOS;
					Out_PivotOS15_g171037 = Data15_g171037.PivotOS;
					Out_PivotWS15_g171037 = Data15_g171037.PivotWS;
					Out_PivotWO15_g171037 = Data15_g171037.PivotWO;
					Out_NormalOS15_g171037 = Data15_g171037.NormalOS;
					Out_NormalWS15_g171037 = Data15_g171037.NormalWS;
					Out_NormalRawOS15_g171037 = Data15_g171037.NormalRawOS;
					Out_NormalRawWS15_g171037 = Data15_g171037.NormalRawWS;
					Out_TangentOS15_g171037 = Data15_g171037.TangentOS;
					Out_ViewDirWS15_g171037 = Data15_g171037.ViewDirWS;
					Out_VertexData15_g171037 = Data15_g171037.VertexData;
					Out_PhaseData15_g171037 = Data15_g171037.PhaseData;
					Out_BoundsData15_g171037 = Data15_g171037.BoundsData;
					Out_RotationData15_g171037 = Data15_g171037.RotationData;
					}
					float3 temp_output_6_0_g171050 = ( Out_PositionOS15_g171037 + _DisableSRPBatcher );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171050 = ( temp_output_6_0_g171050 + 0.0 );
					#else
					float3 staticSwitch14_g171050 = temp_output_6_0_g171050;
					#endif
					float3 temp_output_154_0_g171035 = staticSwitch14_g171050;
					
					o.ase_texcoord9.xyz = vertexToFrag73_g170478;
					o.ase_texcoord10.xyz = vertexToFrag76_g170478;
					float temp_output_6_0_g170750 = ( _MotionHighlightValue * Global_DistMask1820_g170727 * ( Tiny_Mask218_g170727 * Tiny_Mask218_g170727 ) * ( Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170750 = ( temp_output_6_0_g170750 + _MotionHighlightColor.r );
					#else
					float staticSwitch14_g170750 = temp_output_6_0_g170750;
					#endif
					half Wave_Mask1263 = staticSwitch14_g170750;
					float4 appendResult23_g170819 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
					float4 vertexToFrag24_g170819 = appendResult23_g170819;
					o.ase_texcoord11 = vertexToFrag24_g170819;
					
					o.ase_texcoord7 = v.ase_texcoord;
					o.ase_texcoord8.xy = v.texcoord2.xyzw.xy;
					o.ase_color = v.ase_color;
					
					//setting value to unused interpolator channels and avoid initialization warnings
					o.ase_texcoord8.zw = 0;
					o.ase_texcoord9.w = 0;
					o.ase_texcoord10.w = 0;

					#ifdef ASE_ABSOLUTE_VERTEX_POS
						float3 defaultVertexValue = v.vertex.xyz;
					#else
						float3 defaultVertexValue = float3(0, 0, 0);
					#endif
					float3 vertexValue = temp_output_154_0_g171035;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
						v.vertex.xyz = vertexValue;
					#else
						v.vertex.xyz += vertexValue;
					#endif
					v.vertex.w = 1;
					v.normal = Out_NormalOS15_g171037;
					v.tangent = Out_TangentOS15_g171037;

					float3 worldPos = mul( unity_ObjectToWorld, v.vertex ).xyz;
					half3 worldNormal = UnityObjectToWorldNormal( v.normal );
					half3 worldTangent = UnityObjectToWorldDir( v.tangent.xyz );
					half tangentSign = v.tangent.w * unity_WorldTransformParams.w;
					half3 worldBitangent = cross( worldNormal, worldTangent ) * tangentSign;

					o.pos = UnityObjectToClipPos( v.vertex );
					o.worldNormal = float4( worldNormal, worldPos.x );
					o.worldTangent = float4( worldTangent, worldPos.y );
					o.worldBitangent = float4( worldBitangent, worldPos.z );

					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);

					#ifdef ASE_FOG
						UNITY_TRANSFER_FOG(o,o.pos);
					#endif
					#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
						o.screenPos = ComputeScreenPos(o.pos);
					#endif
					return o;
				}

				#if defined(ASE_TESSELLATION)
				struct VertexControl
				{
					float4 vertex : INTERNALTESSPOS;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					float4 ase_texcoord : TEXCOORD0;

					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct TessellationFactors
				{
					float edge[3] : SV_TessFactor;
					float inside : SV_InsideTessFactor;
				};

				VertexControl vert ( appdata v )
				{
					VertexControl o;
					UNITY_SETUP_INSTANCE_ID(v);
					UNITY_TRANSFER_INSTANCE_ID(v, o);
					o.vertex = v.vertex;
					o.tangent = v.tangent;
					o.normal = v.normal;
					o.texcoord1 = v.texcoord1;
					o.texcoord2 = v.texcoord2;
					o.ase_texcoord3 = v.ase_texcoord3;
					o.ase_color = v.ase_color;
					o.ase_texcoord = v.ase_texcoord;
					return o;
				}

				TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
				{
					TessellationFactors o;
					float4 tf = 1;
					float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
					float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
					#if defined(ASE_FIXED_TESSELLATION)
					tf = FixedTess( tessValue );
					#elif defined(ASE_DISTANCE_TESSELLATION)
					tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
					#elif defined(ASE_LENGTH_TESSELLATION)
					tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
					#elif defined(ASE_LENGTH_CULL_TESSELLATION)
					tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
					#endif
					o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
					return o;
				}

				[domain("tri")]
				[partitioning("fractional_odd")]
				[outputtopology("triangle_cw")]
				[patchconstantfunc("TessellationFunction")]
				[outputcontrolpoints(3)]
				VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
				{
				   return patch[id];
				}

				[domain("tri")]
				v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
				{
					appdata o = (appdata) 0;
					o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
					o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
					o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
					o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
					o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
					o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
					o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
					o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
					#if defined(ASE_PHONG_TESSELLATION)
					float3 pp[3];
					for (int i = 0; i < 3; ++i)
						pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
					float phongStrength = _TessPhongStrength;
					o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
					#endif
					UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
					return VertexFunction(o);
				}
				#else
				v2f vert ( appdata v )
				{
					return VertexFunction( v );
				}
				#endif

				half4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
					#if defined( ASE_DEPTH_WRITE_ON )
					, out float outputDepth : SV_Depth
					#endif
					) : SV_Target
				{
					UNITY_SETUP_INSTANCE_ID(IN);

					#ifdef LOD_FADE_CROSSFADE
						UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
					#endif

					#if defined(ASE_LIGHTING_SIMPLE)
						SurfaceOutput o = (SurfaceOutput)0;
					#else
						#if defined(_SPECULAR_SETUP)
							SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
						#else
							SurfaceOutputStandard o = (SurfaceOutputStandard)0;
						#endif
					#endif

					float3 WorldNormal = IN.worldNormal;
					float3 WorldTangent = IN.worldTangent;
					float3 WorldBiTangent = IN.worldBitangent;
					float3 worldPos = float3(IN.worldNormal.w,IN.worldTangent.w,IN.worldBitangent.w);
					float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));

					#if defined( ASE_NEEDS_FRAG_SCREEN_POSITION )
						float4 ScreenPos = IN.screenPos;
					#endif

					#if defined( ASE_NEEDS_FRAG_SHADOWCOORDS )
						UNITY_LIGHT_ATTENUATION( atten, IN, worldPos )
					#else
						half atten = 1;
					#endif

					float localBreakData4_g171040 = ( 0.0 );
					float localCompData3_g171015 = ( 0.0 );
					TVEVisualData Data3_g171015 = (TVEVisualData)0;
					half Dummy145_g171013 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
					float In_Dummy3_g171015 = Dummy145_g171013;
					float localBreakData4_g171014 = ( 0.0 );
					float localCompData3_g170995 = ( 0.0 );
					TVEVisualData Data3_g170995 = (TVEVisualData)0;
					half Dummy145_g170980 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
					float In_Dummy3_g170995 = Dummy145_g170980;
					float localBreakData4_g170984 = ( 0.0 );
					float localCompData3_g170958 = ( 0.0 );
					TVEVisualData Data3_g170958 = (TVEVisualData)0;
					half Dummy594_g170955 = ( _DitherCategory + _DitherEnd );
					float In_Dummy3_g170958 = Dummy594_g170955;
					float localBreakData4_g170957 = ( 0.0 );
					float localCompData3_g170939 = ( 0.0 );
					TVEVisualData Data3_g170939 = (TVEVisualData)0;
					half Dummy594_g170938 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
					float In_Dummy3_g170939 = Dummy594_g170938;
					float localBreakData4_g170941 = ( 0.0 );
					float localCompData3_g170911 = ( 0.0 );
					TVEVisualData Data3_g170911 = (TVEVisualData)0;
					half Dummy594_g170909 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
					float In_Dummy3_g170911 = Dummy594_g170909;
					float localBreakData4_g170910 = ( 0.0 );
					float localCompData3_g170875 = ( 0.0 );
					TVEVisualData Data3_g170875 = (TVEVisualData)0;
					half Dummy594_g170872 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
					float In_Dummy3_g170875 = Dummy594_g170872;
					float localBreakData4_g170873 = ( 0.0 );
					float localCompData3_g170871 = ( 0.0 );
					TVEVisualData Data3_g170871 = (TVEVisualData)0;
					float In_Dummy3_g170871 = 0.0;
					float localBreakData4_g170870 = ( 0.0 );
					float localCompData3_g170848 = ( 0.0 );
					TVEVisualData Data3_g170848 = (TVEVisualData)0;
					half Dummy205_g170845 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
					float In_Dummy3_g170848 = Dummy205_g170845;
					float localBreakData4_g170847 = ( 0.0 );
					float localCompData3_g170840 = ( 0.0 );
					TVEVisualData Data3_g170840 = (TVEVisualData)0;
					half Dummy205_g170820 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
					float In_Dummy3_g170840 = Dummy205_g170820;
					float localBreakData4_g170824 = ( 0.0 );
					float localCompData3_g170810 = ( 0.0 );
					TVEVisualData Data3_g170810 = (TVEVisualData)0;
					half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
					float In_Dummy3_g170810 = Dummy220_g170808;
					float localBreakData4_g170809 = ( 0.0 );
					float localCompData3_g170801 = ( 0.0 );
					TVEVisualData Data3_g170801 = (TVEVisualData)0;
					half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
					float In_Dummy3_g170801 = Dummy220_g170798;
					float localBreakData4_g170800 = ( 0.0 );
					float localCompData3_g170790 = ( 0.0 );
					TVEVisualData Data3_g170790 = (TVEVisualData)0;
					half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
					float In_Dummy3_g170790 = Dummy202_g170788;
					float localBreakData4_g170789 = ( 0.0 );
					float localCompData3_g170695 = ( 0.0 );
					TVEVisualData Data3_g170695 = (TVEVisualData)0;
					half4 Dummy944_g170687 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
					float In_Dummy3_g170695 = Dummy944_g170687.x;
					float localBreakData4_g170694 = ( 0.0 );
					float localCompData3_g170656 = ( 0.0 );
					TVEVisualData Data3_g170656 = (TVEVisualData)0;
					half4 Dummy946_g170638 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
					float In_Dummy3_g170656 = Dummy946_g170638.x;
					float localBreakData4_g170646 = ( 0.0 );
					float localCompData3_g170628 = ( 0.0 );
					TVEVisualData Data3_g170628 = (TVEVisualData)0;
					half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
					float In_Dummy3_g170628 = Dummy130_g170617.x;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170621) = _MainAlbedoTex;
					float localFilterTexture19_g170624 = ( 0.0 );
					SamplerState SS19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170624 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170624 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170624 = SamplerDefault19_g170624;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170624 = SamplerDefault19_g170624;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170624 = SamplerPoint19_g170624;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170624 = SamplerLow19_g170624;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170624 = SamplerMedium19_g170624;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170624 = SamplerHigh19_g170624;
					#endif
					}
					SamplerState Sampler276_g170621 = SS19_g170624;
					half4 Local_Coords180_g170617 = _main_coord_value;
					float4 temp_output_37_0_g170621 = Local_Coords180_g170617;
					half4 Coords276_g170621 = temp_output_37_0_g170621;
					half2 TexCoord276_g170621 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170621 = SampleMain( Texture276_g170621 , Sampler276_g170621 , Coords276_g170621 , TexCoord276_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170621) = _MainAlbedoTex;
					SamplerState Sampler275_g170621 = SS19_g170624;
					half4 Coords275_g170621 = temp_output_37_0_g170621;
					half2 TexCoord275_g170621 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170621 = SampleExtra( Texture275_g170621 , Sampler275_g170621 , Coords275_g170621 , TexCoord275_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170621) = _MainAlbedoTex;
					SamplerState Sampler238_g170621 = SS19_g170624;
					half4 Coords238_g170621 = temp_output_37_0_g170621;
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 vertexToFrag73_g170478 = IN.ase_texcoord9.xyz;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 vertexToFrag76_g170478 = IN.ase_texcoord10.xyz;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 normalizedWorldNormal = normalize( WorldNormal );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = IN.ase_color;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170627 = Data16_g170483;
					float Out_Dummy15_g170627 = 0;
					float3 Out_PositionWS15_g170627 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170627 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170627 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170627 = float3( 0,0,0 );
					float4 Out_VertexData15_g170627 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170627 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170627 = Data15_g170627.Dummy;
					Out_PositionWS15_g170627 = Data15_g170627.PositionWS;
					Out_PositionWO15_g170627 = Data15_g170627.PositionWO;
					Out_PivotWS15_g170627 = Data15_g170627.PivotWS;
					Out_PivotWO15_g170627 = Data15_g170627.PivotWO;
					Out_NormalWS15_g170627 = Data15_g170627.NormalWS;
					Out_ViewDirWS15_g170627 = Data15_g170627.ViewDirWS;
					Out_VertexData15_g170627 = Data15_g170627.VertexData;
					Out_BoundsData15_g170627 = Data15_g170627.BoundsData;
					}
					half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170627;
					float3 temp_output_279_0_g170621 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
					half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170621) = _MainAlbedoTex;
					SamplerState Sampler246_g170621 = SS19_g170624;
					half4 Coords246_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
					half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170627;
					float3 temp_output_280_0_g170621 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
					half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170621) = _MainAlbedoTex;
					SamplerState Sampler234_g170621 = SS19_g170624;
					float4 Coords234_g170621 = temp_output_37_0_g170621;
					float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
					float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170621) = _MainAlbedoTex;
					SamplerState Sampler263_g170621 = SS19_g170624;
					half4 Coords263_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
					half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
					half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch184_g170617 = localSampleExtra275_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170621;
					#else
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#endif
					half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
					float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
					half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170623) = _MainShaderTex;
					float localFilterTexture30_g170626 = ( 0.0 );
					SamplerState SS30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170626 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170626 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170626 = SamplerDefault30_g170626;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170626 = SamplerDefault30_g170626;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170626 = SamplerPoint30_g170626;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170626 = SamplerLow30_g170626;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170626 = SamplerMedium30_g170626;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170626 = SamplerHigh30_g170626;
					#endif
					}
					SamplerState Sampler276_g170623 = SS30_g170626;
					float4 temp_output_37_0_g170623 = Local_Coords180_g170617;
					half4 Coords276_g170623 = temp_output_37_0_g170623;
					half2 TexCoord276_g170623 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170623 = SampleMain( Texture276_g170623 , Sampler276_g170623 , Coords276_g170623 , TexCoord276_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170623) = _MainShaderTex;
					SamplerState Sampler275_g170623 = SS30_g170626;
					half4 Coords275_g170623 = temp_output_37_0_g170623;
					half2 TexCoord275_g170623 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170623 = SampleExtra( Texture275_g170623 , Sampler275_g170623 , Coords275_g170623 , TexCoord275_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170623) = _MainShaderTex;
					SamplerState Sampler238_g170623 = SS30_g170626;
					half4 Coords238_g170623 = temp_output_37_0_g170623;
					float3 temp_output_279_0_g170623 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170623 = temp_output_279_0_g170623;
					half4 localSamplePlanar2D238_g170623 = SamplePlanar2D( Texture238_g170623 , Sampler238_g170623 , Coords238_g170623 , WorldPosition238_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170623) = _MainShaderTex;
					SamplerState Sampler246_g170623 = SS30_g170626;
					half4 Coords246_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition246_g170623 = temp_output_279_0_g170623;
					float3 temp_output_280_0_g170623 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170623 = temp_output_280_0_g170623;
					half4 localSamplePlanar3D246_g170623 = SamplePlanar3D( Texture246_g170623 , Sampler246_g170623 , Coords246_g170623 , WorldPosition246_g170623 , WorldNormal246_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170623) = _MainShaderTex;
					SamplerState Sampler234_g170623 = SS30_g170626;
					float4 Coords234_g170623 = temp_output_37_0_g170623;
					float3 WorldPosition234_g170623 = temp_output_279_0_g170623;
					float4 localSampleStochastic2D234_g170623 = SampleStochastic2D( Texture234_g170623 , Sampler234_g170623 , Coords234_g170623 , WorldPosition234_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170623) = _MainShaderTex;
					SamplerState Sampler263_g170623 = SS30_g170626;
					half4 Coords263_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition263_g170623 = temp_output_279_0_g170623;
					half3 WorldNormal263_g170623 = temp_output_280_0_g170623;
					half4 localSampleStochastic3D263_g170623 = SampleStochastic3D( Texture263_g170623 , Sampler263_g170623 , Coords263_g170623 , WorldPosition263_g170623 , WorldNormal263_g170623 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch198_g170617 = localSampleExtra275_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170623;
					#else
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#endif
					half4 Local_ShaderTex199_g170617 = staticSwitch198_g170617;
					float clampResult17_g170635 = clamp( (Local_ShaderTex199_g170617).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170634 = _MainOcclusionRemap.x;
					float temp_output_9_0_g170634 = ( clampResult17_g170635 - temp_output_7_0_g170634 );
					float lerpResult23_g170617 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170634 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
					half Local_Occlusion313_g170617 = lerpResult23_g170617;
					float clampResult17_g170637 = clamp( (Local_ShaderTex199_g170617).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170636 = _MainSmoothnessRemap.x;
					float temp_output_9_0_g170636 = ( clampResult17_g170637 - temp_output_7_0_g170636 );
					half Local_Smoothness317_g170617 = ( saturate( ( ( temp_output_9_0_g170636 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
					float4 appendResult73_g170617 = (float4(( (Local_ShaderTex199_g170617).x * _MainMetallicValue ) , Local_Occlusion313_g170617 , (Local_ShaderTex199_g170617).z , Local_Smoothness317_g170617));
					half4 Local_Masks109_g170617 = appendResult73_g170617;
					float clampResult17_g170632 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170633 = _MainMultiRemap.x;
					float temp_output_9_0_g170633 = ( clampResult17_g170632 - temp_output_7_0_g170633 );
					half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
					float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
					float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
					half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
					half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
					float3 In_Albedo3_g170628 = Local_Albedo139_g170617;
					float3 In_AlbedoRaw3_g170628 = Local_Albedo139_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170622) = _MainNormalTex;
					float localFilterTexture29_g170625 = ( 0.0 );
					SamplerState SS29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170625 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170625 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170625 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170625 = SamplerDefault29_g170625;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170625 = SamplerDefault29_g170625;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170625 = SamplerPoint29_g170625;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170625 = SamplerLow29_g170625;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170625 = SamplerMedium29_g170625;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170625 = SamplerHigh29_g170625;
					#endif
					}
					SamplerState Sampler276_g170622 = SS29_g170625;
					float4 temp_output_37_0_g170622 = Local_Coords180_g170617;
					half4 Coords276_g170622 = temp_output_37_0_g170622;
					half2 TexCoord276_g170622 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170622 = SampleMain( Texture276_g170622 , Sampler276_g170622 , Coords276_g170622 , TexCoord276_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170622) = _MainNormalTex;
					SamplerState Sampler275_g170622 = SS29_g170625;
					half4 Coords275_g170622 = temp_output_37_0_g170622;
					half2 TexCoord275_g170622 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170622 = SampleExtra( Texture275_g170622 , Sampler275_g170622 , Coords275_g170622 , TexCoord275_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170622) = _MainNormalTex;
					SamplerState Sampler238_g170622 = SS29_g170625;
					half4 Coords238_g170622 = temp_output_37_0_g170622;
					float3 temp_output_279_0_g170622 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170622 = temp_output_279_0_g170622;
					half4 localSamplePlanar2D238_g170622 = SamplePlanar2D( Texture238_g170622 , Sampler238_g170622 , Coords238_g170622 , WorldPosition238_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170622) = _MainNormalTex;
					SamplerState Sampler246_g170622 = SS29_g170625;
					half4 Coords246_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition246_g170622 = temp_output_279_0_g170622;
					float3 temp_output_280_0_g170622 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170622 = temp_output_280_0_g170622;
					half4 localSamplePlanar3D246_g170622 = SamplePlanar3D( Texture246_g170622 , Sampler246_g170622 , Coords246_g170622 , WorldPosition246_g170622 , WorldNormal246_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170622) = _MainNormalTex;
					SamplerState Sampler234_g170622 = SS29_g170625;
					float4 Coords234_g170622 = temp_output_37_0_g170622;
					float3 WorldPosition234_g170622 = temp_output_279_0_g170622;
					float4 localSampleStochastic2D234_g170622 = SampleStochastic2D( Texture234_g170622 , Sampler234_g170622 , Coords234_g170622 , WorldPosition234_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170622) = _MainNormalTex;
					SamplerState Sampler263_g170622 = SS29_g170625;
					half4 Coords263_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition263_g170622 = temp_output_279_0_g170622;
					half3 WorldNormal263_g170622 = temp_output_280_0_g170622;
					half4 localSampleStochastic3D263_g170622 = SampleStochastic3D( Texture263_g170622 , Sampler263_g170622 , Coords263_g170622 , WorldPosition263_g170622 , WorldNormal263_g170622 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch193_g170617 = localSampleExtra275_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170622;
					#else
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#endif
					half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
					half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
					float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
					half2 Normal_Default50_g170618 = appendResult58_g170618;
					half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
					#else
					float2 staticSwitch38_g170618 = Normal_Default50_g170618;
					#endif
					half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
					#else
					float2 staticSwitch37_g170618 = staticSwitch38_g170618;
					#endif
					float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
					float3x3 ase_worldToTangent = float3x3( WorldTangent, WorldBiTangent, WorldNormal );
					half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
					float2 break71_g170619 = Normal_Planar45_g170619;
					float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
					float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#else
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#endif
					half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
					float2 In_NormalTS3_g170628 = Local_NormalTS108_g170617;
					float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
					float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
					float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
					float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
					float3 tanNormal74_g170620 = appendResult68_g170620;
					float3 worldNormal74_g170620 = normalize( float3( dot( tanToWorld0, tanNormal74_g170620 ), dot( tanToWorld1, tanNormal74_g170620 ), dot( tanToWorld2, tanNormal74_g170620 ) ) );
					half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
					float3 In_NormalWS3_g170628 = Local_NormalWS250_g170617;
					float4 In_Shader3_g170628 = Local_Masks109_g170617;
					float4 In_Emissive3_g170628 = half4( 1, 1, 1, 1 );
					float3 temp_output_3_0_g170629 = Local_Albedo139_g170617;
					float dotResult20_g170629 = dot( temp_output_3_0_g170629 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Local_Grayscale110_g170617 = dotResult20_g170629;
					float In_Grayscale3_g170628 = Local_Grayscale110_g170617;
					float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
					half Local_Luminosity145_g170617 = clampResult144_g170617;
					float In_Luminosity3_g170628 = Local_Luminosity145_g170617;
					float In_MultiMask3_g170628 = Local_MultiMask78_g170617;
					float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
					#else
					float staticSwitch236_g170617 = temp_output_187_0_g170617;
					#endif
					half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
					float In_AlphaClip3_g170628 = Local_AlphaClip111_g170617;
					half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
					float In_AlphaFade3_g170628 = Local_AlphaFade246_g170617;
					float3 temp_cast_4 = (1.0).xxx;
					float3 In_Translucency3_g170628 = temp_cast_4;
					float In_Transmission3_g170628 = 1.0;
					float In_Thickness3_g170628 = 0.0;
					float In_Diffusion3_g170628 = 0.0;
					float In_Depth3_g170628 = 0.0;
					{
					Data3_g170628.Dummy = In_Dummy3_g170628;
					Data3_g170628.Albedo = In_Albedo3_g170628;
					Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
					Data3_g170628.NormalTS = In_NormalTS3_g170628;
					Data3_g170628.NormalWS = In_NormalWS3_g170628;
					Data3_g170628.Shader = In_Shader3_g170628;
					Data3_g170628.Emissive= In_Emissive3_g170628;
					Data3_g170628.MultiMask = In_MultiMask3_g170628;
					Data3_g170628.Grayscale = In_Grayscale3_g170628;
					Data3_g170628.Luminosity = In_Luminosity3_g170628;
					Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
					Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
					Data3_g170628.Translucency = In_Translucency3_g170628;
					Data3_g170628.Transmission = In_Transmission3_g170628;
					Data3_g170628.Thickness = In_Thickness3_g170628;
					Data3_g170628.Diffusion = In_Diffusion3_g170628;
					Data3_g170628.Depth = In_Depth3_g170628;
					}
					TVEVisualData Data4_g170646 = Data3_g170628;
					float Out_Dummy4_g170646 = 0;
					float3 Out_Albedo4_g170646 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170646 = float2( 0,0 );
					float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
					float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170646 = 0;
					float Out_Grayscale4_g170646 = 0;
					float Out_Luminosity4_g170646 = 0;
					float Out_AlphaClip4_g170646 = 0;
					float Out_AlphaFade4_g170646 = 0;
					float3 Out_Translucency4_g170646 = float3( 0,0,0 );
					float Out_Transmission4_g170646 = 0;
					float Out_Thickness4_g170646 = 0;
					float Out_Diffusion4_g170646 = 0;
					float Out_Depth4_g170646 = 0;
					{
					Out_Dummy4_g170646 = Data4_g170646.Dummy;
					Out_Albedo4_g170646 = Data4_g170646.Albedo;
					Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
					Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
					Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
					Out_Shader4_g170646 = Data4_g170646.Shader;
					Out_Emissive4_g170646= Data4_g170646.Emissive;
					Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
					Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
					Out_Luminosity4_g170646= Data4_g170646.Luminosity;
					Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
					Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
					Out_Translucency4_g170646 = Data4_g170646.Translucency;
					Out_Transmission4_g170646 = Data4_g170646.Transmission;
					Out_Thickness4_g170646 = Data4_g170646.Thickness;
					Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
					Out_Depth4_g170646= Data4_g170646.Depth;
					}
					half3 Visual_Albedo527_g170638 = Out_Albedo4_g170646;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170639) = _SecondAlbedoTex;
					float localFilterTexture19_g170652 = ( 0.0 );
					SamplerState SS19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170652 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170652 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170652 = SamplerDefault19_g170652;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170652 = SamplerDefault19_g170652;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170652 = SamplerPoint19_g170652;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170652 = SamplerLow19_g170652;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170652 = SamplerMedium19_g170652;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170652 = SamplerHigh19_g170652;
					#endif
					}
					SamplerState Sampler276_g170639 = SS19_g170652;
					half4 Local_LayerCoords790_g170638 = _second_coord_value;
					float4 temp_output_37_0_g170639 = Local_LayerCoords790_g170638;
					half4 Coords276_g170639 = temp_output_37_0_g170639;
					half2 TexCoord276_g170639 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170639 = SampleMain( Texture276_g170639 , Sampler276_g170639 , Coords276_g170639 , TexCoord276_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170639) = _SecondAlbedoTex;
					SamplerState Sampler275_g170639 = SS19_g170652;
					half4 Coords275_g170639 = temp_output_37_0_g170639;
					half2 TexCoord275_g170639 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170639 = SampleExtra( Texture275_g170639 , Sampler275_g170639 , Coords275_g170639 , TexCoord275_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170639) = _SecondAlbedoTex;
					SamplerState Sampler238_g170639 = SS19_g170652;
					half4 Coords238_g170639 = temp_output_37_0_g170639;
					TVEModelData Data15_g170655 = Data16_g170483;
					float Out_Dummy15_g170655 = 0;
					float3 Out_PositionWS15_g170655 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170655 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170655 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170655 = float3( 0,0,0 );
					float4 Out_VertexData15_g170655 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170655 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170655 = Data15_g170655.Dummy;
					Out_PositionWS15_g170655 = Data15_g170655.PositionWS;
					Out_PositionWO15_g170655 = Data15_g170655.PositionWO;
					Out_PivotWS15_g170655 = Data15_g170655.PivotWS;
					Out_PivotWO15_g170655 = Data15_g170655.PivotWO;
					Out_NormalWS15_g170655 = Data15_g170655.NormalWS;
					Out_ViewDirWS15_g170655 = Data15_g170655.ViewDirWS;
					Out_VertexData15_g170655 = Data15_g170655.VertexData;
					Out_BoundsData15_g170655 = Data15_g170655.BoundsData;
					}
					half3 Model_PositionWO636_g170638 = Out_PositionWO15_g170655;
					float3 temp_output_279_0_g170639 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170639 = temp_output_279_0_g170639;
					half4 localSamplePlanar2D238_g170639 = SamplePlanar2D( Texture238_g170639 , Sampler238_g170639 , Coords238_g170639 , WorldPosition238_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170639) = _SecondAlbedoTex;
					SamplerState Sampler246_g170639 = SS19_g170652;
					half4 Coords246_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition246_g170639 = temp_output_279_0_g170639;
					half3 Model_NormalWS869_g170638 = Out_NormalWS15_g170655;
					float3 temp_output_280_0_g170639 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170639 = temp_output_280_0_g170639;
					half4 localSamplePlanar3D246_g170639 = SamplePlanar3D( Texture246_g170639 , Sampler246_g170639 , Coords246_g170639 , WorldPosition246_g170639 , WorldNormal246_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170639) = _SecondAlbedoTex;
					SamplerState Sampler234_g170639 = SS19_g170652;
					float4 Coords234_g170639 = temp_output_37_0_g170639;
					float3 WorldPosition234_g170639 = temp_output_279_0_g170639;
					float4 localSampleStochastic2D234_g170639 = SampleStochastic2D( Texture234_g170639 , Sampler234_g170639 , Coords234_g170639 , WorldPosition234_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170639) = _SecondAlbedoTex;
					SamplerState Sampler263_g170639 = SS19_g170652;
					half4 Coords263_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition263_g170639 = temp_output_279_0_g170639;
					half3 WorldNormal263_g170639 = temp_output_280_0_g170639;
					half4 localSampleStochastic3D263_g170639 = SampleStochastic3D( Texture263_g170639 , Sampler263_g170639 , Coords263_g170639 , WorldPosition263_g170639 , WorldNormal263_g170639 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170638 = localSampleExtra275_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170638 = localSamplePlanar2D238_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170638 = localSamplePlanar3D246_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170638 = localSampleStochastic2D234_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170638 = localSampleStochastic3D263_g170639;
					#else
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#endif
					half4 Local_AlbedoTex777_g170638 = staticSwitch693_g170638;
					float3 lerpResult716_g170638 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170638).xyz , _SecondAlbedoValue);
					half3 Local_AlbedoRGB771_g170638 = lerpResult716_g170638;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170641) = _SecondShaderTex;
					float localFilterTexture30_g170654 = ( 0.0 );
					SamplerState SS30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170654 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170654 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170654 = SamplerDefault30_g170654;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170654 = SamplerDefault30_g170654;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170654 = SamplerPoint30_g170654;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170654 = SamplerLow30_g170654;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170654 = SamplerMedium30_g170654;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170654 = SamplerHigh30_g170654;
					#endif
					}
					SamplerState Sampler276_g170641 = SS30_g170654;
					float4 temp_output_37_0_g170641 = Local_LayerCoords790_g170638;
					half4 Coords276_g170641 = temp_output_37_0_g170641;
					half2 TexCoord276_g170641 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170641 = SampleMain( Texture276_g170641 , Sampler276_g170641 , Coords276_g170641 , TexCoord276_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170641) = _SecondShaderTex;
					SamplerState Sampler275_g170641 = SS30_g170654;
					half4 Coords275_g170641 = temp_output_37_0_g170641;
					half2 TexCoord275_g170641 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170641 = SampleExtra( Texture275_g170641 , Sampler275_g170641 , Coords275_g170641 , TexCoord275_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170641) = _SecondShaderTex;
					SamplerState Sampler238_g170641 = SS30_g170654;
					half4 Coords238_g170641 = temp_output_37_0_g170641;
					float3 temp_output_279_0_g170641 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170641 = temp_output_279_0_g170641;
					half4 localSamplePlanar2D238_g170641 = SamplePlanar2D( Texture238_g170641 , Sampler238_g170641 , Coords238_g170641 , WorldPosition238_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170641) = _SecondShaderTex;
					SamplerState Sampler246_g170641 = SS30_g170654;
					half4 Coords246_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition246_g170641 = temp_output_279_0_g170641;
					float3 temp_output_280_0_g170641 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170641 = temp_output_280_0_g170641;
					half4 localSamplePlanar3D246_g170641 = SamplePlanar3D( Texture246_g170641 , Sampler246_g170641 , Coords246_g170641 , WorldPosition246_g170641 , WorldNormal246_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170641) = _SecondShaderTex;
					SamplerState Sampler234_g170641 = SS30_g170654;
					float4 Coords234_g170641 = temp_output_37_0_g170641;
					float3 WorldPosition234_g170641 = temp_output_279_0_g170641;
					float4 localSampleStochastic2D234_g170641 = SampleStochastic2D( Texture234_g170641 , Sampler234_g170641 , Coords234_g170641 , WorldPosition234_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170641) = _SecondShaderTex;
					SamplerState Sampler263_g170641 = SS30_g170654;
					half4 Coords263_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition263_g170641 = temp_output_279_0_g170641;
					half3 WorldNormal263_g170641 = temp_output_280_0_g170641;
					half4 localSampleStochastic3D263_g170641 = SampleStochastic3D( Texture263_g170641 , Sampler263_g170641 , Coords263_g170641 , WorldPosition263_g170641 , WorldNormal263_g170641 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170638 = localSampleExtra275_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170638 = localSamplePlanar2D238_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170638 = localSamplePlanar3D246_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170638 = localSampleStochastic2D234_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170638 = localSampleStochastic3D263_g170641;
					#else
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#endif
					half4 Local_ShaderTex775_g170638 = staticSwitch722_g170638;
					float clampResult17_g170672 = clamp( (Local_ShaderTex775_g170638).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170671 = _SecondOcclusionRemap.x;
					float temp_output_9_0_g170671 = ( clampResult17_g170672 - temp_output_7_0_g170671 );
					float lerpResult1058_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170671 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
					half Local_Occlusion1067_g170638 = lerpResult1058_g170638;
					float clampResult17_g170674 = clamp( (Local_ShaderTex775_g170638).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170673 = _SecondSmoothnessRemap.x;
					float temp_output_9_0_g170673 = ( clampResult17_g170674 - temp_output_7_0_g170673 );
					half Local_Smoothness1068_g170638 = ( saturate( ( ( temp_output_9_0_g170673 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
					float4 appendResult749_g170638 = (float4(( (Local_ShaderTex775_g170638).x * _SecondMetallicValue ) , Local_Occlusion1067_g170638 , (Local_ShaderTex775_g170638).z , Local_Smoothness1068_g170638));
					half4 Local_Masks750_g170638 = appendResult749_g170638;
					float clampResult17_g170675 = clamp( (Local_Masks750_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170678 = _SecondMultiRemap.x;
					float temp_output_9_0_g170678 = ( clampResult17_g170675 - temp_output_7_0_g170678 );
					float temp_output_765_0_g170638 = saturate( ( ( temp_output_9_0_g170678 * _SecondMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170638 = temp_output_765_0_g170638;
					float lerpResult705_g170638 = lerp( 1.0 , Local_MultiMask767_g170638 , _SecondColorMode);
					float4 lerpResult706_g170638 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170638);
					half3 Local_ColorRGB774_g170638 = (lerpResult706_g170638).rgb;
					half3 Local_Albedo768_g170638 = ( Local_AlbedoRGB771_g170638 * Local_ColorRGB774_g170638 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170649 = 2.0;
					#else
					float staticSwitch1_g170649 = 4.594794;
					#endif
					float3 lerpResult985_g170638 = lerp( Local_Albedo768_g170638 , ( Visual_Albedo527_g170638 * Local_Albedo768_g170638 * staticSwitch1_g170649 ) , _SecondBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170642) = _SecondMaskTex;
					SamplerState Sampler276_g170642 = sampler_Linear_Repeat;
					half4 Local_BlendCoords813_g170638 = _second_mask_coord_value;
					float4 temp_output_37_0_g170642 = Local_BlendCoords813_g170638;
					half4 Coords276_g170642 = temp_output_37_0_g170642;
					half2 TexCoord276_g170642 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170642 = SampleMain( Texture276_g170642 , Sampler276_g170642 , Coords276_g170642 , TexCoord276_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170642) = _SecondMaskTex;
					SamplerState Sampler275_g170642 = sampler_Linear_Repeat;
					half4 Coords275_g170642 = temp_output_37_0_g170642;
					half2 TexCoord275_g170642 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170642 = SampleExtra( Texture275_g170642 , Sampler275_g170642 , Coords275_g170642 , TexCoord275_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170642) = _SecondMaskTex;
					SamplerState Sampler238_g170642 = sampler_Linear_Repeat;
					half4 Coords238_g170642 = temp_output_37_0_g170642;
					float3 temp_output_279_0_g170642 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170642 = temp_output_279_0_g170642;
					half4 localSamplePlanar2D238_g170642 = SamplePlanar2D( Texture238_g170642 , Sampler238_g170642 , Coords238_g170642 , WorldPosition238_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170642) = _SecondMaskTex;
					SamplerState Sampler246_g170642 = sampler_Linear_Repeat;
					half4 Coords246_g170642 = temp_output_37_0_g170642;
					half3 WorldPosition246_g170642 = temp_output_279_0_g170642;
					float3 temp_output_280_0_g170642 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170642 = temp_output_280_0_g170642;
					half4 localSamplePlanar3D246_g170642 = SamplePlanar3D( Texture246_g170642 , Sampler246_g170642 , Coords246_g170642 , WorldPosition246_g170642 , WorldNormal246_g170642 );
					#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170638 = localSampleExtra275_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170638 = localSamplePlanar2D238_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170638 = localSamplePlanar3D246_g170642;
					#else
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#endif
					half4 Local_MaskTex861_g170638 = staticSwitch817_g170638;
					float clampResult17_g170658 = clamp( (Local_MaskTex861_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170662 = _SecondMaskRemap.x;
					float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
					float lerpResult1015_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
					half Blend_TexMask429_g170638 = lerpResult1015_g170638;
					half Visual_Luminosity1041_g170638 = Out_Luminosity4_g170646;
					float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170638 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170668 = _SecondLumaRemap.x;
					float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
					float lerpResult1036_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
					half Blend_LumaMask1033_g170638 = lerpResult1036_g170638;
					half3 Visual_NormalWS951_g170638 = Out_NormalWS4_g170646;
					float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170638).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170665 = _SecondProjRemap.x;
					float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
					float lerpResult996_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
					half Blend_ProjMask434_g170638 = lerpResult996_g170638;
					half4 Model_VertexMasks964_g170638 = Out_VertexData15_g170655;
					float4 break965_g170638 = Model_VertexMasks964_g170638;
					float4 break33_g170659 = _second_vert_mode;
					float temp_output_30_0_g170659 = ( break965_g170638.x * break33_g170659.x );
					float temp_output_29_0_g170659 = ( break965_g170638.y * break33_g170659.y );
					float temp_output_31_0_g170659 = ( break965_g170638.z * break33_g170659.z );
					float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170638.w * break33_g170659.w ) );
					float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170661 = _SecondMeshRemap.x;
					float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
					float lerpResult1017_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
					float temp_output_6_0_g170660 = lerpResult1017_g170638;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + _SecondMeshMode );
					#else
					float staticSwitch14_g170660 = temp_output_6_0_g170660;
					#endif
					half Blend_VertMask918_g170638 = staticSwitch14_g170660;
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170645 = Data204_g170496;
					float Out_Dummy15_g170645 = 0;
					float4 Out_CoatDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170645 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170645 = Data15_g170645.Dummy;
					Out_CoatDataRT15_g170645 = Data15_g170645.CoatDataRT;
					Out_PaintDataRT15_g170645 = Data15_g170645.PaintDataRT;
					Out_GlowDataRT15_g170645= Data15_g170645.GlowDataRT;
					Out_AtmoDataRT15_g170645= Data15_g170645.AtmoDataRT;
					Out_FadeDataRT15_g170645= Data15_g170645.FadeDataRT;
					Out_FormDataRT15_g170645 = Data15_g170645.FormDataRT;
					Out_FlowDataRT15_g170645 = Data15_g170645.FlowDataRT;
					}
					half4 Global_CoatParams975_g170638 = Out_CoatDataRT15_g170645;
					float temp_output_6_0_g170669 = (Global_CoatParams975_g170638).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + _SecondElementMode );
					#else
					float staticSwitch14_g170669 = temp_output_6_0_g170669;
					#endif
					#ifdef TVE_SECOND_ELEMENT
					float staticSwitch971_g170638 = staticSwitch14_g170669;
					#else
					float staticSwitch971_g170638 = TVE_CoatParams.z;
					#endif
					float lerpResult1013_g170638 = lerp( 1.0 , staticSwitch971_g170638 , ( _SecondGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask972_g170638 = lerpResult1013_g170638;
					float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170638 * Blend_LumaMask1033_g170638 * Blend_ProjMask434_g170638 * Blend_VertMask918_g170638 * Blend_GlobalMask972_g170638 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170666 = _SecondBlendRemap.x;
					float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
					half Blend_Mask412_g170638 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
					float3 lerpResult403_g170638 = lerp( Visual_Albedo527_g170638 , lerpResult985_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float3 staticSwitch415_g170638 = lerpResult403_g170638;
					#else
					float3 staticSwitch415_g170638 = Visual_Albedo527_g170638;
					#endif
					half3 Final_Albedo601_g170638 = staticSwitch415_g170638;
					float3 In_Albedo3_g170656 = Final_Albedo601_g170638;
					float3 In_AlbedoRaw3_g170656 = Final_Albedo601_g170638;
					half2 Visual_NormalTS529_g170638 = Out_NormalTS4_g170646;
					float2 lerpResult40_g170647 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170638 , _SecondBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170640) = _SecondNormalTex;
					float localFilterTexture29_g170653 = ( 0.0 );
					SamplerState SS29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170653 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170653 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170653 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170653 = SamplerDefault29_g170653;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170653 = SamplerDefault29_g170653;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170653 = SamplerPoint29_g170653;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170653 = SamplerLow29_g170653;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170653 = SamplerMedium29_g170653;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170653 = SamplerHigh29_g170653;
					#endif
					}
					SamplerState Sampler276_g170640 = SS29_g170653;
					float4 temp_output_37_0_g170640 = Local_LayerCoords790_g170638;
					half4 Coords276_g170640 = temp_output_37_0_g170640;
					half2 TexCoord276_g170640 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170640 = SampleMain( Texture276_g170640 , Sampler276_g170640 , Coords276_g170640 , TexCoord276_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170640) = _SecondNormalTex;
					SamplerState Sampler275_g170640 = SS29_g170653;
					half4 Coords275_g170640 = temp_output_37_0_g170640;
					half2 TexCoord275_g170640 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170640 = SampleExtra( Texture275_g170640 , Sampler275_g170640 , Coords275_g170640 , TexCoord275_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170640) = _SecondNormalTex;
					SamplerState Sampler238_g170640 = SS29_g170653;
					half4 Coords238_g170640 = temp_output_37_0_g170640;
					float3 temp_output_279_0_g170640 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170640 = temp_output_279_0_g170640;
					half4 localSamplePlanar2D238_g170640 = SamplePlanar2D( Texture238_g170640 , Sampler238_g170640 , Coords238_g170640 , WorldPosition238_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170640) = _SecondNormalTex;
					SamplerState Sampler246_g170640 = SS29_g170653;
					half4 Coords246_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition246_g170640 = temp_output_279_0_g170640;
					float3 temp_output_280_0_g170640 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170640 = temp_output_280_0_g170640;
					half4 localSamplePlanar3D246_g170640 = SamplePlanar3D( Texture246_g170640 , Sampler246_g170640 , Coords246_g170640 , WorldPosition246_g170640 , WorldNormal246_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170640) = _SecondNormalTex;
					SamplerState Sampler234_g170640 = SS29_g170653;
					float4 Coords234_g170640 = temp_output_37_0_g170640;
					float3 WorldPosition234_g170640 = temp_output_279_0_g170640;
					float4 localSampleStochastic2D234_g170640 = SampleStochastic2D( Texture234_g170640 , Sampler234_g170640 , Coords234_g170640 , WorldPosition234_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170640) = _SecondNormalTex;
					SamplerState Sampler263_g170640 = SS29_g170653;
					half4 Coords263_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition263_g170640 = temp_output_279_0_g170640;
					half3 WorldNormal263_g170640 = temp_output_280_0_g170640;
					half4 localSampleStochastic3D263_g170640 = SampleStochastic3D( Texture263_g170640 , Sampler263_g170640 , Coords263_g170640 , WorldPosition263_g170640 , WorldNormal263_g170640 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170638 = localSampleExtra275_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170638 = localSamplePlanar2D238_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170638 = localSamplePlanar3D246_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170638 = localSampleStochastic2D234_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170638 = localSampleStochastic3D263_g170640;
					#else
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#endif
					half4 Local_NormalTex776_g170638 = staticSwitch698_g170638;
					half4 Normal_Packed45_g170643 = Local_NormalTex776_g170638;
					float2 appendResult58_g170643 = (float2(( (Normal_Packed45_g170643).x * (Normal_Packed45_g170643).w ) , (Normal_Packed45_g170643).y));
					half2 Normal_Default50_g170643 = appendResult58_g170643;
					half2 Normal_ASTC41_g170643 = (Normal_Packed45_g170643).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170643 = Normal_ASTC41_g170643;
					#else
					float2 staticSwitch38_g170643 = Normal_Default50_g170643;
					#endif
					half2 Normal_NO_DTX544_g170643 = (Normal_Packed45_g170643).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170643 = Normal_NO_DTX544_g170643;
					#else
					float2 staticSwitch37_g170643 = staticSwitch38_g170643;
					#endif
					float2 temp_output_724_0_g170638 = ( (staticSwitch37_g170643*2.0 + -1.0) * _SecondNormalValue );
					half2 Normal_Planar45_g170644 = temp_output_724_0_g170638;
					float2 break71_g170644 = Normal_Planar45_g170644;
					float3 appendResult72_g170644 = (float3(break71_g170644.x , 0.0 , break71_g170644.y));
					float2 temp_output_858_0_g170638 = (mul( ase_worldToTangent, appendResult72_g170644 )).xy;
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#else
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#endif
					half2 Local_NormalTS729_g170638 = staticSwitch727_g170638;
					float2 temp_output_36_0_g170647 = ( lerpResult40_g170647 + Local_NormalTS729_g170638 );
					float2 lerpResult405_g170638 = lerp( Visual_NormalTS529_g170638 , temp_output_36_0_g170647 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float2 staticSwitch418_g170638 = lerpResult405_g170638;
					#else
					float2 staticSwitch418_g170638 = Visual_NormalTS529_g170638;
					#endif
					half2 Final_NormalTS612_g170638 = staticSwitch418_g170638;
					float2 In_NormalTS3_g170656 = Final_NormalTS612_g170638;
					float3 appendResult68_g170648 = (float3(Final_NormalTS612_g170638 , 1.0));
					float3 tanNormal74_g170648 = appendResult68_g170648;
					float3 worldNormal74_g170648 = normalize( float3( dot( tanToWorld0, tanNormal74_g170648 ), dot( tanToWorld1, tanNormal74_g170648 ), dot( tanToWorld2, tanNormal74_g170648 ) ) );
					half3 Final_NormalWS950_g170638 = worldNormal74_g170648;
					float3 In_NormalWS3_g170656 = Final_NormalWS950_g170638;
					half4 Visual_Shader531_g170638 = Out_Shader4_g170646;
					float4 lerpResult994_g170638 = lerp( Local_Masks750_g170638 , ( Visual_Shader531_g170638 * Local_Masks750_g170638 ) , _SecondBlendShaderValue);
					float4 lerpResult440_g170638 = lerp( Visual_Shader531_g170638 , lerpResult994_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float4 staticSwitch451_g170638 = lerpResult440_g170638;
					#else
					float4 staticSwitch451_g170638 = Visual_Shader531_g170638;
					#endif
					half4 Final_Masks613_g170638 = staticSwitch451_g170638;
					float4 In_Shader3_g170656 = Final_Masks613_g170638;
					float4 In_Emissive3_g170656 = Out_Emissive4_g170646;
					float3 temp_output_3_0_g170650 = Final_Albedo601_g170638;
					float dotResult20_g170650 = dot( temp_output_3_0_g170650 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170638 = dotResult20_g170650;
					float In_Grayscale3_g170656 = Final_Grayscale615_g170638;
					float clampResult651_g170638 = clamp( saturate( ( Final_Grayscale615_g170638 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170638 = clampResult651_g170638;
					float In_Luminosity3_g170656 = Final_Luminosity652_g170638;
					half Visual_MultiMask547_g170638 = Out_MultiMask4_g170646;
					float lerpResult477_g170638 = lerp( Visual_MultiMask547_g170638 , Local_MultiMask767_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch482_g170638 = lerpResult477_g170638;
					#else
					float staticSwitch482_g170638 = Visual_MultiMask547_g170638;
					#endif
					half Final_MultiMask572_g170638 = staticSwitch482_g170638;
					float In_MultiMask3_g170656 = Final_MultiMask572_g170638;
					half Visual_AlphaClip559_g170638 = Out_AlphaClip4_g170646;
					float temp_output_718_0_g170638 = (Local_AlbedoTex777_g170638).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch932_g170638 = ( temp_output_718_0_g170638 - _SecondAlphaClipValue );
					#else
					float staticSwitch932_g170638 = temp_output_718_0_g170638;
					#endif
					half Local_AlphaClip772_g170638 = staticSwitch932_g170638;
					float lerpResult448_g170638 = lerp( Visual_AlphaClip559_g170638 , Local_AlphaClip772_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch564_g170638 = lerpResult448_g170638;
					#else
					float staticSwitch564_g170638 = Visual_AlphaClip559_g170638;
					#endif
					half Final_AlphaClip602_g170638 = staticSwitch564_g170638;
					float In_AlphaClip3_g170656 = Final_AlphaClip602_g170638;
					half Visual_AlphaFade588_g170638 = Out_AlphaFade4_g170646;
					half Local_AlphaFade773_g170638 = (lerpResult706_g170638).a;
					float lerpResult604_g170638 = lerp( Visual_AlphaFade588_g170638 , Local_AlphaFade773_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch608_g170638 = lerpResult604_g170638;
					#else
					float staticSwitch608_g170638 = Visual_AlphaFade588_g170638;
					#endif
					half Final_AlphaFade611_g170638 = staticSwitch608_g170638;
					float In_AlphaFade3_g170656 = Final_AlphaFade611_g170638;
					float3 In_Translucency3_g170656 = Out_Translucency4_g170646;
					float In_Transmission3_g170656 = Out_Transmission4_g170646;
					float In_Thickness3_g170656 = Out_Thickness4_g170646;
					float In_Diffusion3_g170656 = Out_Diffusion4_g170646;
					float In_Depth3_g170656 = Out_Depth4_g170646;
					{
					Data3_g170656.Dummy = In_Dummy3_g170656;
					Data3_g170656.Albedo = In_Albedo3_g170656;
					Data3_g170656.AlbedoRaw = In_AlbedoRaw3_g170656;
					Data3_g170656.NormalTS = In_NormalTS3_g170656;
					Data3_g170656.NormalWS = In_NormalWS3_g170656;
					Data3_g170656.Shader = In_Shader3_g170656;
					Data3_g170656.Emissive= In_Emissive3_g170656;
					Data3_g170656.MultiMask = In_MultiMask3_g170656;
					Data3_g170656.Grayscale = In_Grayscale3_g170656;
					Data3_g170656.Luminosity = In_Luminosity3_g170656;
					Data3_g170656.AlphaClip = In_AlphaClip3_g170656;
					Data3_g170656.AlphaFade = In_AlphaFade3_g170656;
					Data3_g170656.Translucency = In_Translucency3_g170656;
					Data3_g170656.Transmission = In_Transmission3_g170656;
					Data3_g170656.Thickness = In_Thickness3_g170656;
					Data3_g170656.Diffusion = In_Diffusion3_g170656;
					Data3_g170656.Depth = In_Depth3_g170656;
					}
					TVEVisualData Data4_g170694 = Data3_g170656;
					float Out_Dummy4_g170694 = 0;
					float3 Out_Albedo4_g170694 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170694 = float2( 0,0 );
					float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
					float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170694 = 0;
					float Out_Grayscale4_g170694 = 0;
					float Out_Luminosity4_g170694 = 0;
					float Out_AlphaClip4_g170694 = 0;
					float Out_AlphaFade4_g170694 = 0;
					float3 Out_Translucency4_g170694 = float3( 0,0,0 );
					float Out_Transmission4_g170694 = 0;
					float Out_Thickness4_g170694 = 0;
					float Out_Diffusion4_g170694 = 0;
					float Out_Depth4_g170694 = 0;
					{
					Out_Dummy4_g170694 = Data4_g170694.Dummy;
					Out_Albedo4_g170694 = Data4_g170694.Albedo;
					Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
					Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
					Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
					Out_Shader4_g170694 = Data4_g170694.Shader;
					Out_Emissive4_g170694= Data4_g170694.Emissive;
					Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
					Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
					Out_Luminosity4_g170694= Data4_g170694.Luminosity;
					Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
					Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
					Out_Translucency4_g170694 = Data4_g170694.Translucency;
					Out_Transmission4_g170694 = Data4_g170694.Transmission;
					Out_Thickness4_g170694 = Data4_g170694.Thickness;
					Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
					Out_Depth4_g170694= Data4_g170694.Depth;
					}
					half3 Visual_Albedo527_g170687 = Out_Albedo4_g170694;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170688) = _ThirdAlbedoTex;
					float localFilterTexture19_g170703 = ( 0.0 );
					SamplerState SS19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170703 = SamplerDefault19_g170703;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170703 = SamplerDefault19_g170703;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170703 = SamplerPoint19_g170703;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170703 = SamplerLow19_g170703;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170703 = SamplerMedium19_g170703;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170703 = SamplerHigh19_g170703;
					#endif
					}
					SamplerState Sampler276_g170688 = SS19_g170703;
					half4 Local_LayerCoords790_g170687 = _third_coord_value;
					float4 temp_output_37_0_g170688 = Local_LayerCoords790_g170687;
					half4 Coords276_g170688 = temp_output_37_0_g170688;
					half2 TexCoord276_g170688 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170688 = SampleMain( Texture276_g170688 , Sampler276_g170688 , Coords276_g170688 , TexCoord276_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler275_g170688 = SS19_g170703;
					half4 Coords275_g170688 = temp_output_37_0_g170688;
					half2 TexCoord275_g170688 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170688 = SampleExtra( Texture275_g170688 , Sampler275_g170688 , Coords275_g170688 , TexCoord275_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler238_g170688 = SS19_g170703;
					half4 Coords238_g170688 = temp_output_37_0_g170688;
					TVEModelData Data15_g170706 = Data16_g170483;
					float Out_Dummy15_g170706 = 0;
					float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
					float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170706 = Data15_g170706.Dummy;
					Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
					Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
					Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
					Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
					Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
					Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
					Out_VertexData15_g170706 = Data15_g170706.VertexData;
					Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
					}
					half3 Model_PositionWO636_g170687 = Out_PositionWO15_g170706;
					float3 temp_output_279_0_g170688 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170688 = temp_output_279_0_g170688;
					half4 localSamplePlanar2D238_g170688 = SamplePlanar2D( Texture238_g170688 , Sampler238_g170688 , Coords238_g170688 , WorldPosition238_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler246_g170688 = SS19_g170703;
					half4 Coords246_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition246_g170688 = temp_output_279_0_g170688;
					half3 Model_NormalWS869_g170687 = Out_NormalWS15_g170706;
					float3 temp_output_280_0_g170688 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170688 = temp_output_280_0_g170688;
					half4 localSamplePlanar3D246_g170688 = SamplePlanar3D( Texture246_g170688 , Sampler246_g170688 , Coords246_g170688 , WorldPosition246_g170688 , WorldNormal246_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler234_g170688 = SS19_g170703;
					float4 Coords234_g170688 = temp_output_37_0_g170688;
					float3 WorldPosition234_g170688 = temp_output_279_0_g170688;
					float4 localSampleStochastic2D234_g170688 = SampleStochastic2D( Texture234_g170688 , Sampler234_g170688 , Coords234_g170688 , WorldPosition234_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler263_g170688 = SS19_g170703;
					half4 Coords263_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition263_g170688 = temp_output_279_0_g170688;
					half3 WorldNormal263_g170688 = temp_output_280_0_g170688;
					half4 localSampleStochastic3D263_g170688 = SampleStochastic3D( Texture263_g170688 , Sampler263_g170688 , Coords263_g170688 , WorldPosition263_g170688 , WorldNormal263_g170688 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170687 = localSampleExtra275_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170687 = localSamplePlanar2D238_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170687 = localSamplePlanar3D246_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170687 = localSampleStochastic2D234_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170687 = localSampleStochastic3D263_g170688;
					#else
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#endif
					half4 Local_AlbedoTex777_g170687 = staticSwitch693_g170687;
					float3 lerpResult716_g170687 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170687).xyz , _ThirdAlbedoValue);
					half3 Local_AlbedoRGB771_g170687 = lerpResult716_g170687;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170690) = _ThirdShaderTex;
					float localFilterTexture30_g170705 = ( 0.0 );
					SamplerState SS30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170705 = SamplerDefault30_g170705;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170705 = SamplerDefault30_g170705;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170705 = SamplerPoint30_g170705;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170705 = SamplerLow30_g170705;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170705 = SamplerMedium30_g170705;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170705 = SamplerHigh30_g170705;
					#endif
					}
					SamplerState Sampler276_g170690 = SS30_g170705;
					float4 temp_output_37_0_g170690 = Local_LayerCoords790_g170687;
					half4 Coords276_g170690 = temp_output_37_0_g170690;
					half2 TexCoord276_g170690 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170690 = SampleMain( Texture276_g170690 , Sampler276_g170690 , Coords276_g170690 , TexCoord276_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170690) = _ThirdShaderTex;
					SamplerState Sampler275_g170690 = SS30_g170705;
					half4 Coords275_g170690 = temp_output_37_0_g170690;
					half2 TexCoord275_g170690 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170690 = SampleExtra( Texture275_g170690 , Sampler275_g170690 , Coords275_g170690 , TexCoord275_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170690) = _ThirdShaderTex;
					SamplerState Sampler238_g170690 = SS30_g170705;
					half4 Coords238_g170690 = temp_output_37_0_g170690;
					float3 temp_output_279_0_g170690 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170690 = temp_output_279_0_g170690;
					half4 localSamplePlanar2D238_g170690 = SamplePlanar2D( Texture238_g170690 , Sampler238_g170690 , Coords238_g170690 , WorldPosition238_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170690) = _ThirdShaderTex;
					SamplerState Sampler246_g170690 = SS30_g170705;
					half4 Coords246_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition246_g170690 = temp_output_279_0_g170690;
					float3 temp_output_280_0_g170690 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170690 = temp_output_280_0_g170690;
					half4 localSamplePlanar3D246_g170690 = SamplePlanar3D( Texture246_g170690 , Sampler246_g170690 , Coords246_g170690 , WorldPosition246_g170690 , WorldNormal246_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170690) = _ThirdShaderTex;
					SamplerState Sampler234_g170690 = SS30_g170705;
					float4 Coords234_g170690 = temp_output_37_0_g170690;
					float3 WorldPosition234_g170690 = temp_output_279_0_g170690;
					float4 localSampleStochastic2D234_g170690 = SampleStochastic2D( Texture234_g170690 , Sampler234_g170690 , Coords234_g170690 , WorldPosition234_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170690) = _ThirdShaderTex;
					SamplerState Sampler263_g170690 = SS30_g170705;
					half4 Coords263_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition263_g170690 = temp_output_279_0_g170690;
					half3 WorldNormal263_g170690 = temp_output_280_0_g170690;
					half4 localSampleStochastic3D263_g170690 = SampleStochastic3D( Texture263_g170690 , Sampler263_g170690 , Coords263_g170690 , WorldPosition263_g170690 , WorldNormal263_g170690 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170687 = localSampleExtra275_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170687 = localSamplePlanar2D238_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170687 = localSamplePlanar3D246_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170687 = localSampleStochastic2D234_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170687 = localSampleStochastic3D263_g170690;
					#else
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#endif
					half4 Local_ShaderTex775_g170687 = staticSwitch722_g170687;
					float clampResult17_g170724 = clamp( (Local_ShaderTex775_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170723 = _ThirdOcclusionRemap.x;
					float temp_output_9_0_g170723 = ( clampResult17_g170724 - temp_output_7_0_g170723 );
					float lerpResult1072_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170723 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
					half Local_Occlusion1084_g170687 = lerpResult1072_g170687;
					float clampResult17_g170726 = clamp( (Local_ShaderTex775_g170687).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170725 = _ThirdSmoothnessRemap.x;
					float temp_output_9_0_g170725 = ( clampResult17_g170726 - temp_output_7_0_g170725 );
					half Local_Smoothness1085_g170687 = ( saturate( ( ( temp_output_9_0_g170725 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
					float4 appendResult749_g170687 = (float4(( (Local_ShaderTex775_g170687).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170687 , (Local_ShaderTex775_g170687).z , Local_Smoothness1085_g170687));
					half4 Local_Masks750_g170687 = appendResult749_g170687;
					float clampResult17_g170721 = clamp( (Local_Masks750_g170687).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170722 = _ThirdMultiRemap.x;
					float temp_output_9_0_g170722 = ( clampResult17_g170721 - temp_output_7_0_g170722 );
					float temp_output_765_0_g170687 = saturate( ( ( temp_output_9_0_g170722 * _ThirdMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170687 = temp_output_765_0_g170687;
					float lerpResult705_g170687 = lerp( 1.0 , Local_MultiMask767_g170687 , _ThirdColorMode);
					float4 lerpResult706_g170687 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170687);
					half3 Local_ColorRGB774_g170687 = (lerpResult706_g170687).rgb;
					half3 Local_Albedo768_g170687 = ( Local_AlbedoRGB771_g170687 * Local_ColorRGB774_g170687 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170699 = 2.0;
					#else
					float staticSwitch1_g170699 = 4.594794;
					#endif
					float3 lerpResult985_g170687 = lerp( Local_Albedo768_g170687 , ( Visual_Albedo527_g170687 * Local_Albedo768_g170687 * staticSwitch1_g170699 ) , _ThirdBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
					SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
					half4 Local_MaskCoords813_g170687 = _third_mask_coord_value;
					float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170687;
					half4 Coords276_g170701 = temp_output_37_0_g170701;
					half2 TexCoord276_g170701 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
					SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
					half4 Coords275_g170701 = temp_output_37_0_g170701;
					half2 TexCoord275_g170701 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
					SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
					half4 Coords238_g170701 = temp_output_37_0_g170701;
					float3 temp_output_279_0_g170701 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
					half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
					SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
					half4 Coords246_g170701 = temp_output_37_0_g170701;
					half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
					float3 temp_output_280_0_g170701 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
					half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
					#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170687 = localSampleExtra275_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170687 = localSamplePlanar2D238_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170687 = localSamplePlanar3D246_g170701;
					#else
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#endif
					half4 Local_MaskTex861_g170687 = staticSwitch817_g170687;
					float clampResult17_g170708 = clamp( (Local_MaskTex861_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170712 = _ThirdMaskRemap.x;
					float temp_output_9_0_g170712 = ( clampResult17_g170708 - temp_output_7_0_g170712 );
					float lerpResult1028_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170712 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
					half Detail_TexMask429_g170687 = lerpResult1028_g170687;
					half Visual_Luminosity1049_g170687 = Out_Luminosity4_g170694;
					float clampResult17_g170717 = clamp( Visual_Luminosity1049_g170687 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170718 = _ThirdLumaRemap.x;
					float temp_output_9_0_g170718 = ( clampResult17_g170717 - temp_output_7_0_g170718 );
					float lerpResult1040_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170718 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
					half Blend_LumaMask1046_g170687 = lerpResult1040_g170687;
					half4 Model_VertexMasks960_g170687 = Out_VertexData15_g170706;
					float4 break961_g170687 = Model_VertexMasks960_g170687;
					float4 break33_g170709 = _third_vert_mode;
					float temp_output_30_0_g170709 = ( break961_g170687.x * break33_g170709.x );
					float temp_output_29_0_g170709 = ( break961_g170687.y * break33_g170709.y );
					float temp_output_31_0_g170709 = ( break961_g170687.z * break33_g170709.z );
					float temp_output_28_0_g170709 = ( temp_output_30_0_g170709 + temp_output_29_0_g170709 + temp_output_31_0_g170709 + ( break961_g170687.w * break33_g170709.w ) );
					float clampResult17_g170707 = clamp( temp_output_28_0_g170709 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170711 = _ThirdMeshRemap.x;
					float temp_output_9_0_g170711 = ( clampResult17_g170707 - temp_output_7_0_g170711 );
					float lerpResult1026_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
					float temp_output_6_0_g170710 = lerpResult1026_g170687;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170710 = ( temp_output_6_0_g170710 + _ThirdMeshMode );
					#else
					float staticSwitch14_g170710 = temp_output_6_0_g170710;
					#endif
					half Blend_VertMask913_g170687 = staticSwitch14_g170710;
					half3 Visual_NormalWS953_g170687 = Out_NormalWS4_g170694;
					float clampResult17_g170713 = clamp( saturate( (Visual_NormalWS953_g170687).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170715 = _ThirdProjRemap.x;
					float temp_output_9_0_g170715 = ( clampResult17_g170713 - temp_output_7_0_g170715 );
					float lerpResult1004_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170715 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
					half Blend_ProjMask912_g170687 = lerpResult1004_g170687;
					TVEGlobalData Data15_g170696 = Data204_g170496;
					float Out_Dummy15_g170696 = 0;
					float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170696 = Data15_g170696.Dummy;
					Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
					Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
					Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
					Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
					Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
					Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
					Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
					}
					half4 Global_CoatParams972_g170687 = Out_CoatDataRT15_g170696;
					float temp_output_6_0_g170719 = (Global_CoatParams972_g170687).y;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _ThirdElementMode );
					#else
					float staticSwitch14_g170719 = temp_output_6_0_g170719;
					#endif
					#ifdef TVE_THIRD_ELEMENT
					float staticSwitch1056_g170687 = staticSwitch14_g170719;
					#else
					float staticSwitch1056_g170687 = TVE_CoatParams.y;
					#endif
					float lerpResult1060_g170687 = lerp( 1.0 , staticSwitch1056_g170687 , ( _ThirdGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask968_g170687 = lerpResult1060_g170687;
					float clampResult17_g170714 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170687 * Blend_LumaMask1046_g170687 * Blend_VertMask913_g170687 * Blend_ProjMask912_g170687 * Blend_GlobalMask968_g170687 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170716 = _ThirdBlendRemap.x;
					float temp_output_9_0_g170716 = ( clampResult17_g170714 - temp_output_7_0_g170716 );
					half Detail_Mask412_g170687 = ( saturate( ( ( temp_output_9_0_g170716 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
					float3 lerpResult989_g170687 = lerp( Visual_Albedo527_g170687 , lerpResult985_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float3 staticSwitch415_g170687 = lerpResult989_g170687;
					#else
					float3 staticSwitch415_g170687 = Visual_Albedo527_g170687;
					#endif
					half3 Final_Albedo601_g170687 = staticSwitch415_g170687;
					float3 In_Albedo3_g170695 = Final_Albedo601_g170687;
					float3 In_AlbedoRaw3_g170695 = Final_Albedo601_g170687;
					half2 Visual_NormalTS529_g170687 = Out_NormalTS4_g170694;
					float2 lerpResult40_g170697 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170687 , _ThirdBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170689) = _ThirdNormalTex;
					float localFilterTexture29_g170704 = ( 0.0 );
					SamplerState SS29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170704 = SamplerDefault29_g170704;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170704 = SamplerDefault29_g170704;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170704 = SamplerPoint29_g170704;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170704 = SamplerLow29_g170704;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170704 = SamplerMedium29_g170704;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170704 = SamplerHigh29_g170704;
					#endif
					}
					SamplerState Sampler276_g170689 = SS29_g170704;
					float4 temp_output_37_0_g170689 = Local_LayerCoords790_g170687;
					half4 Coords276_g170689 = temp_output_37_0_g170689;
					half2 TexCoord276_g170689 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170689 = SampleMain( Texture276_g170689 , Sampler276_g170689 , Coords276_g170689 , TexCoord276_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170689) = _ThirdNormalTex;
					SamplerState Sampler275_g170689 = SS29_g170704;
					half4 Coords275_g170689 = temp_output_37_0_g170689;
					half2 TexCoord275_g170689 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170689 = SampleExtra( Texture275_g170689 , Sampler275_g170689 , Coords275_g170689 , TexCoord275_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170689) = _ThirdNormalTex;
					SamplerState Sampler238_g170689 = SS29_g170704;
					half4 Coords238_g170689 = temp_output_37_0_g170689;
					float3 temp_output_279_0_g170689 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170689 = temp_output_279_0_g170689;
					half4 localSamplePlanar2D238_g170689 = SamplePlanar2D( Texture238_g170689 , Sampler238_g170689 , Coords238_g170689 , WorldPosition238_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170689) = _ThirdNormalTex;
					SamplerState Sampler246_g170689 = SS29_g170704;
					half4 Coords246_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition246_g170689 = temp_output_279_0_g170689;
					float3 temp_output_280_0_g170689 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170689 = temp_output_280_0_g170689;
					half4 localSamplePlanar3D246_g170689 = SamplePlanar3D( Texture246_g170689 , Sampler246_g170689 , Coords246_g170689 , WorldPosition246_g170689 , WorldNormal246_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170689) = _ThirdNormalTex;
					SamplerState Sampler234_g170689 = SS29_g170704;
					float4 Coords234_g170689 = temp_output_37_0_g170689;
					float3 WorldPosition234_g170689 = temp_output_279_0_g170689;
					float4 localSampleStochastic2D234_g170689 = SampleStochastic2D( Texture234_g170689 , Sampler234_g170689 , Coords234_g170689 , WorldPosition234_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170689) = _ThirdNormalTex;
					SamplerState Sampler263_g170689 = SS29_g170704;
					half4 Coords263_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition263_g170689 = temp_output_279_0_g170689;
					half3 WorldNormal263_g170689 = temp_output_280_0_g170689;
					half4 localSampleStochastic3D263_g170689 = SampleStochastic3D( Texture263_g170689 , Sampler263_g170689 , Coords263_g170689 , WorldPosition263_g170689 , WorldNormal263_g170689 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170687 = localSampleExtra275_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170687 = localSamplePlanar2D238_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170687 = localSamplePlanar3D246_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170687 = localSampleStochastic2D234_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170687 = localSampleStochastic3D263_g170689;
					#else
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#endif
					half4 Local_NormalTex776_g170687 = staticSwitch698_g170687;
					half4 Normal_Packed45_g170691 = Local_NormalTex776_g170687;
					float2 appendResult58_g170691 = (float2(( (Normal_Packed45_g170691).x * (Normal_Packed45_g170691).w ) , (Normal_Packed45_g170691).y));
					half2 Normal_Default50_g170691 = appendResult58_g170691;
					half2 Normal_ASTC41_g170691 = (Normal_Packed45_g170691).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170691 = Normal_ASTC41_g170691;
					#else
					float2 staticSwitch38_g170691 = Normal_Default50_g170691;
					#endif
					half2 Normal_NO_DTX544_g170691 = (Normal_Packed45_g170691).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170691 = Normal_NO_DTX544_g170691;
					#else
					float2 staticSwitch37_g170691 = staticSwitch38_g170691;
					#endif
					float2 temp_output_724_0_g170687 = ( (staticSwitch37_g170691*2.0 + -1.0) * _ThirdNormalValue );
					half2 Normal_Planar45_g170692 = temp_output_724_0_g170687;
					float2 break71_g170692 = Normal_Planar45_g170692;
					float3 appendResult72_g170692 = (float3(break71_g170692.x , 0.0 , break71_g170692.y));
					float2 temp_output_858_0_g170687 = (mul( ase_worldToTangent, appendResult72_g170692 )).xy;
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#else
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#endif
					half2 Local_NormalTS729_g170687 = staticSwitch727_g170687;
					float2 temp_output_36_0_g170697 = ( lerpResult40_g170697 + Local_NormalTS729_g170687 );
					float2 lerpResult405_g170687 = lerp( Visual_NormalTS529_g170687 , temp_output_36_0_g170697 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float2 staticSwitch418_g170687 = lerpResult405_g170687;
					#else
					float2 staticSwitch418_g170687 = Visual_NormalTS529_g170687;
					#endif
					half2 Final_NormalTS612_g170687 = staticSwitch418_g170687;
					float2 In_NormalTS3_g170695 = Final_NormalTS612_g170687;
					float3 appendResult68_g170698 = (float3(Final_NormalTS612_g170687 , 1.0));
					float3 tanNormal74_g170698 = appendResult68_g170698;
					float3 worldNormal74_g170698 = normalize( float3( dot( tanToWorld0, tanNormal74_g170698 ), dot( tanToWorld1, tanNormal74_g170698 ), dot( tanToWorld2, tanNormal74_g170698 ) ) );
					half3 Final_NormalWS956_g170687 = worldNormal74_g170698;
					float3 In_NormalWS3_g170695 = Final_NormalWS956_g170687;
					half4 Visual_Shader531_g170687 = Out_Shader4_g170694;
					float4 lerpResult1000_g170687 = lerp( Local_Masks750_g170687 , ( Visual_Shader531_g170687 * Local_Masks750_g170687 ) , _ThirdBlendShaderValue);
					float4 lerpResult998_g170687 = lerp( Visual_Shader531_g170687 , lerpResult1000_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float4 staticSwitch451_g170687 = lerpResult998_g170687;
					#else
					float4 staticSwitch451_g170687 = Visual_Shader531_g170687;
					#endif
					half4 Final_Masks613_g170687 = staticSwitch451_g170687;
					float4 In_Shader3_g170695 = Final_Masks613_g170687;
					float4 In_Emissive3_g170695 = Out_Emissive4_g170694;
					float3 temp_output_3_0_g170700 = Final_Albedo601_g170687;
					float dotResult20_g170700 = dot( temp_output_3_0_g170700 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170687 = dotResult20_g170700;
					float In_Grayscale3_g170695 = Final_Grayscale615_g170687;
					float clampResult651_g170687 = clamp( saturate( ( Final_Grayscale615_g170687 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170687 = clampResult651_g170687;
					float In_Luminosity3_g170695 = Final_Luminosity652_g170687;
					half Visual_MultiMask547_g170687 = Out_MultiMask4_g170694;
					float lerpResult477_g170687 = lerp( Visual_MultiMask547_g170687 , Local_MultiMask767_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch482_g170687 = lerpResult477_g170687;
					#else
					float staticSwitch482_g170687 = Visual_MultiMask547_g170687;
					#endif
					half Final_MultiMask572_g170687 = staticSwitch482_g170687;
					float In_MultiMask3_g170695 = Final_MultiMask572_g170687;
					half Visual_AlphaClip559_g170687 = Out_AlphaClip4_g170694;
					float temp_output_718_0_g170687 = (Local_AlbedoTex777_g170687).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch924_g170687 = ( temp_output_718_0_g170687 - _ThirdAlphaClipValue );
					#else
					float staticSwitch924_g170687 = temp_output_718_0_g170687;
					#endif
					half Local_AlphaClip772_g170687 = staticSwitch924_g170687;
					float lerpResult448_g170687 = lerp( Visual_AlphaClip559_g170687 , Local_AlphaClip772_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch564_g170687 = lerpResult448_g170687;
					#else
					float staticSwitch564_g170687 = Visual_AlphaClip559_g170687;
					#endif
					half Final_AlphaClip602_g170687 = staticSwitch564_g170687;
					float In_AlphaClip3_g170695 = Final_AlphaClip602_g170687;
					half Visual_AlphaFade588_g170687 = Out_AlphaFade4_g170694;
					half Local_AlphaFade773_g170687 = (lerpResult706_g170687).a;
					float lerpResult604_g170687 = lerp( Visual_AlphaFade588_g170687 , Local_AlphaFade773_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch608_g170687 = lerpResult604_g170687;
					#else
					float staticSwitch608_g170687 = Visual_AlphaFade588_g170687;
					#endif
					half Final_AlphaFade611_g170687 = staticSwitch608_g170687;
					float In_AlphaFade3_g170695 = Final_AlphaFade611_g170687;
					float3 In_Translucency3_g170695 = Out_Translucency4_g170694;
					float In_Transmission3_g170695 = Out_Transmission4_g170694;
					float In_Thickness3_g170695 = Out_Thickness4_g170694;
					float In_Diffusion3_g170695 = Out_Diffusion4_g170694;
					float In_Depth3_g170695 = Out_Depth4_g170694;
					{
					Data3_g170695.Dummy = In_Dummy3_g170695;
					Data3_g170695.Albedo = In_Albedo3_g170695;
					Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
					Data3_g170695.NormalTS = In_NormalTS3_g170695;
					Data3_g170695.NormalWS = In_NormalWS3_g170695;
					Data3_g170695.Shader = In_Shader3_g170695;
					Data3_g170695.Emissive= In_Emissive3_g170695;
					Data3_g170695.MultiMask = In_MultiMask3_g170695;
					Data3_g170695.Grayscale = In_Grayscale3_g170695;
					Data3_g170695.Luminosity = In_Luminosity3_g170695;
					Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
					Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
					Data3_g170695.Translucency = In_Translucency3_g170695;
					Data3_g170695.Transmission = In_Transmission3_g170695;
					Data3_g170695.Thickness = In_Thickness3_g170695;
					Data3_g170695.Diffusion = In_Diffusion3_g170695;
					Data3_g170695.Depth = In_Depth3_g170695;
					}
					TVEVisualData Data4_g170789 = Data3_g170695;
					float Out_Dummy4_g170789 = 0;
					float3 Out_Albedo4_g170789 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170789 = float2( 0,0 );
					float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
					float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170789 = 0;
					float Out_Grayscale4_g170789 = 0;
					float Out_Luminosity4_g170789 = 0;
					float Out_AlphaClip4_g170789 = 0;
					float Out_AlphaFade4_g170789 = 0;
					float3 Out_Translucency4_g170789 = float3( 0,0,0 );
					float Out_Transmission4_g170789 = 0;
					float Out_Thickness4_g170789 = 0;
					float Out_Diffusion4_g170789 = 0;
					float Out_Depth4_g170789 = 0;
					{
					Out_Dummy4_g170789 = Data4_g170789.Dummy;
					Out_Albedo4_g170789 = Data4_g170789.Albedo;
					Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
					Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
					Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
					Out_Shader4_g170789 = Data4_g170789.Shader;
					Out_Emissive4_g170789= Data4_g170789.Emissive;
					Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
					Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
					Out_Luminosity4_g170789= Data4_g170789.Luminosity;
					Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
					Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
					Out_Translucency4_g170789 = Data4_g170789.Translucency;
					Out_Transmission4_g170789 = Data4_g170789.Transmission;
					Out_Thickness4_g170789 = Data4_g170789.Thickness;
					Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
					Out_Depth4_g170789= Data4_g170789.Depth;
					}
					half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
					TVEModelData Data15_g170796 = Data16_g170483;
					float Out_Dummy15_g170796 = 0;
					float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
					float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170796 = Data15_g170796.Dummy;
					Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
					Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
					Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
					Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
					Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
					Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
					Out_VertexData15_g170796 = Data15_g170796.VertexData;
					Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
					}
					half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
					float4 break208_g170788 = Model_VertexData206_g170788;
					float4 break33_g170794 = _occlusion_vert_mode;
					float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
					float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
					float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
					float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
					float temp_output_194_0_g170788 = temp_output_28_0_g170794;
					float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
					float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
					float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + _OcclusionMeshMode );
					#else
					float staticSwitch14_g170793 = temp_output_6_0_g170793;
					#endif
					half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
					float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
					float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
					#ifdef TVE_OCCLUSION
					float3 staticSwitch171_g170788 = lerpResult186_g170788;
					#else
					float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
					#endif
					half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
					float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
					float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
					float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
					float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
					float4 In_Shader3_g170790 = Out_Shader4_g170789;
					float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
					float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
					float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170788 = dotResult20_g170791;
					float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
					float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Shading181_g170788 = clampResult180_g170788;
					float In_Luminosity3_g170790 = Final_Shading181_g170788;
					float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
					float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
					float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
					float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
					float In_Transmission3_g170790 = Out_Transmission4_g170789;
					float In_Thickness3_g170790 = Out_Thickness4_g170789;
					float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
					float In_Depth3_g170790 = Out_Depth4_g170789;
					{
					Data3_g170790.Dummy = In_Dummy3_g170790;
					Data3_g170790.Albedo = In_Albedo3_g170790;
					Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
					Data3_g170790.NormalTS = In_NormalTS3_g170790;
					Data3_g170790.NormalWS = In_NormalWS3_g170790;
					Data3_g170790.Shader = In_Shader3_g170790;
					Data3_g170790.Emissive= In_Emissive3_g170790;
					Data3_g170790.MultiMask = In_MultiMask3_g170790;
					Data3_g170790.Grayscale = In_Grayscale3_g170790;
					Data3_g170790.Luminosity = In_Luminosity3_g170790;
					Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
					Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
					Data3_g170790.Translucency = In_Translucency3_g170790;
					Data3_g170790.Transmission = In_Transmission3_g170790;
					Data3_g170790.Thickness = In_Thickness3_g170790;
					Data3_g170790.Diffusion = In_Diffusion3_g170790;
					Data3_g170790.Depth = In_Depth3_g170790;
					}
					TVEVisualData Data4_g170800 = Data3_g170790;
					float Out_Dummy4_g170800 = 0;
					float3 Out_Albedo4_g170800 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170800 = float2( 0,0 );
					float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
					float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170800 = 0;
					float Out_Grayscale4_g170800 = 0;
					float Out_Luminosity4_g170800 = 0;
					float Out_AlphaClip4_g170800 = 0;
					float Out_AlphaFade4_g170800 = 0;
					float3 Out_Translucency4_g170800 = float3( 0,0,0 );
					float Out_Transmission4_g170800 = 0;
					float Out_Thickness4_g170800 = 0;
					float Out_Diffusion4_g170800 = 0;
					float Out_Depth4_g170800 = 0;
					{
					Out_Dummy4_g170800 = Data4_g170800.Dummy;
					Out_Albedo4_g170800 = Data4_g170800.Albedo;
					Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
					Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
					Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
					Out_Shader4_g170800 = Data4_g170800.Shader;
					Out_Emissive4_g170800= Data4_g170800.Emissive;
					Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
					Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
					Out_Luminosity4_g170800= Data4_g170800.Luminosity;
					Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
					Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
					Out_Translucency4_g170800 = Data4_g170800.Translucency;
					Out_Transmission4_g170800 = Data4_g170800.Transmission;
					Out_Thickness4_g170800 = Data4_g170800.Thickness;
					Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
					Out_Depth4_g170800= Data4_g170800.Depth;
					}
					half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
					TVEModelData Data15_g170806 = Data16_g170483;
					float Out_Dummy15_g170806 = 0;
					float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
					float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170806 = Data15_g170806.Dummy;
					Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
					Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
					Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
					Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
					Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
					Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
					Out_VertexData15_g170806 = Data15_g170806.VertexData;
					Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
					}
					half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
					float4 break226_g170798 = Model_VertexData224_g170798;
					float4 break33_g170799 = _gradient_vert_mode;
					float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
					float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
					float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
					float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
					float temp_output_211_0_g170798 = temp_output_28_0_g170799;
					float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170807 = _GradientMeshRemap.x;
					float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
					float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + _GradientMeshMode );
					#else
					float staticSwitch14_g170805 = temp_output_6_0_g170805;
					#endif
					half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
					half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
					float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
					float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
					half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
					float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
					half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
					float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
					#ifdef TVE_GRADIENT
					float3 staticSwitch171_g170798 = lerpResult186_g170798;
					#else
					float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
					#endif
					half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
					float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
					float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
					float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
					float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
					float4 In_Shader3_g170801 = Out_Shader4_g170800;
					float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
					float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
					float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170798 = dotResult20_g170802;
					float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
					float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170798 = clampResult180_g170798;
					float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
					float In_MultiMask3_g170801 = temp_output_162_11_g170798;
					float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
					float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
					float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
					float In_Transmission3_g170801 = Out_Transmission4_g170800;
					float In_Thickness3_g170801 = Out_Thickness4_g170800;
					float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
					float In_Depth3_g170801 = Out_Depth4_g170800;
					{
					Data3_g170801.Dummy = In_Dummy3_g170801;
					Data3_g170801.Albedo = In_Albedo3_g170801;
					Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
					Data3_g170801.NormalTS = In_NormalTS3_g170801;
					Data3_g170801.NormalWS = In_NormalWS3_g170801;
					Data3_g170801.Shader = In_Shader3_g170801;
					Data3_g170801.Emissive= In_Emissive3_g170801;
					Data3_g170801.MultiMask = In_MultiMask3_g170801;
					Data3_g170801.Grayscale = In_Grayscale3_g170801;
					Data3_g170801.Luminosity = In_Luminosity3_g170801;
					Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
					Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
					Data3_g170801.Translucency = In_Translucency3_g170801;
					Data3_g170801.Transmission = In_Transmission3_g170801;
					Data3_g170801.Thickness = In_Thickness3_g170801;
					Data3_g170801.Diffusion = In_Diffusion3_g170801;
					Data3_g170801.Depth = In_Depth3_g170801;
					}
					TVEVisualData Data4_g170809 = Data3_g170801;
					float Out_Dummy4_g170809 = 0;
					float3 Out_Albedo4_g170809 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170809 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170809 = float2( 0,0 );
					float3 Out_NormalWS4_g170809 = float3( 0,0,0 );
					float4 Out_Shader4_g170809 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170809 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170809 = 0;
					float Out_Grayscale4_g170809 = 0;
					float Out_Luminosity4_g170809 = 0;
					float Out_AlphaClip4_g170809 = 0;
					float Out_AlphaFade4_g170809 = 0;
					float3 Out_Translucency4_g170809 = float3( 0,0,0 );
					float Out_Transmission4_g170809 = 0;
					float Out_Thickness4_g170809 = 0;
					float Out_Diffusion4_g170809 = 0;
					float Out_Depth4_g170809 = 0;
					{
					Out_Dummy4_g170809 = Data4_g170809.Dummy;
					Out_Albedo4_g170809 = Data4_g170809.Albedo;
					Out_AlbedoRaw4_g170809 = Data4_g170809.AlbedoRaw;
					Out_NormalTS4_g170809 = Data4_g170809.NormalTS;
					Out_NormalWS4_g170809 = Data4_g170809.NormalWS;
					Out_Shader4_g170809 = Data4_g170809.Shader;
					Out_Emissive4_g170809= Data4_g170809.Emissive;
					Out_MultiMask4_g170809 = Data4_g170809.MultiMask;
					Out_Grayscale4_g170809 = Data4_g170809.Grayscale;
					Out_Luminosity4_g170809= Data4_g170809.Luminosity;
					Out_AlphaClip4_g170809 = Data4_g170809.AlphaClip;
					Out_AlphaFade4_g170809 = Data4_g170809.AlphaFade;
					Out_Translucency4_g170809 = Data4_g170809.Translucency;
					Out_Transmission4_g170809 = Data4_g170809.Transmission;
					Out_Thickness4_g170809 = Data4_g170809.Thickness;
					Out_Diffusion4_g170809 = Data4_g170809.Diffusion;
					Out_Depth4_g170809= Data4_g170809.Depth;
					}
					half3 Visual_Albedo127_g170808 = Out_Albedo4_g170809;
					TVEModelData Data15_g170811 = Data16_g170483;
					float Out_Dummy15_g170811 = 0;
					float3 Out_PositionWS15_g170811 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170811 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170811 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170811 = float3( 0,0,0 );
					float4 Out_VertexData15_g170811 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170811 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170811 = Data15_g170811.Dummy;
					Out_PositionWS15_g170811 = Data15_g170811.PositionWS;
					Out_PositionWO15_g170811 = Data15_g170811.PositionWO;
					Out_PivotWS15_g170811 = Data15_g170811.PivotWS;
					Out_PivotWO15_g170811 = Data15_g170811.PivotWO;
					Out_NormalWS15_g170811 = Data15_g170811.NormalWS;
					Out_ViewDirWS15_g170811 = Data15_g170811.ViewDirWS;
					Out_VertexData15_g170811 = Data15_g170811.VertexData;
					Out_BoundsData15_g170811 = Data15_g170811.BoundsData;
					}
					half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170811;
					half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170811;
					float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
					float clampResult17_g170813 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
					float temp_output_7_0_g170814 = _VariationNoiseRemap.x;
					float temp_output_9_0_g170814 = ( clampResult17_g170813 - temp_output_7_0_g170814 );
					float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170814 * _VariationNoiseRemap.z ) + 0.0001 ) );
					half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
					half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
					float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
					float temp_output_162_11_g170808 = Out_MultiMask4_g170809;
					half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
					float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
					half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
					float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
					#ifdef TVE_VARIATION
					float3 staticSwitch171_g170808 = lerpResult186_g170808;
					#else
					float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
					#endif
					half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
					float3 In_Albedo3_g170810 = Final_Albedo160_g170808;
					float3 In_AlbedoRaw3_g170810 = Final_Albedo160_g170808;
					float2 In_NormalTS3_g170810 = Out_NormalTS4_g170809;
					float3 In_NormalWS3_g170810 = Out_NormalWS4_g170809;
					float4 In_Shader3_g170810 = Out_Shader4_g170809;
					float4 In_Emissive3_g170810 = Out_Emissive4_g170809;
					float3 temp_output_3_0_g170812 = Final_Albedo160_g170808;
					float dotResult20_g170812 = dot( temp_output_3_0_g170812 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170808 = dotResult20_g170812;
					float In_Grayscale3_g170810 = Final_Grayscale164_g170808;
					float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170808 = clampResult180_g170808;
					float In_Luminosity3_g170810 = Final_Luminosity181_g170808;
					float In_MultiMask3_g170810 = temp_output_162_11_g170808;
					float In_AlphaClip3_g170810 = Out_AlphaClip4_g170809;
					float In_AlphaFade3_g170810 = Out_AlphaFade4_g170809;
					float3 In_Translucency3_g170810 = Out_Translucency4_g170809;
					float In_Transmission3_g170810 = Out_Transmission4_g170809;
					float In_Thickness3_g170810 = Out_Thickness4_g170809;
					float In_Diffusion3_g170810 = Out_Diffusion4_g170809;
					float In_Depth3_g170810 = Out_Depth4_g170809;
					{
					Data3_g170810.Dummy = In_Dummy3_g170810;
					Data3_g170810.Albedo = In_Albedo3_g170810;
					Data3_g170810.AlbedoRaw = In_AlbedoRaw3_g170810;
					Data3_g170810.NormalTS = In_NormalTS3_g170810;
					Data3_g170810.NormalWS = In_NormalWS3_g170810;
					Data3_g170810.Shader = In_Shader3_g170810;
					Data3_g170810.Emissive= In_Emissive3_g170810;
					Data3_g170810.MultiMask = In_MultiMask3_g170810;
					Data3_g170810.Grayscale = In_Grayscale3_g170810;
					Data3_g170810.Luminosity = In_Luminosity3_g170810;
					Data3_g170810.AlphaClip = In_AlphaClip3_g170810;
					Data3_g170810.AlphaFade = In_AlphaFade3_g170810;
					Data3_g170810.Translucency = In_Translucency3_g170810;
					Data3_g170810.Transmission = In_Transmission3_g170810;
					Data3_g170810.Thickness = In_Thickness3_g170810;
					Data3_g170810.Diffusion = In_Diffusion3_g170810;
					Data3_g170810.Depth = In_Depth3_g170810;
					}
					TVEVisualData Data4_g170824 = Data3_g170810;
					float Out_Dummy4_g170824 = 0;
					float3 Out_Albedo4_g170824 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170824 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170824 = float2( 0,0 );
					float3 Out_NormalWS4_g170824 = float3( 0,0,0 );
					float4 Out_Shader4_g170824 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170824 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170824 = 0;
					float Out_Grayscale4_g170824 = 0;
					float Out_Luminosity4_g170824 = 0;
					float Out_AlphaClip4_g170824 = 0;
					float Out_AlphaFade4_g170824 = 0;
					float3 Out_Translucency4_g170824 = float3( 0,0,0 );
					float Out_Transmission4_g170824 = 0;
					float Out_Thickness4_g170824 = 0;
					float Out_Diffusion4_g170824 = 0;
					float Out_Depth4_g170824 = 0;
					{
					Out_Dummy4_g170824 = Data4_g170824.Dummy;
					Out_Albedo4_g170824 = Data4_g170824.Albedo;
					Out_AlbedoRaw4_g170824 = Data4_g170824.AlbedoRaw;
					Out_NormalTS4_g170824 = Data4_g170824.NormalTS;
					Out_NormalWS4_g170824 = Data4_g170824.NormalWS;
					Out_Shader4_g170824 = Data4_g170824.Shader;
					Out_Emissive4_g170824= Data4_g170824.Emissive;
					Out_MultiMask4_g170824 = Data4_g170824.MultiMask;
					Out_Grayscale4_g170824 = Data4_g170824.Grayscale;
					Out_Luminosity4_g170824= Data4_g170824.Luminosity;
					Out_AlphaClip4_g170824 = Data4_g170824.AlphaClip;
					Out_AlphaFade4_g170824 = Data4_g170824.AlphaFade;
					Out_Translucency4_g170824 = Data4_g170824.Translucency;
					Out_Transmission4_g170824 = Data4_g170824.Transmission;
					Out_Thickness4_g170824 = Data4_g170824.Thickness;
					Out_Diffusion4_g170824 = Data4_g170824.Diffusion;
					Out_Depth4_g170824= Data4_g170824.Depth;
					}
					half3 Visual_Albedo139_g170820 = Out_Albedo4_g170824;
					float temp_output_200_12_g170820 = Out_Grayscale4_g170824;
					half Visual_Grayscale150_g170820 = temp_output_200_12_g170820;
					float3 temp_cast_33 = (Visual_Grayscale150_g170820).xxx;
					TVEGlobalData Data15_g170821 = Data204_g170496;
					float Out_Dummy15_g170821 = 0;
					float4 Out_CoatDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170821 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170821 = Data15_g170821.Dummy;
					Out_CoatDataRT15_g170821 = Data15_g170821.CoatDataRT;
					Out_PaintDataRT15_g170821 = Data15_g170821.PaintDataRT;
					Out_GlowDataRT15_g170821= Data15_g170821.GlowDataRT;
					Out_AtmoDataRT15_g170821= Data15_g170821.AtmoDataRT;
					Out_FadeDataRT15_g170821= Data15_g170821.FadeDataRT;
					Out_FormDataRT15_g170821 = Data15_g170821.FormDataRT;
					Out_FlowDataRT15_g170821 = Data15_g170821.FlowDataRT;
					}
					half4 Global_PaintParams209_g170820 = Out_PaintDataRT15_g170821;
					float4 temp_output_6_0_g170838 = Global_PaintParams209_g170820;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170838 = ( temp_output_6_0_g170838 + _TintingElementMode );
					#else
					float4 staticSwitch14_g170838 = temp_output_6_0_g170838;
					#endif
					#ifdef TVE_TINTING_ELEMENT
					float4 staticSwitch283_g170820 = staticSwitch14_g170838;
					#else
					float4 staticSwitch283_g170820 = TVE_PaintParams;
					#endif
					float4 lerpResult412_g170820 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170820 , ( _TintingGlobalValue * TVE_IsEnabled ));
					half Tinting_GlobalValue285_g170820 = saturate( (lerpResult412_g170820).w );
					float3 lerpResult368_g170820 = lerp( Visual_Albedo139_g170820 , temp_cast_33 , ( Tinting_GlobalValue285_g170820 * _TintingGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170844 = 2.0;
					#else
					float staticSwitch1_g170844 = 4.594794;
					#endif
					half3 Tinting_GlobalColor290_g170820 = (lerpResult412_g170820).xyz;
					float temp_output_200_11_g170820 = Out_MultiMask4_g170824;
					half Visual_MultiMask181_g170820 = temp_output_200_11_g170820;
					float lerpResult147_g170820 = lerp( 1.0 , Visual_MultiMask181_g170820 , _TintingMultiValue);
					half Tinting_MutiMask121_g170820 = lerpResult147_g170820;
					half Tinting_TexMask385_g170820 = 1.0;
					float temp_output_200_15_g170820 = Out_Luminosity4_g170824;
					half Visual_Luminosity257_g170820 = temp_output_200_15_g170820;
					float clampResult17_g170831 = clamp( Visual_Luminosity257_g170820 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170835 = _TintingLumaRemap.x;
					float temp_output_9_0_g170835 = ( clampResult17_g170831 - temp_output_7_0_g170835 );
					float lerpResult228_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
					half Tinting_LumaMask153_g170820 = lerpResult228_g170820;
					TVEModelData Data15_g170825 = Data16_g170483;
					float Out_Dummy15_g170825 = 0;
					float3 Out_PositionWS15_g170825 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170825 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170825 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170825 = float3( 0,0,0 );
					float4 Out_VertexData15_g170825 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170825 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170825 = Data15_g170825.Dummy;
					Out_PositionWS15_g170825 = Data15_g170825.PositionWS;
					Out_PositionWO15_g170825 = Data15_g170825.PositionWO;
					Out_PivotWS15_g170825 = Data15_g170825.PivotWS;
					Out_PivotWO15_g170825 = Data15_g170825.PivotWO;
					Out_NormalWS15_g170825 = Data15_g170825.NormalWS;
					Out_ViewDirWS15_g170825 = Data15_g170825.ViewDirWS;
					Out_VertexData15_g170825 = Data15_g170825.VertexData;
					Out_BoundsData15_g170825 = Data15_g170825.BoundsData;
					}
					half4 Model_VertexMasks307_g170820 = Out_VertexData15_g170825;
					float4 break311_g170820 = Model_VertexMasks307_g170820;
					float4 break33_g170828 = _tinting_vert_mode;
					float temp_output_30_0_g170828 = ( break311_g170820.x * break33_g170828.x );
					float temp_output_29_0_g170828 = ( break311_g170820.y * break33_g170828.y );
					float temp_output_31_0_g170828 = ( break311_g170820.z * break33_g170828.z );
					float temp_output_28_0_g170828 = ( temp_output_30_0_g170828 + temp_output_29_0_g170828 + temp_output_31_0_g170828 + ( break311_g170820.w * break33_g170828.w ) );
					float clampResult17_g170830 = clamp( temp_output_28_0_g170828 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170836 = _TintingMeshRemap.x;
					float temp_output_9_0_g170836 = ( clampResult17_g170830 - temp_output_7_0_g170836 );
					float lerpResult370_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
					float temp_output_6_0_g170832 = lerpResult370_g170820;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170832 = ( temp_output_6_0_g170832 + _TintingMeshMode );
					#else
					float staticSwitch14_g170832 = temp_output_6_0_g170832;
					#endif
					half Tinting_VertMask309_g170820 = staticSwitch14_g170832;
					half Tinting_NoiseMask213_g170820 = 1.0;
					half Custom_Mask345_g170820 = 1.0;
					half Tinting_CoreMasks433_g170820 = ( Tinting_MutiMask121_g170820 * Tinting_TexMask385_g170820 * Tinting_LumaMask153_g170820 * Tinting_VertMask309_g170820 * Tinting_NoiseMask213_g170820 * Custom_Mask345_g170820 );
					float temp_output_7_0_g170842 = _TintingBlendRemap.x;
					float temp_output_9_0_g170842 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170820 * Tinting_GlobalValue285_g170820 ) - temp_output_7_0_g170842 );
					half Tinting_Mask242_g170820 = ( saturate( ( ( temp_output_9_0_g170842 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
					float3 lerpResult90_g170820 = lerp( Visual_Albedo139_g170820 , ( lerpResult368_g170820 * staticSwitch1_g170844 * Tinting_GlobalColor290_g170820 * (_TintingColor).rgb ) , Tinting_Mask242_g170820);
					#ifdef TVE_TINTING
					float3 staticSwitch286_g170820 = lerpResult90_g170820;
					#else
					float3 staticSwitch286_g170820 = Visual_Albedo139_g170820;
					#endif
					half3 Final_Albedo97_g170820 = staticSwitch286_g170820;
					float3 In_Albedo3_g170840 = Final_Albedo97_g170820;
					float3 In_AlbedoRaw3_g170840 = Out_AlbedoRaw4_g170824;
					float2 In_NormalTS3_g170840 = Out_NormalTS4_g170824;
					float3 In_NormalWS3_g170840 = Out_NormalWS4_g170824;
					float4 In_Shader3_g170840 = Out_Shader4_g170824;
					float4 In_Emissive3_g170840 = Out_Emissive4_g170824;
					float In_Grayscale3_g170840 = temp_output_200_12_g170820;
					float In_Luminosity3_g170840 = temp_output_200_15_g170820;
					float In_MultiMask3_g170840 = temp_output_200_11_g170820;
					float In_AlphaClip3_g170840 = Out_AlphaClip4_g170824;
					float In_AlphaFade3_g170840 = Out_AlphaFade4_g170824;
					float3 In_Translucency3_g170840 = Out_Translucency4_g170824;
					float In_Transmission3_g170840 = Out_Transmission4_g170824;
					float In_Thickness3_g170840 = Out_Thickness4_g170824;
					float In_Diffusion3_g170840 = Out_Diffusion4_g170824;
					float In_Depth3_g170840 = Out_Depth4_g170824;
					{
					Data3_g170840.Dummy = In_Dummy3_g170840;
					Data3_g170840.Albedo = In_Albedo3_g170840;
					Data3_g170840.AlbedoRaw = In_AlbedoRaw3_g170840;
					Data3_g170840.NormalTS = In_NormalTS3_g170840;
					Data3_g170840.NormalWS = In_NormalWS3_g170840;
					Data3_g170840.Shader = In_Shader3_g170840;
					Data3_g170840.Emissive= In_Emissive3_g170840;
					Data3_g170840.MultiMask = In_MultiMask3_g170840;
					Data3_g170840.Grayscale = In_Grayscale3_g170840;
					Data3_g170840.Luminosity = In_Luminosity3_g170840;
					Data3_g170840.AlphaClip = In_AlphaClip3_g170840;
					Data3_g170840.AlphaFade = In_AlphaFade3_g170840;
					Data3_g170840.Translucency = In_Translucency3_g170840;
					Data3_g170840.Transmission = In_Transmission3_g170840;
					Data3_g170840.Thickness = In_Thickness3_g170840;
					Data3_g170840.Diffusion = In_Diffusion3_g170840;
					Data3_g170840.Depth = In_Depth3_g170840;
					}
					TVEVisualData Data4_g170847 = Data3_g170840;
					float Out_Dummy4_g170847 = 0;
					float3 Out_Albedo4_g170847 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170847 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170847 = float2( 0,0 );
					float3 Out_NormalWS4_g170847 = float3( 0,0,0 );
					float4 Out_Shader4_g170847 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170847 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170847 = 0;
					float Out_Grayscale4_g170847 = 0;
					float Out_Luminosity4_g170847 = 0;
					float Out_AlphaClip4_g170847 = 0;
					float Out_AlphaFade4_g170847 = 0;
					float3 Out_Translucency4_g170847 = float3( 0,0,0 );
					float Out_Transmission4_g170847 = 0;
					float Out_Thickness4_g170847 = 0;
					float Out_Diffusion4_g170847 = 0;
					float Out_Depth4_g170847 = 0;
					{
					Out_Dummy4_g170847 = Data4_g170847.Dummy;
					Out_Albedo4_g170847 = Data4_g170847.Albedo;
					Out_AlbedoRaw4_g170847 = Data4_g170847.AlbedoRaw;
					Out_NormalTS4_g170847 = Data4_g170847.NormalTS;
					Out_NormalWS4_g170847 = Data4_g170847.NormalWS;
					Out_Shader4_g170847 = Data4_g170847.Shader;
					Out_Emissive4_g170847= Data4_g170847.Emissive;
					Out_MultiMask4_g170847 = Data4_g170847.MultiMask;
					Out_Grayscale4_g170847 = Data4_g170847.Grayscale;
					Out_Luminosity4_g170847= Data4_g170847.Luminosity;
					Out_AlphaClip4_g170847 = Data4_g170847.AlphaClip;
					Out_AlphaFade4_g170847 = Data4_g170847.AlphaFade;
					Out_Translucency4_g170847 = Data4_g170847.Translucency;
					Out_Transmission4_g170847 = Data4_g170847.Transmission;
					Out_Thickness4_g170847 = Data4_g170847.Thickness;
					Out_Diffusion4_g170847 = Data4_g170847.Diffusion;
					Out_Depth4_g170847= Data4_g170847.Depth;
					}
					half3 Visual_Albedo292_g170845 = Out_Albedo4_g170847;
					float temp_output_280_12_g170845 = Out_Grayscale4_g170847;
					half Visual_Grayscale308_g170845 = temp_output_280_12_g170845;
					float3 temp_cast_34 = (Visual_Grayscale308_g170845).xxx;
					TVEGlobalData Data15_g170846 = Data204_g170496;
					float Out_Dummy15_g170846 = 0;
					float4 Out_CoatDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170846 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170846 = Data15_g170846.Dummy;
					Out_CoatDataRT15_g170846 = Data15_g170846.CoatDataRT;
					Out_PaintDataRT15_g170846 = Data15_g170846.PaintDataRT;
					Out_GlowDataRT15_g170846= Data15_g170846.GlowDataRT;
					Out_AtmoDataRT15_g170846= Data15_g170846.AtmoDataRT;
					Out_FadeDataRT15_g170846= Data15_g170846.FadeDataRT;
					Out_FormDataRT15_g170846 = Data15_g170846.FormDataRT;
					Out_FlowDataRT15_g170846 = Data15_g170846.FlowDataRT;
					}
					half4 Global_AtmoParams314_g170845 = Out_AtmoDataRT15_g170846;
					float temp_output_6_0_g170864 = (Global_AtmoParams314_g170845).x;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170864 = ( temp_output_6_0_g170864 + _DrynessElementMode );
					#else
					float staticSwitch14_g170864 = temp_output_6_0_g170864;
					#endif
					#ifdef TVE_DRYNESS_ELEMENT
					float staticSwitch351_g170845 = staticSwitch14_g170864;
					#else
					float staticSwitch351_g170845 = TVE_AtmoParams.x;
					#endif
					float lerpResult505_g170845 = lerp( 1.0 , ( staticSwitch351_g170845 * TVE_IsEnabled ) , _DrynessGlobalValue);
					half Dryness_GlobalValue352_g170845 = lerpResult505_g170845;
					float3 lerpResult485_g170845 = lerp( Visual_Albedo292_g170845 , temp_cast_34 , ( Dryness_GlobalValue352_g170845 * _DrynessGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170868 = 2.0;
					#else
					float staticSwitch1_g170868 = 4.594794;
					#endif
					half Dryness_TexMask478_g170845 = 1.0;
					float temp_output_280_11_g170845 = Out_MultiMask4_g170847;
					half Visual_MultiMask310_g170845 = temp_output_280_11_g170845;
					float lerpResult283_g170845 = lerp( 1.0 , Visual_MultiMask310_g170845 , _DrynessMultiValue);
					half Dryness_MultiMask302_g170845 = lerpResult283_g170845;
					float temp_output_280_15_g170845 = Out_Luminosity4_g170847;
					half Visual_Luminosity309_g170845 = temp_output_280_15_g170845;
					float clampResult17_g170857 = clamp( Visual_Luminosity309_g170845 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170861 = _DrynessLumaRemap.x;
					float temp_output_9_0_g170861 = ( clampResult17_g170857 - temp_output_7_0_g170861 );
					float lerpResult295_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170861 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
					half Dryness_LumaMask301_g170845 = lerpResult295_g170845;
					TVEModelData Data15_g170851 = Data16_g170483;
					float Out_Dummy15_g170851 = 0;
					float3 Out_PositionWS15_g170851 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170851 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170851 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170851 = float3( 0,0,0 );
					float4 Out_VertexData15_g170851 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170851 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170851 = Data15_g170851.Dummy;
					Out_PositionWS15_g170851 = Data15_g170851.PositionWS;
					Out_PositionWO15_g170851 = Data15_g170851.PositionWO;
					Out_PivotWS15_g170851 = Data15_g170851.PivotWS;
					Out_PivotWO15_g170851 = Data15_g170851.PivotWO;
					Out_NormalWS15_g170851 = Data15_g170851.NormalWS;
					Out_ViewDirWS15_g170851 = Data15_g170851.ViewDirWS;
					Out_VertexData15_g170851 = Data15_g170851.VertexData;
					Out_BoundsData15_g170851 = Data15_g170851.BoundsData;
					}
					half4 Model_VertexMasks386_g170845 = Out_VertexData15_g170851;
					float4 break375_g170845 = Model_VertexMasks386_g170845;
					float4 break33_g170854 = _dryness_vert_mode;
					float temp_output_30_0_g170854 = ( break375_g170845.x * break33_g170854.x );
					float temp_output_29_0_g170854 = ( break375_g170845.y * break33_g170854.y );
					float temp_output_31_0_g170854 = ( break375_g170845.z * break33_g170854.z );
					float temp_output_28_0_g170854 = ( temp_output_30_0_g170854 + temp_output_29_0_g170854 + temp_output_31_0_g170854 + ( break375_g170845.w * break33_g170854.w ) );
					float clampResult17_g170855 = clamp( temp_output_28_0_g170854 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170862 = _DrynessMeshRemap.x;
					float temp_output_9_0_g170862 = ( clampResult17_g170855 - temp_output_7_0_g170862 );
					float lerpResult452_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170862 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
					float temp_output_6_0_g170858 = lerpResult452_g170845;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170858 = ( temp_output_6_0_g170858 + _DrynessMeshMode );
					#else
					float staticSwitch14_g170858 = temp_output_6_0_g170858;
					#endif
					half Dryness_VertMask378_g170845 = staticSwitch14_g170858;
					half Dryness_MaskNoise291_g170845 = 1.0;
					half Custom_Mask411_g170845 = 1.0;
					float temp_output_7_0_g170866 = _DrynessBlendRemap.x;
					float temp_output_9_0_g170866 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170845 * Dryness_MultiMask302_g170845 * Dryness_LumaMask301_g170845 * Dryness_VertMask378_g170845 * Dryness_MaskNoise291_g170845 * Dryness_GlobalValue352_g170845 * Custom_Mask411_g170845 ) - temp_output_7_0_g170866 );
					half Dryness_Mask329_g170845 = saturate( ( ( temp_output_9_0_g170866 * _DrynessBlendRemap.z ) + 0.0001 ) );
					float3 lerpResult336_g170845 = lerp( Visual_Albedo292_g170845 , ( lerpResult485_g170845 * staticSwitch1_g170868 * (_DrynessColor).rgb ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float3 staticSwitch356_g170845 = lerpResult336_g170845;
					#else
					float3 staticSwitch356_g170845 = Visual_Albedo292_g170845;
					#endif
					half3 Final_Albedo331_g170845 = staticSwitch356_g170845;
					float3 In_Albedo3_g170848 = Final_Albedo331_g170845;
					float3 In_AlbedoRaw3_g170848 = Out_AlbedoRaw4_g170847;
					float2 In_NormalTS3_g170848 = Out_NormalTS4_g170847;
					float3 In_NormalWS3_g170848 = Out_NormalWS4_g170847;
					half4 Visual_Shader415_g170845 = Out_Shader4_g170847;
					float4 break438_g170845 = Visual_Shader415_g170845;
					float4 appendResult439_g170845 = (float4(break438_g170845.x , break438_g170845.y , break438_g170845.z , ( break438_g170845.w * _DrynessSmoothnessValue )));
					float4 lerpResult427_g170845 = lerp( Visual_Shader415_g170845 , appendResult439_g170845 , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float4 staticSwitch426_g170845 = lerpResult427_g170845;
					#else
					float4 staticSwitch426_g170845 = Visual_Shader415_g170845;
					#endif
					half4 Final_Shader433_g170845 = staticSwitch426_g170845;
					float4 In_Shader3_g170848 = Final_Shader433_g170845;
					float4 In_Emissive3_g170848 = Out_Emissive4_g170847;
					float In_Grayscale3_g170848 = temp_output_280_12_g170845;
					float In_Luminosity3_g170848 = temp_output_280_15_g170845;
					float In_MultiMask3_g170848 = temp_output_280_11_g170845;
					float In_AlphaClip3_g170848 = Out_AlphaClip4_g170847;
					float In_AlphaFade3_g170848 = Out_AlphaFade4_g170847;
					float3 In_Translucency3_g170848 = Out_Translucency4_g170847;
					half Visual_Transmission416_g170845 = Out_Transmission4_g170847;
					float lerpResult421_g170845 = lerp( Visual_Transmission416_g170845 , ( Visual_Transmission416_g170845 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float staticSwitch418_g170845 = lerpResult421_g170845;
					#else
					float staticSwitch418_g170845 = Visual_Transmission416_g170845;
					#endif
					half Final_Transmission425_g170845 = staticSwitch418_g170845;
					float In_Transmission3_g170848 = Final_Transmission425_g170845;
					float In_Thickness3_g170848 = Out_Thickness4_g170847;
					float In_Diffusion3_g170848 = Out_Diffusion4_g170847;
					float In_Depth3_g170848 = Out_Depth4_g170847;
					{
					Data3_g170848.Dummy = In_Dummy3_g170848;
					Data3_g170848.Albedo = In_Albedo3_g170848;
					Data3_g170848.AlbedoRaw = In_AlbedoRaw3_g170848;
					Data3_g170848.NormalTS = In_NormalTS3_g170848;
					Data3_g170848.NormalWS = In_NormalWS3_g170848;
					Data3_g170848.Shader = In_Shader3_g170848;
					Data3_g170848.Emissive= In_Emissive3_g170848;
					Data3_g170848.MultiMask = In_MultiMask3_g170848;
					Data3_g170848.Grayscale = In_Grayscale3_g170848;
					Data3_g170848.Luminosity = In_Luminosity3_g170848;
					Data3_g170848.AlphaClip = In_AlphaClip3_g170848;
					Data3_g170848.AlphaFade = In_AlphaFade3_g170848;
					Data3_g170848.Translucency = In_Translucency3_g170848;
					Data3_g170848.Transmission = In_Transmission3_g170848;
					Data3_g170848.Thickness = In_Thickness3_g170848;
					Data3_g170848.Diffusion = In_Diffusion3_g170848;
					Data3_g170848.Depth = In_Depth3_g170848;
					}
					TVEVisualData Data4_g170870 = Data3_g170848;
					float Out_Dummy4_g170870 = 0;
					float3 Out_Albedo4_g170870 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170870 = float2( 0,0 );
					float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
					float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170870 = 0;
					float Out_Grayscale4_g170870 = 0;
					float Out_Luminosity4_g170870 = 0;
					float Out_AlphaClip4_g170870 = 0;
					float Out_AlphaFade4_g170870 = 0;
					float3 Out_Translucency4_g170870 = float3( 0,0,0 );
					float Out_Transmission4_g170870 = 0;
					float Out_Thickness4_g170870 = 0;
					float Out_Diffusion4_g170870 = 0;
					float Out_Depth4_g170870 = 0;
					{
					Out_Dummy4_g170870 = Data4_g170870.Dummy;
					Out_Albedo4_g170870 = Data4_g170870.Albedo;
					Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
					Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
					Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
					Out_Shader4_g170870 = Data4_g170870.Shader;
					Out_Emissive4_g170870= Data4_g170870.Emissive;
					Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
					Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
					Out_Luminosity4_g170870= Data4_g170870.Luminosity;
					Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
					Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
					Out_Translucency4_g170870 = Data4_g170870.Translucency;
					Out_Transmission4_g170870 = Data4_g170870.Transmission;
					Out_Thickness4_g170870 = Data4_g170870.Thickness;
					Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
					Out_Depth4_g170870= Data4_g170870.Depth;
					}
					half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
					float4 vertexToFrag24_g170819 = IN.ase_texcoord11;
					half4 Interp_Data1269 = vertexToFrag24_g170819;
					float clampResult208_g170869 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
					#ifdef TVE_MOTION
					float3 staticSwitch214_g170869 = ( Visual_Albedo127_g170869 + ( ( Visual_Albedo127_g170869 * Visual_Albedo127_g170869 * 200.0 * _motion_highlight_color ) * clampResult208_g170869 ) );
					#else
					float3 staticSwitch214_g170869 = Visual_Albedo127_g170869;
					#endif
					half3 Final_Albedo160_g170869 = staticSwitch214_g170869;
					float3 In_Albedo3_g170871 = Final_Albedo160_g170869;
					float3 In_AlbedoRaw3_g170871 = Out_AlbedoRaw4_g170870;
					float2 In_NormalTS3_g170871 = Out_NormalTS4_g170870;
					float3 In_NormalWS3_g170871 = Out_NormalWS4_g170870;
					float4 In_Shader3_g170871 = Out_Shader4_g170870;
					float4 In_Emissive3_g170871 = Out_Emissive4_g170870;
					float In_Grayscale3_g170871 = Out_Grayscale4_g170870;
					float In_Luminosity3_g170871 = Out_Luminosity4_g170870;
					float In_MultiMask3_g170871 = Out_MultiMask4_g170870;
					float In_AlphaClip3_g170871 = Out_AlphaClip4_g170870;
					float In_AlphaFade3_g170871 = Out_AlphaFade4_g170870;
					float3 In_Translucency3_g170871 = Out_Translucency4_g170870;
					float In_Transmission3_g170871 = Out_Transmission4_g170870;
					float In_Thickness3_g170871 = Out_Thickness4_g170870;
					float In_Diffusion3_g170871 = Out_Diffusion4_g170870;
					float In_Depth3_g170871 = Out_Depth4_g170870;
					{
					Data3_g170871.Dummy = In_Dummy3_g170871;
					Data3_g170871.Albedo = In_Albedo3_g170871;
					Data3_g170871.AlbedoRaw = In_AlbedoRaw3_g170871;
					Data3_g170871.NormalTS = In_NormalTS3_g170871;
					Data3_g170871.NormalWS = In_NormalWS3_g170871;
					Data3_g170871.Shader = In_Shader3_g170871;
					Data3_g170871.Emissive= In_Emissive3_g170871;
					Data3_g170871.MultiMask = In_MultiMask3_g170871;
					Data3_g170871.Grayscale = In_Grayscale3_g170871;
					Data3_g170871.Luminosity = In_Luminosity3_g170871;
					Data3_g170871.AlphaClip = In_AlphaClip3_g170871;
					Data3_g170871.AlphaFade = In_AlphaFade3_g170871;
					Data3_g170871.Translucency = In_Translucency3_g170871;
					Data3_g170871.Transmission = In_Transmission3_g170871;
					Data3_g170871.Thickness = In_Thickness3_g170871;
					Data3_g170871.Diffusion = In_Diffusion3_g170871;
					Data3_g170871.Depth = In_Depth3_g170871;
					}
					TVEVisualData Data4_g170873 = Data3_g170871;
					float Out_Dummy4_g170873 = 0;
					float3 Out_Albedo4_g170873 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170873 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170873 = float2( 0,0 );
					float3 Out_NormalWS4_g170873 = float3( 0,0,0 );
					float4 Out_Shader4_g170873 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170873 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170873 = 0;
					float Out_Grayscale4_g170873 = 0;
					float Out_Luminosity4_g170873 = 0;
					float Out_AlphaClip4_g170873 = 0;
					float Out_AlphaFade4_g170873 = 0;
					float3 Out_Translucency4_g170873 = float3( 0,0,0 );
					float Out_Transmission4_g170873 = 0;
					float Out_Thickness4_g170873 = 0;
					float Out_Diffusion4_g170873 = 0;
					float Out_Depth4_g170873 = 0;
					{
					Out_Dummy4_g170873 = Data4_g170873.Dummy;
					Out_Albedo4_g170873 = Data4_g170873.Albedo;
					Out_AlbedoRaw4_g170873 = Data4_g170873.AlbedoRaw;
					Out_NormalTS4_g170873 = Data4_g170873.NormalTS;
					Out_NormalWS4_g170873 = Data4_g170873.NormalWS;
					Out_Shader4_g170873 = Data4_g170873.Shader;
					Out_Emissive4_g170873= Data4_g170873.Emissive;
					Out_MultiMask4_g170873 = Data4_g170873.MultiMask;
					Out_Grayscale4_g170873 = Data4_g170873.Grayscale;
					Out_Luminosity4_g170873= Data4_g170873.Luminosity;
					Out_AlphaClip4_g170873 = Data4_g170873.AlphaClip;
					Out_AlphaFade4_g170873 = Data4_g170873.AlphaFade;
					Out_Translucency4_g170873 = Data4_g170873.Translucency;
					Out_Transmission4_g170873 = Data4_g170873.Transmission;
					Out_Thickness4_g170873 = Data4_g170873.Thickness;
					Out_Diffusion4_g170873 = Data4_g170873.Diffusion;
					Out_Depth4_g170873= Data4_g170873.Depth;
					}
					half3 Visual_Albedo127_g170872 = Out_Albedo4_g170873;
					float3 temp_output_622_0_g170872 = (_OverlayColor).rgb;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170876) = _OverlayAlbedoTex;
					float localFilterTexture19_g170887 = ( 0.0 );
					SamplerState SS19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170887 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170887 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170887 = SamplerDefault19_g170887;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170887 = SamplerDefault19_g170887;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170887 = SamplerPoint19_g170887;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170887 = SamplerLow19_g170887;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170887 = SamplerMedium19_g170887;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170887 = SamplerHigh19_g170887;
					#endif
					}
					SamplerState Sampler238_g170876 = SS19_g170887;
					float4 temp_output_6_0_g170877 = _overlay_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170877 = ( temp_output_6_0_g170877 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
					#else
					float4 staticSwitch14_g170877 = temp_output_6_0_g170877;
					#endif
					half4 Overlay_Coords639_g170872 = staticSwitch14_g170877;
					float4 temp_output_37_0_g170876 = Overlay_Coords639_g170872;
					half4 Coords238_g170876 = temp_output_37_0_g170876;
					TVEModelData Data15_g170889 = Data16_g170483;
					float Out_Dummy15_g170889 = 0;
					float3 Out_PositionWS15_g170889 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170889 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170889 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170889 = float3( 0,0,0 );
					float4 Out_VertexData15_g170889 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170889 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170889 = Data15_g170889.Dummy;
					Out_PositionWS15_g170889 = Data15_g170889.PositionWS;
					Out_PositionWO15_g170889 = Data15_g170889.PositionWO;
					Out_PivotWS15_g170889 = Data15_g170889.PivotWS;
					Out_PivotWO15_g170889 = Data15_g170889.PivotWO;
					Out_NormalWS15_g170889 = Data15_g170889.NormalWS;
					Out_ViewDirWS15_g170889 = Data15_g170889.ViewDirWS;
					Out_VertexData15_g170889 = Data15_g170889.VertexData;
					Out_BoundsData15_g170889 = Data15_g170889.BoundsData;
					}
					half3 Model_PositionWO602_g170872 = Out_PositionWO15_g170889;
					float3 temp_output_279_0_g170876 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170876 = temp_output_279_0_g170876;
					half4 localSamplePlanar2D238_g170876 = SamplePlanar2D( Texture238_g170876 , Sampler238_g170876 , Coords238_g170876 , WorldPosition238_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler246_g170876 = SS19_g170887;
					half4 Coords246_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition246_g170876 = temp_output_279_0_g170876;
					half3 Model_NormalWS712_g170872 = Out_NormalWS15_g170889;
					float3 temp_output_280_0_g170876 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170876 = temp_output_280_0_g170876;
					half4 localSamplePlanar3D246_g170876 = SamplePlanar3D( Texture246_g170876 , Sampler246_g170876 , Coords246_g170876 , WorldPosition246_g170876 , WorldNormal246_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler234_g170876 = SS19_g170887;
					float4 Coords234_g170876 = temp_output_37_0_g170876;
					float3 WorldPosition234_g170876 = temp_output_279_0_g170876;
					float4 localSampleStochastic2D234_g170876 = SampleStochastic2D( Texture234_g170876 , Sampler234_g170876 , Coords234_g170876 , WorldPosition234_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler263_g170876 = SS19_g170887;
					half4 Coords263_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition263_g170876 = temp_output_279_0_g170876;
					half3 WorldNormal263_g170876 = temp_output_280_0_g170876;
					half4 localSampleStochastic3D263_g170876 = SampleStochastic3D( Texture263_g170876 , Sampler263_g170876 , Coords263_g170876 , WorldPosition263_g170876 , WorldNormal263_g170876 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch676_g170872 = localSamplePlanar3D246_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch676_g170872 = localSampleStochastic2D234_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch676_g170872 = localSampleStochastic3D263_g170876;
					#else
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#endif
					half3 Overlay_Albedo526_g170872 = (staticSwitch676_g170872).xyz;
					#ifdef TVE_OVERLAY_TEX
					float3 staticSwitch578_g170872 = ( temp_output_622_0_g170872 * Overlay_Albedo526_g170872 );
					#else
					float3 staticSwitch578_g170872 = temp_output_622_0_g170872;
					#endif
					float3 temp_output_6_0_g170890 = staticSwitch578_g170872;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + _OverlayTextureMode );
					#else
					float3 staticSwitch14_g170890 = temp_output_6_0_g170890;
					#endif
					float3 temp_cast_35 = (0.0).xxx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170880) = _OverlayGlitterTexRT;
					SamplerState Sampler246_g170880 = sampler_Linear_Repeat;
					float4 appendResult863_g170872 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170880 = appendResult863_g170872;
					half4 Coords246_g170880 = temp_output_37_0_g170880;
					float3 temp_output_279_0_g170880 = Model_PositionWO602_g170872;
					half3 WorldPosition246_g170880 = temp_output_279_0_g170880;
					float3 temp_output_280_0_g170880 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170880 = temp_output_280_0_g170880;
					half4 localSamplePlanar3D246_g170880 = SamplePlanar3D( Texture246_g170880 , Sampler246_g170880 , Coords246_g170880 , WorldPosition246_g170880 , WorldNormal246_g170880 );
					half Overlay_GlitterTex854_g170872 = (localSamplePlanar3D246_g170880).x;
					half3 Model_PositionWS879_g170872 = Out_PositionWS15_g170889;
					#ifdef TVE_OVERLAY_GLITTER
					float3 staticSwitch868_g170872 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170872 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170872 ) / _OverlayGlitterDistValue ) ) ) );
					#else
					float3 staticSwitch868_g170872 = temp_cast_35;
					#endif
					half3 Overlay_GlitterColor865_g170872 = staticSwitch868_g170872;
					half Overlay_TexMask908_g170872 = 1.0;
					float3 temp_output_739_21_g170872 = Out_NormalWS4_g170873;
					half3 Visual_NormalWS749_g170872 = temp_output_739_21_g170872;
					float clampResult17_g170896 = clamp( saturate( (Visual_NormalWS749_g170872).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170900 = _OverlayProjRemap.x;
					float temp_output_9_0_g170900 = ( clampResult17_g170896 - temp_output_7_0_g170900 );
					float lerpResult842_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170900 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
					half Overlay_MaskProj457_g170872 = lerpResult842_g170872;
					float temp_output_739_15_g170872 = Out_Luminosity4_g170873;
					half Visual_Luminosity654_g170872 = temp_output_739_15_g170872;
					float clampResult17_g170904 = clamp( Visual_Luminosity654_g170872 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170905 = _OverlayLumaRemap.x;
					float temp_output_9_0_g170905 = ( clampResult17_g170904 - temp_output_7_0_g170905 );
					float lerpResult587_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170905 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
					half Overlay_MaskLuma438_g170872 = lerpResult587_g170872;
					half4 Model_VertexMasks791_g170872 = Out_VertexData15_g170889;
					float4 break792_g170872 = Model_VertexMasks791_g170872;
					float4 break33_g170891 = _overlay_vert_mode;
					float temp_output_30_0_g170891 = ( break792_g170872.x * break33_g170891.x );
					float temp_output_29_0_g170891 = ( break792_g170872.y * break33_g170891.y );
					float temp_output_31_0_g170891 = ( break792_g170872.z * break33_g170891.z );
					float temp_output_28_0_g170891 = ( temp_output_30_0_g170891 + temp_output_29_0_g170891 + temp_output_31_0_g170891 + ( break792_g170872.w * break33_g170891.w ) );
					float clampResult17_g170892 = clamp( temp_output_28_0_g170891 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170901 = _OverlayMeshRemap.x;
					float temp_output_9_0_g170901 = ( clampResult17_g170892 - temp_output_7_0_g170901 );
					float lerpResult881_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170901 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
					float temp_output_6_0_g170897 = lerpResult881_g170872;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170897 = ( temp_output_6_0_g170897 + _OverlayMeshMode );
					#else
					float staticSwitch14_g170897 = temp_output_6_0_g170897;
					#endif
					half Overlay_VertMask801_g170872 = staticSwitch14_g170897;
					half Overlay_MaskNoise427_g170872 = 1.0;
					TVEGlobalData Data15_g170874 = Data204_g170496;
					float Out_Dummy15_g170874 = 0;
					float4 Out_CoatDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170874 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170874 = Data15_g170874.Dummy;
					Out_CoatDataRT15_g170874 = Data15_g170874.CoatDataRT;
					Out_PaintDataRT15_g170874 = Data15_g170874.PaintDataRT;
					Out_GlowDataRT15_g170874= Data15_g170874.GlowDataRT;
					Out_AtmoDataRT15_g170874= Data15_g170874.AtmoDataRT;
					Out_FadeDataRT15_g170874= Data15_g170874.FadeDataRT;
					Out_FormDataRT15_g170874 = Data15_g170874.FormDataRT;
					Out_FlowDataRT15_g170874 = Data15_g170874.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170872 = Out_AtmoDataRT15_g170874;
					float temp_output_6_0_g170906 = (Global_AtmoParams516_g170872).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170906 = ( temp_output_6_0_g170906 + _OverlayElementMode );
					#else
					float staticSwitch14_g170906 = temp_output_6_0_g170906;
					#endif
					#ifdef TVE_OVERLAY_ELEMENT
					float staticSwitch705_g170872 = staticSwitch14_g170906;
					#else
					float staticSwitch705_g170872 = TVE_AtmoParams.z;
					#endif
					float lerpResult937_g170872 = lerp( 1.0 , ( staticSwitch705_g170872 * TVE_IsEnabled ) , _OverlayGlobalValue);
					half Overlay_MaskGlobal429_g170872 = lerpResult937_g170872;
					half Custom_Mask646_g170872 = 1.0;
					float temp_output_7_0_g170903 = _OverlayBlendRemap.x;
					float temp_output_9_0_g170903 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170872 * Overlay_MaskProj457_g170872 * Overlay_MaskLuma438_g170872 * Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 * Custom_Mask646_g170872 ) - temp_output_7_0_g170903 );
					half Overlay_Mask494_g170872 = saturate( ( ( temp_output_9_0_g170903 / ( _OverlayBlendRemap.y - temp_output_7_0_g170903 ) ) + 0.0001 ) );
					float3 lerpResult467_g170872 = lerp( Visual_Albedo127_g170872 , ( staticSwitch14_g170890 + Overlay_GlitterColor865_g170872 ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float3 staticSwitch577_g170872 = lerpResult467_g170872;
					#else
					float3 staticSwitch577_g170872 = Visual_Albedo127_g170872;
					#endif
					half3 Final_Albedo493_g170872 = staticSwitch577_g170872;
					float3 In_Albedo3_g170875 = Final_Albedo493_g170872;
					float3 In_AlbedoRaw3_g170875 = Out_AlbedoRaw4_g170873;
					half2 Visual_NormalTS535_g170872 = Out_NormalTS4_g170873;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170878) = _OverlayNormalTex;
					float localFilterTexture29_g170888 = ( 0.0 );
					SamplerState SS29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170888 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170888 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170888 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170888 = SamplerDefault29_g170888;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170888 = SamplerDefault29_g170888;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170888 = SamplerPoint29_g170888;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170888 = SamplerLow29_g170888;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170888 = SamplerMedium29_g170888;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170888 = SamplerHigh29_g170888;
					#endif
					}
					SamplerState Sampler238_g170878 = SS29_g170888;
					float4 temp_output_37_0_g170878 = Overlay_Coords639_g170872;
					half4 Coords238_g170878 = temp_output_37_0_g170878;
					float3 temp_output_279_0_g170878 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170878 = temp_output_279_0_g170878;
					half4 localSamplePlanar2D238_g170878 = SamplePlanar2D( Texture238_g170878 , Sampler238_g170878 , Coords238_g170878 , WorldPosition238_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170878) = _OverlayNormalTex;
					SamplerState Sampler246_g170878 = SS29_g170888;
					half4 Coords246_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition246_g170878 = temp_output_279_0_g170878;
					float3 temp_output_280_0_g170878 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170878 = temp_output_280_0_g170878;
					half4 localSamplePlanar3D246_g170878 = SamplePlanar3D( Texture246_g170878 , Sampler246_g170878 , Coords246_g170878 , WorldPosition246_g170878 , WorldNormal246_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170878) = _OverlayNormalTex;
					SamplerState Sampler234_g170878 = SS29_g170888;
					float4 Coords234_g170878 = temp_output_37_0_g170878;
					float3 WorldPosition234_g170878 = temp_output_279_0_g170878;
					float4 localSampleStochastic2D234_g170878 = SampleStochastic2D( Texture234_g170878 , Sampler234_g170878 , Coords234_g170878 , WorldPosition234_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170878) = _OverlayNormalTex;
					SamplerState Sampler263_g170878 = SS29_g170888;
					half4 Coords263_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition263_g170878 = temp_output_279_0_g170878;
					half3 WorldNormal263_g170878 = temp_output_280_0_g170878;
					half4 localSampleStochastic3D263_g170878 = SampleStochastic3D( Texture263_g170878 , Sampler263_g170878 , Coords263_g170878 , WorldPosition263_g170878 , WorldNormal263_g170878 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch686_g170872 = localSamplePlanar3D246_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch686_g170872 = localSampleStochastic2D234_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch686_g170872 = localSampleStochastic3D263_g170878;
					#else
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#endif
					half4 Normal_Packed45_g170881 = staticSwitch686_g170872;
					float2 appendResult58_g170881 = (float2(( (Normal_Packed45_g170881).x * (Normal_Packed45_g170881).w ) , (Normal_Packed45_g170881).y));
					half2 Normal_Default50_g170881 = appendResult58_g170881;
					half2 Normal_ASTC41_g170881 = (Normal_Packed45_g170881).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170881 = Normal_ASTC41_g170881;
					#else
					float2 staticSwitch38_g170881 = Normal_Default50_g170881;
					#endif
					half2 Normal_NO_DTX544_g170881 = (Normal_Packed45_g170881).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170881 = Normal_NO_DTX544_g170881;
					#else
					float2 staticSwitch37_g170881 = staticSwitch38_g170881;
					#endif
					float2 temp_output_623_0_g170872 = (staticSwitch37_g170881*2.0 + -1.0);
					half2 Overlay_Normal528_g170872 = temp_output_623_0_g170872;
					#ifdef TVE_OVERLAY_TEX
					float2 staticSwitch579_g170872 = Overlay_Normal528_g170872;
					#else
					float2 staticSwitch579_g170872 = Visual_NormalTS535_g170872;
					#endif
					float2 lerpResult551_g170872 = lerp( Visual_NormalTS535_g170872 , ( staticSwitch579_g170872 * _OverlayNormalValue ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float2 staticSwitch583_g170872 = lerpResult551_g170872;
					#else
					float2 staticSwitch583_g170872 = Visual_NormalTS535_g170872;
					#endif
					half2 Final_NormalTS499_g170872 = staticSwitch583_g170872;
					float2 In_NormalTS3_g170875 = Final_NormalTS499_g170872;
					float3 In_NormalWS3_g170875 = temp_output_739_21_g170872;
					half4 Visual_Masks536_g170872 = Out_Shader4_g170873;
					float4 appendResult585_g170872 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
					float4 lerpResult584_g170872 = lerp( Visual_Masks536_g170872 , appendResult585_g170872 , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float4 staticSwitch586_g170872 = lerpResult584_g170872;
					#else
					float4 staticSwitch586_g170872 = Visual_Masks536_g170872;
					#endif
					half4 Final_Masks482_g170872 = staticSwitch586_g170872;
					float4 In_Shader3_g170875 = Final_Masks482_g170872;
					float4 In_Emissive3_g170875 = Out_Emissive4_g170873;
					float temp_output_739_12_g170872 = Out_Grayscale4_g170873;
					float In_Grayscale3_g170875 = temp_output_739_12_g170872;
					float In_Luminosity3_g170875 = temp_output_739_15_g170872;
					float In_MultiMask3_g170875 = Out_MultiMask4_g170873;
					float In_AlphaClip3_g170875 = Out_AlphaClip4_g170873;
					float In_AlphaFade3_g170875 = Out_AlphaFade4_g170873;
					float3 In_Translucency3_g170875 = Out_Translucency4_g170873;
					half Visual_Transmission699_g170872 = Out_Transmission4_g170873;
					float lerpResult746_g170872 = lerp( Visual_Transmission699_g170872 , ( Visual_Transmission699_g170872 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 ));
					#ifdef TVE_OVERLAY
					float staticSwitch703_g170872 = lerpResult746_g170872;
					#else
					float staticSwitch703_g170872 = Visual_Transmission699_g170872;
					#endif
					half Final_Transmission702_g170872 = staticSwitch703_g170872;
					float In_Transmission3_g170875 = Final_Transmission702_g170872;
					float In_Thickness3_g170875 = Out_Thickness4_g170873;
					float In_Diffusion3_g170875 = Out_Diffusion4_g170873;
					float In_Depth3_g170875 = Out_Depth4_g170873;
					{
					Data3_g170875.Dummy = In_Dummy3_g170875;
					Data3_g170875.Albedo = In_Albedo3_g170875;
					Data3_g170875.AlbedoRaw = In_AlbedoRaw3_g170875;
					Data3_g170875.NormalTS = In_NormalTS3_g170875;
					Data3_g170875.NormalWS = In_NormalWS3_g170875;
					Data3_g170875.Shader = In_Shader3_g170875;
					Data3_g170875.Emissive= In_Emissive3_g170875;
					Data3_g170875.MultiMask = In_MultiMask3_g170875;
					Data3_g170875.Grayscale = In_Grayscale3_g170875;
					Data3_g170875.Luminosity = In_Luminosity3_g170875;
					Data3_g170875.AlphaClip = In_AlphaClip3_g170875;
					Data3_g170875.AlphaFade = In_AlphaFade3_g170875;
					Data3_g170875.Translucency = In_Translucency3_g170875;
					Data3_g170875.Transmission = In_Transmission3_g170875;
					Data3_g170875.Thickness = In_Thickness3_g170875;
					Data3_g170875.Diffusion = In_Diffusion3_g170875;
					Data3_g170875.Depth = In_Depth3_g170875;
					}
					TVEVisualData Data4_g170910 = Data3_g170875;
					float Out_Dummy4_g170910 = 0;
					float3 Out_Albedo4_g170910 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170910 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170910 = float2( 0,0 );
					float3 Out_NormalWS4_g170910 = float3( 0,0,0 );
					float4 Out_Shader4_g170910 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170910 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170910 = 0;
					float Out_Grayscale4_g170910 = 0;
					float Out_Luminosity4_g170910 = 0;
					float Out_AlphaClip4_g170910 = 0;
					float Out_AlphaFade4_g170910 = 0;
					float3 Out_Translucency4_g170910 = float3( 0,0,0 );
					float Out_Transmission4_g170910 = 0;
					float Out_Thickness4_g170910 = 0;
					float Out_Diffusion4_g170910 = 0;
					float Out_Depth4_g170910 = 0;
					{
					Out_Dummy4_g170910 = Data4_g170910.Dummy;
					Out_Albedo4_g170910 = Data4_g170910.Albedo;
					Out_AlbedoRaw4_g170910 = Data4_g170910.AlbedoRaw;
					Out_NormalTS4_g170910 = Data4_g170910.NormalTS;
					Out_NormalWS4_g170910 = Data4_g170910.NormalWS;
					Out_Shader4_g170910 = Data4_g170910.Shader;
					Out_Emissive4_g170910= Data4_g170910.Emissive;
					Out_MultiMask4_g170910 = Data4_g170910.MultiMask;
					Out_Grayscale4_g170910 = Data4_g170910.Grayscale;
					Out_Luminosity4_g170910= Data4_g170910.Luminosity;
					Out_AlphaClip4_g170910 = Data4_g170910.AlphaClip;
					Out_AlphaFade4_g170910 = Data4_g170910.AlphaFade;
					Out_Translucency4_g170910 = Data4_g170910.Translucency;
					Out_Transmission4_g170910 = Data4_g170910.Transmission;
					Out_Thickness4_g170910 = Data4_g170910.Thickness;
					Out_Diffusion4_g170910 = Data4_g170910.Diffusion;
					Out_Depth4_g170910= Data4_g170910.Depth;
					}
					half3 Visual_Albedo127_g170909 = Out_Albedo4_g170910;
					TVEGlobalData Data15_g170915 = Data204_g170496;
					float Out_Dummy15_g170915 = 0;
					float4 Out_CoatDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170915 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170915 = Data15_g170915.Dummy;
					Out_CoatDataRT15_g170915 = Data15_g170915.CoatDataRT;
					Out_PaintDataRT15_g170915 = Data15_g170915.PaintDataRT;
					Out_GlowDataRT15_g170915= Data15_g170915.GlowDataRT;
					Out_AtmoDataRT15_g170915= Data15_g170915.AtmoDataRT;
					Out_FadeDataRT15_g170915= Data15_g170915.FadeDataRT;
					Out_FormDataRT15_g170915 = Data15_g170915.FormDataRT;
					Out_FlowDataRT15_g170915 = Data15_g170915.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170909 = Out_AtmoDataRT15_g170915;
					float4 temp_output_6_0_g170936 = Global_AtmoParams516_g170909;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170936 = ( temp_output_6_0_g170936 + _WetnessElementMode );
					#else
					float4 staticSwitch14_g170936 = temp_output_6_0_g170936;
					#endif
					#ifdef TVE_WETNESS_ELEMENT
					float4 staticSwitch663_g170909 = staticSwitch14_g170936;
					#else
					float4 staticSwitch663_g170909 = TVE_AtmoParams;
					#endif
					float2 lerpResult1121_g170909 = lerp( float2( 1,1 ) , (( staticSwitch663_g170909 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
					float2 break1123_g170909 = lerpResult1121_g170909;
					half Global_Wetness429_g170909 = break1123_g170909.x;
					half Wetness_Value1042_g170909 = ( _WetnessIntensityValue * Global_Wetness429_g170909 );
					TVEModelData Data15_g170921 = Data16_g170483;
					float Out_Dummy15_g170921 = 0;
					float3 Out_PositionWS15_g170921 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170921 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170921 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170921 = float3( 0,0,0 );
					float4 Out_VertexData15_g170921 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170921 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170921 = Data15_g170921.Dummy;
					Out_PositionWS15_g170921 = Data15_g170921.PositionWS;
					Out_PositionWO15_g170921 = Data15_g170921.PositionWO;
					Out_PivotWS15_g170921 = Data15_g170921.PivotWS;
					Out_PivotWO15_g170921 = Data15_g170921.PivotWO;
					Out_NormalWS15_g170921 = Data15_g170921.NormalWS;
					Out_ViewDirWS15_g170921 = Data15_g170921.ViewDirWS;
					Out_VertexData15_g170921 = Data15_g170921.VertexData;
					Out_BoundsData15_g170921 = Data15_g170921.BoundsData;
					}
					half4 Model_VertexData1030_g170909 = Out_VertexData15_g170921;
					float4 break1019_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170924 = _wetness_vert_mode;
					float temp_output_30_0_g170924 = ( break1019_g170909.x * break33_g170924.x );
					float temp_output_29_0_g170924 = ( break1019_g170909.y * break33_g170924.y );
					float temp_output_31_0_g170924 = ( break1019_g170909.z * break33_g170924.z );
					float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1019_g170909.w * break33_g170924.w ) );
					float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170932 = _WetnessMeshRemap.x;
					float temp_output_9_0_g170932 = ( clampResult17_g170923 - temp_output_7_0_g170932 );
					float lerpResult1026_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170932 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
					float temp_output_6_0_g170925 = lerpResult1026_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + _WetnessMeshMode );
					#else
					float staticSwitch14_g170925 = temp_output_6_0_g170925;
					#endif
					float temp_output_1025_0_g170909 = staticSwitch14_g170925;
					half Wetness_VertMask1024_g170909 = temp_output_1025_0_g170909;
					float temp_output_1043_0_g170909 = ( Wetness_Value1042_g170909 * Wetness_VertMask1024_g170909 );
					half Wetness_Mask866_g170909 = temp_output_1043_0_g170909;
					float4 break1083_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170927 = _wetness_water_vert_mode;
					float temp_output_30_0_g170927 = ( break1083_g170909.x * break33_g170927.x );
					float temp_output_29_0_g170927 = ( break1083_g170909.y * break33_g170927.y );
					float temp_output_31_0_g170927 = ( break1083_g170909.z * break33_g170927.z );
					float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1083_g170909.w * break33_g170927.w ) );
					float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170933 = _WetnessWaterMeshRemap.x;
					float temp_output_9_0_g170933 = ( clampResult17_g170926 - temp_output_7_0_g170933 );
					float lerpResult1089_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170933 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
					float temp_output_6_0_g170928 = lerpResult1089_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + _WetnessWaterMeshMode );
					#else
					float staticSwitch14_g170928 = temp_output_6_0_g170928;
					#endif
					float temp_output_1091_0_g170909 = staticSwitch14_g170928;
					half Water_VertMask1094_g170909 = temp_output_1091_0_g170909;
					half4 Visual_Masks536_g170909 = Out_Shader4_g170910;
					float lerpResult1013_g170909 = lerp( 1.0 , (Visual_Masks536_g170909).z , _WetnessWaterBaseValue);
					half Water_HeightMask782_g170909 = lerpResult1013_g170909;
					float clampResult17_g170922 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170909 * Water_VertMask1094_g170909 ) - Water_HeightMask782_g170909 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170935 = _WetnessWaterBlendRemap.x;
					float temp_output_9_0_g170935 = ( clampResult17_g170922 - temp_output_7_0_g170935 );
					half3 Model_NormalWS798_g170909 = Out_NormalWS15_g170921;
					float temp_output_786_0_g170909 = saturate( (Model_NormalWS798_g170909).y );
					half Wetness_ProjMask790_g170909 = temp_output_786_0_g170909;
					half Water_Mask760_g170909 = ( saturate( ( ( temp_output_9_0_g170935 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170909 );
					float3 lerpResult918_g170909 = lerp( Visual_Albedo127_g170909 , ( Visual_Albedo127_g170909 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float3 staticSwitch946_g170909 = lerpResult918_g170909;
					#else
					float3 staticSwitch946_g170909 = Visual_Albedo127_g170909;
					#endif
					float3 lerpResult768_g170909 = lerp( staticSwitch946_g170909 , ( staticSwitch946_g170909 * staticSwitch946_g170909 ) , _WetnessContrastValue);
					float3 lerpResult651_g170909 = lerp( Visual_Albedo127_g170909 , lerpResult768_g170909 , Wetness_Mask866_g170909);
					#ifdef TVE_WETNESS
					float3 staticSwitch577_g170909 = lerpResult651_g170909;
					#else
					float3 staticSwitch577_g170909 = Visual_Albedo127_g170909;
					#endif
					half3 Final_Albedo493_g170909 = staticSwitch577_g170909;
					float3 In_Albedo3_g170911 = Final_Albedo493_g170909;
					float3 In_AlbedoRaw3_g170911 = Out_AlbedoRaw4_g170910;
					half2 Visual_Normal535_g170909 = Out_NormalTS4_g170910;
					float lerpResult877_g170909 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch957_g170909 = ( Visual_Normal535_g170909 * lerpResult877_g170909 );
					#else
					float2 staticSwitch957_g170909 = Visual_Normal535_g170909;
					#endif
					float2 temp_cast_36 = (0.0).xx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170919) = _WetnessDropsTexRT;
					SamplerState Sampler238_g170919 = sampler_Linear_Repeat_Aniso8;
					float4 appendResult924_g170909 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170919 = appendResult924_g170909;
					half4 Coords238_g170919 = temp_output_37_0_g170919;
					half3 Model_PositionWO602_g170909 = Out_PositionWO15_g170921;
					float3 temp_output_279_0_g170919 = Model_PositionWO602_g170909;
					half3 WorldPosition238_g170919 = temp_output_279_0_g170919;
					half4 localSamplePlanar2D238_g170919 = SamplePlanar2D( Texture238_g170919 , Sampler238_g170919 , Coords238_g170919 , WorldPosition238_g170919 );
					float4 temp_output_1010_0_g170909 = localSamplePlanar2D238_g170919;
					half2 Rain_DropsNormal919_g170909 = (temp_output_1010_0_g170909).zw;
					float2 temp_output_903_0_g170909 = (Rain_DropsNormal919_g170909*2.0 + -1.0);
					half2 Rain_RingsNormal713_g170909 = (temp_output_1010_0_g170909).xy;
					float2 lerpResult904_g170909 = lerp( temp_output_903_0_g170909 , (Rain_RingsNormal713_g170909*2.0 + -1.0) , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch960_g170909 = lerpResult904_g170909;
					#else
					float2 staticSwitch960_g170909 = temp_output_903_0_g170909;
					#endif
					half2 Rain_Drops1002_g170909 = ( staticSwitch960_g170909 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
					half3 Model_PositionWS823_g170909 = Out_PositionWS15_g170921;
					half Global_Rain955_g170909 = break1123_g170909.y;
					half Rain_Value1067_g170909 = Global_Rain955_g170909;
					float4 break1097_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170930 = _wetness_drops_vert_mode;
					float temp_output_30_0_g170930 = ( break1097_g170909.x * break33_g170930.x );
					float temp_output_29_0_g170930 = ( break1097_g170909.y * break33_g170930.y );
					float temp_output_31_0_g170930 = ( break1097_g170909.z * break33_g170930.z );
					float temp_output_28_0_g170930 = ( temp_output_30_0_g170930 + temp_output_29_0_g170930 + temp_output_31_0_g170930 + ( break1097_g170909.w * break33_g170930.w ) );
					float clampResult17_g170929 = clamp( temp_output_28_0_g170930 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170934 = _WetnessDropsMeshRemap.x;
					float temp_output_9_0_g170934 = ( clampResult17_g170929 - temp_output_7_0_g170934 );
					float lerpResult1100_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170934 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
					float temp_output_6_0_g170931 = lerpResult1100_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170931 = ( temp_output_6_0_g170931 + _WetnessDropsMeshMode );
					#else
					float staticSwitch14_g170931 = temp_output_6_0_g170931;
					#endif
					float temp_output_1101_0_g170909 = staticSwitch14_g170931;
					half Rain_VertMask1108_g170909 = temp_output_1101_0_g170909;
					half Rain_Mask999_g170909 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170909 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170909 * Rain_VertMask1108_g170909 );
					half2 Normal_Planar45_g170918 = ( Rain_Drops1002_g170909 * Rain_Mask999_g170909 * Wetness_ProjMask790_g170909 );
					float2 break71_g170918 = Normal_Planar45_g170918;
					float3 appendResult72_g170918 = (float3(break71_g170918.x , 0.0 , break71_g170918.y));
					half2 Wetness_Normal526_g170909 = (mul( ase_worldToTangent, appendResult72_g170918 )).xy;
					#ifdef TVE_WETNESS_DROPS
					float2 staticSwitch583_g170909 = Wetness_Normal526_g170909;
					#else
					float2 staticSwitch583_g170909 = temp_cast_36;
					#endif
					#ifdef TVE_WETNESS
					float2 staticSwitch774_g170909 = ( staticSwitch957_g170909 + staticSwitch583_g170909 );
					#else
					float2 staticSwitch774_g170909 = Visual_Normal535_g170909;
					#endif
					half2 Final_Normal499_g170909 = staticSwitch774_g170909;
					float2 In_NormalTS3_g170911 = Final_Normal499_g170909;
					float3 In_NormalWS3_g170911 = Out_NormalWS4_g170910;
					float4 break658_g170909 = Visual_Masks536_g170909;
					float temp_output_935_0_g170909 = ( Wetness_Mask866_g170909 * _WetnessSmoothnessValue );
					float lerpResult941_g170909 = lerp( temp_output_935_0_g170909 , 2.0 , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float staticSwitch959_g170909 = lerpResult941_g170909;
					#else
					float staticSwitch959_g170909 = temp_output_935_0_g170909;
					#endif
					float4 appendResult661_g170909 = (float4(break658_g170909.x , break658_g170909.y , break658_g170909.z , saturate( ( break658_g170909.w + staticSwitch959_g170909 ) )));
					#ifdef TVE_WETNESS
					float4 staticSwitch586_g170909 = appendResult661_g170909;
					#else
					float4 staticSwitch586_g170909 = Visual_Masks536_g170909;
					#endif
					half4 Final_Masks482_g170909 = staticSwitch586_g170909;
					float4 In_Shader3_g170911 = Final_Masks482_g170909;
					float4 In_Emissive3_g170911 = Out_Emissive4_g170910;
					float In_Grayscale3_g170911 = Out_Grayscale4_g170910;
					float In_Luminosity3_g170911 = Out_Luminosity4_g170910;
					float In_MultiMask3_g170911 = Out_MultiMask4_g170910;
					float In_AlphaClip3_g170911 = Out_AlphaClip4_g170910;
					float In_AlphaFade3_g170911 = Out_AlphaFade4_g170910;
					float3 In_Translucency3_g170911 = Out_Translucency4_g170910;
					float In_Transmission3_g170911 = Out_Transmission4_g170910;
					float In_Thickness3_g170911 = Out_Thickness4_g170910;
					float In_Diffusion3_g170911 = Out_Diffusion4_g170910;
					float In_Depth3_g170911 = Out_Depth4_g170910;
					{
					Data3_g170911.Dummy = In_Dummy3_g170911;
					Data3_g170911.Albedo = In_Albedo3_g170911;
					Data3_g170911.AlbedoRaw = In_AlbedoRaw3_g170911;
					Data3_g170911.NormalTS = In_NormalTS3_g170911;
					Data3_g170911.NormalWS = In_NormalWS3_g170911;
					Data3_g170911.Shader = In_Shader3_g170911;
					Data3_g170911.Emissive= In_Emissive3_g170911;
					Data3_g170911.MultiMask = In_MultiMask3_g170911;
					Data3_g170911.Grayscale = In_Grayscale3_g170911;
					Data3_g170911.Luminosity = In_Luminosity3_g170911;
					Data3_g170911.AlphaClip = In_AlphaClip3_g170911;
					Data3_g170911.AlphaFade = In_AlphaFade3_g170911;
					Data3_g170911.Translucency = In_Translucency3_g170911;
					Data3_g170911.Transmission = In_Transmission3_g170911;
					Data3_g170911.Thickness = In_Thickness3_g170911;
					Data3_g170911.Diffusion = In_Diffusion3_g170911;
					Data3_g170911.Depth = In_Depth3_g170911;
					}
					TVEVisualData Data4_g170941 = Data3_g170911;
					float Out_Dummy4_g170941 = 0;
					float3 Out_Albedo4_g170941 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170941 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170941 = float2( 0,0 );
					float3 Out_NormalWS4_g170941 = float3( 0,0,0 );
					float4 Out_Shader4_g170941 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170941 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170941 = 0;
					float Out_Grayscale4_g170941 = 0;
					float Out_Luminosity4_g170941 = 0;
					float Out_AlphaClip4_g170941 = 0;
					float Out_AlphaFade4_g170941 = 0;
					float3 Out_Translucency4_g170941 = float3( 0,0,0 );
					float Out_Transmission4_g170941 = 0;
					float Out_Thickness4_g170941 = 0;
					float Out_Diffusion4_g170941 = 0;
					float Out_Depth4_g170941 = 0;
					{
					Out_Dummy4_g170941 = Data4_g170941.Dummy;
					Out_Albedo4_g170941 = Data4_g170941.Albedo;
					Out_AlbedoRaw4_g170941 = Data4_g170941.AlbedoRaw;
					Out_NormalTS4_g170941 = Data4_g170941.NormalTS;
					Out_NormalWS4_g170941 = Data4_g170941.NormalWS;
					Out_Shader4_g170941 = Data4_g170941.Shader;
					Out_Emissive4_g170941= Data4_g170941.Emissive;
					Out_MultiMask4_g170941 = Data4_g170941.MultiMask;
					Out_Grayscale4_g170941 = Data4_g170941.Grayscale;
					Out_Luminosity4_g170941= Data4_g170941.Luminosity;
					Out_AlphaClip4_g170941 = Data4_g170941.AlphaClip;
					Out_AlphaFade4_g170941 = Data4_g170941.AlphaFade;
					Out_Translucency4_g170941 = Data4_g170941.Translucency;
					Out_Transmission4_g170941 = Data4_g170941.Transmission;
					Out_Thickness4_g170941 = Data4_g170941.Thickness;
					Out_Diffusion4_g170941 = Data4_g170941.Diffusion;
					Out_Depth4_g170941= Data4_g170941.Depth;
					}
					float3 In_Albedo3_g170939 = Out_Albedo4_g170941;
					float3 In_AlbedoRaw3_g170939 = Out_AlbedoRaw4_g170941;
					float2 In_NormalTS3_g170939 = Out_NormalTS4_g170941;
					float3 In_NormalWS3_g170939 = Out_NormalWS4_g170941;
					float4 In_Shader3_g170939 = Out_Shader4_g170941;
					float4 In_Emissive3_g170939 = Out_Emissive4_g170941;
					float In_Grayscale3_g170939 = Out_Grayscale4_g170941;
					float In_Luminosity3_g170939 = Out_Luminosity4_g170941;
					float temp_output_836_11_g170938 = Out_MultiMask4_g170941;
					float In_MultiMask3_g170939 = temp_output_836_11_g170938;
					half Visual_AlphaClip667_g170938 = Out_AlphaClip4_g170941;
					TVEGlobalData Data15_g170940 = Data204_g170496;
					float Out_Dummy15_g170940 = 0;
					float4 Out_CoatDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170940 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170940 = Data15_g170940.Dummy;
					Out_CoatDataRT15_g170940 = Data15_g170940.CoatDataRT;
					Out_PaintDataRT15_g170940 = Data15_g170940.PaintDataRT;
					Out_GlowDataRT15_g170940= Data15_g170940.GlowDataRT;
					Out_AtmoDataRT15_g170940= Data15_g170940.AtmoDataRT;
					Out_FadeDataRT15_g170940= Data15_g170940.FadeDataRT;
					Out_FormDataRT15_g170940 = Data15_g170940.FormDataRT;
					Out_FlowDataRT15_g170940 = Data15_g170940.FlowDataRT;
					}
					half4 Global_FadeParams516_g170938 = Out_FadeDataRT15_g170940;
					float temp_output_6_0_g170947 = saturate( (Global_FadeParams516_g170938).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170947 = ( temp_output_6_0_g170947 + _CutoutElementMode );
					#else
					float staticSwitch14_g170947 = temp_output_6_0_g170947;
					#endif
					#ifdef TVE_CUTOUT_ELEMENT
					float staticSwitch663_g170938 = staticSwitch14_g170947;
					#else
					float staticSwitch663_g170938 = TVE_FadeParams.w;
					#endif
					float lerpResult843_g170938 = lerp( 1.0 , ( staticSwitch663_g170938 * TVE_IsEnabled ) , _CutoutGlobalValue);
					half Local_GlobalMask429_g170938 = lerpResult843_g170938;
					float lerpResult811_g170938 = lerp( 1.0 , Visual_AlphaClip667_g170938 , _CutoutAlphaValue);
					half Local_AlphaMask814_g170938 = lerpResult811_g170938;
					TVEModelData Data15_g170942 = Data16_g170483;
					float Out_Dummy15_g170942 = 0;
					float3 Out_PositionWS15_g170942 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170942 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170942 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170942 = float3( 0,0,0 );
					float4 Out_VertexData15_g170942 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170942 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170942 = Data15_g170942.Dummy;
					Out_PositionWS15_g170942 = Data15_g170942.PositionWS;
					Out_PositionWO15_g170942 = Data15_g170942.PositionWO;
					Out_PivotWS15_g170942 = Data15_g170942.PivotWS;
					Out_PivotWO15_g170942 = Data15_g170942.PivotWO;
					Out_NormalWS15_g170942 = Data15_g170942.NormalWS;
					Out_ViewDirWS15_g170942 = Data15_g170942.ViewDirWS;
					Out_VertexData15_g170942 = Data15_g170942.VertexData;
					Out_BoundsData15_g170942 = Data15_g170942.BoundsData;
					}
					half3 Model_PositionWO602_g170938 = Out_PositionWO15_g170942;
					float lerpResult673_g170938 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170938 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
					half Local_NoiseMask678_g170938 = lerpResult673_g170938;
					half4 Model_VertexMasks752_g170938 = Out_VertexData15_g170942;
					float4 break755_g170938 = Model_VertexMasks752_g170938;
					float4 break33_g170943 = _cutout_vert_mode;
					float temp_output_30_0_g170943 = ( break755_g170938.x * break33_g170943.x );
					float temp_output_29_0_g170943 = ( break755_g170938.y * break33_g170943.y );
					float temp_output_31_0_g170943 = ( break755_g170938.z * break33_g170943.z );
					float temp_output_28_0_g170943 = ( temp_output_30_0_g170943 + temp_output_29_0_g170943 + temp_output_31_0_g170943 + ( break755_g170938.w * break33_g170943.w ) );
					float clampResult17_g170944 = clamp( temp_output_28_0_g170943 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170946 = _CutoutMeshRemap.x;
					float temp_output_9_0_g170946 = ( clampResult17_g170944 - temp_output_7_0_g170946 );
					float lerpResult820_g170938 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170946 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
					float temp_output_6_0_g170945 = lerpResult820_g170938;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170945 = ( temp_output_6_0_g170945 + _CutoutMeshMode );
					#else
					float staticSwitch14_g170945 = temp_output_6_0_g170945;
					#endif
					float temp_output_801_0_g170938 = staticSwitch14_g170945;
					half Local_VertMask766_g170938 = temp_output_801_0_g170938;
					half Visual_MultiMask671_g170938 = temp_output_836_11_g170938;
					float lerpResult683_g170938 = lerp( 1.0 , Visual_MultiMask671_g170938 , _CutoutMultiValue);
					half Local_MultiMask685_g170938 = lerpResult683_g170938;
					float lerpResult728_g170938 = lerp( Visual_AlphaClip667_g170938 , min( Visual_AlphaClip667_g170938 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170938 ) - ( Local_AlphaMask814_g170938 * Local_NoiseMask678_g170938 * Local_VertMask766_g170938 ) ) ) ) , Local_MultiMask685_g170938);
					half Local_AlphaClip784_g170938 = lerpResult728_g170938;
					#ifdef TVE_CUTOUT
					float staticSwitch577_g170938 = Local_AlphaClip784_g170938;
					#else
					float staticSwitch577_g170938 = Visual_AlphaClip667_g170938;
					#endif
					half Final_AlphaClip795_g170938 = staticSwitch577_g170938;
					float In_AlphaClip3_g170939 = Final_AlphaClip795_g170938;
					float In_AlphaFade3_g170939 = Out_AlphaFade4_g170941;
					float3 In_Translucency3_g170939 = Out_Translucency4_g170941;
					float In_Transmission3_g170939 = Out_Transmission4_g170941;
					float In_Thickness3_g170939 = Out_Thickness4_g170941;
					float In_Diffusion3_g170939 = Out_Diffusion4_g170941;
					float In_Depth3_g170939 = Out_Depth4_g170941;
					{
					Data3_g170939.Dummy = In_Dummy3_g170939;
					Data3_g170939.Albedo = In_Albedo3_g170939;
					Data3_g170939.AlbedoRaw = In_AlbedoRaw3_g170939;
					Data3_g170939.NormalTS = In_NormalTS3_g170939;
					Data3_g170939.NormalWS = In_NormalWS3_g170939;
					Data3_g170939.Shader = In_Shader3_g170939;
					Data3_g170939.Emissive= In_Emissive3_g170939;
					Data3_g170939.MultiMask = In_MultiMask3_g170939;
					Data3_g170939.Grayscale = In_Grayscale3_g170939;
					Data3_g170939.Luminosity = In_Luminosity3_g170939;
					Data3_g170939.AlphaClip = In_AlphaClip3_g170939;
					Data3_g170939.AlphaFade = In_AlphaFade3_g170939;
					Data3_g170939.Translucency = In_Translucency3_g170939;
					Data3_g170939.Transmission = In_Transmission3_g170939;
					Data3_g170939.Thickness = In_Thickness3_g170939;
					Data3_g170939.Diffusion = In_Diffusion3_g170939;
					Data3_g170939.Depth = In_Depth3_g170939;
					}
					TVEVisualData Data4_g170957 = Data3_g170939;
					float Out_Dummy4_g170957 = 0;
					float3 Out_Albedo4_g170957 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170957 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170957 = float2( 0,0 );
					float3 Out_NormalWS4_g170957 = float3( 0,0,0 );
					float4 Out_Shader4_g170957 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170957 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170957 = 0;
					float Out_Grayscale4_g170957 = 0;
					float Out_Luminosity4_g170957 = 0;
					float Out_AlphaClip4_g170957 = 0;
					float Out_AlphaFade4_g170957 = 0;
					float3 Out_Translucency4_g170957 = float3( 0,0,0 );
					float Out_Transmission4_g170957 = 0;
					float Out_Thickness4_g170957 = 0;
					float Out_Diffusion4_g170957 = 0;
					float Out_Depth4_g170957 = 0;
					{
					Out_Dummy4_g170957 = Data4_g170957.Dummy;
					Out_Albedo4_g170957 = Data4_g170957.Albedo;
					Out_AlbedoRaw4_g170957 = Data4_g170957.AlbedoRaw;
					Out_NormalTS4_g170957 = Data4_g170957.NormalTS;
					Out_NormalWS4_g170957 = Data4_g170957.NormalWS;
					Out_Shader4_g170957 = Data4_g170957.Shader;
					Out_Emissive4_g170957= Data4_g170957.Emissive;
					Out_MultiMask4_g170957 = Data4_g170957.MultiMask;
					Out_Grayscale4_g170957 = Data4_g170957.Grayscale;
					Out_Luminosity4_g170957= Data4_g170957.Luminosity;
					Out_AlphaClip4_g170957 = Data4_g170957.AlphaClip;
					Out_AlphaFade4_g170957 = Data4_g170957.AlphaFade;
					Out_Translucency4_g170957 = Data4_g170957.Translucency;
					Out_Transmission4_g170957 = Data4_g170957.Transmission;
					Out_Thickness4_g170957 = Data4_g170957.Thickness;
					Out_Diffusion4_g170957 = Data4_g170957.Diffusion;
					Out_Depth4_g170957= Data4_g170957.Depth;
					}
					float3 In_Albedo3_g170958 = Out_Albedo4_g170957;
					float3 In_AlbedoRaw3_g170958 = Out_AlbedoRaw4_g170957;
					float2 In_NormalTS3_g170958 = Out_NormalTS4_g170957;
					float3 In_NormalWS3_g170958 = Out_NormalWS4_g170957;
					float4 In_Shader3_g170958 = Out_Shader4_g170957;
					float4 In_Emissive3_g170958 = Out_Emissive4_g170957;
					float In_Grayscale3_g170958 = Out_Grayscale4_g170957;
					float In_Luminosity3_g170958 = Out_Luminosity4_g170957;
					float temp_output_821_11_g170955 = Out_MultiMask4_g170957;
					float In_MultiMask3_g170958 = temp_output_821_11_g170955;
					half Visual_AlphaClip754_g170955 = Out_AlphaClip4_g170957;
					half Dither_Constant768_g170955 = _DitherConstantValue;
					half Dither_BiasProximity881_g170955 = TVE_DitherParams.x;
					half Dither_BiasEnabled883_g170955 = TVE_DitherParams.w;
					float lerpResult884_g170955 = lerp( 1.0 , Dither_BiasProximity881_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170960 = _DitherProximityMaxValue;
					float temp_output_9_0_g170960 = ( ( distance( worldPos , _WorldSpaceCameraPos ) * lerpResult884_g170955 ) - temp_output_7_0_g170960 );
					half Dither_Proximity767_g170955 = ( saturate( ( ( temp_output_9_0_g170960 / ( _DitherProximityMinValue - temp_output_7_0_g170960 ) ) + 0.0001 ) ) * _DitherProximityValue );
					TVEModelData Data15_g170959 = Data16_g170483;
					float Out_Dummy15_g170959 = 0;
					float3 Out_PositionWS15_g170959 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170959 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170959 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170959 = float3( 0,0,0 );
					float4 Out_VertexData15_g170959 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170959 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170959 = Data15_g170959.Dummy;
					Out_PositionWS15_g170959 = Data15_g170959.PositionWS;
					Out_PositionWO15_g170959 = Data15_g170959.PositionWO;
					Out_PivotWS15_g170959 = Data15_g170959.PivotWS;
					Out_PivotWO15_g170959 = Data15_g170959.PivotWO;
					Out_NormalWS15_g170959 = Data15_g170959.NormalWS;
					Out_ViewDirWS15_g170959 = Data15_g170959.ViewDirWS;
					Out_VertexData15_g170959 = Data15_g170959.VertexData;
					Out_BoundsData15_g170959 = Data15_g170959.BoundsData;
					}
					half3 Model_PositionWS776_g170955 = Out_PositionWS15_g170959;
					half Dither_BiasDistance882_g170955 = TVE_DitherParams.z;
					float lerpResult888_g170955 = lerp( 1.0 , Dither_BiasDistance882_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170961 = _DitherDistanceMinValue;
					float temp_output_9_0_g170961 = ( ( distance( Model_PositionWS776_g170955 , _WorldSpaceCameraPos ) * lerpResult888_g170955 ) - temp_output_7_0_g170961 );
					half Dither_Distance856_g170955 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherDistanceMaxValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherDistanceValue );
					half3 Model_ViewDirWS845_g170955 = Out_ViewDirWS15_g170959;
					float3 normalizeResult792_g170955 = normalize( cross( ddy( worldPos ) , ddx( worldPos ) ) );
					float dotResult778_g170955 = dot( Model_ViewDirWS845_g170955 , normalizeResult792_g170955 );
					half Dither_Glancing784_g170955 = ( saturate( ( ( 1.0 - abs( dotResult778_g170955 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
					half Dither_Value429_g170955 = max( max( max( Dither_Constant768_g170955 , Dither_Proximity767_g170955 ) , Dither_Distance856_g170955 ) , Dither_Glancing784_g170955 );
					half3 Model_PositionWO602_g170955 = Out_PositionWO15_g170959;
					half3 Dither_PositionWO895_g170955 = ( Model_PositionWO602_g170955 * 20.0 );
					half Local_MaskNoise678_g170955 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170955 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
					half Visual_MultiMask671_g170955 = temp_output_821_11_g170955;
					float lerpResult683_g170955 = lerp( 1.0 , Visual_MultiMask671_g170955 , _DitherMultiValue);
					half Local_MaskMulti685_g170955 = lerpResult683_g170955;
					half Custom_Mask826_g170955 = 1.0;
					float lerpResult728_g170955 = lerp( Visual_AlphaClip754_g170955 , min( Visual_AlphaClip754_g170955 , ( -0.001 - ( Dither_Value429_g170955 - Local_MaskNoise678_g170955 ) ) ) , ( Local_MaskMulti685_g170955 * Custom_Mask826_g170955 ));
					half Local_AlphaClip834_g170955 = lerpResult728_g170955;
					#ifdef TVE_DITHER
					float staticSwitch577_g170955 = Local_AlphaClip834_g170955;
					#else
					float staticSwitch577_g170955 = Visual_AlphaClip754_g170955;
					#endif
					half Final_AlphaClip493_g170955 = staticSwitch577_g170955;
					float In_AlphaClip3_g170958 = Final_AlphaClip493_g170955;
					float In_AlphaFade3_g170958 = Out_AlphaFade4_g170957;
					float3 In_Translucency3_g170958 = Out_Translucency4_g170957;
					float In_Transmission3_g170958 = Out_Transmission4_g170957;
					float In_Thickness3_g170958 = Out_Thickness4_g170957;
					float In_Diffusion3_g170958 = Out_Diffusion4_g170957;
					float In_Depth3_g170958 = Out_Depth4_g170957;
					{
					Data3_g170958.Dummy = In_Dummy3_g170958;
					Data3_g170958.Albedo = In_Albedo3_g170958;
					Data3_g170958.AlbedoRaw = In_AlbedoRaw3_g170958;
					Data3_g170958.NormalTS = In_NormalTS3_g170958;
					Data3_g170958.NormalWS = In_NormalWS3_g170958;
					Data3_g170958.Shader = In_Shader3_g170958;
					Data3_g170958.Emissive= In_Emissive3_g170958;
					Data3_g170958.MultiMask = In_MultiMask3_g170958;
					Data3_g170958.Grayscale = In_Grayscale3_g170958;
					Data3_g170958.Luminosity = In_Luminosity3_g170958;
					Data3_g170958.AlphaClip = In_AlphaClip3_g170958;
					Data3_g170958.AlphaFade = In_AlphaFade3_g170958;
					Data3_g170958.Translucency = In_Translucency3_g170958;
					Data3_g170958.Transmission = In_Transmission3_g170958;
					Data3_g170958.Thickness = In_Thickness3_g170958;
					Data3_g170958.Diffusion = In_Diffusion3_g170958;
					Data3_g170958.Depth = In_Depth3_g170958;
					}
					TVEVisualData Data4_g170984 = Data3_g170958;
					float Out_Dummy4_g170984 = 0;
					float3 Out_Albedo4_g170984 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170984 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170984 = float2( 0,0 );
					float3 Out_NormalWS4_g170984 = float3( 0,0,0 );
					float4 Out_Shader4_g170984 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170984 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170984 = 0;
					float Out_Grayscale4_g170984 = 0;
					float Out_Luminosity4_g170984 = 0;
					float Out_AlphaClip4_g170984 = 0;
					float Out_AlphaFade4_g170984 = 0;
					float3 Out_Translucency4_g170984 = float3( 0,0,0 );
					float Out_Transmission4_g170984 = 0;
					float Out_Thickness4_g170984 = 0;
					float Out_Diffusion4_g170984 = 0;
					float Out_Depth4_g170984 = 0;
					{
					Out_Dummy4_g170984 = Data4_g170984.Dummy;
					Out_Albedo4_g170984 = Data4_g170984.Albedo;
					Out_AlbedoRaw4_g170984 = Data4_g170984.AlbedoRaw;
					Out_NormalTS4_g170984 = Data4_g170984.NormalTS;
					Out_NormalWS4_g170984 = Data4_g170984.NormalWS;
					Out_Shader4_g170984 = Data4_g170984.Shader;
					Out_Emissive4_g170984= Data4_g170984.Emissive;
					Out_MultiMask4_g170984 = Data4_g170984.MultiMask;
					Out_Grayscale4_g170984 = Data4_g170984.Grayscale;
					Out_Luminosity4_g170984= Data4_g170984.Luminosity;
					Out_AlphaClip4_g170984 = Data4_g170984.AlphaClip;
					Out_AlphaFade4_g170984 = Data4_g170984.AlphaFade;
					Out_Translucency4_g170984 = Data4_g170984.Translucency;
					Out_Transmission4_g170984 = Data4_g170984.Transmission;
					Out_Thickness4_g170984 = Data4_g170984.Thickness;
					Out_Diffusion4_g170984 = Data4_g170984.Diffusion;
					Out_Depth4_g170984= Data4_g170984.Depth;
					}
					float3 temp_output_297_0_g170980 = Out_Albedo4_g170984;
					float3 In_Albedo3_g170995 = temp_output_297_0_g170980;
					float3 temp_output_297_23_g170980 = Out_AlbedoRaw4_g170984;
					float3 In_AlbedoRaw3_g170995 = temp_output_297_23_g170980;
					float2 In_NormalTS3_g170995 = Out_NormalTS4_g170984;
					float3 In_NormalWS3_g170995 = Out_NormalWS4_g170984;
					float4 In_Shader3_g170995 = Out_Shader4_g170984;
					float4 temp_cast_37 = (0.0).xxxx;
					half4 Visual_Emissive255_g170980 = Out_Emissive4_g170984;
					TVEModelData Data15_g170985 = Data16_g170483;
					float Out_Dummy15_g170985 = 0;
					float3 Out_PositionWS15_g170985 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170985 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170985 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170985 = float3( 0,0,0 );
					float4 Out_VertexData15_g170985 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170985 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170985 = Data15_g170985.Dummy;
					Out_PositionWS15_g170985 = Data15_g170985.PositionWS;
					Out_PositionWO15_g170985 = Data15_g170985.PositionWO;
					Out_PivotWS15_g170985 = Data15_g170985.PivotWS;
					Out_PivotWO15_g170985 = Data15_g170985.PivotWO;
					Out_NormalWS15_g170985 = Data15_g170985.NormalWS;
					Out_ViewDirWS15_g170985 = Data15_g170985.ViewDirWS;
					Out_VertexData15_g170985 = Data15_g170985.VertexData;
					Out_BoundsData15_g170985 = Data15_g170985.BoundsData;
					}
					half4 Model_VertexMasks216_g170980 = Out_VertexData15_g170985;
					float4 break251_g170980 = Model_VertexMasks216_g170980;
					float4 break33_g170990 = _emissive_vert_mode;
					float temp_output_30_0_g170990 = ( break251_g170980.x * break33_g170990.x );
					float temp_output_29_0_g170990 = ( break251_g170980.y * break33_g170990.y );
					float temp_output_31_0_g170990 = ( break251_g170980.z * break33_g170990.z );
					float temp_output_28_0_g170990 = ( temp_output_30_0_g170990 + temp_output_29_0_g170990 + temp_output_31_0_g170990 + ( break251_g170980.w * break33_g170990.w ) );
					float clampResult17_g170989 = clamp( temp_output_28_0_g170990 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170993 = _EmissiveMeshRemap.x;
					float temp_output_9_0_g170993 = ( clampResult17_g170989 - temp_output_7_0_g170993 );
					float lerpResult303_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170993 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
					float temp_output_6_0_g170992 = lerpResult303_g170980;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170992 = ( temp_output_6_0_g170992 + _EmissiveMeshMode );
					#else
					float staticSwitch14_g170992 = temp_output_6_0_g170992;
					#endif
					half Emissive_MeshMask221_g170980 = staticSwitch14_g170992;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170982) = _EmissiveMaskTex;
					SamplerState Sampler276_g170982 = sampler_Linear_Repeat;
					float4 temp_output_6_0_g170983 = _emissive_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170983 = ( temp_output_6_0_g170983 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
					#else
					float4 staticSwitch14_g170983 = temp_output_6_0_g170983;
					#endif
					half4 Emissive_Coords167_g170980 = staticSwitch14_g170983;
					float4 temp_output_37_0_g170982 = Emissive_Coords167_g170980;
					half4 Coords276_g170982 = temp_output_37_0_g170982;
					half2 TexCoord276_g170982 = IN.ase_texcoord7.xy;
					half4 localSampleMain276_g170982 = SampleMain( Texture276_g170982 , Sampler276_g170982 , Coords276_g170982 , TexCoord276_g170982 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170982) = _EmissiveMaskTex;
					SamplerState Sampler275_g170982 = sampler_Linear_Repeat;
					half4 Coords275_g170982 = temp_output_37_0_g170982;
					half2 TexCoord275_g170982 = IN.ase_texcoord8.xy;
					half4 localSampleExtra275_g170982 = SampleExtra( Texture275_g170982 , Sampler275_g170982 , Coords275_g170982 , TexCoord275_g170982 );
					#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
					float4 staticSwitch176_g170980 = localSampleExtra275_g170982;
					#else
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#endif
					half4 Emissive_MaskTex201_g170980 = staticSwitch176_g170980;
					float clampResult17_g170991 = clamp( (Emissive_MaskTex201_g170980).x , 0.0001 , 0.9999 );
					float temp_output_7_0_g170994 = _EmissiveMaskRemap.x;
					float temp_output_9_0_g170994 = ( clampResult17_g170991 - temp_output_7_0_g170994 );
					float lerpResult302_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170994 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
					half Emissive_Mask103_g170980 = lerpResult302_g170980;
					float temp_output_279_0_g170980 = ( Emissive_MeshMask221_g170980 * Emissive_Mask103_g170980 );
					float3 appendResult293_g170980 = (float3(temp_output_279_0_g170980 , temp_output_279_0_g170980 , temp_output_279_0_g170980));
					half3 Local_EmissiveColor278_g170980 = appendResult293_g170980;
					float3 temp_output_316_0_g170980 = (TVE_GlowParams).xyz;
					TVEGlobalData Data15_g170981 = Data204_g170496;
					float Out_Dummy15_g170981 = 0;
					float4 Out_CoatDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170981 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170981 = Data15_g170981.Dummy;
					Out_CoatDataRT15_g170981 = Data15_g170981.CoatDataRT;
					Out_PaintDataRT15_g170981 = Data15_g170981.PaintDataRT;
					Out_GlowDataRT15_g170981= Data15_g170981.GlowDataRT;
					Out_AtmoDataRT15_g170981= Data15_g170981.AtmoDataRT;
					Out_FadeDataRT15_g170981= Data15_g170981.FadeDataRT;
					Out_FormDataRT15_g170981 = Data15_g170981.FormDataRT;
					Out_FlowDataRT15_g170981 = Data15_g170981.FlowDataRT;
					}
					half4 Global_GlowParams179_g170980 = Out_GlowDataRT15_g170981;
					float3 temp_output_6_0_g170987 = (Global_GlowParams179_g170980).xyz;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170987 = ( temp_output_6_0_g170987 + _EmissiveElementMode );
					#else
					float3 staticSwitch14_g170987 = temp_output_6_0_g170987;
					#endif
					#ifdef TVE_EMISSIVE_ELEMENT
					float3 staticSwitch228_g170980 = staticSwitch14_g170987;
					#else
					float3 staticSwitch228_g170980 = temp_output_316_0_g170980;
					#endif
					float3 lerpResult299_g170980 = lerp( float3( 1,1,1 ) , staticSwitch228_g170980 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
					half3 Emissive_GlobalMask248_g170980 = lerpResult299_g170980;
					half3 Visual_AlbedoRaw306_g170980 = temp_output_297_23_g170980;
					float3 lerpResult307_g170980 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170980 , _EmissiveColorMode);
					half3 Local_EmissiveValue88_g170980 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170980 * lerpResult307_g170980 );
					half3 Emissive_Blend260_g170980 = ( ( (Visual_Emissive255_g170980).xyz * Local_EmissiveColor278_g170980 ) * Local_EmissiveValue88_g170980 );
					float3 temp_output_3_0_g170986 = Emissive_Blend260_g170980;
					float temp_output_15_0_g170986 = _emissive_power_value;
					float3 temp_output_23_0_g170986 = ( temp_output_3_0_g170986 * temp_output_15_0_g170986 );
					half Local_EmissiveMask294_g170980 = temp_output_279_0_g170980;
					float4 appendResult295_g170980 = (float4(temp_output_23_0_g170986 , Local_EmissiveMask294_g170980));
					#ifdef TVE_EMISSIVE
					float4 staticSwitch129_g170980 = appendResult295_g170980;
					#else
					float4 staticSwitch129_g170980 = temp_cast_37;
					#endif
					half4 Final_Emissive184_g170980 = staticSwitch129_g170980;
					float4 In_Emissive3_g170995 = Final_Emissive184_g170980;
					float In_Grayscale3_g170995 = Out_Grayscale4_g170984;
					float In_Luminosity3_g170995 = Out_Luminosity4_g170984;
					float temp_output_297_11_g170980 = Out_MultiMask4_g170984;
					float In_MultiMask3_g170995 = temp_output_297_11_g170980;
					float In_AlphaClip3_g170995 = Out_AlphaClip4_g170984;
					float In_AlphaFade3_g170995 = Out_AlphaFade4_g170984;
					float3 In_Translucency3_g170995 = Out_Translucency4_g170984;
					float In_Transmission3_g170995 = Out_Transmission4_g170984;
					float In_Thickness3_g170995 = Out_Thickness4_g170984;
					float In_Diffusion3_g170995 = Out_Diffusion4_g170984;
					float In_Depth3_g170995 = Out_Depth4_g170984;
					{
					Data3_g170995.Dummy = In_Dummy3_g170995;
					Data3_g170995.Albedo = In_Albedo3_g170995;
					Data3_g170995.AlbedoRaw = In_AlbedoRaw3_g170995;
					Data3_g170995.NormalTS = In_NormalTS3_g170995;
					Data3_g170995.NormalWS = In_NormalWS3_g170995;
					Data3_g170995.Shader = In_Shader3_g170995;
					Data3_g170995.Emissive= In_Emissive3_g170995;
					Data3_g170995.MultiMask = In_MultiMask3_g170995;
					Data3_g170995.Grayscale = In_Grayscale3_g170995;
					Data3_g170995.Luminosity = In_Luminosity3_g170995;
					Data3_g170995.AlphaClip = In_AlphaClip3_g170995;
					Data3_g170995.AlphaFade = In_AlphaFade3_g170995;
					Data3_g170995.Translucency = In_Translucency3_g170995;
					Data3_g170995.Transmission = In_Transmission3_g170995;
					Data3_g170995.Thickness = In_Thickness3_g170995;
					Data3_g170995.Diffusion = In_Diffusion3_g170995;
					Data3_g170995.Depth = In_Depth3_g170995;
					}
					TVEVisualData Data4_g171014 = Data3_g170995;
					float Out_Dummy4_g171014 = 0;
					float3 Out_Albedo4_g171014 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171014 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171014 = float2( 0,0 );
					float3 Out_NormalWS4_g171014 = float3( 0,0,0 );
					float4 Out_Shader4_g171014 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171014 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171014 = 0;
					float Out_Grayscale4_g171014 = 0;
					float Out_Luminosity4_g171014 = 0;
					float Out_AlphaClip4_g171014 = 0;
					float Out_AlphaFade4_g171014 = 0;
					float3 Out_Translucency4_g171014 = float3( 0,0,0 );
					float Out_Transmission4_g171014 = 0;
					float Out_Thickness4_g171014 = 0;
					float Out_Diffusion4_g171014 = 0;
					float Out_Depth4_g171014 = 0;
					{
					Out_Dummy4_g171014 = Data4_g171014.Dummy;
					Out_Albedo4_g171014 = Data4_g171014.Albedo;
					Out_AlbedoRaw4_g171014 = Data4_g171014.AlbedoRaw;
					Out_NormalTS4_g171014 = Data4_g171014.NormalTS;
					Out_NormalWS4_g171014 = Data4_g171014.NormalWS;
					Out_Shader4_g171014 = Data4_g171014.Shader;
					Out_Emissive4_g171014= Data4_g171014.Emissive;
					Out_MultiMask4_g171014 = Data4_g171014.MultiMask;
					Out_Grayscale4_g171014 = Data4_g171014.Grayscale;
					Out_Luminosity4_g171014= Data4_g171014.Luminosity;
					Out_AlphaClip4_g171014 = Data4_g171014.AlphaClip;
					Out_AlphaFade4_g171014 = Data4_g171014.AlphaFade;
					Out_Translucency4_g171014 = Data4_g171014.Translucency;
					Out_Transmission4_g171014 = Data4_g171014.Transmission;
					Out_Thickness4_g171014 = Data4_g171014.Thickness;
					Out_Diffusion4_g171014 = Data4_g171014.Diffusion;
					Out_Depth4_g171014= Data4_g171014.Depth;
					}
					half3 Visual_Albedo199_g171013 = Out_Albedo4_g171014;
					float3 temp_cast_38 = (0.0).xxx;
					half3 Subsurface_Color264_g171013 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171013 );
					half Visual_Transmission138_g171013 = Out_Transmission4_g171014;
					half Subsurface_Value268_g171013 = _SubsurfaceIntensityValue;
					TVEGlobalData Data15_g171016 = Data204_g170496;
					float Out_Dummy15_g171016 = 0;
					float4 Out_CoatDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g171016 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171016 = Data15_g171016.Dummy;
					Out_CoatDataRT15_g171016 = Data15_g171016.CoatDataRT;
					Out_PaintDataRT15_g171016 = Data15_g171016.PaintDataRT;
					Out_GlowDataRT15_g171016= Data15_g171016.GlowDataRT;
					Out_AtmoDataRT15_g171016= Data15_g171016.AtmoDataRT;
					Out_FadeDataRT15_g171016= Data15_g171016.FadeDataRT;
					Out_FormDataRT15_g171016 = Data15_g171016.FormDataRT;
					Out_FlowDataRT15_g171016 = Data15_g171016.FlowDataRT;
					}
					half4 Global_GlowParams373_g171013 = Out_GlowDataRT15_g171016;
					float temp_output_6_0_g171019 = saturate( (Global_GlowParams373_g171013).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g171019 = ( temp_output_6_0_g171019 + _SubsurfaceElementMode );
					#else
					float staticSwitch14_g171019 = temp_output_6_0_g171019;
					#endif
					#ifdef TVE_SUBSURFACE_ELEMENT
					float staticSwitch367_g171013 = staticSwitch14_g171019;
					#else
					float staticSwitch367_g171013 = TVE_GlowParams.w;
					#endif
					float lerpResult403_g171013 = lerp( 1.0 , staticSwitch367_g171013 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
					half Subsurface_GlobalMask369_g171013 = lerpResult403_g171013;
					float temp_output_301_11_g171013 = Out_MultiMask4_g171014;
					half Visual_MultiMask292_g171013 = temp_output_301_11_g171013;
					float lerpResult293_g171013 = lerp( 1.0 , Visual_MultiMask292_g171013 , _SubsurfaceMultiValue);
					half Subsurface_MultiMask296_g171013 = lerpResult293_g171013;
					half Custom_Mask363_g171013 = 1.0;
					#ifdef TVE_SUBSURFACE
					float staticSwitch345_g171013 = ( Visual_Transmission138_g171013 * Subsurface_Value268_g171013 * Subsurface_GlobalMask369_g171013 * Subsurface_MultiMask296_g171013 * Custom_Mask363_g171013 );
					#else
					float staticSwitch345_g171013 = 0.0;
					#endif
					half Final_Transmission269_g171013 = staticSwitch345_g171013;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch348_g171013 = ( Subsurface_Color264_g171013 * Final_Transmission269_g171013 * 10.0 );
					#else
					float3 staticSwitch348_g171013 = temp_cast_38;
					#endif
					half3 Final_Translucency254_g171013 = staticSwitch348_g171013;
					TVEModelData Data15_g171017 = Data16_g170483;
					float Out_Dummy15_g171017 = 0;
					float3 Out_PositionWS15_g171017 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171017 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171017 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g171017 = float3( 0,0,0 );
					float4 Out_VertexData15_g171017 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171017 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171017 = Data15_g171017.Dummy;
					Out_PositionWS15_g171017 = Data15_g171017.PositionWS;
					Out_PositionWO15_g171017 = Data15_g171017.PositionWO;
					Out_PivotWS15_g171017 = Data15_g171017.PivotWS;
					Out_PivotWO15_g171017 = Data15_g171017.PivotWO;
					Out_NormalWS15_g171017 = Data15_g171017.NormalWS;
					Out_ViewDirWS15_g171017 = Data15_g171017.ViewDirWS;
					Out_VertexData15_g171017 = Data15_g171017.VertexData;
					Out_BoundsData15_g171017 = Data15_g171017.BoundsData;
					}
					half3 Model_ViewDirWS392_g171013 = Out_ViewDirWS15_g171017;
					float dotResult324_g171013 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171013 );
					float saferPower323_g171013 = abs( saturate( dotResult324_g171013 ) );
					#ifdef UNITY_PASS_FORWARDADD
					float staticSwitch330_g171013 = 0.0;
					#else
					float staticSwitch330_g171013 = ( pow( saferPower323_g171013 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
					#endif
					half Mask_Subsurface_View320_g171013 = staticSwitch330_g171013;
					float3 temp_output_6_0_g171018 = ( Final_Translucency254_g171013 * Mask_Subsurface_View320_g171013 );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171018 = ( temp_output_6_0_g171018 + _SubsurfaceAproxInfo );
					#else
					float3 staticSwitch14_g171018 = temp_output_6_0_g171018;
					#endif
					half3 Subsurface_Approximation333_g171013 = staticSwitch14_g171018;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch353_g171013 = ( Visual_Albedo199_g171013 + Subsurface_Approximation333_g171013 );
					#else
					float3 staticSwitch353_g171013 = Visual_Albedo199_g171013;
					#endif
					half3 Final_Albedo312_g171013 = staticSwitch353_g171013;
					float3 In_Albedo3_g171015 = Final_Albedo312_g171013;
					float3 In_AlbedoRaw3_g171015 = Out_AlbedoRaw4_g171014;
					float2 In_NormalTS3_g171015 = Out_NormalTS4_g171014;
					float3 In_NormalWS3_g171015 = Out_NormalWS4_g171014;
					float4 In_Shader3_g171015 = Out_Shader4_g171014;
					float4 In_Emissive3_g171015 = Out_Emissive4_g171014;
					float In_Grayscale3_g171015 = Out_Grayscale4_g171014;
					float In_Luminosity3_g171015 = Out_Luminosity4_g171014;
					float In_MultiMask3_g171015 = temp_output_301_11_g171013;
					float In_AlphaClip3_g171015 = Out_AlphaClip4_g171014;
					float In_AlphaFade3_g171015 = Out_AlphaFade4_g171014;
					float3 In_Translucency3_g171015 = Final_Translucency254_g171013;
					float In_Transmission3_g171015 = Final_Transmission269_g171013;
					#ifdef TVE_SUBSURFACE
					float staticSwitch351_g171013 = 0.0;
					#else
					float staticSwitch351_g171013 = 1.0;
					#endif
					half Final_Thickness275_g171013 = staticSwitch351_g171013;
					float In_Thickness3_g171015 = Final_Thickness275_g171013;
					float Final_Diffusion340_g171013 = _SubsurfaceDiffusion;
					float In_Diffusion3_g171015 = Final_Diffusion340_g171013;
					float In_Depth3_g171015 = Out_Depth4_g171014;
					{
					Data3_g171015.Dummy = In_Dummy3_g171015;
					Data3_g171015.Albedo = In_Albedo3_g171015;
					Data3_g171015.AlbedoRaw = In_AlbedoRaw3_g171015;
					Data3_g171015.NormalTS = In_NormalTS3_g171015;
					Data3_g171015.NormalWS = In_NormalWS3_g171015;
					Data3_g171015.Shader = In_Shader3_g171015;
					Data3_g171015.Emissive= In_Emissive3_g171015;
					Data3_g171015.MultiMask = In_MultiMask3_g171015;
					Data3_g171015.Grayscale = In_Grayscale3_g171015;
					Data3_g171015.Luminosity = In_Luminosity3_g171015;
					Data3_g171015.AlphaClip = In_AlphaClip3_g171015;
					Data3_g171015.AlphaFade = In_AlphaFade3_g171015;
					Data3_g171015.Translucency = In_Translucency3_g171015;
					Data3_g171015.Transmission = In_Transmission3_g171015;
					Data3_g171015.Thickness = In_Thickness3_g171015;
					Data3_g171015.Diffusion = In_Diffusion3_g171015;
					Data3_g171015.Depth = In_Depth3_g171015;
					}
					TVEVisualData Data4_g171040 = Data3_g171015;
					float Out_Dummy4_g171040 = 0;
					float3 Out_Albedo4_g171040 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171040 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171040 = float2( 0,0 );
					float3 Out_NormalWS4_g171040 = float3( 0,0,0 );
					float4 Out_Shader4_g171040 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171040 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171040 = 0;
					float Out_Grayscale4_g171040 = 0;
					float Out_Luminosity4_g171040 = 0;
					float Out_AlphaClip4_g171040 = 0;
					float Out_AlphaFade4_g171040 = 0;
					float3 Out_Translucency4_g171040 = float3( 0,0,0 );
					float Out_Transmission4_g171040 = 0;
					float Out_Thickness4_g171040 = 0;
					float Out_Diffusion4_g171040 = 0;
					float Out_Depth4_g171040 = 0;
					{
					Out_Dummy4_g171040 = Data4_g171040.Dummy;
					Out_Albedo4_g171040 = Data4_g171040.Albedo;
					Out_AlbedoRaw4_g171040 = Data4_g171040.AlbedoRaw;
					Out_NormalTS4_g171040 = Data4_g171040.NormalTS;
					Out_NormalWS4_g171040 = Data4_g171040.NormalWS;
					Out_Shader4_g171040 = Data4_g171040.Shader;
					Out_Emissive4_g171040= Data4_g171040.Emissive;
					Out_MultiMask4_g171040 = Data4_g171040.MultiMask;
					Out_Grayscale4_g171040 = Data4_g171040.Grayscale;
					Out_Luminosity4_g171040= Data4_g171040.Luminosity;
					Out_AlphaClip4_g171040 = Data4_g171040.AlphaClip;
					Out_AlphaFade4_g171040 = Data4_g171040.AlphaFade;
					Out_Translucency4_g171040 = Data4_g171040.Translucency;
					Out_Transmission4_g171040 = Data4_g171040.Transmission;
					Out_Thickness4_g171040 = Data4_g171040.Thickness;
					Out_Diffusion4_g171040 = Data4_g171040.Diffusion;
					Out_Depth4_g171040= Data4_g171040.Depth;
					}
					half3 Input_Albedo24_g171039 = Out_Albedo4_g171040;
					#ifdef UNITY_COLORSPACE_GAMMA
					float4 staticSwitch22_g171039 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
					#else
					float4 staticSwitch22_g171039 = half4( 0.04, 0.04, 0.04, 0.96 );
					#endif
					half4 ColorSpaceDielectricSpec23_g171039 = staticSwitch22_g171039;
					float4 break24_g171035 = Out_Shader4_g171040;
					half Metallic95_g171035 = break24_g171035.x;
					half Input_Metallic25_g171039 = Metallic95_g171035;
					half OneMinusReflectivity31_g171039 = ( (ColorSpaceDielectricSpec23_g171039).w - ( (ColorSpaceDielectricSpec23_g171039).w * Input_Metallic25_g171039 ) );
					
					float3 appendResult23_g171035 = (float3(Out_NormalTS4_g171040 , 1.0));
					float3 temp_output_13_0_g171038 = appendResult23_g171035;
					float3 temp_output_33_0_g171038 = ( temp_output_13_0_g171038 * _render_normal );
					float3 switchResult12_g171038 = (((ase_vface>0)?(temp_output_13_0_g171038):(temp_output_33_0_g171038)));
					
					half Smoothness105_g171035 = break24_g171035.w;
					half Input_Smoothness43_g171046 = Smoothness105_g171035;
					half Input_True57_g171048 = Input_Smoothness43_g171046;
					half True33_g171048 = Input_True57_g171048;
					half RenderSpec102_g171035 = _RenderSpecular;
					half Input_RenderSpec58_g171046 = RenderSpec102_g171035;
					float temp_output_46_0_g171046 = max( ( Input_Smoothness43_g171046 * Input_RenderSpec58_g171046 ) , 0.001 );
					float temp_output_6_0_g171047 = temp_output_46_0_g171046;
					#ifdef TVE_DUMMY
					float staticSwitch14_g171047 = ( temp_output_6_0_g171047 + _SpecColor.r );
					#else
					float staticSwitch14_g171047 = temp_output_6_0_g171047;
					#endif
					float temp_output_61_0_g171046 = staticSwitch14_g171047;
					half Input_False58_g171048 = temp_output_61_0_g171046;
					half False33_g171048 = Input_False58_g171048;
					half localShadowPassCheck33_g171048 = ShadowPassCheck33_g171048( True33_g171048 , False33_g171048 );
					
					half Input_True57_g171049 = 0.04;
					half True33_g171049 = Input_True57_g171049;
					half Input_False58_g171049 = temp_output_46_0_g171046;
					half False33_g171049 = Input_False58_g171049;
					half localShadowPassCheck33_g171049 = ShadowPassCheck33_g171049( True33_g171049 , False33_g171049 );
					
					float localCustomAlphaClip20_g171045 = ( 0.0 );
					float temp_output_3_0_g171045 = Out_AlphaClip4_g171040;
					float Alpha20_g171045 = temp_output_3_0_g171045;
					float temp_output_15_0_g171045 = 0.0;
					float Treshold20_g171045 = temp_output_15_0_g171045;
					{
					#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
					clip(Alpha20_g171045 - Treshold20_g171045);
					#endif
					}
					

					o.Albedo = ( Input_Albedo24_g171039 * OneMinusReflectivity31_g171039 );
					o.Normal = switchResult12_g171038;
					#if defined(ASE_LIGHTING_SIMPLE)
						o.Specular = localShadowPassCheck33_g171048;
						o.Gloss = localShadowPassCheck33_g171049;
					#else
						#if defined(_SPECULAR_SETUP)
							o.Specular = fixed3( 0, 0, 0 );
						#else
							o.Metallic = 0;
						#endif
						o.Occlusion = 1;
						o.Smoothness = 0;
					#endif
					o.Emission = (Out_Emissive4_g171040).xyz;
					o.Alpha = saturate( ( Alpha20_g171045 * Out_AlphaFade4_g171040 ) );
					float3 Translucency = 1;

					#if defined( ASE_DEPTH_WRITE_ON )
						float DeviceDepth = IN.pos.z;
					#endif

					#ifdef _ALPHATEST_ON
						clip( o.Alpha - AlphaClipThreshold );
					#endif

					#if ( ASE_FRAGMENT_NORMAL == 0 )
						o.Normal = normalize(o.Normal.x * IN.worldTangent.xyz + o.Normal.y * IN.worldBitangent.xyz + o.Normal.z * IN.worldNormal.xyz);
					#elif ( ASE_FRAGMENT_NORMAL == 1 )
						o.Normal = UnityObjectToWorldNormal( o.Normal );
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						// @diogo: already in world-space; do nothing
					#endif

					#if defined( ASE_DEPTH_WRITE_ON )
						outputDepth = DeviceDepth;
					#endif

					#ifndef USING_DIRECTIONAL_LIGHT
						half3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
					#else
						half3 lightDir = _WorldSpaceLightPos0.xyz;
					#endif

					UnityGI gi;
					UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
					gi.indirect.diffuse = 0;
					gi.indirect.specular = 0;
					gi.light.color = _LightColor0.rgb;
					gi.light.dir = lightDir;
					gi.light.color *= atten;

					half4 c = 0;
					#if defined(ASE_LIGHTING_SIMPLE)
						#if defined(_SPECULAR_SETUP)
							c += LightingBlinnPhong (o, worldViewDir, gi);
						#else
							c += LightingLambert( o, gi );
						#endif
					#else
						#if defined(_SPECULAR_SETUP)
							c += LightingStandardSpecular (o, worldViewDir, gi);
						#else
							c += LightingStandard( o, worldViewDir, gi );
						#endif
					#endif

					#ifdef ASE_TRANSMISSION
					{
						float shadow = _TransmissionShadow;
						#ifdef DIRECTIONAL
							float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
						#else
							float3 lightAtten = gi.light.color;
						#endif
						half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
						c.rgb += o.Albedo * transmission;
					}
					#endif

					#ifdef ASE_TRANSLUCENCY
					{
						float shadow = _TransShadow;
						float normal = _TransNormal;
						float scattering = _TransScattering;
						float direct = _TransDirect;
						float ambient = _TransAmbient;
						float strength = _TransStrength;

						#ifdef DIRECTIONAL
							float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
						#else
							float3 lightAtten = gi.light.color;
						#endif
						half3 lightDir = gi.light.dir + o.Normal * normal;
						half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
						half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
						c.rgb += o.Albedo * translucency * strength;
					}
					#endif

					#ifdef ASE_FOG
						UNITY_APPLY_FOG(IN.fogCoord, c);
					#endif
					return c;
				}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
				#define ASE_GEOMETRY 1
				#define ASE_FRAGMENT_NORMAL 0
				#define ASE_NEEDS_FRAG_SHADOWCOORDS
				#pragma multi_compile_instancing
				#pragma multi_compile __ LOD_FADE_CROSSFADE
				#pragma multi_compile_fog
				#define _SPECULAR_SETUP 1
				#define ASE_LIGHTING_SIMPLE 1
				#define _ENVIRONMENTREFLECTIONS_OFF 1
				#define ASE_ABSOLUTE_VERTEX_POS 1
				#define ASE_VERSION 19802
				#define ASE_USING_SAMPLING_MACROS 1

				#pragma vertex vert
				#pragma fragment frag
				#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
				#pragma shader_feature EDITOR_VISUALIZATION
				#ifndef UNITY_PASS_META
					#define UNITY_PASS_META
				#endif
				#include "HLSLSupport.cginc"
				#ifdef ASE_GEOMETRY
					#ifndef UNITY_INSTANCED_LOD_FADE
						#define UNITY_INSTANCED_LOD_FADE
					#endif
					#ifndef UNITY_INSTANCED_SH
						#define UNITY_INSTANCED_SH
					#endif
					#ifndef UNITY_INSTANCED_LIGHTMAPSTS
						#define UNITY_INSTANCED_LIGHTMAPSTS
					#endif
				#endif
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				#include "UnityPBSLighting.cginc"
				#include "UnityMetaPass.cginc"

				#include "UnityStandardBRDF.cginc"
				#define ASE_NEEDS_VERT_POSITION
				#define ASE_NEEDS_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_NORMAL
				#define ASE_NEEDS_VERT_TANGENT
				#define ASE_NEEDS_TEXTURE_COORDINATES0
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
				#define ASE_NEEDS_TEXTURE_COORDINATES2
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
				#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
				#pragma shader_feature_local_vertex TVE_SIZEFADE
				#pragma shader_feature_local_vertex TVE_PERSPECTIVE
				#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
				#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
				#pragma shader_feature_local_vertex TVE_MOTION
				#pragma shader_feature_local TVE_LEGACY
				#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
				#pragma shader_feature_local_vertex TVE_NORMAL
				#pragma shader_feature_local_fragment TVE_SUBSURFACE
				#pragma shader_feature_local_fragment TVE_WETNESS
				#pragma shader_feature_local_fragment TVE_OVERLAY
				#pragma shader_feature_local_fragment TVE_MOTION
				#pragma shader_feature_local_fragment TVE_DRYNESS
				#pragma shader_feature_local_fragment TVE_TINTING
				#pragma shader_feature_local_fragment TVE_VARIATION
				#pragma shader_feature_local_fragment TVE_GRADIENT
				#pragma shader_feature_local_fragment TVE_OCCLUSION
				#pragma shader_feature_local_fragment TVE_THIRD
				#pragma shader_feature_local_fragment TVE_SECOND
				#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
				#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
				#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
				#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
				#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
				#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
				#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_WATER
				#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
				#pragma shader_feature_local_fragment TVE_CUTOUT
				#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
				#pragma shader_feature_local_fragment TVE_DITHER
				#pragma shader_feature_local_fragment TVE_EMISSIVE
				#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
				#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
				#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
				//SHADER INJECTION POINT BEGIN
				//SHADER INJECTION POINT END
				  
				struct TVEVisualData
				{  
					half Dummy;  
					half3 Albedo;
					half3 AlbedoRaw;
					half2 NormalTS;
					half3 NormalWS; 
					half4 Shader;
					half4 Emissive;
					half AlphaClip;
					half AlphaFade;
					half MultiMask;
					half Grayscale;
					half Luminosity;
					half3 Translucency;
					half Transmission;
					half Thickness;
					float Diffusion;
					float Depth;
				};  
				    
				struct TVEModelData
				{    
					half Dummy;    
					half3 PositionOS;
					half3 PositionWS;
					half3 PositionWO;
					half3 PositionRawOS;
					half3 PositionAddOS;
					half3 PivotOS;
					half3 PivotWS;
					half3 PivotWO;
					half3 NormalOS;
					half3 NormalWS;
					half3 NormalRawOS;
					half3 NormalRawWS;
					half4 TangentOS;
					half3 ViewDirWS;
					half4 VertexData;
					half4 PhaseData;
					half4 BoundsData;
					half4 RotationData;
				};    
				      
				struct TVEGlobalData
				{      
					half Dummy;      
					half4 CoatDataRT;
					half4 PaintDataRT;
					half4 GlowDataRT;
					half4 AtmoDataRT;
					half4 FadeDataRT;
					half4 FormDataRT;
					half4 FlowDataRT;
				};      
				        
				struct TVEMasksData
				{        
					half4 Mask0;
					half4 Mask1;
					half4 Mask2;
					half4 Mask3;
				};        
				#define TVE_GEOMETRY_SHADER
				//#pragma editor_sync_compilation
				#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
					#define ASE_NEEDS_TEXTURE_COORDINATES2
				#endif
				#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#else//ASE Sampling Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
				#endif//ASE Sampling Macros
				


				struct appdata
				{
					float4 vertex : POSITION;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord : TEXCOORD0;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct v2f
				{
					UNITY_POSITION( pos );
					#ifdef EDITOR_VISUALIZATION
						float2 vizUV : TEXCOORD1;
						float4 lightCoord : TEXCOORD2;
					#endif
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_texcoord4 : TEXCOORD4;
					float4 ase_texcoord5 : TEXCOORD5;
					float4 ase_texcoord6 : TEXCOORD6;
					float4 ase_texcoord7 : TEXCOORD7;
					float4 ase_color : COLOR;
					float4 ase_texcoord8 : TEXCOORD8;
					float4 ase_texcoord9 : TEXCOORD9;
					float4 ase_texcoord10 : TEXCOORD10;
					float4 ase_texcoord11 : TEXCOORD11;
					UNITY_VERTEX_INPUT_INSTANCE_ID
					UNITY_VERTEX_OUTPUT_STEREO
				};

				#ifdef ASE_TESSELLATION
					float _TessPhongStrength;
					float _TessValue;
					float _TessMin;
					float _TessMax;
					float _TessEdgeLength;
					float _TessMaxDisp;
				#endif

				uniform half _SubsurfaceAngleValue;
				uniform float _SubsurfaceDiffusion;
				uniform float4 _SubsurfaceDiffusion_Asset;
				uniform half _SubsurfaceSpace;
				uniform half _SubsurfaceScatteringValue;
				uniform half _render_cull;
				uniform half _render_src;
				uniform half _render_dst;
				uniform half _render_zw;
				uniform half _render_coverage;
				uniform half _IsGeneralShader;
				uniform half _IsSimpleShader;
				uniform half _RenderZWrite;
				uniform half _IsVersion;
				uniform half _RenderCategory;
				uniform half _RenderEnd;
				uniform half _RenderMode;
				uniform half _RenderCull;
				uniform half _RenderNormal;
				uniform half _RenderBakeGI;
				uniform half _RenderDecals;
				uniform half _RenderSSR;
				uniform half _RenderPriority;
				uniform half _RenderQueue;
				uniform half _RenderMotion;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
				SamplerState sampler_BumpMap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
				SamplerState sampler_MainTex;
				uniform half _Cutoff;
				uniform half4 _Color;
				uniform half _IsTVEShader;
				uniform half _IsCustomShader;
				uniform half _IsShared;
				uniform half _IsCollected;
				uniform half _IsConverted;
				uniform half _IsIdentifier;
				uniform half _RenderFilter;
				uniform half _RenderShadow;
				uniform half _RenderClip;
				UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
				SamplerState sampler_NoiseTex3D;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
				SamplerState sampler_NoiseTexSS;
				uniform half _NormalCategory;
				uniform half _NormalEnd;
				uniform half _NormalSpace;
				uniform half _NormalBakeMode;
				uniform half _MotionCategory;
				uniform half _MotionWindEnd;
				uniform half _MotionElementMode;
				uniform half _MotionPushInfo;
				uniform half _SizeFadeCategory;
				uniform half _SizeFadeEnd;
				uniform half _PerspectiveCategory;
				uniform half _PerspectiveEnd;
				uniform half _ObjectCategory;
				uniform half _ObjectEnd;
				uniform half _ObjectModelMode;
				uniform half _ObjectPivotMode;
				uniform half _ObjectPhaseMode;
				uniform half _ObjectBoundsInfo;
				uniform float3 TVE_WorldOrigin;
				uniform half4 TVE_TimeParams;
				uniform half4 _object_phase_mode;
				uniform half _ObjectHeightValue;
				uniform half _ObjectRadiusValue;
				uniform half _PerspectivePhaseValue;
				uniform half _PerspectiveIntensityValue;
				uniform half _PerspectiveAngleValue;
				uniform half4 TVE_SizeFadeParams;
				uniform half _SizeFadeDistMaxValue;
				uniform half _SizeFadeDistMinValue;
				uniform half _SizeFadeScaleValue;
				uniform half4 TVE_FormParams;
				uniform half _GlobalCategory;
				uniform half _GlobalEnd;
				uniform half _GlobalPivotInfo;
				uniform half _GlobalCoatLayerValue;
				uniform float TVE_CoatLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
				uniform half4 TVE_RenderBaseCoords;
				uniform half _GlobalCoatPivotValue;
				SamplerState sampler_Linear_Clamp;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
				uniform half4 TVE_RenderNearCoords;
				SamplerState sampler_Linear_Repeat;
				uniform float4 TVE_RenderNearPositionR;
				uniform half TVE_RenderNearFadeValue;
				uniform half4 TVE_CoatParams;
				uniform half _GlobalPaintLayerValue;
				uniform float TVE_PaintLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
				uniform half _GlobalPaintPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
				uniform half4 TVE_PaintParams;
				uniform half _GlobalGlowLayerValue;
				uniform float TVE_GlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
				uniform half _GlobalGlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
				uniform half4 TVE_GlowParams;
				uniform half _GlobalAtmoLayerValue;
				uniform float TVE_AtmoLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
				uniform half _GlobalAtmoPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
				uniform half4 TVE_AtmoParams;
				uniform half _GlobalFadeLayerValue;
				uniform float TVE_FadeLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
				uniform half _GlobalFadePivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
				uniform half4 TVE_FadeParams;
				uniform half _GlobalFormLayerValue;
				uniform float TVE_FormLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
				uniform half _GlobalFormPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
				uniform half _GlobalFlowLayerValue;
				uniform float TVE_FlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
				uniform half _GlobalFlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
				uniform half4 TVE_FlowParams;
				uniform half _SizeFadeElementMode;
				uniform half _SizeFadeGlobalValue;
				uniform half TVE_IsEnabled;
				uniform half _SizeFadeScaleMode;
				uniform half _SizeFadeIntensityValue;
				uniform half _MotionSmallIntensityValue;
				uniform half4 _motion_small_vert_mode;
				uniform half4 _motion_small_proc_mode;
				uniform half _motion_small_mask_mode;
				uniform half4 _MotionSmallMaskRemap;
				uniform half _MotionSmallMaskMode;
				uniform half4 TVE_MotionParams;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
				uniform half _MotionSmallPivotValue;
				uniform half _MotionSmallPhaseValue;
				uniform half _MotionSmallTillingValue;
				uniform half _MotionSmallSpeedValue;
				uniform half _MotionSmallNoiseValue;
				uniform half4 TVE_MotionParamsEditor;
				uniform half _MotionIntensityValue;
				uniform half _MotionSmallDelayValue;
				uniform half _MotionSmallPushValue;
				uniform half _MotionTinyIntensityValue;
				uniform half _MotionDistValue;
				uniform half4 _motion_tiny_vert_mode;
				uniform half4 _motion_tiny_proc_mode;
				uniform half _motion_tiny_mask_mode;
				uniform half4 _MotionTinyMaskRemap;
				uniform half _MotionTinyMaskMode;
				uniform half _MotionTinyTillingValue;
				uniform half _MotionTinySpeedValue;
				uniform half _MotionTinyNoiseValue;
				uniform half _MotionBasePivotValue;
				uniform half _MotionBasePhaseValue;
				uniform half _MotionBaseTillingValue;
				uniform half _MotionBaseSpeedValue;
				uniform half _MotionBaseNoiseValue;
				uniform half _MotionBaseDelayValue;
				uniform half _MotionBasePushValue;
				uniform half _motion_small_mode;
				uniform half _MotionBaseIntensityValue;
				uniform half4 _motion_base_vert_mode;
				uniform half4 _motion_base_proc_mode;
				uniform half _motion_base_mask_mode;
				uniform half4 _MotionBaseMaskRemap;
				uniform half _MotionBaseMaskMode;
				uniform half _NormalFlattenValue;
				uniform half3 _NormalSphereOffsetValue;
				uniform half _NormalSphereValue;
				uniform half _NormalComputeValue;
				uniform half4 _normal_vert_mode;
				uniform half4 _NormalMeshRemap;
				uniform half _NormalMeshValue;
				uniform half _NormalMeshMode;
				uniform half _DisableSRPBatcher;
				uniform half _SubsurfaceCategory;
				uniform half _SubsurfaceEnd;
				uniform half _SubsurfaceDirectValue;
				uniform half _SubsurfaceNormalValue;
				uniform half _SubsurfaceAmbientValue;
				uniform half _SubsurfaceShadowValue;
				uniform half _EmissiveCategory;
				uniform half _EmissiveEnd;
				uniform half _EmissivePowerMode;
				uniform half _EmissivePowerValue;
				uniform half _EmissiveFlagMode;
				uniform half _DitherCategory;
				uniform half _DitherEnd;
				uniform half _CutoutCategory;
				uniform half _CutoutEnd;
				uniform half _CutoutSpace;
				uniform half _CutoutBakeMode;
				uniform half _WetnessCategory;
				uniform half _WetnessEnd;
				uniform half _WetnessBakeMode;
				uniform half _OverlayCategory;
				uniform half _OverlayEnd;
				uniform half _OverlaySpace;
				uniform half _OverlayBakeMode;
				uniform half _DrynessCategory;
				uniform half _DrynessEnd;
				uniform half _DrynessSpace;
				uniform half _DrynessBakeMode;
				uniform half _TintingCategory;
				uniform half _TintingEnd;
				uniform half _TintingSpace;
				uniform half _TintingBakeMode;
				uniform half _VariationCategory;
				uniform half _VariationEnd;
				uniform half _GradientCategory;
				uniform half _GradientEnd;
				uniform half _GradientBakeMode;
				uniform half _OcclusionCategory;
				uniform half _OcclusionEnd;
				uniform half _OcclusionBakeMode;
				uniform half _DetailCategory;
				uniform half _DetailEnd;
				uniform half _ThirdSampleMode;
				uniform half _ThirdCoordMode;
				uniform half4 _ThirdCoordValue;
				uniform half _ThirdMaskSampleMode;
				uniform half _ThirdMaskCoordMode;
				uniform half4 _ThirdMaskCoordValue;
				uniform half _ThirdBakeMode;
				uniform half _LayerCategory;
				uniform half _LayerEnd;
				uniform half _SecondSampleMode;
				uniform half _SecondCoordMode;
				uniform half4 _SecondCoordValue;
				uniform half _SecondMaskSampleMode;
				uniform half _SecondMaskCoordMode;
				uniform half4 _SecondMaskCoordValue;
				uniform half _SecondBakeMode;
				uniform half _MainCategory;
				uniform half _MainEnd;
				uniform half _MainSampleMode;
				uniform half _MainCoordMode;
				uniform half4 _MainCoordValue;
				uniform half _MainMultiMaskInfo;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
				SamplerState sampler_Linear_Repeat_Aniso8;
				SamplerState sampler_Point_Repeat;
				uniform half4 _main_coord_value;
				uniform half _MainAlbedoValue;
				uniform half4 _MainColorTwo;
				uniform half4 _MainColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
				uniform half _MainMetallicValue;
				uniform half4 _MainOcclusionRemap;
				uniform half _MainOcclusionValue;
				uniform half4 _MainSmoothnessRemap;
				uniform half _MainSmoothnessValue;
				uniform half4 _MainMultiRemap;
				uniform half _MainColorMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
				uniform half _MainNormalValue;
				uniform half _MainAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
				uniform half4 _second_coord_value;
				uniform half _SecondAlbedoValue;
				uniform half4 _SecondColorTwo;
				uniform half4 _SecondColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
				uniform half _SecondMetallicValue;
				uniform half4 _SecondOcclusionRemap;
				uniform half _SecondOcclusionValue;
				uniform half4 _SecondSmoothnessRemap;
				uniform half _SecondSmoothnessValue;
				uniform half4 _SecondMultiRemap;
				uniform half _SecondColorMode;
				uniform half _SecondBlendAlbedoValue;
				uniform half _SecondIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
				uniform half4 _second_mask_coord_value;
				uniform half4 _SecondMaskRemap;
				uniform half _SecondMaskValue;
				uniform half4 _SecondLumaRemap;
				uniform half _SecondLumaValue;
				uniform half4 _SecondProjRemap;
				uniform half _SecondProjValue;
				uniform half4 _second_vert_mode;
				uniform half4 _SecondMeshRemap;
				uniform half _SecondMeshValue;
				uniform half _SecondMeshMode;
				uniform half _SecondElementMode;
				uniform half _SecondGlobalValue;
				uniform half4 _SecondBlendRemap;
				uniform half _SecondBlendIntensityValue;
				uniform half _SecondBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
				uniform half _SecondNormalValue;
				uniform half _SecondBlendShaderValue;
				uniform half _SecondAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
				uniform half4 _third_coord_value;
				uniform half _ThirdAlbedoValue;
				uniform half4 _ThirdColorTwo;
				uniform half4 _ThirdColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
				uniform half _ThirdMetallicValue;
				uniform half4 _ThirdOcclusionRemap;
				uniform half _ThirdOcclusionValue;
				uniform half4 _ThirdSmoothnessRemap;
				uniform half _ThirdSmoothnessValue;
				uniform half4 _ThirdMultiRemap;
				uniform half _ThirdColorMode;
				uniform half _ThirdBlendAlbedoValue;
				uniform half _ThirdIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
				uniform half4 _third_mask_coord_value;
				uniform half4 _ThirdMaskRemap;
				uniform half _ThirdMaskValue;
				uniform half4 _ThirdLumaRemap;
				uniform half _ThirdLumaValue;
				uniform half4 _third_vert_mode;
				uniform half4 _ThirdMeshRemap;
				uniform half _ThirdMeshValue;
				uniform half _ThirdMeshMode;
				uniform half4 _ThirdProjRemap;
				uniform half _ThirdProjValue;
				uniform half _ThirdElementMode;
				uniform half _ThirdGlobalValue;
				uniform half4 _ThirdBlendRemap;
				uniform half _ThirdBlendIntensityValue;
				uniform half _ThirdBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
				uniform half _ThirdNormalValue;
				uniform half _ThirdBlendShaderValue;
				uniform half _ThirdAlphaClipValue;
				uniform half4 _OcclusionColorTwo;
				uniform half4 _OcclusionColorOne;
				uniform half4 _occlusion_vert_mode;
				uniform half4 _OcclusionMeshRemap;
				uniform half _OcclusionMeshMode;
				uniform half _OcclusionIntensityValue;
				uniform half4 _GradientColorTwo;
				uniform half4 _GradientColorOne;
				uniform half4 _gradient_vert_mode;
				uniform half4 _GradientMeshRemap;
				uniform half _GradientMeshMode;
				uniform half _GradientIntensityValue;
				uniform half _GradientMultiValue;
				uniform half4 _VariationColorTwo;
				uniform half4 _VariationColorOne;
				uniform half _VariationNoisePivotValue;
				uniform half _VariationNoiseTillingValue;
				uniform half4 _VariationNoiseRemap;
				uniform half _VariationIntensityValue;
				uniform half _VariationMultiValue;
				uniform half _TintingElementMode;
				uniform half _TintingGlobalValue;
				uniform half _TintingGrayValue;
				uniform float4 _TintingColor;
				uniform half _TintingIntensityValue;
				uniform half _TintingMultiValue;
				uniform half4 _TintingLumaRemap;
				uniform half _TintingLumaValue;
				uniform half4 _tinting_vert_mode;
				uniform half4 _TintingMeshRemap;
				uniform half _TintingMeshValue;
				uniform half _TintingMeshMode;
				uniform half4 _TintingBlendRemap;
				uniform half _DrynessElementMode;
				uniform half _DrynessGlobalValue;
				uniform half _DrynessGrayValue;
				uniform float4 _DrynessColor;
				uniform half _DrynessIntensityValue;
				uniform half _DrynessMultiValue;
				uniform half4 _DrynessLumaRemap;
				uniform half _DrynessLumaValue;
				uniform half4 _dryness_vert_mode;
				uniform half4 _DrynessMeshRemap;
				uniform half _DrynessMeshValue;
				uniform half _DrynessMeshMode;
				uniform half4 _DrynessBlendRemap;
				uniform half _DrynessSmoothnessValue;
				uniform half _DrynessSubsurfaceValue;
				uniform half3 _motion_highlight_color;
				uniform half _MotionHighlightValue;
				uniform half4 _MotionHighlightColor;
				uniform half4 _OverlayColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
				uniform half4 _overlay_coord_value;
				uniform half _OverlaySampleMode;
				uniform half _OverlayCoordMode;
				uniform half4 _OverlayCoordValue;
				uniform half _OverlayTextureMode;
				uniform half _OverlayGlitterIntensityValue;
				uniform half4 _OverlayGlitterColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
				uniform half _OverlayGlitterTillingValue;
				uniform half _OverlayGlitterDistValue;
				uniform half _OverlayIntensityValue;
				uniform half4 _OverlayProjRemap;
				uniform half _OverlayProjValue;
				uniform half4 _OverlayLumaRemap;
				uniform half _OverlayLumaValue;
				uniform half4 _overlay_vert_mode;
				uniform half4 _OverlayMeshRemap;
				uniform half _OverlayMeshValue;
				uniform half _OverlayMeshMode;
				uniform half _OverlayElementMode;
				uniform half _OverlayGlobalValue;
				uniform half4 _OverlayBlendRemap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
				uniform half _OverlayNormalValue;
				uniform half _OverlaySmoothnessValue;
				uniform half _OverlaySubsurfaceValue;
				uniform half4 _WetnessWaterColor;
				uniform half _WetnessWaterIntensityValue;
				uniform half _WetnessIntensityValue;
				uniform half _WetnessElementMode;
				uniform half _WetnessGlobalValue;
				uniform half4 _wetness_vert_mode;
				uniform half4 _WetnessMeshRemap;
				uniform half _WetnessMeshValue;
				uniform half _WetnessMeshMode;
				uniform half4 _wetness_water_vert_mode;
				uniform half4 _WetnessWaterMeshRemap;
				uniform half _WetnessWaterMeshValue;
				uniform half _WetnessWaterMeshMode;
				uniform half _WetnessWaterBaseValue;
				uniform half4 _WetnessWaterBlendRemap;
				uniform half _WetnessContrastValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
				uniform half _WetnessDropsTillingValue;
				uniform half _WetnessDropsIntensityValue;
				uniform half _WetnessDropsNormalValue;
				uniform half _WetnessDropsDistValue;
				uniform half4 _wetness_drops_vert_mode;
				uniform half4 _WetnessDropsMeshRemap;
				uniform half _WetnessDropsMeshValue;
				uniform half _WetnessDropsMeshMode;
				uniform half _WetnessSmoothnessValue;
				uniform half _CutoutIntensityValue;
				uniform half _CutoutElementMode;
				uniform half _CutoutGlobalValue;
				uniform half _CutoutAlphaValue;
				uniform half _CutoutNoiseTillingValue;
				uniform half _CutoutNoiseValue;
				uniform half4 _cutout_vert_mode;
				uniform half4 _CutoutMeshRemap;
				uniform half _CutoutMeshValue;
				uniform half _CutoutMeshMode;
				uniform half _CutoutMultiValue;
				uniform half _DitherConstantValue;
				uniform half4 TVE_DitherParams;
				uniform half _DitherProximityMaxValue;
				uniform half _DitherProximityMinValue;
				uniform half _DitherProximityValue;
				uniform half _DitherDistanceMinValue;
				uniform half _DitherDistanceMaxValue;
				uniform half _DitherDistanceValue;
				uniform half _DitherGlancingAngleValue;
				uniform half _DitherGlancingValue;
				uniform half _DitherNoiseTillingValue;
				uniform half _DitherMultiValue;
				uniform half4 _emissive_vert_mode;
				uniform half4 _EmissiveMeshRemap;
				uniform half _EmissiveMeshValue;
				uniform half _EmissiveMeshMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
				uniform half4 _emissive_coord_value;
				uniform half _EmissiveSampleMode;
				uniform half _EmissiveCoordMode;
				uniform half4 _EmissiveCoordValue;
				uniform half4 _EmissiveMaskRemap;
				uniform half _EmissiveMaskValue;
				uniform half _EmissiveIntensityValue;
				uniform half4 _EmissiveColor;
				uniform half _EmissiveElementMode;
				uniform half _EmissiveGlobalValue;
				uniform half _EmissiveColorMode;
				uniform float _emissive_power_value;
				uniform half4 _SubsurfaceColor;
				uniform half _SubsurfaceIntensityValue;
				uniform half _SubsurfaceElementMode;
				uniform half _SubsurfaceGlobalValue;
				uniform half _SubsurfaceMultiValue;
				uniform half3 TVE_MainLightDirection;
				uniform half _SubsurfaceAproxInfo;


				float4 mod289( float4 x )
				{
					return x - floor(x * 0.00346020761) * 289.0;
				}
				
				float4 perm( float4 x )
				{
					    return mod289((x * 34.0 + 1.0) * x);
				}
				
				float SimpleNoise3D( float3 p )
				{
					    // Compute integer and fractional parts.
					    float3 i = floor(p);
					    float3 f = p - i;
					    // Cubic interpolation (smoothstep)
					    f = f * f * (3.0 - 2.0 * f);
					    // Build 4-component vectors using swizzling.
					    // a = (i.x, i.x+1, i.y, i.y+1)
					    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
					    // Permutations along the x and y axes.
					    float4 k1 = perm(a.xyxy);
					    float4 k2 = perm(k1.xyxy + a.zzww);
					    // Incorporate the z component.
					    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
					    float4 k3 = perm(c);
					    float4 k4 = perm(c + 1.0);
					    // Map results to the [0,1] range.
					    float4 o1 = frac(k3 * 0.0243902439);
					    float4 o2 = frac(k4 * 0.0243902439);
					    // Interpolate along z, then x, then y.
					    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
					    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
					    return lerp(o4.x, o4.y, f.y); 
				}
				
				float2 DecodeFloatToVector2( float enc )
				{
					float2 result ;
					result.y = enc % 2048;
					result.x = floor(enc / 2048);
					return result / (2048 - 1);
				}
				
				float3 ASESafeNormalize(float3 inVec)
				{
					float dp3 = max(1.175494351e-38, dot(inVec, inVec));
					return inVec* rsqrt(dp3);
				}
				
				void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
				{
					ZX = WorldPosition.xz * Coords.xx - Coords.zz;
					ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
					XY = WorldPosition.xy * Coords.xy - Coords.zw;
				}
				
				half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
				{
					half3 powNormal = abs( WorldNormal.xyz );
					half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
					weights /= ( weights.x + weights.y + weights.z ).xxx;
					T1 = weights.y;
					T2 = weights.x;
					T3 = weights.z;
				}
				
				half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
					half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
					half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
					return tex1 * T1 + tex2 * T2 + tex3 * T3;
				}
				
				void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
				{
					half2 vertex1, vertex2, vertex3;
					// Scaling of the input
					half2 uv = UV * 3.464; // 2 * sqrt (3)
					// Skew input space into simplex triangle grid
					const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
					half2 skewedCoord = mul( gridToSkewedGrid, uv );
					// Compute local triangle vertex IDs and local barycentric coordinates
					int2 baseId = int2( floor( skewedCoord ) );
					half3 temp = half3( frac( skewedCoord ), 0 );
					temp.z = 1.0 - temp.x - temp.y;
					if ( temp.z > 0.0 )
					{
						W1 = temp.z;
						W2 = temp.y;
						W3 = temp.x;
						vertex1 = baseId;
						vertex2 = baseId + int2( 0, 1 );
						vertex3 = baseId + int2( 1, 0 );
					}
					else
					{
						W1 = -temp.z;
						W2 = 1.0 - temp.y;
						W3 = 1.0 - temp.x;
						vertex1 = baseId + int2( 1, 1 );
						vertex2 = baseId + int2( 1, 0 );
						vertex3 = baseId + int2( 0, 1 );
					}
					UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
					UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
					UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
					return;
				}
				
				float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
					half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
					half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
					half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
					return tex1 * W1 + tex2 * W2 + tex3 * W3;
				}
				
				half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					half4 tex1, tex2, tex3;
					ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
					half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
					half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
					half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					return texZX * T1 + texZY * T2 + texXY * T3;
				}
				

				v2f VertexFunction( appdata v  )
				{
					UNITY_SETUP_INSTANCE_ID(v);
					v2f o;
					UNITY_INITIALIZE_OUTPUT(v2f,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

					TVEModelData Data16_g171023 = (TVEModelData)0;
					float In_Dummy16_g171023 = 0.0;
					TVEModelData Data16_g171012 = (TVEModelData)0;
					half Dummy1575_g170996 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
					float In_Dummy16_g171012 = Dummy1575_g170996;
					TVEModelData Data16_g170972 = (TVEModelData)0;
					float In_Dummy16_g170972 = 0.0;
					TVEModelData Data16_g170744 = (TVEModelData)0;
					half Dummy181_g170727 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
					float In_Dummy16_g170744 = Dummy181_g170727;
					TVEModelData Data16_g170681 = (TVEModelData)0;
					half Dummy181_g170679 = ( _SizeFadeCategory + _SizeFadeEnd );
					float In_Dummy16_g170681 = Dummy181_g170679;
					TVEModelData Data16_g170585 = (TVEModelData)0;
					half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
					float In_Dummy16_g170585 = Dummy181_g170582;
					TVEModelData Data16_g170580 = (TVEModelData)0;
					float In_Dummy16_g170580 = 0.0;
					TVEModelData Data16_g170482 = (TVEModelData)0;
					half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
					float In_Dummy16_g170482 = Dummy207_g170478;
					half3 PositionOS131_g170478 = v.vertex.xyz;
					float3 In_PositionOS16_g170482 = PositionOS131_g170478;
					float3 ase_positionWS = mul( unity_ObjectToWorld, float4( ( v.vertex ).xyz, 1 ) ).xyz;
					float3 vertexToFrag73_g170478 = ase_positionWS;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170482 = PositionWS122_g170478;
					float4x4 break19_g170488 = unity_ObjectToWorld;
					float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
					float3 temp_output_340_7_g170478 = appendResult20_g170488;
					float4x4 break19_g170490 = unity_ObjectToWorld;
					float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
					float3 _Vector0 = float3(0,0,0);
					float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
					float3 break233_g170478 = PositionOS131_g170478;
					float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch229_g170478 = _Vector0;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch229_g170478 = appendResult60_g170486;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch229_g170478 = appendResult234_g170478;
					#else
					float3 staticSwitch229_g170478 = _Vector0;
					#endif
					half3 PivotOS149_g170478 = staticSwitch229_g170478;
					float3 temp_output_122_0_g170490 = PivotOS149_g170478;
					float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
					float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#else
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#endif
					float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170482 = PositionWO132_g170478;
					float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
					float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
					float3 In_PivotOS16_g170482 = PivotOS149_g170478;
					float3 In_PivotWS16_g170482 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170482 = PivotWO133_g170478;
					half3 NormalOS134_g170478 = v.normal;
					float3 In_NormalOS16_g170482 = NormalOS134_g170478;
					float3 ase_normalWS = UnityObjectToWorldNormal( v.normal );
					float3 normalizedWorldNormal = normalize( ase_normalWS );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
					float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
					float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0.0 ) ).xyz );
					half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
					float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
					half4 TangentlOS153_g170478 = v.tangent;
					float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = v.ase_color;
					float4 In_VertexData16_g170482 = VertexMasks171_g170478;
					float mulTime113_g170485 = _Time.y * 0.52;
					float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float3 break319_g170478 = PivotWO133_g170478;
					half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
					float mulTime113_g170484 = _Time.y * 0.27;
					float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float4 break33_g170487 = _object_phase_mode;
					float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
					float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
					float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
					float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
					float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
					float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
					half4 MotionMasks176_g170478 = appendResult177_g170478;
					float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
					half Object_HeightValue267_g170478 = _ObjectHeightValue;
					half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
					float temp_output_270_0_g170478 = (PositionOS131_g170478).y;
					half Bounds_HeightMask274_g170478 = saturate( ( temp_output_270_0_g170478 / Object_HeightValue267_g170478 ) );
					half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
					float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
					half4 BoundsData254_g170478 = appendResult253_g170478;
					float4 In_BoundsData16_g170482 = BoundsData254_g170478;
					float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
					{
					Data16_g170482.Dummy = In_Dummy16_g170482;
					Data16_g170482.PositionOS = In_PositionOS16_g170482;
					Data16_g170482.PositionWS = In_PositionWS16_g170482;
					Data16_g170482.PositionWO = In_PositionWO16_g170482;
					Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
					Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
					Data16_g170482.PivotOS = In_PivotOS16_g170482;
					Data16_g170482.PivotWS = In_PivotWS16_g170482;
					Data16_g170482.PivotWO = In_PivotWO16_g170482;
					Data16_g170482.NormalOS = In_NormalOS16_g170482;
					Data16_g170482.NormalWS = In_NormalWS16_g170482;
					Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
					Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
					Data16_g170482.TangentOS = In_TangentOS16_g170482;
					Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
					Data16_g170482.VertexData = In_VertexData16_g170482;
					Data16_g170482.PhaseData = In_PhaseData16_g170482;
					Data16_g170482.BoundsData = In_BoundsData16_g170482;
					Data16_g170482.RotationData = In_RotationData16_g170482;
					}
					TVEModelData Data15_g170581 = Data16_g170482;
					float Out_Dummy15_g170581 = 0;
					float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
					float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170581 = Data15_g170581.Dummy;
					Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
					Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
					Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
					Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
					Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
					Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
					Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
					Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
					Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
					Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
					Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
					Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
					Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
					Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
					Out_VertexData15_g170581 = Data15_g170581.VertexData;
					Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
					Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
					Out_RotationData15_g170581 = Data15_g170581.RotationData;
					}
					float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
					float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
					float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
					float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
					float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
					float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
					float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
					float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
					float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
					float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
					float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
					float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
					float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
					float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
					float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
					float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
					float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
					float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
					float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
					{
					Data16_g170580.Dummy = In_Dummy16_g170580;
					Data16_g170580.PositionOS = In_PositionOS16_g170580;
					Data16_g170580.PositionWS = In_PositionWS16_g170580;
					Data16_g170580.PositionWO = In_PositionWO16_g170580;
					Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
					Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
					Data16_g170580.PivotOS = In_PivotOS16_g170580;
					Data16_g170580.PivotWS = In_PivotWS16_g170580;
					Data16_g170580.PivotWO = In_PivotWO16_g170580;
					Data16_g170580.NormalOS = In_NormalOS16_g170580;
					Data16_g170580.NormalWS = In_NormalWS16_g170580;
					Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
					Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
					Data16_g170580.TangentOS = In_TangentOS16_g170580;
					Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
					Data16_g170580.VertexData = In_VertexData16_g170580;
					Data16_g170580.PhaseData = In_PhaseData16_g170580;
					Data16_g170580.BoundsData = In_BoundsData16_g170580;
					Data16_g170580.RotationData = In_RotationData16_g170580;
					}
					TVEModelData Data15_g170583 = Data16_g170580;
					float Out_Dummy15_g170583 = 0;
					float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
					float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170583 = Data15_g170583.Dummy;
					Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
					Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
					Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
					Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
					Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
					Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
					Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
					Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
					Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
					Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
					Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
					Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
					Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
					Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
					Out_VertexData15_g170583 = Data15_g170583.VertexData;
					Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
					Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
					Out_RotationData15_g170583 = Data15_g170583.RotationData;
					}
					half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
					float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
					float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
					float4x4 break117_g170584 = unity_CameraToWorld;
					float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
					float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
					float3 break201_g170582 = cross( lerpResult209_g170582 , half3( 0, 1, 0 ) );
					float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
					float4 temp_output_149_27_g170582 = Out_PhaseData15_g170583;
					half4 Model_PhaseData218_g170582 = temp_output_149_27_g170582;
					float temp_output_222_0_g170582 = ( ((Model_PhaseData218_g170582).z*2.0 + -1.0) * _PerspectivePhaseValue );
					float3 appendResult224_g170582 = (float3(temp_output_222_0_g170582 , 0.0 , temp_output_222_0_g170582));
					float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
					float saferPower192_g170582 = abs( dotResult189_g170582 );
					#ifdef TVE_PERSPECTIVE
					float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz + appendResult224_g170582 ) * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
					#else
					float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
					#endif
					half3 Final_Position178_g170582 = staticSwitch211_g170582;
					float3 In_PositionOS16_g170585 = Final_Position178_g170582;
					float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
					float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
					float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
					float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
					float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
					float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
					float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
					float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
					float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
					float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
					float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
					float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
					float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
					float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
					float4 In_PhaseData16_g170585 = temp_output_149_27_g170582;
					float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
					float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
					{
					Data16_g170585.Dummy = In_Dummy16_g170585;
					Data16_g170585.PositionOS = In_PositionOS16_g170585;
					Data16_g170585.PositionWS = In_PositionWS16_g170585;
					Data16_g170585.PositionWO = In_PositionWO16_g170585;
					Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
					Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
					Data16_g170585.PivotOS = In_PivotOS16_g170585;
					Data16_g170585.PivotWS = In_PivotWS16_g170585;
					Data16_g170585.PivotWO = In_PivotWO16_g170585;
					Data16_g170585.NormalOS = In_NormalOS16_g170585;
					Data16_g170585.NormalWS = In_NormalWS16_g170585;
					Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
					Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
					Data16_g170585.TangentOS = In_TangentOS16_g170585;
					Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
					Data16_g170585.VertexData = In_VertexData16_g170585;
					Data16_g170585.PhaseData = In_PhaseData16_g170585;
					Data16_g170585.BoundsData = In_BoundsData16_g170585;
					Data16_g170585.RotationData = In_RotationData16_g170585;
					}
					TVEModelData Data15_g170680 = Data16_g170585;
					float Out_Dummy15_g170680 = 0;
					float3 Out_PositionOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170680 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170680 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170680 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170680 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170680 = float3( 0,0,0 );
					float4 Out_VertexData15_g170680 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170680 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170680 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170680 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170680 = Data15_g170680.Dummy;
					Out_PositionOS15_g170680 = Data15_g170680.PositionOS;
					Out_PositionWS15_g170680 = Data15_g170680.PositionWS;
					Out_PositionWO15_g170680 = Data15_g170680.PositionWO;
					Out_PositionRawOS15_g170680 = Data15_g170680.PositionRawOS;
					Out_PositionAddOS15_g170680 = Data15_g170680.PositionAddOS;
					Out_PivotOS15_g170680 = Data15_g170680.PivotOS;
					Out_PivotWS15_g170680 = Data15_g170680.PivotWS;
					Out_PivotWO15_g170680 = Data15_g170680.PivotWO;
					Out_NormalOS15_g170680 = Data15_g170680.NormalOS;
					Out_NormalWS15_g170680 = Data15_g170680.NormalWS;
					Out_NormalRawOS15_g170680 = Data15_g170680.NormalRawOS;
					Out_NormalRawWS15_g170680 = Data15_g170680.NormalRawWS;
					Out_TangentOS15_g170680 = Data15_g170680.TangentOS;
					Out_ViewDirWS15_g170680 = Data15_g170680.ViewDirWS;
					Out_VertexData15_g170680 = Data15_g170680.VertexData;
					Out_PhaseData15_g170680 = Data15_g170680.PhaseData;
					Out_BoundsData15_g170680 = Data15_g170680.BoundsData;
					Out_RotationData15_g170680 = Data15_g170680.RotationData;
					}
					half3 Model_PositionOS147_g170679 = Out_PositionOS15_g170680;
					float3 temp_cast_5 = (1.0).xxx;
					float3 temp_output_210_19_g170679 = Out_PivotWO15_g170680;
					half3 Model_PivotWO162_g170679 = temp_output_210_19_g170679;
					float lerpResult216_g170679 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
					float temp_output_7_0_g170685 = _SizeFadeDistMaxValue;
					float temp_output_9_0_g170685 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170679 ) * lerpResult216_g170679 ) - temp_output_7_0_g170685 );
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170682 = Data204_g170496;
					float Out_Dummy15_g170682 = 0;
					float4 Out_CoatDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170682 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170682 = Data15_g170682.Dummy;
					Out_CoatDataRT15_g170682 = Data15_g170682.CoatDataRT;
					Out_PaintDataRT15_g170682 = Data15_g170682.PaintDataRT;
					Out_GlowDataRT15_g170682= Data15_g170682.GlowDataRT;
					Out_AtmoDataRT15_g170682= Data15_g170682.AtmoDataRT;
					Out_FadeDataRT15_g170682= Data15_g170682.FadeDataRT;
					Out_FormDataRT15_g170682 = Data15_g170682.FormDataRT;
					Out_FlowDataRT15_g170682 = Data15_g170682.FlowDataRT;
					}
					half4 Input_FormParams188_g170679 = Out_FormDataRT15_g170682;
					float temp_output_6_0_g170683 = saturate( (Input_FormParams188_g170679).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170683 = ( temp_output_6_0_g170683 + _SizeFadeElementMode );
					#else
					float staticSwitch14_g170683 = temp_output_6_0_g170683;
					#endif
					#ifdef TVE_SIZEFADE_ELEMENT
					float staticSwitch194_g170679 = staticSwitch14_g170683;
					#else
					float staticSwitch194_g170679 = TVE_FormParams.w;
					#endif
					float lerpResult213_g170679 = lerp( 1.0 , staticSwitch194_g170679 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
					half SizeFade_MaskGlobal192_g170679 = lerpResult213_g170679;
					half User_Mask232_g170679 = 1.0;
					float temp_output_189_0_g170679 = ( saturate( ( ( temp_output_9_0_g170685 / ( _SizeFadeDistMinValue - temp_output_7_0_g170685 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170679 * User_Mask232_g170679 );
					float3 appendResult200_g170679 = (float3(temp_output_189_0_g170679 , temp_output_189_0_g170679 , temp_output_189_0_g170679));
					float3 appendResult201_g170679 = (float3(1.0 , temp_output_189_0_g170679 , 1.0));
					float3 lerpResult202_g170679 = lerp( appendResult200_g170679 , appendResult201_g170679 , _SizeFadeScaleMode);
					float3 lerpResult184_g170679 = lerp( temp_cast_5 , lerpResult202_g170679 , _SizeFadeIntensityValue);
					#ifdef TVE_SIZEFADE
					float3 staticSwitch199_g170679 = ( lerpResult184_g170679 * Model_PositionOS147_g170679 );
					#else
					float3 staticSwitch199_g170679 = Model_PositionOS147_g170679;
					#endif
					half3 Final_Position178_g170679 = staticSwitch199_g170679;
					float3 In_PositionOS16_g170681 = Final_Position178_g170679;
					float3 In_PositionWS16_g170681 = Out_PositionWS15_g170680;
					float3 In_PositionWO16_g170681 = Out_PositionWO15_g170680;
					float3 In_PositionRawOS16_g170681 = Out_PositionRawOS15_g170680;
					float3 In_PositionAddOS16_g170681 = Out_PositionAddOS15_g170680;
					float3 temp_output_210_24_g170679 = Out_PivotOS15_g170680;
					float3 In_PivotOS16_g170681 = temp_output_210_24_g170679;
					float3 In_PivotWS16_g170681 = Out_PivotWS15_g170680;
					float3 In_PivotWO16_g170681 = temp_output_210_19_g170679;
					float3 In_NormalOS16_g170681 = Out_NormalOS15_g170680;
					float3 In_NormalWS16_g170681 = Out_NormalWS15_g170680;
					float3 In_NormalRawOS16_g170681 = Out_NormalRawOS15_g170680;
					float3 In_NormalRawWS16_g170681 = Out_NormalRawWS15_g170680;
					float4 In_TangentOS16_g170681 = Out_TangentOS15_g170680;
					float3 In_ViewDirWS16_g170681 = Out_ViewDirWS15_g170680;
					float4 In_VertexData16_g170681 = Out_VertexData15_g170680;
					float4 In_PhaseData16_g170681 = Out_PhaseData15_g170680;
					float4 In_BoundsData16_g170681 = Out_BoundsData15_g170680;
					float4 In_RotationData16_g170681 = Out_RotationData15_g170680;
					{
					Data16_g170681.Dummy = In_Dummy16_g170681;
					Data16_g170681.PositionOS = In_PositionOS16_g170681;
					Data16_g170681.PositionWS = In_PositionWS16_g170681;
					Data16_g170681.PositionWO = In_PositionWO16_g170681;
					Data16_g170681.PositionRawOS = In_PositionRawOS16_g170681;
					Data16_g170681.PositionAddOS = In_PositionAddOS16_g170681;
					Data16_g170681.PivotOS = In_PivotOS16_g170681;
					Data16_g170681.PivotWS = In_PivotWS16_g170681;
					Data16_g170681.PivotWO = In_PivotWO16_g170681;
					Data16_g170681.NormalOS = In_NormalOS16_g170681;
					Data16_g170681.NormalWS = In_NormalWS16_g170681;
					Data16_g170681.NormalRawOS = In_NormalRawOS16_g170681;
					Data16_g170681.NormalRawWS = In_NormalRawWS16_g170681;
					Data16_g170681.TangentOS = In_TangentOS16_g170681;
					Data16_g170681.ViewDirWS = In_ViewDirWS16_g170681;
					Data16_g170681.VertexData = In_VertexData16_g170681;
					Data16_g170681.PhaseData = In_PhaseData16_g170681;
					Data16_g170681.BoundsData = In_BoundsData16_g170681;
					Data16_g170681.RotationData = In_RotationData16_g170681;
					}
					TVEModelData Data15_g170743 = Data16_g170681;
					float Out_Dummy15_g170743 = 0;
					float3 Out_PositionOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170743 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170743 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170743 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170743 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170743 = float3( 0,0,0 );
					float4 Out_VertexData15_g170743 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170743 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170743 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170743 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170743 = Data15_g170743.Dummy;
					Out_PositionOS15_g170743 = Data15_g170743.PositionOS;
					Out_PositionWS15_g170743 = Data15_g170743.PositionWS;
					Out_PositionWO15_g170743 = Data15_g170743.PositionWO;
					Out_PositionRawOS15_g170743 = Data15_g170743.PositionRawOS;
					Out_PositionAddOS15_g170743 = Data15_g170743.PositionAddOS;
					Out_PivotOS15_g170743 = Data15_g170743.PivotOS;
					Out_PivotWS15_g170743 = Data15_g170743.PivotWS;
					Out_PivotWO15_g170743 = Data15_g170743.PivotWO;
					Out_NormalOS15_g170743 = Data15_g170743.NormalOS;
					Out_NormalWS15_g170743 = Data15_g170743.NormalWS;
					Out_NormalRawOS15_g170743 = Data15_g170743.NormalRawOS;
					Out_NormalRawWS15_g170743 = Data15_g170743.NormalRawWS;
					Out_TangentOS15_g170743 = Data15_g170743.TangentOS;
					Out_ViewDirWS15_g170743 = Data15_g170743.ViewDirWS;
					Out_VertexData15_g170743 = Data15_g170743.VertexData;
					Out_PhaseData15_g170743 = Data15_g170743.PhaseData;
					Out_BoundsData15_g170743 = Data15_g170743.BoundsData;
					Out_RotationData15_g170743 = Data15_g170743.RotationData;
					}
					float3 temp_output_2503_0_g170727 = Out_PositionOS15_g170743;
					float3 In_PositionOS16_g170744 = temp_output_2503_0_g170727;
					float3 temp_output_2503_16_g170727 = Out_PositionWS15_g170743;
					float3 In_PositionWS16_g170744 = temp_output_2503_16_g170727;
					float3 temp_output_2503_17_g170727 = Out_PositionWO15_g170743;
					float3 In_PositionWO16_g170744 = temp_output_2503_17_g170727;
					float3 In_PositionRawOS16_g170744 = Out_PositionRawOS15_g170743;
					float3 temp_cast_35 = (0.0).xxx;
					float4 temp_output_2503_29_g170727 = Out_VertexData15_g170743;
					half4 Model_VertexMasks518_g170727 = temp_output_2503_29_g170727;
					float4 break1689_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170728 = _motion_small_vert_mode;
					float temp_output_30_0_g170728 = ( break1689_g170727.x * break33_g170728.x );
					float temp_output_29_0_g170728 = ( break1689_g170727.y * break33_g170728.y );
					float temp_output_31_0_g170728 = ( break1689_g170727.z * break33_g170728.z );
					float temp_output_28_0_g170728 = ( temp_output_30_0_g170728 + temp_output_29_0_g170728 + temp_output_31_0_g170728 + ( break1689_g170727.w * break33_g170728.w ) );
					float temp_output_1727_0_g170727 = temp_output_28_0_g170728;
					float4 temp_output_2503_30_g170727 = Out_BoundsData15_g170743;
					half4 Model_BoundsData1322_g170727 = temp_output_2503_30_g170727;
					float4 break33_g170730 = _motion_small_proc_mode;
					float temp_output_30_0_g170730 = ( (Model_BoundsData1322_g170727).z * break33_g170730.x );
					float temp_output_29_0_g170730 = ( (Model_BoundsData1322_g170727).w * break33_g170730.y );
					float temp_output_1734_0_g170727 = ( temp_output_30_0_g170730 + temp_output_29_0_g170730 );
					float lerpResult1906_g170727 = lerp( temp_output_1727_0_g170727 , temp_output_1734_0_g170727 , _motion_small_mask_mode);
					float enc1805_g170727 = v.texcoord.xyzw.z;
					float2 localDecodeFloatToVector21805_g170727 = DecodeFloatToVector2( enc1805_g170727 );
					float2 break1804_g170727 = localDecodeFloatToVector21805_g170727;
					half Small_Mask_Legacy1806_g170727 = break1804_g170727.x;
					#ifdef TVE_LEGACY
					float staticSwitch1800_g170727 = Small_Mask_Legacy1806_g170727;
					#else
					float staticSwitch1800_g170727 = lerpResult1906_g170727;
					#endif
					float clampResult17_g170732 = clamp( staticSwitch1800_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170741 = _MotionSmallMaskRemap.x;
					float temp_output_9_0_g170741 = ( clampResult17_g170732 - temp_output_7_0_g170741 );
					float temp_output_6_0_g170739 = saturate( ( ( temp_output_9_0_g170741 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170739 = ( temp_output_6_0_g170739 + _MotionSmallMaskMode );
					#else
					float staticSwitch14_g170739 = temp_output_6_0_g170739;
					#endif
					half Small_Mask640_g170727 = staticSwitch14_g170739;
					float4 lerpResult836_g170752 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
					float2 Global_WindDirWS2542_g170727 = (lerpResult836_g170752).xy;
					half2 Input_WindDirWS803_g170753 = Global_WindDirWS2542_g170727;
					half3 Model_PositionWO162_g170727 = temp_output_2503_17_g170727;
					half3 Input_ModelPositionWO761_g170745 = Model_PositionWO162_g170727;
					float3 temp_output_2503_19_g170727 = Out_PivotWO15_g170743;
					half3 Model_PivotWO402_g170727 = temp_output_2503_19_g170727;
					half3 Input_ModelPivotsWO419_g170745 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170745 = _MotionSmallPivotValue;
					float3 lerpResult771_g170745 = lerp( Input_ModelPositionWO761_g170745 , Input_ModelPivotsWO419_g170745 , Input_MotionPivots629_g170745);
					float4 temp_output_2503_27_g170727 = Out_PhaseData15_g170743;
					half4 Model_PhaseData489_g170727 = temp_output_2503_27_g170727;
					half4 Input_ModelMotionData763_g170745 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170745 = _MotionSmallPhaseValue;
					half3 Small_Position1421_g170727 = ( lerpResult771_g170745 + ( (Input_ModelMotionData763_g170745).z * Input_MotionPhase764_g170745 * 5.0 ) );
					half3 Input_PositionWO419_g170753 = Small_Position1421_g170727;
					half Input_MotionTilling321_g170753 = ( _MotionSmallTillingValue + 0.2 );
					half2 Noise_Coord515_g170753 = ( -(Input_PositionWO419_g170753).xz * Input_MotionTilling321_g170753 * 0.005 );
					float2 temp_output_3_0_g170755 = Noise_Coord515_g170753;
					float2 temp_output_21_0_g170755 = Input_WindDirWS803_g170753;
					float lerpResult128_g170754 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170753 = _MotionSmallSpeedValue;
					half Noise_Speed516_g170753 = ( lerpResult128_g170754 * 0.02 * Input_MotionSpeed62_g170753 );
					float temp_output_15_0_g170755 = Noise_Speed516_g170753;
					float temp_output_23_0_g170755 = frac( temp_output_15_0_g170755 );
					float4 lerpResult39_g170755 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * temp_output_23_0_g170755 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * frac( ( temp_output_15_0_g170755 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170755 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170753 = lerpResult39_g170755;
					half2 Noise_DirWS858_g170753 = ((temp_output_635_0_g170753).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170753 = _MotionSmallNoiseValue;
					half Global_WInd769_g170752 = (lerpResult836_g170752).z;
					TVEGlobalData Data15_g170751 = Data204_g170496;
					float Out_Dummy15_g170751 = 0;
					float4 Out_CoatDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170751 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170751 = Data15_g170751.Dummy;
					Out_CoatDataRT15_g170751 = Data15_g170751.CoatDataRT;
					Out_PaintDataRT15_g170751 = Data15_g170751.PaintDataRT;
					Out_GlowDataRT15_g170751= Data15_g170751.GlowDataRT;
					Out_AtmoDataRT15_g170751= Data15_g170751.AtmoDataRT;
					Out_FadeDataRT15_g170751= Data15_g170751.FadeDataRT;
					Out_FormDataRT15_g170751 = Data15_g170751.FormDataRT;
					Out_FlowDataRT15_g170751 = Data15_g170751.FlowDataRT;
					}
					half4 Global_FlowParams2668_g170727 = Out_FlowDataRT15_g170751;
					half4 Input_GlobalFlow826_g170752 = Global_FlowParams2668_g170727;
					float temp_output_764_0_g170752 = (Input_GlobalFlow826_g170752).w;
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch612_g170752 = saturate( temp_output_764_0_g170752 );
					#else
					float staticSwitch612_g170752 = Global_WInd769_g170752;
					#endif
					float lerpResult853_g170752 = lerp( staticSwitch612_g170752 , saturate( (staticSwitch612_g170752*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
					half Input_MotionValue629_g170752 = _MotionIntensityValue;
					half Global_WindValue1855_g170727 = ( lerpResult853_g170752 * Input_MotionValue629_g170752 );
					half Input_WindValue881_g170753 = Global_WindValue1855_g170727;
					float lerpResult701_g170753 = lerp( 1.0 , Input_MotionNoise552_g170753 , Input_WindValue881_g170753);
					float2 lerpResult646_g170753 = lerp( Input_WindDirWS803_g170753 , Noise_DirWS858_g170753 , lerpResult701_g170753);
					half2 Small_DirWS817_g170753 = lerpResult646_g170753;
					float2 break823_g170753 = Small_DirWS817_g170753;
					half4 Noise_Params685_g170753 = temp_output_635_0_g170753;
					half Wind_Sinus820_g170753 = ( ((Noise_Params685_g170753).b*2.0 + -1.0) * Input_MotionNoise552_g170753 * 0.6 );
					float3 appendResult824_g170753 = (float3(break823_g170753.x , Wind_Sinus820_g170753 , break823_g170753.y));
					half Input_MotionDelay753_g170753 = _MotionSmallDelayValue;
					float lerpResult756_g170753 = lerp( 1.0 , ( Input_WindValue881_g170753 * Input_WindValue881_g170753 ) , Input_MotionDelay753_g170753);
					half Wind_Delay815_g170753 = lerpResult756_g170753;
					float3 appendResult825_g170753 = (float3(Wind_Delay815_g170753 , 1.0 , Wind_Delay815_g170753));
					float3 temp_output_827_0_g170753 = ( ( appendResult824_g170753 * Input_WindValue881_g170753 ) * appendResult825_g170753 );
					float2 break857_g170753 = Noise_DirWS858_g170753;
					float3 appendResult833_g170753 = (float3(break857_g170753.x , Wind_Sinus820_g170753 , break857_g170753.y));
					half Global_PushWave2675_g170727 = (Input_GlobalFlow826_g170752).z;
					half Input_PushWave890_g170753 = Global_PushWave2675_g170727;
					float2 temp_output_790_0_g170752 = (Input_GlobalFlow826_g170752).xy;
					half Global_PushAlpha1504_g170727 = saturate( length( temp_output_790_0_g170752 ) );
					half Input_PushAlpha806_g170753 = ( Global_PushAlpha1504_g170727 * _MotionSmallPushValue );
					float3 lerpResult840_g170753 = lerp( temp_output_827_0_g170753 , ( appendResult833_g170753 * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float3 staticSwitch829_g170753 = lerpResult840_g170753;
					#else
					float3 staticSwitch829_g170753 = temp_output_827_0_g170753;
					#endif
					float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
					float3 temp_output_847_0_g170753 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170753 , 0.0 ) ).xyz * ase_parentObjectScale );
					half3 Small_Squash1489_g170727 = temp_output_847_0_g170753;
					half3 Small_Motion789_g170727 = ( _MotionSmallIntensityValue * Small_Mask640_g170727 * Small_Squash1489_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch495_g170727 = Small_Motion789_g170727;
					#else
					float3 staticSwitch495_g170727 = temp_cast_35;
					#endif
					float3 temp_cast_38 = (0.0).xxx;
					half3 Model_PositionWS1819_g170727 = temp_output_2503_16_g170727;
					half Global_DistMask1820_g170727 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170727 ) / _MotionDistValue ) ) );
					float4 break1710_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170729 = _motion_tiny_vert_mode;
					float temp_output_30_0_g170729 = ( break1710_g170727.x * break33_g170729.x );
					float temp_output_29_0_g170729 = ( break1710_g170727.y * break33_g170729.y );
					float temp_output_31_0_g170729 = ( break1710_g170727.z * break33_g170729.z );
					float temp_output_28_0_g170729 = ( temp_output_30_0_g170729 + temp_output_29_0_g170729 + temp_output_31_0_g170729 + ( break1710_g170727.w * break33_g170729.w ) );
					float temp_output_1729_0_g170727 = temp_output_28_0_g170729;
					float4 break33_g170731 = _motion_tiny_proc_mode;
					float temp_output_30_0_g170731 = ( (Model_BoundsData1322_g170727).z * break33_g170731.x );
					float temp_output_29_0_g170731 = ( (Model_BoundsData1322_g170727).w * break33_g170731.y );
					float temp_output_1735_0_g170727 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 );
					float lerpResult1908_g170727 = lerp( temp_output_1729_0_g170727 , temp_output_1735_0_g170727 , _motion_tiny_mask_mode);
					half Tiny_Mask_Legacy1807_g170727 = break1804_g170727.y;
					#ifdef TVE_LEGACY
					float staticSwitch1810_g170727 = Tiny_Mask_Legacy1807_g170727;
					#else
					float staticSwitch1810_g170727 = lerpResult1908_g170727;
					#endif
					float clampResult17_g170733 = clamp( staticSwitch1810_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170742 = _MotionTinyMaskRemap.x;
					float temp_output_9_0_g170742 = ( clampResult17_g170733 - temp_output_7_0_g170742 );
					float temp_output_6_0_g170734 = saturate( ( ( temp_output_9_0_g170742 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170734 = ( temp_output_6_0_g170734 + _MotionTinyMaskMode );
					#else
					float staticSwitch14_g170734 = temp_output_6_0_g170734;
					#endif
					half Tiny_Mask218_g170727 = staticSwitch14_g170734;
					float3 temp_output_2503_20_g170727 = Out_NormalOS15_g170743;
					half3 Model_NormalOS554_g170727 = temp_output_2503_20_g170727;
					half3 Input_NormalOS533_g170747 = Model_NormalOS554_g170727;
					half3 Tiny_Position2469_g170727 = Model_PositionWO162_g170727;
					half3 Input_PositionWO500_g170747 = Tiny_Position2469_g170727;
					half Input_MotionTilling321_g170747 = ( _MotionTinyTillingValue + 0.1 );
					float lerpResult128_g170749 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170747 = _MotionTinySpeedValue;
					half3 Flutter_Noise535_g170747 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170747).xz * Input_MotionTilling321_g170747 * 0.005 ) + ( lerpResult128_g170749 * Input_MotionSpeed62_g170747 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
					half Input_MotionNoise542_g170747 = _MotionTinyNoiseValue;
					float3 lerpResult537_g170747 = lerp( ( Input_NormalOS533_g170747 * Flutter_Noise535_g170747 ) , Flutter_Noise535_g170747 , Input_MotionNoise542_g170747);
					half2 Input_WindDirWS803_g170758 = Global_WindDirWS2542_g170727;
					half3 Input_ModelPositionWO761_g170746 = Model_PositionWO162_g170727;
					half3 Input_ModelPivotsWO419_g170746 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170746 = _MotionBasePivotValue;
					float3 lerpResult771_g170746 = lerp( Input_ModelPositionWO761_g170746 , Input_ModelPivotsWO419_g170746 , Input_MotionPivots629_g170746);
					half4 Input_ModelMotionData763_g170746 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170746 = _MotionBasePhaseValue;
					half3 Base_Position1394_g170727 = ( lerpResult771_g170746 + ( (Input_ModelMotionData763_g170746).z * Input_MotionPhase764_g170746 * 5.0 ) );
					half3 Input_PositionWO419_g170758 = Base_Position1394_g170727;
					half Input_MotionTilling321_g170758 = ( _MotionBaseTillingValue + 0.2 );
					half2 Noise_Coord515_g170758 = ( -(Input_PositionWO419_g170758).xz * Input_MotionTilling321_g170758 * 0.005 );
					float2 temp_output_3_0_g170762 = Noise_Coord515_g170758;
					float2 temp_output_21_0_g170762 = Input_WindDirWS803_g170758;
					float mulTime113_g170761 = _Time.y * 0.02;
					float lerpResult128_g170761 = lerp( mulTime113_g170761 , ( ( mulTime113_g170761 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170758 = _MotionBaseSpeedValue;
					half Noise_Speed516_g170758 = ( lerpResult128_g170761 * Input_MotionSpeed62_g170758 );
					float temp_output_15_0_g170762 = Noise_Speed516_g170758;
					float temp_output_23_0_g170762 = frac( temp_output_15_0_g170762 );
					float4 lerpResult39_g170762 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * temp_output_23_0_g170762 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * frac( ( temp_output_15_0_g170762 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170762 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170758 = lerpResult39_g170762;
					half2 Noise_DirWS825_g170758 = ((temp_output_635_0_g170758).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170758 = _MotionBaseNoiseValue;
					half Input_WindValue853_g170758 = Global_WindValue1855_g170727;
					float lerpResult701_g170758 = lerp( 1.0 , Input_MotionNoise552_g170758 , Input_WindValue853_g170758);
					float2 lerpResult646_g170758 = lerp( Input_WindDirWS803_g170758 , Noise_DirWS825_g170758 , lerpResult701_g170758);
					half Input_MotionDelay753_g170758 = _MotionBaseDelayValue;
					float lerpResult756_g170758 = lerp( 1.0 , ( Input_WindValue853_g170758 * Input_WindValue853_g170758 ) , Input_MotionDelay753_g170758);
					half Wind_Delay815_g170758 = lerpResult756_g170758;
					float2 temp_output_809_0_g170758 = ( lerpResult646_g170758 * Input_WindValue853_g170758 * Wind_Delay815_g170758 );
					half2 Bend_Dir859_g170758 = temp_output_809_0_g170758;
					float temp_output_862_0_g170758 = ( length( Bend_Dir859_g170758 ) * Input_MotionNoise552_g170758 );
					float2 Global_PushDirWS1972_g170727 = temp_output_790_0_g170752;
					half2 Input_PushDirWS807_g170758 = Global_PushDirWS1972_g170727;
					half Input_PushWave858_g170758 = Global_PushWave2675_g170727;
					half Input_PushAlpha806_g170758 = ( Global_PushAlpha1504_g170727 * _MotionBasePushValue );
					float lerpResult831_g170758 = lerp( temp_output_862_0_g170758 , ( saturate( length( Input_PushDirWS807_g170758 ) ) * Input_PushWave858_g170758 ) , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch828_g170758 = lerpResult831_g170758;
					#else
					float staticSwitch828_g170758 = temp_output_862_0_g170758;
					#endif
					half Base_Wave1159_g170727 = staticSwitch828_g170758;
					float temp_output_888_0_g170753 = ( (Noise_Params685_g170753).b * Input_WindValue881_g170753 );
					float lerpResult867_g170753 = lerp( temp_output_888_0_g170753 , ( (Noise_Params685_g170753).b * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch886_g170753 = lerpResult867_g170753;
					#else
					float staticSwitch886_g170753 = temp_output_888_0_g170753;
					#endif
					half Small_Wave1427_g170727 = staticSwitch886_g170753;
					float lerpResult2422_g170727 = lerp( Base_Wave1159_g170727 , Small_Wave1427_g170727 , _motion_small_mode);
					half Global_Wave1475_g170727 = lerpResult2422_g170727;
					half Input_GlobalWave546_g170747 = Global_Wave1475_g170727;
					float temp_output_548_0_g170747 = ( Input_GlobalWave546_g170747 * Input_GlobalWave546_g170747 );
					half Flutter_Wave556_g170747 = temp_output_548_0_g170747;
					half3 Tiny_Noise859_g170727 = ( lerpResult537_g170747 * Flutter_Wave556_g170747 );
					half3 Tiny_Flutter1451_g170727 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170727 * Tiny_Mask218_g170727 * Tiny_Noise859_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch414_g170727 = Tiny_Flutter1451_g170727;
					#else
					float3 staticSwitch414_g170727 = temp_cast_38;
					#endif
					half3 Final_PositionADD1569_g170727 = ( staticSwitch495_g170727 + staticSwitch414_g170727 );
					float3 In_PositionAddOS16_g170744 = Final_PositionADD1569_g170727;
					float3 temp_output_2503_24_g170727 = Out_PivotOS15_g170743;
					float3 In_PivotOS16_g170744 = temp_output_2503_24_g170727;
					float3 In_PivotWS16_g170744 = Out_PivotWS15_g170743;
					float3 In_PivotWO16_g170744 = temp_output_2503_19_g170727;
					float3 In_NormalOS16_g170744 = temp_output_2503_20_g170727;
					float3 In_NormalWS16_g170744 = Out_NormalWS15_g170743;
					float3 In_NormalRawOS16_g170744 = Out_NormalRawOS15_g170743;
					float3 In_NormalRawWS16_g170744 = Out_NormalRawWS15_g170743;
					float4 In_TangentOS16_g170744 = Out_TangentOS15_g170743;
					float3 In_ViewDirWS16_g170744 = Out_ViewDirWS15_g170743;
					float4 In_VertexData16_g170744 = temp_output_2503_29_g170727;
					float4 In_PhaseData16_g170744 = temp_output_2503_27_g170727;
					float4 In_BoundsData16_g170744 = temp_output_2503_30_g170727;
					float4 break748_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170736 = _motion_base_vert_mode;
					float temp_output_30_0_g170736 = ( break748_g170727.x * break33_g170736.x );
					float temp_output_29_0_g170736 = ( break748_g170727.y * break33_g170736.y );
					float temp_output_31_0_g170736 = ( break748_g170727.z * break33_g170736.z );
					float temp_output_28_0_g170736 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 + temp_output_31_0_g170736 + ( break748_g170727.w * break33_g170736.w ) );
					float temp_output_1731_0_g170727 = temp_output_28_0_g170736;
					float4 break33_g170737 = _motion_base_proc_mode;
					float temp_output_30_0_g170737 = ( (Model_BoundsData1322_g170727).z * break33_g170737.x );
					float temp_output_29_0_g170737 = ( (Model_BoundsData1322_g170727).w * break33_g170737.y );
					float temp_output_1733_0_g170727 = ( temp_output_30_0_g170737 + temp_output_29_0_g170737 );
					float lerpResult1904_g170727 = lerp( temp_output_1731_0_g170727 , temp_output_1733_0_g170727 , _motion_base_mask_mode);
					float clampResult17_g170735 = clamp( lerpResult1904_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170740 = _MotionBaseMaskRemap.x;
					float temp_output_9_0_g170740 = ( clampResult17_g170735 - temp_output_7_0_g170740 );
					float temp_output_6_0_g170738 = saturate( ( ( temp_output_9_0_g170740 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170738 = ( temp_output_6_0_g170738 + _MotionBaseMaskMode );
					#else
					float staticSwitch14_g170738 = temp_output_6_0_g170738;
					#endif
					half Base_Mask217_g170727 = staticSwitch14_g170738;
					float2 lerpResult811_g170758 = lerp( temp_output_809_0_g170758 , Input_PushDirWS807_g170758 , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float2 staticSwitch808_g170758 = lerpResult811_g170758;
					#else
					float2 staticSwitch808_g170758 = temp_output_809_0_g170758;
					#endif
					float2 temp_output_38_0_g170759 = staticSwitch808_g170758;
					float2 break83_g170759 = temp_output_38_0_g170759;
					float3 appendResult79_g170759 = (float3(break83_g170759.x , 0.0 , break83_g170759.y));
					half2 Base_Bending893_g170727 = (( mul( unity_WorldToObject, float4( appendResult79_g170759 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
					half2 Base_Motion1440_g170727 = ( _MotionBaseIntensityValue * Base_Mask217_g170727 * Base_Bending893_g170727 );
					#ifdef TVE_MOTION
					float2 staticSwitch2384_g170727 = Base_Motion1440_g170727;
					#else
					float2 staticSwitch2384_g170727 = float2( 0,0 );
					#endif
					float4 appendResult2023_g170727 = (float4(staticSwitch2384_g170727 , 0.0 , 0.0));
					half4 Final_RotationData1570_g170727 = appendResult2023_g170727;
					float4 In_RotationData16_g170744 = Final_RotationData1570_g170727;
					{
					Data16_g170744.Dummy = In_Dummy16_g170744;
					Data16_g170744.PositionOS = In_PositionOS16_g170744;
					Data16_g170744.PositionWS = In_PositionWS16_g170744;
					Data16_g170744.PositionWO = In_PositionWO16_g170744;
					Data16_g170744.PositionRawOS = In_PositionRawOS16_g170744;
					Data16_g170744.PositionAddOS = In_PositionAddOS16_g170744;
					Data16_g170744.PivotOS = In_PivotOS16_g170744;
					Data16_g170744.PivotWS = In_PivotWS16_g170744;
					Data16_g170744.PivotWO = In_PivotWO16_g170744;
					Data16_g170744.NormalOS = In_NormalOS16_g170744;
					Data16_g170744.NormalWS = In_NormalWS16_g170744;
					Data16_g170744.NormalRawOS = In_NormalRawOS16_g170744;
					Data16_g170744.NormalRawWS = In_NormalRawWS16_g170744;
					Data16_g170744.TangentOS = In_TangentOS16_g170744;
					Data16_g170744.ViewDirWS = In_ViewDirWS16_g170744;
					Data16_g170744.VertexData = In_VertexData16_g170744;
					Data16_g170744.PhaseData = In_PhaseData16_g170744;
					Data16_g170744.BoundsData = In_BoundsData16_g170744;
					Data16_g170744.RotationData = In_RotationData16_g170744;
					}
					TVEModelData Data15_g170971 = Data16_g170744;
					float Out_Dummy15_g170971 = 0;
					float3 Out_PositionOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170971 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170971 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170971 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170971 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170971 = float3( 0,0,0 );
					float4 Out_VertexData15_g170971 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170971 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170971 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170971 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170971 = Data15_g170971.Dummy;
					Out_PositionOS15_g170971 = Data15_g170971.PositionOS;
					Out_PositionWS15_g170971 = Data15_g170971.PositionWS;
					Out_PositionWO15_g170971 = Data15_g170971.PositionWO;
					Out_PositionRawOS15_g170971 = Data15_g170971.PositionRawOS;
					Out_PositionAddOS15_g170971 = Data15_g170971.PositionAddOS;
					Out_PivotOS15_g170971 = Data15_g170971.PivotOS;
					Out_PivotWS15_g170971 = Data15_g170971.PivotWS;
					Out_PivotWO15_g170971 = Data15_g170971.PivotWO;
					Out_NormalOS15_g170971 = Data15_g170971.NormalOS;
					Out_NormalWS15_g170971 = Data15_g170971.NormalWS;
					Out_NormalRawOS15_g170971 = Data15_g170971.NormalRawOS;
					Out_NormalRawWS15_g170971 = Data15_g170971.NormalRawWS;
					Out_TangentOS15_g170971 = Data15_g170971.TangentOS;
					Out_ViewDirWS15_g170971 = Data15_g170971.ViewDirWS;
					Out_VertexData15_g170971 = Data15_g170971.VertexData;
					Out_PhaseData15_g170971 = Data15_g170971.PhaseData;
					Out_BoundsData15_g170971 = Data15_g170971.BoundsData;
					Out_RotationData15_g170971 = Data15_g170971.RotationData;
					}
					half3 Model_PositionOS147_g170970 = Out_PositionOS15_g170971;
					half3 VertexPos40_g170974 = Model_PositionOS147_g170970;
					float3 appendResult74_g170974 = (float3(VertexPos40_g170974.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g170974 = appendResult74_g170974;
					float3 break84_g170974 = VertexPos40_g170974;
					float3 appendResult81_g170974 = (float3(0.0 , break84_g170974.y , break84_g170974.z));
					half3 VertexPosOtherAxis82_g170974 = appendResult81_g170974;
					float4 temp_output_1567_33_g170970 = Out_RotationData15_g170971;
					half4 Model_VertexBend1569_g170970 = temp_output_1567_33_g170970;
					float2 break1582_g170970 = (Model_VertexBend1569_g170970).xy;
					half Angle44_g170974 = break1582_g170970.y;
					half3 VertexPos40_g170977 = ( VertexPosRotationAxis50_g170974 + ( VertexPosOtherAxis82_g170974 * cos( Angle44_g170974 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170974 ) * sin( Angle44_g170974 ) ) );
					float3 appendResult74_g170977 = (float3(0.0 , 0.0 , VertexPos40_g170977.z));
					half3 VertexPosRotationAxis50_g170977 = appendResult74_g170977;
					float3 break84_g170977 = VertexPos40_g170977;
					float3 appendResult81_g170977 = (float3(break84_g170977.x , break84_g170977.y , 0.0));
					half3 VertexPosOtherAxis82_g170977 = appendResult81_g170977;
					half Angle44_g170977 = -break1582_g170970.x;
					float3 temp_output_1584_19_g170970 = ( VertexPosRotationAxis50_g170977 + ( VertexPosOtherAxis82_g170977 * cos( Angle44_g170977 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170977 ) * sin( Angle44_g170977 ) ) );
					float3 temp_output_6_0_g170976 = temp_output_1584_19_g170970;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch65_g170976 = Model_PositionOS147_g170970;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch69_g170976 = staticSwitch65_g170976;
					#endif
					float3 temp_output_1585_0_g170970 = staticSwitch69_g170976;
					float3 temp_output_1567_31_g170970 = Out_PositionAddOS15_g170971;
					half3 Model_PositionADD1568_g170970 = temp_output_1567_31_g170970;
					half3 Final_PositionOS178_g170970 = ( temp_output_1585_0_g170970 + Model_PositionADD1568_g170970 );
					float3 In_PositionOS16_g170972 = Final_PositionOS178_g170970;
					float3 In_PositionWS16_g170972 = Out_PositionWS15_g170971;
					float3 In_PositionWO16_g170972 = Out_PositionWO15_g170971;
					float3 In_PositionRawOS16_g170972 = Out_PositionRawOS15_g170971;
					float3 In_PositionAddOS16_g170972 = temp_output_1567_31_g170970;
					float3 In_PivotOS16_g170972 = Out_PivotOS15_g170971;
					float3 In_PivotWS16_g170972 = Out_PivotWS15_g170971;
					float3 In_PivotWO16_g170972 = Out_PivotWO15_g170971;
					float3 In_NormalOS16_g170972 = Out_NormalOS15_g170971;
					float3 In_NormalWS16_g170972 = Out_NormalWS15_g170971;
					float3 In_NormalRawOS16_g170972 = Out_NormalRawOS15_g170971;
					float3 In_NormalRawWS16_g170972 = Out_NormalRawWS15_g170971;
					float4 In_TangentOS16_g170972 = Out_TangentOS15_g170971;
					float3 In_ViewDirWS16_g170972 = Out_ViewDirWS15_g170971;
					float4 In_VertexData16_g170972 = Out_VertexData15_g170971;
					float4 In_PhaseData16_g170972 = Out_PhaseData15_g170971;
					float4 In_BoundsData16_g170972 = Out_BoundsData15_g170971;
					float4 In_RotationData16_g170972 = temp_output_1567_33_g170970;
					{
					Data16_g170972.Dummy = In_Dummy16_g170972;
					Data16_g170972.PositionOS = In_PositionOS16_g170972;
					Data16_g170972.PositionWS = In_PositionWS16_g170972;
					Data16_g170972.PositionWO = In_PositionWO16_g170972;
					Data16_g170972.PositionRawOS = In_PositionRawOS16_g170972;
					Data16_g170972.PositionAddOS = In_PositionAddOS16_g170972;
					Data16_g170972.PivotOS = In_PivotOS16_g170972;
					Data16_g170972.PivotWS = In_PivotWS16_g170972;
					Data16_g170972.PivotWO = In_PivotWO16_g170972;
					Data16_g170972.NormalOS = In_NormalOS16_g170972;
					Data16_g170972.NormalWS = In_NormalWS16_g170972;
					Data16_g170972.NormalRawOS = In_NormalRawOS16_g170972;
					Data16_g170972.NormalRawWS = In_NormalRawWS16_g170972;
					Data16_g170972.TangentOS = In_TangentOS16_g170972;
					Data16_g170972.ViewDirWS = In_ViewDirWS16_g170972;
					Data16_g170972.VertexData = In_VertexData16_g170972;
					Data16_g170972.PhaseData = In_PhaseData16_g170972;
					Data16_g170972.BoundsData = In_BoundsData16_g170972;
					Data16_g170972.RotationData = In_RotationData16_g170972;
					}
					TVEModelData Data15_g170997 = Data16_g170972;
					float Out_Dummy15_g170997 = 0;
					float3 Out_PositionOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170997 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170997 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170997 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170997 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170997 = float3( 0,0,0 );
					float4 Out_VertexData15_g170997 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170997 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170997 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170997 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170997 = Data15_g170997.Dummy;
					Out_PositionOS15_g170997 = Data15_g170997.PositionOS;
					Out_PositionWS15_g170997 = Data15_g170997.PositionWS;
					Out_PositionWO15_g170997 = Data15_g170997.PositionWO;
					Out_PositionRawOS15_g170997 = Data15_g170997.PositionRawOS;
					Out_PositionAddOS15_g170997 = Data15_g170997.PositionAddOS;
					Out_PivotOS15_g170997 = Data15_g170997.PivotOS;
					Out_PivotWS15_g170997 = Data15_g170997.PivotWS;
					Out_PivotWO15_g170997 = Data15_g170997.PivotWO;
					Out_NormalOS15_g170997 = Data15_g170997.NormalOS;
					Out_NormalWS15_g170997 = Data15_g170997.NormalWS;
					Out_NormalRawOS15_g170997 = Data15_g170997.NormalRawOS;
					Out_NormalRawWS15_g170997 = Data15_g170997.NormalRawWS;
					Out_TangentOS15_g170997 = Data15_g170997.TangentOS;
					Out_ViewDirWS15_g170997 = Data15_g170997.ViewDirWS;
					Out_VertexData15_g170997 = Data15_g170997.VertexData;
					Out_PhaseData15_g170997 = Data15_g170997.PhaseData;
					Out_BoundsData15_g170997 = Data15_g170997.BoundsData;
					Out_RotationData15_g170997 = Data15_g170997.RotationData;
					}
					float3 In_PositionOS16_g171012 = Out_PositionOS15_g170997;
					float3 In_PositionWS16_g171012 = Out_PositionWS15_g170997;
					float3 temp_output_1567_17_g170996 = Out_PositionWO15_g170997;
					float3 In_PositionWO16_g171012 = temp_output_1567_17_g170996;
					float3 temp_output_1567_26_g170996 = Out_PositionRawOS15_g170997;
					float3 In_PositionRawOS16_g171012 = temp_output_1567_26_g170996;
					float3 In_PositionAddOS16_g171012 = Out_PositionAddOS15_g170997;
					float3 In_PivotOS16_g171012 = Out_PivotOS15_g170997;
					float3 In_PivotWS16_g171012 = Out_PivotWS15_g170997;
					float3 In_PivotWO16_g171012 = Out_PivotWO15_g170997;
					half3 Model_NormalOS1568_g170996 = Out_NormalOS15_g170997;
					half3 _Vector1 = half3(0,1,0);
					float3 lerpResult1589_g170996 = lerp( Model_NormalOS1568_g170996 , _Vector1 , _NormalFlattenValue);
					half3 Model_PositionRAW1592_g170996 = temp_output_1567_26_g170996;
					float3 normalizeResult1594_g170996 = ASESafeNormalize( ( Model_PositionRAW1592_g170996 + _NormalSphereOffsetValue ) );
					float3 lerpResult1585_g170996 = lerp( lerpResult1589_g170996 , normalizeResult1594_g170996 , _NormalSphereValue);
					half3 VertexPos40_g170999 = lerpResult1585_g170996;
					half3 VertexPos40_g171000 = VertexPos40_g170999;
					float3 appendResult74_g171000 = (float3(VertexPos40_g171000.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g171000 = appendResult74_g171000;
					float3 break84_g171000 = VertexPos40_g171000;
					float3 appendResult81_g171000 = (float3(0.0 , break84_g171000.y , break84_g171000.z));
					half3 VertexPosOtherAxis82_g171000 = appendResult81_g171000;
					float4 temp_output_1567_33_g170996 = Out_RotationData15_g170997;
					half4 Model_RotationData1583_g170996 = temp_output_1567_33_g170996;
					half2 Angle44_g170999 = Model_RotationData1583_g170996.xy;
					half Angle44_g171000 = (Angle44_g170999).y;
					half3 VertexPos40_g171001 = ( VertexPosRotationAxis50_g171000 + ( VertexPosOtherAxis82_g171000 * cos( Angle44_g171000 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g171000 ) * sin( Angle44_g171000 ) ) );
					float3 appendResult74_g171001 = (float3(0.0 , 0.0 , VertexPos40_g171001.z));
					half3 VertexPosRotationAxis50_g171001 = appendResult74_g171001;
					float3 break84_g171001 = VertexPos40_g171001;
					float3 appendResult81_g171001 = (float3(break84_g171001.x , break84_g171001.y , 0.0));
					half3 VertexPosOtherAxis82_g171001 = appendResult81_g171001;
					half Angle44_g171001 = -(Angle44_g170999).x;
					float3 lerpResult1591_g170996 = lerp( lerpResult1585_g170996 , ( VertexPosRotationAxis50_g171001 + ( VertexPosOtherAxis82_g171001 * cos( Angle44_g171001 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g171001 ) * sin( Angle44_g171001 ) ) ) , _NormalComputeValue);
					float3 temp_output_6_0_g171011 = lerpResult1591_g170996;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch65_g171011 = lerpResult1585_g170996;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch69_g171011 = staticSwitch65_g171011;
					#endif
					float4 temp_output_1567_29_g170996 = Out_VertexData15_g170997;
					half4 Model_VertexData1608_g170996 = temp_output_1567_29_g170996;
					float4 break1683_g170996 = Model_VertexData1608_g170996;
					float4 break33_g171002 = _normal_vert_mode;
					float temp_output_30_0_g171002 = ( break1683_g170996.x * break33_g171002.x );
					float temp_output_29_0_g171002 = ( break1683_g170996.y * break33_g171002.y );
					float temp_output_31_0_g171002 = ( break1683_g170996.z * break33_g171002.z );
					float temp_output_28_0_g171002 = ( temp_output_30_0_g171002 + temp_output_29_0_g171002 + temp_output_31_0_g171002 + ( break1683_g170996.w * break33_g171002.w ) );
					float clampResult17_g171003 = clamp( temp_output_28_0_g171002 , 0.0001 , 0.9999 );
					float temp_output_7_0_g171007 = _NormalMeshRemap.x;
					float temp_output_9_0_g171007 = ( clampResult17_g171003 - temp_output_7_0_g171007 );
					float lerpResult1695_g170996 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g171007 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
					float temp_output_6_0_g171004 = lerpResult1695_g170996;
					#ifdef TVE_DUMMY
					float staticSwitch14_g171004 = ( temp_output_6_0_g171004 + _NormalMeshMode );
					#else
					float staticSwitch14_g171004 = temp_output_6_0_g171004;
					#endif
					float temp_output_1690_0_g170996 = staticSwitch14_g171004;
					half Normal_MeskMask1691_g170996 = temp_output_1690_0_g170996;
					half Normal_Proj_Mask1647_g170996 = 1.0;
					float temp_output_1699_0_g170996 = ( Normal_MeskMask1691_g170996 * Normal_Proj_Mask1647_g170996 );
					float3 lerpResult1670_g170996 = lerp( Model_NormalOS1568_g170996 , staticSwitch69_g171011 , temp_output_1699_0_g170996);
					#ifdef TVE_NORMAL
					float3 staticSwitch1716_g170996 = lerpResult1670_g170996;
					#else
					float3 staticSwitch1716_g170996 = Model_NormalOS1568_g170996;
					#endif
					half3 Final_NormalOS178_g170996 = staticSwitch1716_g170996;
					float3 In_NormalOS16_g171012 = Final_NormalOS178_g170996;
					float3 temp_output_1567_21_g170996 = Out_NormalWS15_g170997;
					float3 In_NormalWS16_g171012 = temp_output_1567_21_g170996;
					float3 In_NormalRawOS16_g171012 = Out_NormalRawOS15_g170997;
					float3 In_NormalRawWS16_g171012 = Out_NormalRawWS15_g170997;
					float4 In_TangentOS16_g171012 = Out_TangentOS15_g170997;
					float3 In_ViewDirWS16_g171012 = Out_ViewDirWS15_g170997;
					float4 In_VertexData16_g171012 = temp_output_1567_29_g170996;
					float4 In_PhaseData16_g171012 = Out_PhaseData15_g170997;
					float4 In_BoundsData16_g171012 = Out_BoundsData15_g170997;
					float4 In_RotationData16_g171012 = temp_output_1567_33_g170996;
					{
					Data16_g171012.Dummy = In_Dummy16_g171012;
					Data16_g171012.PositionOS = In_PositionOS16_g171012;
					Data16_g171012.PositionWS = In_PositionWS16_g171012;
					Data16_g171012.PositionWO = In_PositionWO16_g171012;
					Data16_g171012.PositionRawOS = In_PositionRawOS16_g171012;
					Data16_g171012.PositionAddOS = In_PositionAddOS16_g171012;
					Data16_g171012.PivotOS = In_PivotOS16_g171012;
					Data16_g171012.PivotWS = In_PivotWS16_g171012;
					Data16_g171012.PivotWO = In_PivotWO16_g171012;
					Data16_g171012.NormalOS = In_NormalOS16_g171012;
					Data16_g171012.NormalWS = In_NormalWS16_g171012;
					Data16_g171012.NormalRawOS = In_NormalRawOS16_g171012;
					Data16_g171012.NormalRawWS = In_NormalRawWS16_g171012;
					Data16_g171012.TangentOS = In_TangentOS16_g171012;
					Data16_g171012.ViewDirWS = In_ViewDirWS16_g171012;
					Data16_g171012.VertexData = In_VertexData16_g171012;
					Data16_g171012.PhaseData = In_PhaseData16_g171012;
					Data16_g171012.BoundsData = In_BoundsData16_g171012;
					Data16_g171012.RotationData = In_RotationData16_g171012;
					}
					TVEModelData Data15_g171022 = Data16_g171012;
					float Out_Dummy15_g171022 = 0;
					float3 Out_PositionOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171022 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171022 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171022 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171022 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171022 = float3( 0,0,0 );
					float4 Out_VertexData15_g171022 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171022 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171022 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171022 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171022 = Data15_g171022.Dummy;
					Out_PositionOS15_g171022 = Data15_g171022.PositionOS;
					Out_PositionWS15_g171022 = Data15_g171022.PositionWS;
					Out_PositionWO15_g171022 = Data15_g171022.PositionWO;
					Out_PositionRawOS15_g171022 = Data15_g171022.PositionRawOS;
					Out_PositionAddOS15_g171022 = Data15_g171022.PositionAddOS;
					Out_PivotOS15_g171022 = Data15_g171022.PivotOS;
					Out_PivotWS15_g171022 = Data15_g171022.PivotWS;
					Out_PivotWO15_g171022 = Data15_g171022.PivotWO;
					Out_NormalOS15_g171022 = Data15_g171022.NormalOS;
					Out_NormalWS15_g171022 = Data15_g171022.NormalWS;
					Out_NormalRawOS15_g171022 = Data15_g171022.NormalRawOS;
					Out_NormalRawWS15_g171022 = Data15_g171022.NormalRawWS;
					Out_TangentOS15_g171022 = Data15_g171022.TangentOS;
					Out_ViewDirWS15_g171022 = Data15_g171022.ViewDirWS;
					Out_VertexData15_g171022 = Data15_g171022.VertexData;
					Out_PhaseData15_g171022 = Data15_g171022.PhaseData;
					Out_BoundsData15_g171022 = Data15_g171022.BoundsData;
					Out_RotationData15_g171022 = Data15_g171022.RotationData;
					}
					float3 temp_output_217_24_g171021 = Out_PivotOS15_g171022;
					float3 In_PositionOS16_g171023 = ( Out_PositionOS15_g171022 + temp_output_217_24_g171021 );
					float3 In_PositionWS16_g171023 = Out_PositionWS15_g171022;
					float3 In_PositionWO16_g171023 = Out_PositionWO15_g171022;
					float3 In_PositionRawOS16_g171023 = Out_PositionRawOS15_g171022;
					float3 In_PositionAddOS16_g171023 = Out_PositionAddOS15_g171022;
					float3 In_PivotOS16_g171023 = temp_output_217_24_g171021;
					float3 In_PivotWS16_g171023 = Out_PivotWS15_g171022;
					float3 In_PivotWO16_g171023 = Out_PivotWO15_g171022;
					float3 In_NormalOS16_g171023 = Out_NormalOS15_g171022;
					float3 In_NormalWS16_g171023 = Out_NormalWS15_g171022;
					float3 In_NormalRawOS16_g171023 = Out_NormalRawOS15_g171022;
					float3 In_NormalRawWS16_g171023 = Out_NormalRawWS15_g171022;
					float4 In_TangentOS16_g171023 = Out_TangentOS15_g171022;
					float3 In_ViewDirWS16_g171023 = Out_ViewDirWS15_g171022;
					float4 In_VertexData16_g171023 = Out_VertexData15_g171022;
					float4 In_PhaseData16_g171023 = Out_PhaseData15_g171022;
					float4 In_BoundsData16_g171023 = Out_BoundsData15_g171022;
					float4 In_RotationData16_g171023 = Out_RotationData15_g171022;
					{
					Data16_g171023.Dummy = In_Dummy16_g171023;
					Data16_g171023.PositionOS = In_PositionOS16_g171023;
					Data16_g171023.PositionWS = In_PositionWS16_g171023;
					Data16_g171023.PositionWO = In_PositionWO16_g171023;
					Data16_g171023.PositionRawOS = In_PositionRawOS16_g171023;
					Data16_g171023.PositionAddOS = In_PositionAddOS16_g171023;
					Data16_g171023.PivotOS = In_PivotOS16_g171023;
					Data16_g171023.PivotWS = In_PivotWS16_g171023;
					Data16_g171023.PivotWO = In_PivotWO16_g171023;
					Data16_g171023.NormalOS = In_NormalOS16_g171023;
					Data16_g171023.NormalWS = In_NormalWS16_g171023;
					Data16_g171023.NormalRawOS = In_NormalRawOS16_g171023;
					Data16_g171023.NormalRawWS = In_NormalRawWS16_g171023;
					Data16_g171023.TangentOS = In_TangentOS16_g171023;
					Data16_g171023.ViewDirWS = In_ViewDirWS16_g171023;
					Data16_g171023.VertexData = In_VertexData16_g171023;
					Data16_g171023.PhaseData = In_PhaseData16_g171023;
					Data16_g171023.BoundsData = In_BoundsData16_g171023;
					Data16_g171023.RotationData = In_RotationData16_g171023;
					}
					TVEModelData Data15_g171037 = Data16_g171023;
					float Out_Dummy15_g171037 = 0;
					float3 Out_PositionOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171037 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171037 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171037 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171037 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171037 = float3( 0,0,0 );
					float4 Out_VertexData15_g171037 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171037 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171037 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171037 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171037 = Data15_g171037.Dummy;
					Out_PositionOS15_g171037 = Data15_g171037.PositionOS;
					Out_PositionWS15_g171037 = Data15_g171037.PositionWS;
					Out_PositionWO15_g171037 = Data15_g171037.PositionWO;
					Out_PositionRawOS15_g171037 = Data15_g171037.PositionRawOS;
					Out_PositionAddOS15_g171037 = Data15_g171037.PositionAddOS;
					Out_PivotOS15_g171037 = Data15_g171037.PivotOS;
					Out_PivotWS15_g171037 = Data15_g171037.PivotWS;
					Out_PivotWO15_g171037 = Data15_g171037.PivotWO;
					Out_NormalOS15_g171037 = Data15_g171037.NormalOS;
					Out_NormalWS15_g171037 = Data15_g171037.NormalWS;
					Out_NormalRawOS15_g171037 = Data15_g171037.NormalRawOS;
					Out_NormalRawWS15_g171037 = Data15_g171037.NormalRawWS;
					Out_TangentOS15_g171037 = Data15_g171037.TangentOS;
					Out_ViewDirWS15_g171037 = Data15_g171037.ViewDirWS;
					Out_VertexData15_g171037 = Data15_g171037.VertexData;
					Out_PhaseData15_g171037 = Data15_g171037.PhaseData;
					Out_BoundsData15_g171037 = Data15_g171037.BoundsData;
					Out_RotationData15_g171037 = Data15_g171037.RotationData;
					}
					float3 temp_output_6_0_g171050 = ( Out_PositionOS15_g171037 + _DisableSRPBatcher );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171050 = ( temp_output_6_0_g171050 + 0.0 );
					#else
					float3 staticSwitch14_g171050 = temp_output_6_0_g171050;
					#endif
					float3 temp_output_154_0_g171035 = staticSwitch14_g171050;
					
					o.ase_texcoord5.xyz = vertexToFrag73_g170478;
					o.ase_texcoord6.xyz = vertexToFrag76_g170478;
					o.ase_texcoord7.xyz = ase_normalWS;
					float3 ase_tangentWS = UnityObjectToWorldDir( v.tangent );
					o.ase_texcoord8.xyz = ase_tangentWS;
					float ase_tangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
					float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
					o.ase_texcoord9.xyz = ase_bitangentWS;
					float temp_output_6_0_g170750 = ( _MotionHighlightValue * Global_DistMask1820_g170727 * ( Tiny_Mask218_g170727 * Tiny_Mask218_g170727 ) * ( Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170750 = ( temp_output_6_0_g170750 + _MotionHighlightColor.r );
					#else
					float staticSwitch14_g170750 = temp_output_6_0_g170750;
					#endif
					half Wave_Mask1263 = staticSwitch14_g170750;
					float4 appendResult23_g170819 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
					float4 vertexToFrag24_g170819 = appendResult23_g170819;
					o.ase_texcoord10 = vertexToFrag24_g170819;
					o.ase_texcoord11.xyz = ase_positionWS;
					
					o.ase_texcoord3 = v.texcoord.xyzw;
					o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
					o.ase_color = v.ase_color;
					
					//setting value to unused interpolator channels and avoid initialization warnings
					o.ase_texcoord4.zw = 0;
					o.ase_texcoord5.w = 0;
					o.ase_texcoord6.w = 0;
					o.ase_texcoord7.w = 0;
					o.ase_texcoord8.w = 0;
					o.ase_texcoord9.w = 0;
					o.ase_texcoord11.w = 0;

					#ifdef ASE_ABSOLUTE_VERTEX_POS
						float3 defaultVertexValue = v.vertex.xyz;
					#else
						float3 defaultVertexValue = float3(0, 0, 0);
					#endif
					float3 vertexValue = temp_output_154_0_g171035;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
						v.vertex.xyz = vertexValue;
					#else
						v.vertex.xyz += vertexValue;
					#endif
					v.vertex.w = 1;
					v.normal = Out_NormalOS15_g171037;
					v.tangent = Out_TangentOS15_g171037;

					#ifdef EDITOR_VISUALIZATION
						o.vizUV = 0;
						o.lightCoord = 0;
						if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
							o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
						else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
						{
							o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
							o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
						}
					#endif

					o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);
					return o;
				}

				#if defined(ASE_TESSELLATION)
				struct VertexControl
				{
					float4 vertex : INTERNALTESSPOS;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;

					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct TessellationFactors
				{
					float edge[3] : SV_TessFactor;
					float inside : SV_InsideTessFactor;
				};

				VertexControl vert ( appdata v )
				{
					VertexControl o;
					UNITY_SETUP_INSTANCE_ID(v);
					UNITY_TRANSFER_INSTANCE_ID(v, o);
					o.vertex = v.vertex;
					o.tangent = v.tangent;
					o.normal = v.normal;
					o.texcoord1 = v.texcoord1;
					o.texcoord2 = v.texcoord2;
					o.texcoord = v.texcoord;
					o.ase_texcoord3 = v.ase_texcoord3;
					o.ase_color = v.ase_color;
					return o;
				}

				TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
				{
					TessellationFactors o;
					float4 tf = 1;
					float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
					float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
					#if defined(ASE_FIXED_TESSELLATION)
					tf = FixedTess( tessValue );
					#elif defined(ASE_DISTANCE_TESSELLATION)
					tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
					#elif defined(ASE_LENGTH_TESSELLATION)
					tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
					#elif defined(ASE_LENGTH_CULL_TESSELLATION)
					tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
					#endif
					o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
					return o;
				}

				[domain("tri")]
				[partitioning("fractional_odd")]
				[outputtopology("triangle_cw")]
				[patchconstantfunc("TessellationFunction")]
				[outputcontrolpoints(3)]
				VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
				{
				   return patch[id];
				}

				[domain("tri")]
				v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
				{
					appdata o = (appdata) 0;
					o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
					o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
					o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
					o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
					o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
					o.texcoord = patch[0].texcoord * bary.x + patch[1].texcoord * bary.y + patch[2].texcoord * bary.z;
					o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
					o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
					#if defined(ASE_PHONG_TESSELLATION)
					float3 pp[3];
					for (int i = 0; i < 3; ++i)
						pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
					float phongStrength = _TessPhongStrength;
					o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
					#endif
					UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
					return VertexFunction(o);
				}
				#else
				v2f vert( appdata v )
				{
					return VertexFunction( v );
				}
				#endif

				half4 frag( v2f IN  ) : SV_Target
				{
					UNITY_SETUP_INSTANCE_ID(IN);

					#ifdef LOD_FADE_CROSSFADE
						UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
					#endif

					#if defined(ASE_LIGHTING_SIMPLE)
						SurfaceOutput o = (SurfaceOutput)0;
					#else
						#if defined(_SPECULAR_SETUP)
							SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
						#else
							SurfaceOutputStandard o = (SurfaceOutputStandard)0;
						#endif
					#endif

					float localBreakData4_g171040 = ( 0.0 );
					float localCompData3_g171015 = ( 0.0 );
					TVEVisualData Data3_g171015 = (TVEVisualData)0;
					half Dummy145_g171013 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
					float In_Dummy3_g171015 = Dummy145_g171013;
					float localBreakData4_g171014 = ( 0.0 );
					float localCompData3_g170995 = ( 0.0 );
					TVEVisualData Data3_g170995 = (TVEVisualData)0;
					half Dummy145_g170980 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
					float In_Dummy3_g170995 = Dummy145_g170980;
					float localBreakData4_g170984 = ( 0.0 );
					float localCompData3_g170958 = ( 0.0 );
					TVEVisualData Data3_g170958 = (TVEVisualData)0;
					half Dummy594_g170955 = ( _DitherCategory + _DitherEnd );
					float In_Dummy3_g170958 = Dummy594_g170955;
					float localBreakData4_g170957 = ( 0.0 );
					float localCompData3_g170939 = ( 0.0 );
					TVEVisualData Data3_g170939 = (TVEVisualData)0;
					half Dummy594_g170938 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
					float In_Dummy3_g170939 = Dummy594_g170938;
					float localBreakData4_g170941 = ( 0.0 );
					float localCompData3_g170911 = ( 0.0 );
					TVEVisualData Data3_g170911 = (TVEVisualData)0;
					half Dummy594_g170909 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
					float In_Dummy3_g170911 = Dummy594_g170909;
					float localBreakData4_g170910 = ( 0.0 );
					float localCompData3_g170875 = ( 0.0 );
					TVEVisualData Data3_g170875 = (TVEVisualData)0;
					half Dummy594_g170872 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
					float In_Dummy3_g170875 = Dummy594_g170872;
					float localBreakData4_g170873 = ( 0.0 );
					float localCompData3_g170871 = ( 0.0 );
					TVEVisualData Data3_g170871 = (TVEVisualData)0;
					float In_Dummy3_g170871 = 0.0;
					float localBreakData4_g170870 = ( 0.0 );
					float localCompData3_g170848 = ( 0.0 );
					TVEVisualData Data3_g170848 = (TVEVisualData)0;
					half Dummy205_g170845 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
					float In_Dummy3_g170848 = Dummy205_g170845;
					float localBreakData4_g170847 = ( 0.0 );
					float localCompData3_g170840 = ( 0.0 );
					TVEVisualData Data3_g170840 = (TVEVisualData)0;
					half Dummy205_g170820 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
					float In_Dummy3_g170840 = Dummy205_g170820;
					float localBreakData4_g170824 = ( 0.0 );
					float localCompData3_g170810 = ( 0.0 );
					TVEVisualData Data3_g170810 = (TVEVisualData)0;
					half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
					float In_Dummy3_g170810 = Dummy220_g170808;
					float localBreakData4_g170809 = ( 0.0 );
					float localCompData3_g170801 = ( 0.0 );
					TVEVisualData Data3_g170801 = (TVEVisualData)0;
					half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
					float In_Dummy3_g170801 = Dummy220_g170798;
					float localBreakData4_g170800 = ( 0.0 );
					float localCompData3_g170790 = ( 0.0 );
					TVEVisualData Data3_g170790 = (TVEVisualData)0;
					half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
					float In_Dummy3_g170790 = Dummy202_g170788;
					float localBreakData4_g170789 = ( 0.0 );
					float localCompData3_g170695 = ( 0.0 );
					TVEVisualData Data3_g170695 = (TVEVisualData)0;
					half4 Dummy944_g170687 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
					float In_Dummy3_g170695 = Dummy944_g170687.x;
					float localBreakData4_g170694 = ( 0.0 );
					float localCompData3_g170656 = ( 0.0 );
					TVEVisualData Data3_g170656 = (TVEVisualData)0;
					half4 Dummy946_g170638 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
					float In_Dummy3_g170656 = Dummy946_g170638.x;
					float localBreakData4_g170646 = ( 0.0 );
					float localCompData3_g170628 = ( 0.0 );
					TVEVisualData Data3_g170628 = (TVEVisualData)0;
					half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
					float In_Dummy3_g170628 = Dummy130_g170617.x;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170621) = _MainAlbedoTex;
					float localFilterTexture19_g170624 = ( 0.0 );
					SamplerState SS19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170624 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170624 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170624 = SamplerDefault19_g170624;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170624 = SamplerDefault19_g170624;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170624 = SamplerPoint19_g170624;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170624 = SamplerLow19_g170624;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170624 = SamplerMedium19_g170624;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170624 = SamplerHigh19_g170624;
					#endif
					}
					SamplerState Sampler276_g170621 = SS19_g170624;
					half4 Local_Coords180_g170617 = _main_coord_value;
					float4 temp_output_37_0_g170621 = Local_Coords180_g170617;
					half4 Coords276_g170621 = temp_output_37_0_g170621;
					half2 TexCoord276_g170621 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170621 = SampleMain( Texture276_g170621 , Sampler276_g170621 , Coords276_g170621 , TexCoord276_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170621) = _MainAlbedoTex;
					SamplerState Sampler275_g170621 = SS19_g170624;
					half4 Coords275_g170621 = temp_output_37_0_g170621;
					half2 TexCoord275_g170621 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170621 = SampleExtra( Texture275_g170621 , Sampler275_g170621 , Coords275_g170621 , TexCoord275_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170621) = _MainAlbedoTex;
					SamplerState Sampler238_g170621 = SS19_g170624;
					half4 Coords238_g170621 = temp_output_37_0_g170621;
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 vertexToFrag73_g170478 = IN.ase_texcoord5.xyz;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 vertexToFrag76_g170478 = IN.ase_texcoord6.xyz;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 ase_normalWS = IN.ase_texcoord7.xyz;
					float3 normalizedWorldNormal = normalize( ase_normalWS );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = IN.ase_color;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170627 = Data16_g170483;
					float Out_Dummy15_g170627 = 0;
					float3 Out_PositionWS15_g170627 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170627 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170627 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170627 = float3( 0,0,0 );
					float4 Out_VertexData15_g170627 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170627 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170627 = Data15_g170627.Dummy;
					Out_PositionWS15_g170627 = Data15_g170627.PositionWS;
					Out_PositionWO15_g170627 = Data15_g170627.PositionWO;
					Out_PivotWS15_g170627 = Data15_g170627.PivotWS;
					Out_PivotWO15_g170627 = Data15_g170627.PivotWO;
					Out_NormalWS15_g170627 = Data15_g170627.NormalWS;
					Out_ViewDirWS15_g170627 = Data15_g170627.ViewDirWS;
					Out_VertexData15_g170627 = Data15_g170627.VertexData;
					Out_BoundsData15_g170627 = Data15_g170627.BoundsData;
					}
					half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170627;
					float3 temp_output_279_0_g170621 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
					half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170621) = _MainAlbedoTex;
					SamplerState Sampler246_g170621 = SS19_g170624;
					half4 Coords246_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
					half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170627;
					float3 temp_output_280_0_g170621 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
					half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170621) = _MainAlbedoTex;
					SamplerState Sampler234_g170621 = SS19_g170624;
					float4 Coords234_g170621 = temp_output_37_0_g170621;
					float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
					float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170621) = _MainAlbedoTex;
					SamplerState Sampler263_g170621 = SS19_g170624;
					half4 Coords263_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
					half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
					half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch184_g170617 = localSampleExtra275_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170621;
					#else
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#endif
					half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
					float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
					half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170623) = _MainShaderTex;
					float localFilterTexture30_g170626 = ( 0.0 );
					SamplerState SS30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170626 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170626 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170626 = SamplerDefault30_g170626;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170626 = SamplerDefault30_g170626;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170626 = SamplerPoint30_g170626;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170626 = SamplerLow30_g170626;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170626 = SamplerMedium30_g170626;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170626 = SamplerHigh30_g170626;
					#endif
					}
					SamplerState Sampler276_g170623 = SS30_g170626;
					float4 temp_output_37_0_g170623 = Local_Coords180_g170617;
					half4 Coords276_g170623 = temp_output_37_0_g170623;
					half2 TexCoord276_g170623 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170623 = SampleMain( Texture276_g170623 , Sampler276_g170623 , Coords276_g170623 , TexCoord276_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170623) = _MainShaderTex;
					SamplerState Sampler275_g170623 = SS30_g170626;
					half4 Coords275_g170623 = temp_output_37_0_g170623;
					half2 TexCoord275_g170623 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170623 = SampleExtra( Texture275_g170623 , Sampler275_g170623 , Coords275_g170623 , TexCoord275_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170623) = _MainShaderTex;
					SamplerState Sampler238_g170623 = SS30_g170626;
					half4 Coords238_g170623 = temp_output_37_0_g170623;
					float3 temp_output_279_0_g170623 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170623 = temp_output_279_0_g170623;
					half4 localSamplePlanar2D238_g170623 = SamplePlanar2D( Texture238_g170623 , Sampler238_g170623 , Coords238_g170623 , WorldPosition238_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170623) = _MainShaderTex;
					SamplerState Sampler246_g170623 = SS30_g170626;
					half4 Coords246_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition246_g170623 = temp_output_279_0_g170623;
					float3 temp_output_280_0_g170623 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170623 = temp_output_280_0_g170623;
					half4 localSamplePlanar3D246_g170623 = SamplePlanar3D( Texture246_g170623 , Sampler246_g170623 , Coords246_g170623 , WorldPosition246_g170623 , WorldNormal246_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170623) = _MainShaderTex;
					SamplerState Sampler234_g170623 = SS30_g170626;
					float4 Coords234_g170623 = temp_output_37_0_g170623;
					float3 WorldPosition234_g170623 = temp_output_279_0_g170623;
					float4 localSampleStochastic2D234_g170623 = SampleStochastic2D( Texture234_g170623 , Sampler234_g170623 , Coords234_g170623 , WorldPosition234_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170623) = _MainShaderTex;
					SamplerState Sampler263_g170623 = SS30_g170626;
					half4 Coords263_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition263_g170623 = temp_output_279_0_g170623;
					half3 WorldNormal263_g170623 = temp_output_280_0_g170623;
					half4 localSampleStochastic3D263_g170623 = SampleStochastic3D( Texture263_g170623 , Sampler263_g170623 , Coords263_g170623 , WorldPosition263_g170623 , WorldNormal263_g170623 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch198_g170617 = localSampleExtra275_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170623;
					#else
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#endif
					half4 Local_ShaderTex199_g170617 = staticSwitch198_g170617;
					float clampResult17_g170635 = clamp( (Local_ShaderTex199_g170617).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170634 = _MainOcclusionRemap.x;
					float temp_output_9_0_g170634 = ( clampResult17_g170635 - temp_output_7_0_g170634 );
					float lerpResult23_g170617 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170634 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
					half Local_Occlusion313_g170617 = lerpResult23_g170617;
					float clampResult17_g170637 = clamp( (Local_ShaderTex199_g170617).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170636 = _MainSmoothnessRemap.x;
					float temp_output_9_0_g170636 = ( clampResult17_g170637 - temp_output_7_0_g170636 );
					half Local_Smoothness317_g170617 = ( saturate( ( ( temp_output_9_0_g170636 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
					float4 appendResult73_g170617 = (float4(( (Local_ShaderTex199_g170617).x * _MainMetallicValue ) , Local_Occlusion313_g170617 , (Local_ShaderTex199_g170617).z , Local_Smoothness317_g170617));
					half4 Local_Masks109_g170617 = appendResult73_g170617;
					float clampResult17_g170632 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170633 = _MainMultiRemap.x;
					float temp_output_9_0_g170633 = ( clampResult17_g170632 - temp_output_7_0_g170633 );
					half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
					float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
					float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
					half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
					half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
					float3 In_Albedo3_g170628 = Local_Albedo139_g170617;
					float3 In_AlbedoRaw3_g170628 = Local_Albedo139_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170622) = _MainNormalTex;
					float localFilterTexture29_g170625 = ( 0.0 );
					SamplerState SS29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170625 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170625 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170625 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170625 = SamplerDefault29_g170625;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170625 = SamplerDefault29_g170625;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170625 = SamplerPoint29_g170625;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170625 = SamplerLow29_g170625;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170625 = SamplerMedium29_g170625;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170625 = SamplerHigh29_g170625;
					#endif
					}
					SamplerState Sampler276_g170622 = SS29_g170625;
					float4 temp_output_37_0_g170622 = Local_Coords180_g170617;
					half4 Coords276_g170622 = temp_output_37_0_g170622;
					half2 TexCoord276_g170622 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170622 = SampleMain( Texture276_g170622 , Sampler276_g170622 , Coords276_g170622 , TexCoord276_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170622) = _MainNormalTex;
					SamplerState Sampler275_g170622 = SS29_g170625;
					half4 Coords275_g170622 = temp_output_37_0_g170622;
					half2 TexCoord275_g170622 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170622 = SampleExtra( Texture275_g170622 , Sampler275_g170622 , Coords275_g170622 , TexCoord275_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170622) = _MainNormalTex;
					SamplerState Sampler238_g170622 = SS29_g170625;
					half4 Coords238_g170622 = temp_output_37_0_g170622;
					float3 temp_output_279_0_g170622 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170622 = temp_output_279_0_g170622;
					half4 localSamplePlanar2D238_g170622 = SamplePlanar2D( Texture238_g170622 , Sampler238_g170622 , Coords238_g170622 , WorldPosition238_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170622) = _MainNormalTex;
					SamplerState Sampler246_g170622 = SS29_g170625;
					half4 Coords246_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition246_g170622 = temp_output_279_0_g170622;
					float3 temp_output_280_0_g170622 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170622 = temp_output_280_0_g170622;
					half4 localSamplePlanar3D246_g170622 = SamplePlanar3D( Texture246_g170622 , Sampler246_g170622 , Coords246_g170622 , WorldPosition246_g170622 , WorldNormal246_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170622) = _MainNormalTex;
					SamplerState Sampler234_g170622 = SS29_g170625;
					float4 Coords234_g170622 = temp_output_37_0_g170622;
					float3 WorldPosition234_g170622 = temp_output_279_0_g170622;
					float4 localSampleStochastic2D234_g170622 = SampleStochastic2D( Texture234_g170622 , Sampler234_g170622 , Coords234_g170622 , WorldPosition234_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170622) = _MainNormalTex;
					SamplerState Sampler263_g170622 = SS29_g170625;
					half4 Coords263_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition263_g170622 = temp_output_279_0_g170622;
					half3 WorldNormal263_g170622 = temp_output_280_0_g170622;
					half4 localSampleStochastic3D263_g170622 = SampleStochastic3D( Texture263_g170622 , Sampler263_g170622 , Coords263_g170622 , WorldPosition263_g170622 , WorldNormal263_g170622 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch193_g170617 = localSampleExtra275_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170622;
					#else
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#endif
					half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
					half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
					float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
					half2 Normal_Default50_g170618 = appendResult58_g170618;
					half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
					#else
					float2 staticSwitch38_g170618 = Normal_Default50_g170618;
					#endif
					half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
					#else
					float2 staticSwitch37_g170618 = staticSwitch38_g170618;
					#endif
					float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
					float3 ase_tangentWS = IN.ase_texcoord8.xyz;
					float3 ase_bitangentWS = IN.ase_texcoord9.xyz;
					float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
					half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
					float2 break71_g170619 = Normal_Planar45_g170619;
					float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
					float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#else
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#endif
					half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
					float2 In_NormalTS3_g170628 = Local_NormalTS108_g170617;
					float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
					float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
					float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
					float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
					float3 tanNormal74_g170620 = appendResult68_g170620;
					float3 worldNormal74_g170620 = normalize( float3( dot( tanToWorld0, tanNormal74_g170620 ), dot( tanToWorld1, tanNormal74_g170620 ), dot( tanToWorld2, tanNormal74_g170620 ) ) );
					half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
					float3 In_NormalWS3_g170628 = Local_NormalWS250_g170617;
					float4 In_Shader3_g170628 = Local_Masks109_g170617;
					float4 In_Emissive3_g170628 = half4( 1, 1, 1, 1 );
					float3 temp_output_3_0_g170629 = Local_Albedo139_g170617;
					float dotResult20_g170629 = dot( temp_output_3_0_g170629 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Local_Grayscale110_g170617 = dotResult20_g170629;
					float In_Grayscale3_g170628 = Local_Grayscale110_g170617;
					float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
					half Local_Luminosity145_g170617 = clampResult144_g170617;
					float In_Luminosity3_g170628 = Local_Luminosity145_g170617;
					float In_MultiMask3_g170628 = Local_MultiMask78_g170617;
					float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
					#else
					float staticSwitch236_g170617 = temp_output_187_0_g170617;
					#endif
					half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
					float In_AlphaClip3_g170628 = Local_AlphaClip111_g170617;
					half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
					float In_AlphaFade3_g170628 = Local_AlphaFade246_g170617;
					float3 temp_cast_4 = (1.0).xxx;
					float3 In_Translucency3_g170628 = temp_cast_4;
					float In_Transmission3_g170628 = 1.0;
					float In_Thickness3_g170628 = 0.0;
					float In_Diffusion3_g170628 = 0.0;
					float In_Depth3_g170628 = 0.0;
					{
					Data3_g170628.Dummy = In_Dummy3_g170628;
					Data3_g170628.Albedo = In_Albedo3_g170628;
					Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
					Data3_g170628.NormalTS = In_NormalTS3_g170628;
					Data3_g170628.NormalWS = In_NormalWS3_g170628;
					Data3_g170628.Shader = In_Shader3_g170628;
					Data3_g170628.Emissive= In_Emissive3_g170628;
					Data3_g170628.MultiMask = In_MultiMask3_g170628;
					Data3_g170628.Grayscale = In_Grayscale3_g170628;
					Data3_g170628.Luminosity = In_Luminosity3_g170628;
					Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
					Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
					Data3_g170628.Translucency = In_Translucency3_g170628;
					Data3_g170628.Transmission = In_Transmission3_g170628;
					Data3_g170628.Thickness = In_Thickness3_g170628;
					Data3_g170628.Diffusion = In_Diffusion3_g170628;
					Data3_g170628.Depth = In_Depth3_g170628;
					}
					TVEVisualData Data4_g170646 = Data3_g170628;
					float Out_Dummy4_g170646 = 0;
					float3 Out_Albedo4_g170646 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170646 = float2( 0,0 );
					float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
					float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170646 = 0;
					float Out_Grayscale4_g170646 = 0;
					float Out_Luminosity4_g170646 = 0;
					float Out_AlphaClip4_g170646 = 0;
					float Out_AlphaFade4_g170646 = 0;
					float3 Out_Translucency4_g170646 = float3( 0,0,0 );
					float Out_Transmission4_g170646 = 0;
					float Out_Thickness4_g170646 = 0;
					float Out_Diffusion4_g170646 = 0;
					float Out_Depth4_g170646 = 0;
					{
					Out_Dummy4_g170646 = Data4_g170646.Dummy;
					Out_Albedo4_g170646 = Data4_g170646.Albedo;
					Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
					Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
					Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
					Out_Shader4_g170646 = Data4_g170646.Shader;
					Out_Emissive4_g170646= Data4_g170646.Emissive;
					Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
					Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
					Out_Luminosity4_g170646= Data4_g170646.Luminosity;
					Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
					Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
					Out_Translucency4_g170646 = Data4_g170646.Translucency;
					Out_Transmission4_g170646 = Data4_g170646.Transmission;
					Out_Thickness4_g170646 = Data4_g170646.Thickness;
					Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
					Out_Depth4_g170646= Data4_g170646.Depth;
					}
					half3 Visual_Albedo527_g170638 = Out_Albedo4_g170646;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170639) = _SecondAlbedoTex;
					float localFilterTexture19_g170652 = ( 0.0 );
					SamplerState SS19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170652 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170652 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170652 = SamplerDefault19_g170652;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170652 = SamplerDefault19_g170652;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170652 = SamplerPoint19_g170652;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170652 = SamplerLow19_g170652;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170652 = SamplerMedium19_g170652;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170652 = SamplerHigh19_g170652;
					#endif
					}
					SamplerState Sampler276_g170639 = SS19_g170652;
					half4 Local_LayerCoords790_g170638 = _second_coord_value;
					float4 temp_output_37_0_g170639 = Local_LayerCoords790_g170638;
					half4 Coords276_g170639 = temp_output_37_0_g170639;
					half2 TexCoord276_g170639 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170639 = SampleMain( Texture276_g170639 , Sampler276_g170639 , Coords276_g170639 , TexCoord276_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170639) = _SecondAlbedoTex;
					SamplerState Sampler275_g170639 = SS19_g170652;
					half4 Coords275_g170639 = temp_output_37_0_g170639;
					half2 TexCoord275_g170639 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170639 = SampleExtra( Texture275_g170639 , Sampler275_g170639 , Coords275_g170639 , TexCoord275_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170639) = _SecondAlbedoTex;
					SamplerState Sampler238_g170639 = SS19_g170652;
					half4 Coords238_g170639 = temp_output_37_0_g170639;
					TVEModelData Data15_g170655 = Data16_g170483;
					float Out_Dummy15_g170655 = 0;
					float3 Out_PositionWS15_g170655 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170655 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170655 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170655 = float3( 0,0,0 );
					float4 Out_VertexData15_g170655 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170655 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170655 = Data15_g170655.Dummy;
					Out_PositionWS15_g170655 = Data15_g170655.PositionWS;
					Out_PositionWO15_g170655 = Data15_g170655.PositionWO;
					Out_PivotWS15_g170655 = Data15_g170655.PivotWS;
					Out_PivotWO15_g170655 = Data15_g170655.PivotWO;
					Out_NormalWS15_g170655 = Data15_g170655.NormalWS;
					Out_ViewDirWS15_g170655 = Data15_g170655.ViewDirWS;
					Out_VertexData15_g170655 = Data15_g170655.VertexData;
					Out_BoundsData15_g170655 = Data15_g170655.BoundsData;
					}
					half3 Model_PositionWO636_g170638 = Out_PositionWO15_g170655;
					float3 temp_output_279_0_g170639 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170639 = temp_output_279_0_g170639;
					half4 localSamplePlanar2D238_g170639 = SamplePlanar2D( Texture238_g170639 , Sampler238_g170639 , Coords238_g170639 , WorldPosition238_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170639) = _SecondAlbedoTex;
					SamplerState Sampler246_g170639 = SS19_g170652;
					half4 Coords246_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition246_g170639 = temp_output_279_0_g170639;
					half3 Model_NormalWS869_g170638 = Out_NormalWS15_g170655;
					float3 temp_output_280_0_g170639 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170639 = temp_output_280_0_g170639;
					half4 localSamplePlanar3D246_g170639 = SamplePlanar3D( Texture246_g170639 , Sampler246_g170639 , Coords246_g170639 , WorldPosition246_g170639 , WorldNormal246_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170639) = _SecondAlbedoTex;
					SamplerState Sampler234_g170639 = SS19_g170652;
					float4 Coords234_g170639 = temp_output_37_0_g170639;
					float3 WorldPosition234_g170639 = temp_output_279_0_g170639;
					float4 localSampleStochastic2D234_g170639 = SampleStochastic2D( Texture234_g170639 , Sampler234_g170639 , Coords234_g170639 , WorldPosition234_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170639) = _SecondAlbedoTex;
					SamplerState Sampler263_g170639 = SS19_g170652;
					half4 Coords263_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition263_g170639 = temp_output_279_0_g170639;
					half3 WorldNormal263_g170639 = temp_output_280_0_g170639;
					half4 localSampleStochastic3D263_g170639 = SampleStochastic3D( Texture263_g170639 , Sampler263_g170639 , Coords263_g170639 , WorldPosition263_g170639 , WorldNormal263_g170639 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170638 = localSampleExtra275_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170638 = localSamplePlanar2D238_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170638 = localSamplePlanar3D246_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170638 = localSampleStochastic2D234_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170638 = localSampleStochastic3D263_g170639;
					#else
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#endif
					half4 Local_AlbedoTex777_g170638 = staticSwitch693_g170638;
					float3 lerpResult716_g170638 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170638).xyz , _SecondAlbedoValue);
					half3 Local_AlbedoRGB771_g170638 = lerpResult716_g170638;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170641) = _SecondShaderTex;
					float localFilterTexture30_g170654 = ( 0.0 );
					SamplerState SS30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170654 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170654 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170654 = SamplerDefault30_g170654;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170654 = SamplerDefault30_g170654;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170654 = SamplerPoint30_g170654;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170654 = SamplerLow30_g170654;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170654 = SamplerMedium30_g170654;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170654 = SamplerHigh30_g170654;
					#endif
					}
					SamplerState Sampler276_g170641 = SS30_g170654;
					float4 temp_output_37_0_g170641 = Local_LayerCoords790_g170638;
					half4 Coords276_g170641 = temp_output_37_0_g170641;
					half2 TexCoord276_g170641 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170641 = SampleMain( Texture276_g170641 , Sampler276_g170641 , Coords276_g170641 , TexCoord276_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170641) = _SecondShaderTex;
					SamplerState Sampler275_g170641 = SS30_g170654;
					half4 Coords275_g170641 = temp_output_37_0_g170641;
					half2 TexCoord275_g170641 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170641 = SampleExtra( Texture275_g170641 , Sampler275_g170641 , Coords275_g170641 , TexCoord275_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170641) = _SecondShaderTex;
					SamplerState Sampler238_g170641 = SS30_g170654;
					half4 Coords238_g170641 = temp_output_37_0_g170641;
					float3 temp_output_279_0_g170641 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170641 = temp_output_279_0_g170641;
					half4 localSamplePlanar2D238_g170641 = SamplePlanar2D( Texture238_g170641 , Sampler238_g170641 , Coords238_g170641 , WorldPosition238_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170641) = _SecondShaderTex;
					SamplerState Sampler246_g170641 = SS30_g170654;
					half4 Coords246_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition246_g170641 = temp_output_279_0_g170641;
					float3 temp_output_280_0_g170641 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170641 = temp_output_280_0_g170641;
					half4 localSamplePlanar3D246_g170641 = SamplePlanar3D( Texture246_g170641 , Sampler246_g170641 , Coords246_g170641 , WorldPosition246_g170641 , WorldNormal246_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170641) = _SecondShaderTex;
					SamplerState Sampler234_g170641 = SS30_g170654;
					float4 Coords234_g170641 = temp_output_37_0_g170641;
					float3 WorldPosition234_g170641 = temp_output_279_0_g170641;
					float4 localSampleStochastic2D234_g170641 = SampleStochastic2D( Texture234_g170641 , Sampler234_g170641 , Coords234_g170641 , WorldPosition234_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170641) = _SecondShaderTex;
					SamplerState Sampler263_g170641 = SS30_g170654;
					half4 Coords263_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition263_g170641 = temp_output_279_0_g170641;
					half3 WorldNormal263_g170641 = temp_output_280_0_g170641;
					half4 localSampleStochastic3D263_g170641 = SampleStochastic3D( Texture263_g170641 , Sampler263_g170641 , Coords263_g170641 , WorldPosition263_g170641 , WorldNormal263_g170641 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170638 = localSampleExtra275_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170638 = localSamplePlanar2D238_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170638 = localSamplePlanar3D246_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170638 = localSampleStochastic2D234_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170638 = localSampleStochastic3D263_g170641;
					#else
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#endif
					half4 Local_ShaderTex775_g170638 = staticSwitch722_g170638;
					float clampResult17_g170672 = clamp( (Local_ShaderTex775_g170638).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170671 = _SecondOcclusionRemap.x;
					float temp_output_9_0_g170671 = ( clampResult17_g170672 - temp_output_7_0_g170671 );
					float lerpResult1058_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170671 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
					half Local_Occlusion1067_g170638 = lerpResult1058_g170638;
					float clampResult17_g170674 = clamp( (Local_ShaderTex775_g170638).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170673 = _SecondSmoothnessRemap.x;
					float temp_output_9_0_g170673 = ( clampResult17_g170674 - temp_output_7_0_g170673 );
					half Local_Smoothness1068_g170638 = ( saturate( ( ( temp_output_9_0_g170673 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
					float4 appendResult749_g170638 = (float4(( (Local_ShaderTex775_g170638).x * _SecondMetallicValue ) , Local_Occlusion1067_g170638 , (Local_ShaderTex775_g170638).z , Local_Smoothness1068_g170638));
					half4 Local_Masks750_g170638 = appendResult749_g170638;
					float clampResult17_g170675 = clamp( (Local_Masks750_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170678 = _SecondMultiRemap.x;
					float temp_output_9_0_g170678 = ( clampResult17_g170675 - temp_output_7_0_g170678 );
					float temp_output_765_0_g170638 = saturate( ( ( temp_output_9_0_g170678 * _SecondMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170638 = temp_output_765_0_g170638;
					float lerpResult705_g170638 = lerp( 1.0 , Local_MultiMask767_g170638 , _SecondColorMode);
					float4 lerpResult706_g170638 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170638);
					half3 Local_ColorRGB774_g170638 = (lerpResult706_g170638).rgb;
					half3 Local_Albedo768_g170638 = ( Local_AlbedoRGB771_g170638 * Local_ColorRGB774_g170638 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170649 = 2.0;
					#else
					float staticSwitch1_g170649 = 4.594794;
					#endif
					float3 lerpResult985_g170638 = lerp( Local_Albedo768_g170638 , ( Visual_Albedo527_g170638 * Local_Albedo768_g170638 * staticSwitch1_g170649 ) , _SecondBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170642) = _SecondMaskTex;
					SamplerState Sampler276_g170642 = sampler_Linear_Repeat;
					half4 Local_BlendCoords813_g170638 = _second_mask_coord_value;
					float4 temp_output_37_0_g170642 = Local_BlendCoords813_g170638;
					half4 Coords276_g170642 = temp_output_37_0_g170642;
					half2 TexCoord276_g170642 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170642 = SampleMain( Texture276_g170642 , Sampler276_g170642 , Coords276_g170642 , TexCoord276_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170642) = _SecondMaskTex;
					SamplerState Sampler275_g170642 = sampler_Linear_Repeat;
					half4 Coords275_g170642 = temp_output_37_0_g170642;
					half2 TexCoord275_g170642 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170642 = SampleExtra( Texture275_g170642 , Sampler275_g170642 , Coords275_g170642 , TexCoord275_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170642) = _SecondMaskTex;
					SamplerState Sampler238_g170642 = sampler_Linear_Repeat;
					half4 Coords238_g170642 = temp_output_37_0_g170642;
					float3 temp_output_279_0_g170642 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170642 = temp_output_279_0_g170642;
					half4 localSamplePlanar2D238_g170642 = SamplePlanar2D( Texture238_g170642 , Sampler238_g170642 , Coords238_g170642 , WorldPosition238_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170642) = _SecondMaskTex;
					SamplerState Sampler246_g170642 = sampler_Linear_Repeat;
					half4 Coords246_g170642 = temp_output_37_0_g170642;
					half3 WorldPosition246_g170642 = temp_output_279_0_g170642;
					float3 temp_output_280_0_g170642 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170642 = temp_output_280_0_g170642;
					half4 localSamplePlanar3D246_g170642 = SamplePlanar3D( Texture246_g170642 , Sampler246_g170642 , Coords246_g170642 , WorldPosition246_g170642 , WorldNormal246_g170642 );
					#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170638 = localSampleExtra275_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170638 = localSamplePlanar2D238_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170638 = localSamplePlanar3D246_g170642;
					#else
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#endif
					half4 Local_MaskTex861_g170638 = staticSwitch817_g170638;
					float clampResult17_g170658 = clamp( (Local_MaskTex861_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170662 = _SecondMaskRemap.x;
					float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
					float lerpResult1015_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
					half Blend_TexMask429_g170638 = lerpResult1015_g170638;
					half Visual_Luminosity1041_g170638 = Out_Luminosity4_g170646;
					float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170638 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170668 = _SecondLumaRemap.x;
					float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
					float lerpResult1036_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
					half Blend_LumaMask1033_g170638 = lerpResult1036_g170638;
					half3 Visual_NormalWS951_g170638 = Out_NormalWS4_g170646;
					float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170638).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170665 = _SecondProjRemap.x;
					float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
					float lerpResult996_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
					half Blend_ProjMask434_g170638 = lerpResult996_g170638;
					half4 Model_VertexMasks964_g170638 = Out_VertexData15_g170655;
					float4 break965_g170638 = Model_VertexMasks964_g170638;
					float4 break33_g170659 = _second_vert_mode;
					float temp_output_30_0_g170659 = ( break965_g170638.x * break33_g170659.x );
					float temp_output_29_0_g170659 = ( break965_g170638.y * break33_g170659.y );
					float temp_output_31_0_g170659 = ( break965_g170638.z * break33_g170659.z );
					float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170638.w * break33_g170659.w ) );
					float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170661 = _SecondMeshRemap.x;
					float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
					float lerpResult1017_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
					float temp_output_6_0_g170660 = lerpResult1017_g170638;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + _SecondMeshMode );
					#else
					float staticSwitch14_g170660 = temp_output_6_0_g170660;
					#endif
					half Blend_VertMask918_g170638 = staticSwitch14_g170660;
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170645 = Data204_g170496;
					float Out_Dummy15_g170645 = 0;
					float4 Out_CoatDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170645 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170645 = Data15_g170645.Dummy;
					Out_CoatDataRT15_g170645 = Data15_g170645.CoatDataRT;
					Out_PaintDataRT15_g170645 = Data15_g170645.PaintDataRT;
					Out_GlowDataRT15_g170645= Data15_g170645.GlowDataRT;
					Out_AtmoDataRT15_g170645= Data15_g170645.AtmoDataRT;
					Out_FadeDataRT15_g170645= Data15_g170645.FadeDataRT;
					Out_FormDataRT15_g170645 = Data15_g170645.FormDataRT;
					Out_FlowDataRT15_g170645 = Data15_g170645.FlowDataRT;
					}
					half4 Global_CoatParams975_g170638 = Out_CoatDataRT15_g170645;
					float temp_output_6_0_g170669 = (Global_CoatParams975_g170638).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + _SecondElementMode );
					#else
					float staticSwitch14_g170669 = temp_output_6_0_g170669;
					#endif
					#ifdef TVE_SECOND_ELEMENT
					float staticSwitch971_g170638 = staticSwitch14_g170669;
					#else
					float staticSwitch971_g170638 = TVE_CoatParams.z;
					#endif
					float lerpResult1013_g170638 = lerp( 1.0 , staticSwitch971_g170638 , ( _SecondGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask972_g170638 = lerpResult1013_g170638;
					float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170638 * Blend_LumaMask1033_g170638 * Blend_ProjMask434_g170638 * Blend_VertMask918_g170638 * Blend_GlobalMask972_g170638 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170666 = _SecondBlendRemap.x;
					float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
					half Blend_Mask412_g170638 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
					float3 lerpResult403_g170638 = lerp( Visual_Albedo527_g170638 , lerpResult985_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float3 staticSwitch415_g170638 = lerpResult403_g170638;
					#else
					float3 staticSwitch415_g170638 = Visual_Albedo527_g170638;
					#endif
					half3 Final_Albedo601_g170638 = staticSwitch415_g170638;
					float3 In_Albedo3_g170656 = Final_Albedo601_g170638;
					float3 In_AlbedoRaw3_g170656 = Final_Albedo601_g170638;
					half2 Visual_NormalTS529_g170638 = Out_NormalTS4_g170646;
					float2 lerpResult40_g170647 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170638 , _SecondBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170640) = _SecondNormalTex;
					float localFilterTexture29_g170653 = ( 0.0 );
					SamplerState SS29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170653 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170653 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170653 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170653 = SamplerDefault29_g170653;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170653 = SamplerDefault29_g170653;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170653 = SamplerPoint29_g170653;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170653 = SamplerLow29_g170653;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170653 = SamplerMedium29_g170653;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170653 = SamplerHigh29_g170653;
					#endif
					}
					SamplerState Sampler276_g170640 = SS29_g170653;
					float4 temp_output_37_0_g170640 = Local_LayerCoords790_g170638;
					half4 Coords276_g170640 = temp_output_37_0_g170640;
					half2 TexCoord276_g170640 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170640 = SampleMain( Texture276_g170640 , Sampler276_g170640 , Coords276_g170640 , TexCoord276_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170640) = _SecondNormalTex;
					SamplerState Sampler275_g170640 = SS29_g170653;
					half4 Coords275_g170640 = temp_output_37_0_g170640;
					half2 TexCoord275_g170640 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170640 = SampleExtra( Texture275_g170640 , Sampler275_g170640 , Coords275_g170640 , TexCoord275_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170640) = _SecondNormalTex;
					SamplerState Sampler238_g170640 = SS29_g170653;
					half4 Coords238_g170640 = temp_output_37_0_g170640;
					float3 temp_output_279_0_g170640 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170640 = temp_output_279_0_g170640;
					half4 localSamplePlanar2D238_g170640 = SamplePlanar2D( Texture238_g170640 , Sampler238_g170640 , Coords238_g170640 , WorldPosition238_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170640) = _SecondNormalTex;
					SamplerState Sampler246_g170640 = SS29_g170653;
					half4 Coords246_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition246_g170640 = temp_output_279_0_g170640;
					float3 temp_output_280_0_g170640 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170640 = temp_output_280_0_g170640;
					half4 localSamplePlanar3D246_g170640 = SamplePlanar3D( Texture246_g170640 , Sampler246_g170640 , Coords246_g170640 , WorldPosition246_g170640 , WorldNormal246_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170640) = _SecondNormalTex;
					SamplerState Sampler234_g170640 = SS29_g170653;
					float4 Coords234_g170640 = temp_output_37_0_g170640;
					float3 WorldPosition234_g170640 = temp_output_279_0_g170640;
					float4 localSampleStochastic2D234_g170640 = SampleStochastic2D( Texture234_g170640 , Sampler234_g170640 , Coords234_g170640 , WorldPosition234_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170640) = _SecondNormalTex;
					SamplerState Sampler263_g170640 = SS29_g170653;
					half4 Coords263_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition263_g170640 = temp_output_279_0_g170640;
					half3 WorldNormal263_g170640 = temp_output_280_0_g170640;
					half4 localSampleStochastic3D263_g170640 = SampleStochastic3D( Texture263_g170640 , Sampler263_g170640 , Coords263_g170640 , WorldPosition263_g170640 , WorldNormal263_g170640 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170638 = localSampleExtra275_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170638 = localSamplePlanar2D238_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170638 = localSamplePlanar3D246_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170638 = localSampleStochastic2D234_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170638 = localSampleStochastic3D263_g170640;
					#else
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#endif
					half4 Local_NormalTex776_g170638 = staticSwitch698_g170638;
					half4 Normal_Packed45_g170643 = Local_NormalTex776_g170638;
					float2 appendResult58_g170643 = (float2(( (Normal_Packed45_g170643).x * (Normal_Packed45_g170643).w ) , (Normal_Packed45_g170643).y));
					half2 Normal_Default50_g170643 = appendResult58_g170643;
					half2 Normal_ASTC41_g170643 = (Normal_Packed45_g170643).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170643 = Normal_ASTC41_g170643;
					#else
					float2 staticSwitch38_g170643 = Normal_Default50_g170643;
					#endif
					half2 Normal_NO_DTX544_g170643 = (Normal_Packed45_g170643).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170643 = Normal_NO_DTX544_g170643;
					#else
					float2 staticSwitch37_g170643 = staticSwitch38_g170643;
					#endif
					float2 temp_output_724_0_g170638 = ( (staticSwitch37_g170643*2.0 + -1.0) * _SecondNormalValue );
					half2 Normal_Planar45_g170644 = temp_output_724_0_g170638;
					float2 break71_g170644 = Normal_Planar45_g170644;
					float3 appendResult72_g170644 = (float3(break71_g170644.x , 0.0 , break71_g170644.y));
					float2 temp_output_858_0_g170638 = (mul( ase_worldToTangent, appendResult72_g170644 )).xy;
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#else
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#endif
					half2 Local_NormalTS729_g170638 = staticSwitch727_g170638;
					float2 temp_output_36_0_g170647 = ( lerpResult40_g170647 + Local_NormalTS729_g170638 );
					float2 lerpResult405_g170638 = lerp( Visual_NormalTS529_g170638 , temp_output_36_0_g170647 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float2 staticSwitch418_g170638 = lerpResult405_g170638;
					#else
					float2 staticSwitch418_g170638 = Visual_NormalTS529_g170638;
					#endif
					half2 Final_NormalTS612_g170638 = staticSwitch418_g170638;
					float2 In_NormalTS3_g170656 = Final_NormalTS612_g170638;
					float3 appendResult68_g170648 = (float3(Final_NormalTS612_g170638 , 1.0));
					float3 tanNormal74_g170648 = appendResult68_g170648;
					float3 worldNormal74_g170648 = normalize( float3( dot( tanToWorld0, tanNormal74_g170648 ), dot( tanToWorld1, tanNormal74_g170648 ), dot( tanToWorld2, tanNormal74_g170648 ) ) );
					half3 Final_NormalWS950_g170638 = worldNormal74_g170648;
					float3 In_NormalWS3_g170656 = Final_NormalWS950_g170638;
					half4 Visual_Shader531_g170638 = Out_Shader4_g170646;
					float4 lerpResult994_g170638 = lerp( Local_Masks750_g170638 , ( Visual_Shader531_g170638 * Local_Masks750_g170638 ) , _SecondBlendShaderValue);
					float4 lerpResult440_g170638 = lerp( Visual_Shader531_g170638 , lerpResult994_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float4 staticSwitch451_g170638 = lerpResult440_g170638;
					#else
					float4 staticSwitch451_g170638 = Visual_Shader531_g170638;
					#endif
					half4 Final_Masks613_g170638 = staticSwitch451_g170638;
					float4 In_Shader3_g170656 = Final_Masks613_g170638;
					float4 In_Emissive3_g170656 = Out_Emissive4_g170646;
					float3 temp_output_3_0_g170650 = Final_Albedo601_g170638;
					float dotResult20_g170650 = dot( temp_output_3_0_g170650 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170638 = dotResult20_g170650;
					float In_Grayscale3_g170656 = Final_Grayscale615_g170638;
					float clampResult651_g170638 = clamp( saturate( ( Final_Grayscale615_g170638 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170638 = clampResult651_g170638;
					float In_Luminosity3_g170656 = Final_Luminosity652_g170638;
					half Visual_MultiMask547_g170638 = Out_MultiMask4_g170646;
					float lerpResult477_g170638 = lerp( Visual_MultiMask547_g170638 , Local_MultiMask767_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch482_g170638 = lerpResult477_g170638;
					#else
					float staticSwitch482_g170638 = Visual_MultiMask547_g170638;
					#endif
					half Final_MultiMask572_g170638 = staticSwitch482_g170638;
					float In_MultiMask3_g170656 = Final_MultiMask572_g170638;
					half Visual_AlphaClip559_g170638 = Out_AlphaClip4_g170646;
					float temp_output_718_0_g170638 = (Local_AlbedoTex777_g170638).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch932_g170638 = ( temp_output_718_0_g170638 - _SecondAlphaClipValue );
					#else
					float staticSwitch932_g170638 = temp_output_718_0_g170638;
					#endif
					half Local_AlphaClip772_g170638 = staticSwitch932_g170638;
					float lerpResult448_g170638 = lerp( Visual_AlphaClip559_g170638 , Local_AlphaClip772_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch564_g170638 = lerpResult448_g170638;
					#else
					float staticSwitch564_g170638 = Visual_AlphaClip559_g170638;
					#endif
					half Final_AlphaClip602_g170638 = staticSwitch564_g170638;
					float In_AlphaClip3_g170656 = Final_AlphaClip602_g170638;
					half Visual_AlphaFade588_g170638 = Out_AlphaFade4_g170646;
					half Local_AlphaFade773_g170638 = (lerpResult706_g170638).a;
					float lerpResult604_g170638 = lerp( Visual_AlphaFade588_g170638 , Local_AlphaFade773_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch608_g170638 = lerpResult604_g170638;
					#else
					float staticSwitch608_g170638 = Visual_AlphaFade588_g170638;
					#endif
					half Final_AlphaFade611_g170638 = staticSwitch608_g170638;
					float In_AlphaFade3_g170656 = Final_AlphaFade611_g170638;
					float3 In_Translucency3_g170656 = Out_Translucency4_g170646;
					float In_Transmission3_g170656 = Out_Transmission4_g170646;
					float In_Thickness3_g170656 = Out_Thickness4_g170646;
					float In_Diffusion3_g170656 = Out_Diffusion4_g170646;
					float In_Depth3_g170656 = Out_Depth4_g170646;
					{
					Data3_g170656.Dummy = In_Dummy3_g170656;
					Data3_g170656.Albedo = In_Albedo3_g170656;
					Data3_g170656.AlbedoRaw = In_AlbedoRaw3_g170656;
					Data3_g170656.NormalTS = In_NormalTS3_g170656;
					Data3_g170656.NormalWS = In_NormalWS3_g170656;
					Data3_g170656.Shader = In_Shader3_g170656;
					Data3_g170656.Emissive= In_Emissive3_g170656;
					Data3_g170656.MultiMask = In_MultiMask3_g170656;
					Data3_g170656.Grayscale = In_Grayscale3_g170656;
					Data3_g170656.Luminosity = In_Luminosity3_g170656;
					Data3_g170656.AlphaClip = In_AlphaClip3_g170656;
					Data3_g170656.AlphaFade = In_AlphaFade3_g170656;
					Data3_g170656.Translucency = In_Translucency3_g170656;
					Data3_g170656.Transmission = In_Transmission3_g170656;
					Data3_g170656.Thickness = In_Thickness3_g170656;
					Data3_g170656.Diffusion = In_Diffusion3_g170656;
					Data3_g170656.Depth = In_Depth3_g170656;
					}
					TVEVisualData Data4_g170694 = Data3_g170656;
					float Out_Dummy4_g170694 = 0;
					float3 Out_Albedo4_g170694 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170694 = float2( 0,0 );
					float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
					float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170694 = 0;
					float Out_Grayscale4_g170694 = 0;
					float Out_Luminosity4_g170694 = 0;
					float Out_AlphaClip4_g170694 = 0;
					float Out_AlphaFade4_g170694 = 0;
					float3 Out_Translucency4_g170694 = float3( 0,0,0 );
					float Out_Transmission4_g170694 = 0;
					float Out_Thickness4_g170694 = 0;
					float Out_Diffusion4_g170694 = 0;
					float Out_Depth4_g170694 = 0;
					{
					Out_Dummy4_g170694 = Data4_g170694.Dummy;
					Out_Albedo4_g170694 = Data4_g170694.Albedo;
					Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
					Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
					Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
					Out_Shader4_g170694 = Data4_g170694.Shader;
					Out_Emissive4_g170694= Data4_g170694.Emissive;
					Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
					Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
					Out_Luminosity4_g170694= Data4_g170694.Luminosity;
					Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
					Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
					Out_Translucency4_g170694 = Data4_g170694.Translucency;
					Out_Transmission4_g170694 = Data4_g170694.Transmission;
					Out_Thickness4_g170694 = Data4_g170694.Thickness;
					Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
					Out_Depth4_g170694= Data4_g170694.Depth;
					}
					half3 Visual_Albedo527_g170687 = Out_Albedo4_g170694;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170688) = _ThirdAlbedoTex;
					float localFilterTexture19_g170703 = ( 0.0 );
					SamplerState SS19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170703 = SamplerDefault19_g170703;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170703 = SamplerDefault19_g170703;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170703 = SamplerPoint19_g170703;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170703 = SamplerLow19_g170703;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170703 = SamplerMedium19_g170703;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170703 = SamplerHigh19_g170703;
					#endif
					}
					SamplerState Sampler276_g170688 = SS19_g170703;
					half4 Local_LayerCoords790_g170687 = _third_coord_value;
					float4 temp_output_37_0_g170688 = Local_LayerCoords790_g170687;
					half4 Coords276_g170688 = temp_output_37_0_g170688;
					half2 TexCoord276_g170688 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170688 = SampleMain( Texture276_g170688 , Sampler276_g170688 , Coords276_g170688 , TexCoord276_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler275_g170688 = SS19_g170703;
					half4 Coords275_g170688 = temp_output_37_0_g170688;
					half2 TexCoord275_g170688 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170688 = SampleExtra( Texture275_g170688 , Sampler275_g170688 , Coords275_g170688 , TexCoord275_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler238_g170688 = SS19_g170703;
					half4 Coords238_g170688 = temp_output_37_0_g170688;
					TVEModelData Data15_g170706 = Data16_g170483;
					float Out_Dummy15_g170706 = 0;
					float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
					float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170706 = Data15_g170706.Dummy;
					Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
					Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
					Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
					Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
					Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
					Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
					Out_VertexData15_g170706 = Data15_g170706.VertexData;
					Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
					}
					half3 Model_PositionWO636_g170687 = Out_PositionWO15_g170706;
					float3 temp_output_279_0_g170688 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170688 = temp_output_279_0_g170688;
					half4 localSamplePlanar2D238_g170688 = SamplePlanar2D( Texture238_g170688 , Sampler238_g170688 , Coords238_g170688 , WorldPosition238_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler246_g170688 = SS19_g170703;
					half4 Coords246_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition246_g170688 = temp_output_279_0_g170688;
					half3 Model_NormalWS869_g170687 = Out_NormalWS15_g170706;
					float3 temp_output_280_0_g170688 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170688 = temp_output_280_0_g170688;
					half4 localSamplePlanar3D246_g170688 = SamplePlanar3D( Texture246_g170688 , Sampler246_g170688 , Coords246_g170688 , WorldPosition246_g170688 , WorldNormal246_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler234_g170688 = SS19_g170703;
					float4 Coords234_g170688 = temp_output_37_0_g170688;
					float3 WorldPosition234_g170688 = temp_output_279_0_g170688;
					float4 localSampleStochastic2D234_g170688 = SampleStochastic2D( Texture234_g170688 , Sampler234_g170688 , Coords234_g170688 , WorldPosition234_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler263_g170688 = SS19_g170703;
					half4 Coords263_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition263_g170688 = temp_output_279_0_g170688;
					half3 WorldNormal263_g170688 = temp_output_280_0_g170688;
					half4 localSampleStochastic3D263_g170688 = SampleStochastic3D( Texture263_g170688 , Sampler263_g170688 , Coords263_g170688 , WorldPosition263_g170688 , WorldNormal263_g170688 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170687 = localSampleExtra275_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170687 = localSamplePlanar2D238_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170687 = localSamplePlanar3D246_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170687 = localSampleStochastic2D234_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170687 = localSampleStochastic3D263_g170688;
					#else
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#endif
					half4 Local_AlbedoTex777_g170687 = staticSwitch693_g170687;
					float3 lerpResult716_g170687 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170687).xyz , _ThirdAlbedoValue);
					half3 Local_AlbedoRGB771_g170687 = lerpResult716_g170687;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170690) = _ThirdShaderTex;
					float localFilterTexture30_g170705 = ( 0.0 );
					SamplerState SS30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170705 = SamplerDefault30_g170705;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170705 = SamplerDefault30_g170705;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170705 = SamplerPoint30_g170705;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170705 = SamplerLow30_g170705;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170705 = SamplerMedium30_g170705;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170705 = SamplerHigh30_g170705;
					#endif
					}
					SamplerState Sampler276_g170690 = SS30_g170705;
					float4 temp_output_37_0_g170690 = Local_LayerCoords790_g170687;
					half4 Coords276_g170690 = temp_output_37_0_g170690;
					half2 TexCoord276_g170690 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170690 = SampleMain( Texture276_g170690 , Sampler276_g170690 , Coords276_g170690 , TexCoord276_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170690) = _ThirdShaderTex;
					SamplerState Sampler275_g170690 = SS30_g170705;
					half4 Coords275_g170690 = temp_output_37_0_g170690;
					half2 TexCoord275_g170690 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170690 = SampleExtra( Texture275_g170690 , Sampler275_g170690 , Coords275_g170690 , TexCoord275_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170690) = _ThirdShaderTex;
					SamplerState Sampler238_g170690 = SS30_g170705;
					half4 Coords238_g170690 = temp_output_37_0_g170690;
					float3 temp_output_279_0_g170690 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170690 = temp_output_279_0_g170690;
					half4 localSamplePlanar2D238_g170690 = SamplePlanar2D( Texture238_g170690 , Sampler238_g170690 , Coords238_g170690 , WorldPosition238_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170690) = _ThirdShaderTex;
					SamplerState Sampler246_g170690 = SS30_g170705;
					half4 Coords246_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition246_g170690 = temp_output_279_0_g170690;
					float3 temp_output_280_0_g170690 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170690 = temp_output_280_0_g170690;
					half4 localSamplePlanar3D246_g170690 = SamplePlanar3D( Texture246_g170690 , Sampler246_g170690 , Coords246_g170690 , WorldPosition246_g170690 , WorldNormal246_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170690) = _ThirdShaderTex;
					SamplerState Sampler234_g170690 = SS30_g170705;
					float4 Coords234_g170690 = temp_output_37_0_g170690;
					float3 WorldPosition234_g170690 = temp_output_279_0_g170690;
					float4 localSampleStochastic2D234_g170690 = SampleStochastic2D( Texture234_g170690 , Sampler234_g170690 , Coords234_g170690 , WorldPosition234_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170690) = _ThirdShaderTex;
					SamplerState Sampler263_g170690 = SS30_g170705;
					half4 Coords263_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition263_g170690 = temp_output_279_0_g170690;
					half3 WorldNormal263_g170690 = temp_output_280_0_g170690;
					half4 localSampleStochastic3D263_g170690 = SampleStochastic3D( Texture263_g170690 , Sampler263_g170690 , Coords263_g170690 , WorldPosition263_g170690 , WorldNormal263_g170690 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170687 = localSampleExtra275_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170687 = localSamplePlanar2D238_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170687 = localSamplePlanar3D246_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170687 = localSampleStochastic2D234_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170687 = localSampleStochastic3D263_g170690;
					#else
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#endif
					half4 Local_ShaderTex775_g170687 = staticSwitch722_g170687;
					float clampResult17_g170724 = clamp( (Local_ShaderTex775_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170723 = _ThirdOcclusionRemap.x;
					float temp_output_9_0_g170723 = ( clampResult17_g170724 - temp_output_7_0_g170723 );
					float lerpResult1072_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170723 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
					half Local_Occlusion1084_g170687 = lerpResult1072_g170687;
					float clampResult17_g170726 = clamp( (Local_ShaderTex775_g170687).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170725 = _ThirdSmoothnessRemap.x;
					float temp_output_9_0_g170725 = ( clampResult17_g170726 - temp_output_7_0_g170725 );
					half Local_Smoothness1085_g170687 = ( saturate( ( ( temp_output_9_0_g170725 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
					float4 appendResult749_g170687 = (float4(( (Local_ShaderTex775_g170687).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170687 , (Local_ShaderTex775_g170687).z , Local_Smoothness1085_g170687));
					half4 Local_Masks750_g170687 = appendResult749_g170687;
					float clampResult17_g170721 = clamp( (Local_Masks750_g170687).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170722 = _ThirdMultiRemap.x;
					float temp_output_9_0_g170722 = ( clampResult17_g170721 - temp_output_7_0_g170722 );
					float temp_output_765_0_g170687 = saturate( ( ( temp_output_9_0_g170722 * _ThirdMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170687 = temp_output_765_0_g170687;
					float lerpResult705_g170687 = lerp( 1.0 , Local_MultiMask767_g170687 , _ThirdColorMode);
					float4 lerpResult706_g170687 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170687);
					half3 Local_ColorRGB774_g170687 = (lerpResult706_g170687).rgb;
					half3 Local_Albedo768_g170687 = ( Local_AlbedoRGB771_g170687 * Local_ColorRGB774_g170687 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170699 = 2.0;
					#else
					float staticSwitch1_g170699 = 4.594794;
					#endif
					float3 lerpResult985_g170687 = lerp( Local_Albedo768_g170687 , ( Visual_Albedo527_g170687 * Local_Albedo768_g170687 * staticSwitch1_g170699 ) , _ThirdBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
					SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
					half4 Local_MaskCoords813_g170687 = _third_mask_coord_value;
					float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170687;
					half4 Coords276_g170701 = temp_output_37_0_g170701;
					half2 TexCoord276_g170701 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
					SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
					half4 Coords275_g170701 = temp_output_37_0_g170701;
					half2 TexCoord275_g170701 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
					SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
					half4 Coords238_g170701 = temp_output_37_0_g170701;
					float3 temp_output_279_0_g170701 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
					half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
					SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
					half4 Coords246_g170701 = temp_output_37_0_g170701;
					half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
					float3 temp_output_280_0_g170701 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
					half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
					#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170687 = localSampleExtra275_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170687 = localSamplePlanar2D238_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170687 = localSamplePlanar3D246_g170701;
					#else
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#endif
					half4 Local_MaskTex861_g170687 = staticSwitch817_g170687;
					float clampResult17_g170708 = clamp( (Local_MaskTex861_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170712 = _ThirdMaskRemap.x;
					float temp_output_9_0_g170712 = ( clampResult17_g170708 - temp_output_7_0_g170712 );
					float lerpResult1028_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170712 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
					half Detail_TexMask429_g170687 = lerpResult1028_g170687;
					half Visual_Luminosity1049_g170687 = Out_Luminosity4_g170694;
					float clampResult17_g170717 = clamp( Visual_Luminosity1049_g170687 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170718 = _ThirdLumaRemap.x;
					float temp_output_9_0_g170718 = ( clampResult17_g170717 - temp_output_7_0_g170718 );
					float lerpResult1040_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170718 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
					half Blend_LumaMask1046_g170687 = lerpResult1040_g170687;
					half4 Model_VertexMasks960_g170687 = Out_VertexData15_g170706;
					float4 break961_g170687 = Model_VertexMasks960_g170687;
					float4 break33_g170709 = _third_vert_mode;
					float temp_output_30_0_g170709 = ( break961_g170687.x * break33_g170709.x );
					float temp_output_29_0_g170709 = ( break961_g170687.y * break33_g170709.y );
					float temp_output_31_0_g170709 = ( break961_g170687.z * break33_g170709.z );
					float temp_output_28_0_g170709 = ( temp_output_30_0_g170709 + temp_output_29_0_g170709 + temp_output_31_0_g170709 + ( break961_g170687.w * break33_g170709.w ) );
					float clampResult17_g170707 = clamp( temp_output_28_0_g170709 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170711 = _ThirdMeshRemap.x;
					float temp_output_9_0_g170711 = ( clampResult17_g170707 - temp_output_7_0_g170711 );
					float lerpResult1026_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
					float temp_output_6_0_g170710 = lerpResult1026_g170687;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170710 = ( temp_output_6_0_g170710 + _ThirdMeshMode );
					#else
					float staticSwitch14_g170710 = temp_output_6_0_g170710;
					#endif
					half Blend_VertMask913_g170687 = staticSwitch14_g170710;
					half3 Visual_NormalWS953_g170687 = Out_NormalWS4_g170694;
					float clampResult17_g170713 = clamp( saturate( (Visual_NormalWS953_g170687).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170715 = _ThirdProjRemap.x;
					float temp_output_9_0_g170715 = ( clampResult17_g170713 - temp_output_7_0_g170715 );
					float lerpResult1004_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170715 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
					half Blend_ProjMask912_g170687 = lerpResult1004_g170687;
					TVEGlobalData Data15_g170696 = Data204_g170496;
					float Out_Dummy15_g170696 = 0;
					float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170696 = Data15_g170696.Dummy;
					Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
					Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
					Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
					Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
					Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
					Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
					Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
					}
					half4 Global_CoatParams972_g170687 = Out_CoatDataRT15_g170696;
					float temp_output_6_0_g170719 = (Global_CoatParams972_g170687).y;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _ThirdElementMode );
					#else
					float staticSwitch14_g170719 = temp_output_6_0_g170719;
					#endif
					#ifdef TVE_THIRD_ELEMENT
					float staticSwitch1056_g170687 = staticSwitch14_g170719;
					#else
					float staticSwitch1056_g170687 = TVE_CoatParams.y;
					#endif
					float lerpResult1060_g170687 = lerp( 1.0 , staticSwitch1056_g170687 , ( _ThirdGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask968_g170687 = lerpResult1060_g170687;
					float clampResult17_g170714 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170687 * Blend_LumaMask1046_g170687 * Blend_VertMask913_g170687 * Blend_ProjMask912_g170687 * Blend_GlobalMask968_g170687 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170716 = _ThirdBlendRemap.x;
					float temp_output_9_0_g170716 = ( clampResult17_g170714 - temp_output_7_0_g170716 );
					half Detail_Mask412_g170687 = ( saturate( ( ( temp_output_9_0_g170716 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
					float3 lerpResult989_g170687 = lerp( Visual_Albedo527_g170687 , lerpResult985_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float3 staticSwitch415_g170687 = lerpResult989_g170687;
					#else
					float3 staticSwitch415_g170687 = Visual_Albedo527_g170687;
					#endif
					half3 Final_Albedo601_g170687 = staticSwitch415_g170687;
					float3 In_Albedo3_g170695 = Final_Albedo601_g170687;
					float3 In_AlbedoRaw3_g170695 = Final_Albedo601_g170687;
					half2 Visual_NormalTS529_g170687 = Out_NormalTS4_g170694;
					float2 lerpResult40_g170697 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170687 , _ThirdBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170689) = _ThirdNormalTex;
					float localFilterTexture29_g170704 = ( 0.0 );
					SamplerState SS29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170704 = SamplerDefault29_g170704;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170704 = SamplerDefault29_g170704;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170704 = SamplerPoint29_g170704;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170704 = SamplerLow29_g170704;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170704 = SamplerMedium29_g170704;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170704 = SamplerHigh29_g170704;
					#endif
					}
					SamplerState Sampler276_g170689 = SS29_g170704;
					float4 temp_output_37_0_g170689 = Local_LayerCoords790_g170687;
					half4 Coords276_g170689 = temp_output_37_0_g170689;
					half2 TexCoord276_g170689 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170689 = SampleMain( Texture276_g170689 , Sampler276_g170689 , Coords276_g170689 , TexCoord276_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170689) = _ThirdNormalTex;
					SamplerState Sampler275_g170689 = SS29_g170704;
					half4 Coords275_g170689 = temp_output_37_0_g170689;
					half2 TexCoord275_g170689 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170689 = SampleExtra( Texture275_g170689 , Sampler275_g170689 , Coords275_g170689 , TexCoord275_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170689) = _ThirdNormalTex;
					SamplerState Sampler238_g170689 = SS29_g170704;
					half4 Coords238_g170689 = temp_output_37_0_g170689;
					float3 temp_output_279_0_g170689 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170689 = temp_output_279_0_g170689;
					half4 localSamplePlanar2D238_g170689 = SamplePlanar2D( Texture238_g170689 , Sampler238_g170689 , Coords238_g170689 , WorldPosition238_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170689) = _ThirdNormalTex;
					SamplerState Sampler246_g170689 = SS29_g170704;
					half4 Coords246_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition246_g170689 = temp_output_279_0_g170689;
					float3 temp_output_280_0_g170689 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170689 = temp_output_280_0_g170689;
					half4 localSamplePlanar3D246_g170689 = SamplePlanar3D( Texture246_g170689 , Sampler246_g170689 , Coords246_g170689 , WorldPosition246_g170689 , WorldNormal246_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170689) = _ThirdNormalTex;
					SamplerState Sampler234_g170689 = SS29_g170704;
					float4 Coords234_g170689 = temp_output_37_0_g170689;
					float3 WorldPosition234_g170689 = temp_output_279_0_g170689;
					float4 localSampleStochastic2D234_g170689 = SampleStochastic2D( Texture234_g170689 , Sampler234_g170689 , Coords234_g170689 , WorldPosition234_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170689) = _ThirdNormalTex;
					SamplerState Sampler263_g170689 = SS29_g170704;
					half4 Coords263_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition263_g170689 = temp_output_279_0_g170689;
					half3 WorldNormal263_g170689 = temp_output_280_0_g170689;
					half4 localSampleStochastic3D263_g170689 = SampleStochastic3D( Texture263_g170689 , Sampler263_g170689 , Coords263_g170689 , WorldPosition263_g170689 , WorldNormal263_g170689 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170687 = localSampleExtra275_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170687 = localSamplePlanar2D238_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170687 = localSamplePlanar3D246_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170687 = localSampleStochastic2D234_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170687 = localSampleStochastic3D263_g170689;
					#else
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#endif
					half4 Local_NormalTex776_g170687 = staticSwitch698_g170687;
					half4 Normal_Packed45_g170691 = Local_NormalTex776_g170687;
					float2 appendResult58_g170691 = (float2(( (Normal_Packed45_g170691).x * (Normal_Packed45_g170691).w ) , (Normal_Packed45_g170691).y));
					half2 Normal_Default50_g170691 = appendResult58_g170691;
					half2 Normal_ASTC41_g170691 = (Normal_Packed45_g170691).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170691 = Normal_ASTC41_g170691;
					#else
					float2 staticSwitch38_g170691 = Normal_Default50_g170691;
					#endif
					half2 Normal_NO_DTX544_g170691 = (Normal_Packed45_g170691).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170691 = Normal_NO_DTX544_g170691;
					#else
					float2 staticSwitch37_g170691 = staticSwitch38_g170691;
					#endif
					float2 temp_output_724_0_g170687 = ( (staticSwitch37_g170691*2.0 + -1.0) * _ThirdNormalValue );
					half2 Normal_Planar45_g170692 = temp_output_724_0_g170687;
					float2 break71_g170692 = Normal_Planar45_g170692;
					float3 appendResult72_g170692 = (float3(break71_g170692.x , 0.0 , break71_g170692.y));
					float2 temp_output_858_0_g170687 = (mul( ase_worldToTangent, appendResult72_g170692 )).xy;
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#else
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#endif
					half2 Local_NormalTS729_g170687 = staticSwitch727_g170687;
					float2 temp_output_36_0_g170697 = ( lerpResult40_g170697 + Local_NormalTS729_g170687 );
					float2 lerpResult405_g170687 = lerp( Visual_NormalTS529_g170687 , temp_output_36_0_g170697 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float2 staticSwitch418_g170687 = lerpResult405_g170687;
					#else
					float2 staticSwitch418_g170687 = Visual_NormalTS529_g170687;
					#endif
					half2 Final_NormalTS612_g170687 = staticSwitch418_g170687;
					float2 In_NormalTS3_g170695 = Final_NormalTS612_g170687;
					float3 appendResult68_g170698 = (float3(Final_NormalTS612_g170687 , 1.0));
					float3 tanNormal74_g170698 = appendResult68_g170698;
					float3 worldNormal74_g170698 = normalize( float3( dot( tanToWorld0, tanNormal74_g170698 ), dot( tanToWorld1, tanNormal74_g170698 ), dot( tanToWorld2, tanNormal74_g170698 ) ) );
					half3 Final_NormalWS956_g170687 = worldNormal74_g170698;
					float3 In_NormalWS3_g170695 = Final_NormalWS956_g170687;
					half4 Visual_Shader531_g170687 = Out_Shader4_g170694;
					float4 lerpResult1000_g170687 = lerp( Local_Masks750_g170687 , ( Visual_Shader531_g170687 * Local_Masks750_g170687 ) , _ThirdBlendShaderValue);
					float4 lerpResult998_g170687 = lerp( Visual_Shader531_g170687 , lerpResult1000_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float4 staticSwitch451_g170687 = lerpResult998_g170687;
					#else
					float4 staticSwitch451_g170687 = Visual_Shader531_g170687;
					#endif
					half4 Final_Masks613_g170687 = staticSwitch451_g170687;
					float4 In_Shader3_g170695 = Final_Masks613_g170687;
					float4 In_Emissive3_g170695 = Out_Emissive4_g170694;
					float3 temp_output_3_0_g170700 = Final_Albedo601_g170687;
					float dotResult20_g170700 = dot( temp_output_3_0_g170700 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170687 = dotResult20_g170700;
					float In_Grayscale3_g170695 = Final_Grayscale615_g170687;
					float clampResult651_g170687 = clamp( saturate( ( Final_Grayscale615_g170687 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170687 = clampResult651_g170687;
					float In_Luminosity3_g170695 = Final_Luminosity652_g170687;
					half Visual_MultiMask547_g170687 = Out_MultiMask4_g170694;
					float lerpResult477_g170687 = lerp( Visual_MultiMask547_g170687 , Local_MultiMask767_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch482_g170687 = lerpResult477_g170687;
					#else
					float staticSwitch482_g170687 = Visual_MultiMask547_g170687;
					#endif
					half Final_MultiMask572_g170687 = staticSwitch482_g170687;
					float In_MultiMask3_g170695 = Final_MultiMask572_g170687;
					half Visual_AlphaClip559_g170687 = Out_AlphaClip4_g170694;
					float temp_output_718_0_g170687 = (Local_AlbedoTex777_g170687).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch924_g170687 = ( temp_output_718_0_g170687 - _ThirdAlphaClipValue );
					#else
					float staticSwitch924_g170687 = temp_output_718_0_g170687;
					#endif
					half Local_AlphaClip772_g170687 = staticSwitch924_g170687;
					float lerpResult448_g170687 = lerp( Visual_AlphaClip559_g170687 , Local_AlphaClip772_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch564_g170687 = lerpResult448_g170687;
					#else
					float staticSwitch564_g170687 = Visual_AlphaClip559_g170687;
					#endif
					half Final_AlphaClip602_g170687 = staticSwitch564_g170687;
					float In_AlphaClip3_g170695 = Final_AlphaClip602_g170687;
					half Visual_AlphaFade588_g170687 = Out_AlphaFade4_g170694;
					half Local_AlphaFade773_g170687 = (lerpResult706_g170687).a;
					float lerpResult604_g170687 = lerp( Visual_AlphaFade588_g170687 , Local_AlphaFade773_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch608_g170687 = lerpResult604_g170687;
					#else
					float staticSwitch608_g170687 = Visual_AlphaFade588_g170687;
					#endif
					half Final_AlphaFade611_g170687 = staticSwitch608_g170687;
					float In_AlphaFade3_g170695 = Final_AlphaFade611_g170687;
					float3 In_Translucency3_g170695 = Out_Translucency4_g170694;
					float In_Transmission3_g170695 = Out_Transmission4_g170694;
					float In_Thickness3_g170695 = Out_Thickness4_g170694;
					float In_Diffusion3_g170695 = Out_Diffusion4_g170694;
					float In_Depth3_g170695 = Out_Depth4_g170694;
					{
					Data3_g170695.Dummy = In_Dummy3_g170695;
					Data3_g170695.Albedo = In_Albedo3_g170695;
					Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
					Data3_g170695.NormalTS = In_NormalTS3_g170695;
					Data3_g170695.NormalWS = In_NormalWS3_g170695;
					Data3_g170695.Shader = In_Shader3_g170695;
					Data3_g170695.Emissive= In_Emissive3_g170695;
					Data3_g170695.MultiMask = In_MultiMask3_g170695;
					Data3_g170695.Grayscale = In_Grayscale3_g170695;
					Data3_g170695.Luminosity = In_Luminosity3_g170695;
					Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
					Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
					Data3_g170695.Translucency = In_Translucency3_g170695;
					Data3_g170695.Transmission = In_Transmission3_g170695;
					Data3_g170695.Thickness = In_Thickness3_g170695;
					Data3_g170695.Diffusion = In_Diffusion3_g170695;
					Data3_g170695.Depth = In_Depth3_g170695;
					}
					TVEVisualData Data4_g170789 = Data3_g170695;
					float Out_Dummy4_g170789 = 0;
					float3 Out_Albedo4_g170789 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170789 = float2( 0,0 );
					float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
					float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170789 = 0;
					float Out_Grayscale4_g170789 = 0;
					float Out_Luminosity4_g170789 = 0;
					float Out_AlphaClip4_g170789 = 0;
					float Out_AlphaFade4_g170789 = 0;
					float3 Out_Translucency4_g170789 = float3( 0,0,0 );
					float Out_Transmission4_g170789 = 0;
					float Out_Thickness4_g170789 = 0;
					float Out_Diffusion4_g170789 = 0;
					float Out_Depth4_g170789 = 0;
					{
					Out_Dummy4_g170789 = Data4_g170789.Dummy;
					Out_Albedo4_g170789 = Data4_g170789.Albedo;
					Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
					Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
					Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
					Out_Shader4_g170789 = Data4_g170789.Shader;
					Out_Emissive4_g170789= Data4_g170789.Emissive;
					Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
					Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
					Out_Luminosity4_g170789= Data4_g170789.Luminosity;
					Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
					Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
					Out_Translucency4_g170789 = Data4_g170789.Translucency;
					Out_Transmission4_g170789 = Data4_g170789.Transmission;
					Out_Thickness4_g170789 = Data4_g170789.Thickness;
					Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
					Out_Depth4_g170789= Data4_g170789.Depth;
					}
					half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
					TVEModelData Data15_g170796 = Data16_g170483;
					float Out_Dummy15_g170796 = 0;
					float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
					float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170796 = Data15_g170796.Dummy;
					Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
					Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
					Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
					Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
					Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
					Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
					Out_VertexData15_g170796 = Data15_g170796.VertexData;
					Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
					}
					half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
					float4 break208_g170788 = Model_VertexData206_g170788;
					float4 break33_g170794 = _occlusion_vert_mode;
					float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
					float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
					float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
					float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
					float temp_output_194_0_g170788 = temp_output_28_0_g170794;
					float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
					float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
					float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + _OcclusionMeshMode );
					#else
					float staticSwitch14_g170793 = temp_output_6_0_g170793;
					#endif
					half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
					float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
					float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
					#ifdef TVE_OCCLUSION
					float3 staticSwitch171_g170788 = lerpResult186_g170788;
					#else
					float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
					#endif
					half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
					float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
					float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
					float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
					float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
					float4 In_Shader3_g170790 = Out_Shader4_g170789;
					float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
					float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
					float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170788 = dotResult20_g170791;
					float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
					float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Shading181_g170788 = clampResult180_g170788;
					float In_Luminosity3_g170790 = Final_Shading181_g170788;
					float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
					float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
					float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
					float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
					float In_Transmission3_g170790 = Out_Transmission4_g170789;
					float In_Thickness3_g170790 = Out_Thickness4_g170789;
					float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
					float In_Depth3_g170790 = Out_Depth4_g170789;
					{
					Data3_g170790.Dummy = In_Dummy3_g170790;
					Data3_g170790.Albedo = In_Albedo3_g170790;
					Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
					Data3_g170790.NormalTS = In_NormalTS3_g170790;
					Data3_g170790.NormalWS = In_NormalWS3_g170790;
					Data3_g170790.Shader = In_Shader3_g170790;
					Data3_g170790.Emissive= In_Emissive3_g170790;
					Data3_g170790.MultiMask = In_MultiMask3_g170790;
					Data3_g170790.Grayscale = In_Grayscale3_g170790;
					Data3_g170790.Luminosity = In_Luminosity3_g170790;
					Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
					Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
					Data3_g170790.Translucency = In_Translucency3_g170790;
					Data3_g170790.Transmission = In_Transmission3_g170790;
					Data3_g170790.Thickness = In_Thickness3_g170790;
					Data3_g170790.Diffusion = In_Diffusion3_g170790;
					Data3_g170790.Depth = In_Depth3_g170790;
					}
					TVEVisualData Data4_g170800 = Data3_g170790;
					float Out_Dummy4_g170800 = 0;
					float3 Out_Albedo4_g170800 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170800 = float2( 0,0 );
					float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
					float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170800 = 0;
					float Out_Grayscale4_g170800 = 0;
					float Out_Luminosity4_g170800 = 0;
					float Out_AlphaClip4_g170800 = 0;
					float Out_AlphaFade4_g170800 = 0;
					float3 Out_Translucency4_g170800 = float3( 0,0,0 );
					float Out_Transmission4_g170800 = 0;
					float Out_Thickness4_g170800 = 0;
					float Out_Diffusion4_g170800 = 0;
					float Out_Depth4_g170800 = 0;
					{
					Out_Dummy4_g170800 = Data4_g170800.Dummy;
					Out_Albedo4_g170800 = Data4_g170800.Albedo;
					Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
					Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
					Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
					Out_Shader4_g170800 = Data4_g170800.Shader;
					Out_Emissive4_g170800= Data4_g170800.Emissive;
					Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
					Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
					Out_Luminosity4_g170800= Data4_g170800.Luminosity;
					Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
					Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
					Out_Translucency4_g170800 = Data4_g170800.Translucency;
					Out_Transmission4_g170800 = Data4_g170800.Transmission;
					Out_Thickness4_g170800 = Data4_g170800.Thickness;
					Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
					Out_Depth4_g170800= Data4_g170800.Depth;
					}
					half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
					TVEModelData Data15_g170806 = Data16_g170483;
					float Out_Dummy15_g170806 = 0;
					float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
					float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170806 = Data15_g170806.Dummy;
					Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
					Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
					Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
					Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
					Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
					Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
					Out_VertexData15_g170806 = Data15_g170806.VertexData;
					Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
					}
					half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
					float4 break226_g170798 = Model_VertexData224_g170798;
					float4 break33_g170799 = _gradient_vert_mode;
					float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
					float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
					float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
					float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
					float temp_output_211_0_g170798 = temp_output_28_0_g170799;
					float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170807 = _GradientMeshRemap.x;
					float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
					float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + _GradientMeshMode );
					#else
					float staticSwitch14_g170805 = temp_output_6_0_g170805;
					#endif
					half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
					half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
					float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
					float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
					half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
					float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
					half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
					float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
					#ifdef TVE_GRADIENT
					float3 staticSwitch171_g170798 = lerpResult186_g170798;
					#else
					float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
					#endif
					half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
					float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
					float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
					float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
					float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
					float4 In_Shader3_g170801 = Out_Shader4_g170800;
					float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
					float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
					float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170798 = dotResult20_g170802;
					float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
					float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170798 = clampResult180_g170798;
					float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
					float In_MultiMask3_g170801 = temp_output_162_11_g170798;
					float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
					float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
					float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
					float In_Transmission3_g170801 = Out_Transmission4_g170800;
					float In_Thickness3_g170801 = Out_Thickness4_g170800;
					float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
					float In_Depth3_g170801 = Out_Depth4_g170800;
					{
					Data3_g170801.Dummy = In_Dummy3_g170801;
					Data3_g170801.Albedo = In_Albedo3_g170801;
					Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
					Data3_g170801.NormalTS = In_NormalTS3_g170801;
					Data3_g170801.NormalWS = In_NormalWS3_g170801;
					Data3_g170801.Shader = In_Shader3_g170801;
					Data3_g170801.Emissive= In_Emissive3_g170801;
					Data3_g170801.MultiMask = In_MultiMask3_g170801;
					Data3_g170801.Grayscale = In_Grayscale3_g170801;
					Data3_g170801.Luminosity = In_Luminosity3_g170801;
					Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
					Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
					Data3_g170801.Translucency = In_Translucency3_g170801;
					Data3_g170801.Transmission = In_Transmission3_g170801;
					Data3_g170801.Thickness = In_Thickness3_g170801;
					Data3_g170801.Diffusion = In_Diffusion3_g170801;
					Data3_g170801.Depth = In_Depth3_g170801;
					}
					TVEVisualData Data4_g170809 = Data3_g170801;
					float Out_Dummy4_g170809 = 0;
					float3 Out_Albedo4_g170809 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170809 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170809 = float2( 0,0 );
					float3 Out_NormalWS4_g170809 = float3( 0,0,0 );
					float4 Out_Shader4_g170809 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170809 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170809 = 0;
					float Out_Grayscale4_g170809 = 0;
					float Out_Luminosity4_g170809 = 0;
					float Out_AlphaClip4_g170809 = 0;
					float Out_AlphaFade4_g170809 = 0;
					float3 Out_Translucency4_g170809 = float3( 0,0,0 );
					float Out_Transmission4_g170809 = 0;
					float Out_Thickness4_g170809 = 0;
					float Out_Diffusion4_g170809 = 0;
					float Out_Depth4_g170809 = 0;
					{
					Out_Dummy4_g170809 = Data4_g170809.Dummy;
					Out_Albedo4_g170809 = Data4_g170809.Albedo;
					Out_AlbedoRaw4_g170809 = Data4_g170809.AlbedoRaw;
					Out_NormalTS4_g170809 = Data4_g170809.NormalTS;
					Out_NormalWS4_g170809 = Data4_g170809.NormalWS;
					Out_Shader4_g170809 = Data4_g170809.Shader;
					Out_Emissive4_g170809= Data4_g170809.Emissive;
					Out_MultiMask4_g170809 = Data4_g170809.MultiMask;
					Out_Grayscale4_g170809 = Data4_g170809.Grayscale;
					Out_Luminosity4_g170809= Data4_g170809.Luminosity;
					Out_AlphaClip4_g170809 = Data4_g170809.AlphaClip;
					Out_AlphaFade4_g170809 = Data4_g170809.AlphaFade;
					Out_Translucency4_g170809 = Data4_g170809.Translucency;
					Out_Transmission4_g170809 = Data4_g170809.Transmission;
					Out_Thickness4_g170809 = Data4_g170809.Thickness;
					Out_Diffusion4_g170809 = Data4_g170809.Diffusion;
					Out_Depth4_g170809= Data4_g170809.Depth;
					}
					half3 Visual_Albedo127_g170808 = Out_Albedo4_g170809;
					TVEModelData Data15_g170811 = Data16_g170483;
					float Out_Dummy15_g170811 = 0;
					float3 Out_PositionWS15_g170811 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170811 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170811 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170811 = float3( 0,0,0 );
					float4 Out_VertexData15_g170811 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170811 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170811 = Data15_g170811.Dummy;
					Out_PositionWS15_g170811 = Data15_g170811.PositionWS;
					Out_PositionWO15_g170811 = Data15_g170811.PositionWO;
					Out_PivotWS15_g170811 = Data15_g170811.PivotWS;
					Out_PivotWO15_g170811 = Data15_g170811.PivotWO;
					Out_NormalWS15_g170811 = Data15_g170811.NormalWS;
					Out_ViewDirWS15_g170811 = Data15_g170811.ViewDirWS;
					Out_VertexData15_g170811 = Data15_g170811.VertexData;
					Out_BoundsData15_g170811 = Data15_g170811.BoundsData;
					}
					half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170811;
					half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170811;
					float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
					float clampResult17_g170813 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
					float temp_output_7_0_g170814 = _VariationNoiseRemap.x;
					float temp_output_9_0_g170814 = ( clampResult17_g170813 - temp_output_7_0_g170814 );
					float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170814 * _VariationNoiseRemap.z ) + 0.0001 ) );
					half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
					half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
					float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
					float temp_output_162_11_g170808 = Out_MultiMask4_g170809;
					half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
					float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
					half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
					float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
					#ifdef TVE_VARIATION
					float3 staticSwitch171_g170808 = lerpResult186_g170808;
					#else
					float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
					#endif
					half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
					float3 In_Albedo3_g170810 = Final_Albedo160_g170808;
					float3 In_AlbedoRaw3_g170810 = Final_Albedo160_g170808;
					float2 In_NormalTS3_g170810 = Out_NormalTS4_g170809;
					float3 In_NormalWS3_g170810 = Out_NormalWS4_g170809;
					float4 In_Shader3_g170810 = Out_Shader4_g170809;
					float4 In_Emissive3_g170810 = Out_Emissive4_g170809;
					float3 temp_output_3_0_g170812 = Final_Albedo160_g170808;
					float dotResult20_g170812 = dot( temp_output_3_0_g170812 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170808 = dotResult20_g170812;
					float In_Grayscale3_g170810 = Final_Grayscale164_g170808;
					float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170808 = clampResult180_g170808;
					float In_Luminosity3_g170810 = Final_Luminosity181_g170808;
					float In_MultiMask3_g170810 = temp_output_162_11_g170808;
					float In_AlphaClip3_g170810 = Out_AlphaClip4_g170809;
					float In_AlphaFade3_g170810 = Out_AlphaFade4_g170809;
					float3 In_Translucency3_g170810 = Out_Translucency4_g170809;
					float In_Transmission3_g170810 = Out_Transmission4_g170809;
					float In_Thickness3_g170810 = Out_Thickness4_g170809;
					float In_Diffusion3_g170810 = Out_Diffusion4_g170809;
					float In_Depth3_g170810 = Out_Depth4_g170809;
					{
					Data3_g170810.Dummy = In_Dummy3_g170810;
					Data3_g170810.Albedo = In_Albedo3_g170810;
					Data3_g170810.AlbedoRaw = In_AlbedoRaw3_g170810;
					Data3_g170810.NormalTS = In_NormalTS3_g170810;
					Data3_g170810.NormalWS = In_NormalWS3_g170810;
					Data3_g170810.Shader = In_Shader3_g170810;
					Data3_g170810.Emissive= In_Emissive3_g170810;
					Data3_g170810.MultiMask = In_MultiMask3_g170810;
					Data3_g170810.Grayscale = In_Grayscale3_g170810;
					Data3_g170810.Luminosity = In_Luminosity3_g170810;
					Data3_g170810.AlphaClip = In_AlphaClip3_g170810;
					Data3_g170810.AlphaFade = In_AlphaFade3_g170810;
					Data3_g170810.Translucency = In_Translucency3_g170810;
					Data3_g170810.Transmission = In_Transmission3_g170810;
					Data3_g170810.Thickness = In_Thickness3_g170810;
					Data3_g170810.Diffusion = In_Diffusion3_g170810;
					Data3_g170810.Depth = In_Depth3_g170810;
					}
					TVEVisualData Data4_g170824 = Data3_g170810;
					float Out_Dummy4_g170824 = 0;
					float3 Out_Albedo4_g170824 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170824 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170824 = float2( 0,0 );
					float3 Out_NormalWS4_g170824 = float3( 0,0,0 );
					float4 Out_Shader4_g170824 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170824 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170824 = 0;
					float Out_Grayscale4_g170824 = 0;
					float Out_Luminosity4_g170824 = 0;
					float Out_AlphaClip4_g170824 = 0;
					float Out_AlphaFade4_g170824 = 0;
					float3 Out_Translucency4_g170824 = float3( 0,0,0 );
					float Out_Transmission4_g170824 = 0;
					float Out_Thickness4_g170824 = 0;
					float Out_Diffusion4_g170824 = 0;
					float Out_Depth4_g170824 = 0;
					{
					Out_Dummy4_g170824 = Data4_g170824.Dummy;
					Out_Albedo4_g170824 = Data4_g170824.Albedo;
					Out_AlbedoRaw4_g170824 = Data4_g170824.AlbedoRaw;
					Out_NormalTS4_g170824 = Data4_g170824.NormalTS;
					Out_NormalWS4_g170824 = Data4_g170824.NormalWS;
					Out_Shader4_g170824 = Data4_g170824.Shader;
					Out_Emissive4_g170824= Data4_g170824.Emissive;
					Out_MultiMask4_g170824 = Data4_g170824.MultiMask;
					Out_Grayscale4_g170824 = Data4_g170824.Grayscale;
					Out_Luminosity4_g170824= Data4_g170824.Luminosity;
					Out_AlphaClip4_g170824 = Data4_g170824.AlphaClip;
					Out_AlphaFade4_g170824 = Data4_g170824.AlphaFade;
					Out_Translucency4_g170824 = Data4_g170824.Translucency;
					Out_Transmission4_g170824 = Data4_g170824.Transmission;
					Out_Thickness4_g170824 = Data4_g170824.Thickness;
					Out_Diffusion4_g170824 = Data4_g170824.Diffusion;
					Out_Depth4_g170824= Data4_g170824.Depth;
					}
					half3 Visual_Albedo139_g170820 = Out_Albedo4_g170824;
					float temp_output_200_12_g170820 = Out_Grayscale4_g170824;
					half Visual_Grayscale150_g170820 = temp_output_200_12_g170820;
					float3 temp_cast_33 = (Visual_Grayscale150_g170820).xxx;
					TVEGlobalData Data15_g170821 = Data204_g170496;
					float Out_Dummy15_g170821 = 0;
					float4 Out_CoatDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170821 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170821 = Data15_g170821.Dummy;
					Out_CoatDataRT15_g170821 = Data15_g170821.CoatDataRT;
					Out_PaintDataRT15_g170821 = Data15_g170821.PaintDataRT;
					Out_GlowDataRT15_g170821= Data15_g170821.GlowDataRT;
					Out_AtmoDataRT15_g170821= Data15_g170821.AtmoDataRT;
					Out_FadeDataRT15_g170821= Data15_g170821.FadeDataRT;
					Out_FormDataRT15_g170821 = Data15_g170821.FormDataRT;
					Out_FlowDataRT15_g170821 = Data15_g170821.FlowDataRT;
					}
					half4 Global_PaintParams209_g170820 = Out_PaintDataRT15_g170821;
					float4 temp_output_6_0_g170838 = Global_PaintParams209_g170820;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170838 = ( temp_output_6_0_g170838 + _TintingElementMode );
					#else
					float4 staticSwitch14_g170838 = temp_output_6_0_g170838;
					#endif
					#ifdef TVE_TINTING_ELEMENT
					float4 staticSwitch283_g170820 = staticSwitch14_g170838;
					#else
					float4 staticSwitch283_g170820 = TVE_PaintParams;
					#endif
					float4 lerpResult412_g170820 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170820 , ( _TintingGlobalValue * TVE_IsEnabled ));
					half Tinting_GlobalValue285_g170820 = saturate( (lerpResult412_g170820).w );
					float3 lerpResult368_g170820 = lerp( Visual_Albedo139_g170820 , temp_cast_33 , ( Tinting_GlobalValue285_g170820 * _TintingGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170844 = 2.0;
					#else
					float staticSwitch1_g170844 = 4.594794;
					#endif
					half3 Tinting_GlobalColor290_g170820 = (lerpResult412_g170820).xyz;
					float temp_output_200_11_g170820 = Out_MultiMask4_g170824;
					half Visual_MultiMask181_g170820 = temp_output_200_11_g170820;
					float lerpResult147_g170820 = lerp( 1.0 , Visual_MultiMask181_g170820 , _TintingMultiValue);
					half Tinting_MutiMask121_g170820 = lerpResult147_g170820;
					half Tinting_TexMask385_g170820 = 1.0;
					float temp_output_200_15_g170820 = Out_Luminosity4_g170824;
					half Visual_Luminosity257_g170820 = temp_output_200_15_g170820;
					float clampResult17_g170831 = clamp( Visual_Luminosity257_g170820 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170835 = _TintingLumaRemap.x;
					float temp_output_9_0_g170835 = ( clampResult17_g170831 - temp_output_7_0_g170835 );
					float lerpResult228_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
					half Tinting_LumaMask153_g170820 = lerpResult228_g170820;
					TVEModelData Data15_g170825 = Data16_g170483;
					float Out_Dummy15_g170825 = 0;
					float3 Out_PositionWS15_g170825 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170825 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170825 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170825 = float3( 0,0,0 );
					float4 Out_VertexData15_g170825 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170825 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170825 = Data15_g170825.Dummy;
					Out_PositionWS15_g170825 = Data15_g170825.PositionWS;
					Out_PositionWO15_g170825 = Data15_g170825.PositionWO;
					Out_PivotWS15_g170825 = Data15_g170825.PivotWS;
					Out_PivotWO15_g170825 = Data15_g170825.PivotWO;
					Out_NormalWS15_g170825 = Data15_g170825.NormalWS;
					Out_ViewDirWS15_g170825 = Data15_g170825.ViewDirWS;
					Out_VertexData15_g170825 = Data15_g170825.VertexData;
					Out_BoundsData15_g170825 = Data15_g170825.BoundsData;
					}
					half4 Model_VertexMasks307_g170820 = Out_VertexData15_g170825;
					float4 break311_g170820 = Model_VertexMasks307_g170820;
					float4 break33_g170828 = _tinting_vert_mode;
					float temp_output_30_0_g170828 = ( break311_g170820.x * break33_g170828.x );
					float temp_output_29_0_g170828 = ( break311_g170820.y * break33_g170828.y );
					float temp_output_31_0_g170828 = ( break311_g170820.z * break33_g170828.z );
					float temp_output_28_0_g170828 = ( temp_output_30_0_g170828 + temp_output_29_0_g170828 + temp_output_31_0_g170828 + ( break311_g170820.w * break33_g170828.w ) );
					float clampResult17_g170830 = clamp( temp_output_28_0_g170828 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170836 = _TintingMeshRemap.x;
					float temp_output_9_0_g170836 = ( clampResult17_g170830 - temp_output_7_0_g170836 );
					float lerpResult370_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
					float temp_output_6_0_g170832 = lerpResult370_g170820;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170832 = ( temp_output_6_0_g170832 + _TintingMeshMode );
					#else
					float staticSwitch14_g170832 = temp_output_6_0_g170832;
					#endif
					half Tinting_VertMask309_g170820 = staticSwitch14_g170832;
					half Tinting_NoiseMask213_g170820 = 1.0;
					half Custom_Mask345_g170820 = 1.0;
					half Tinting_CoreMasks433_g170820 = ( Tinting_MutiMask121_g170820 * Tinting_TexMask385_g170820 * Tinting_LumaMask153_g170820 * Tinting_VertMask309_g170820 * Tinting_NoiseMask213_g170820 * Custom_Mask345_g170820 );
					float temp_output_7_0_g170842 = _TintingBlendRemap.x;
					float temp_output_9_0_g170842 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170820 * Tinting_GlobalValue285_g170820 ) - temp_output_7_0_g170842 );
					half Tinting_Mask242_g170820 = ( saturate( ( ( temp_output_9_0_g170842 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
					float3 lerpResult90_g170820 = lerp( Visual_Albedo139_g170820 , ( lerpResult368_g170820 * staticSwitch1_g170844 * Tinting_GlobalColor290_g170820 * (_TintingColor).rgb ) , Tinting_Mask242_g170820);
					#ifdef TVE_TINTING
					float3 staticSwitch286_g170820 = lerpResult90_g170820;
					#else
					float3 staticSwitch286_g170820 = Visual_Albedo139_g170820;
					#endif
					half3 Final_Albedo97_g170820 = staticSwitch286_g170820;
					float3 In_Albedo3_g170840 = Final_Albedo97_g170820;
					float3 In_AlbedoRaw3_g170840 = Out_AlbedoRaw4_g170824;
					float2 In_NormalTS3_g170840 = Out_NormalTS4_g170824;
					float3 In_NormalWS3_g170840 = Out_NormalWS4_g170824;
					float4 In_Shader3_g170840 = Out_Shader4_g170824;
					float4 In_Emissive3_g170840 = Out_Emissive4_g170824;
					float In_Grayscale3_g170840 = temp_output_200_12_g170820;
					float In_Luminosity3_g170840 = temp_output_200_15_g170820;
					float In_MultiMask3_g170840 = temp_output_200_11_g170820;
					float In_AlphaClip3_g170840 = Out_AlphaClip4_g170824;
					float In_AlphaFade3_g170840 = Out_AlphaFade4_g170824;
					float3 In_Translucency3_g170840 = Out_Translucency4_g170824;
					float In_Transmission3_g170840 = Out_Transmission4_g170824;
					float In_Thickness3_g170840 = Out_Thickness4_g170824;
					float In_Diffusion3_g170840 = Out_Diffusion4_g170824;
					float In_Depth3_g170840 = Out_Depth4_g170824;
					{
					Data3_g170840.Dummy = In_Dummy3_g170840;
					Data3_g170840.Albedo = In_Albedo3_g170840;
					Data3_g170840.AlbedoRaw = In_AlbedoRaw3_g170840;
					Data3_g170840.NormalTS = In_NormalTS3_g170840;
					Data3_g170840.NormalWS = In_NormalWS3_g170840;
					Data3_g170840.Shader = In_Shader3_g170840;
					Data3_g170840.Emissive= In_Emissive3_g170840;
					Data3_g170840.MultiMask = In_MultiMask3_g170840;
					Data3_g170840.Grayscale = In_Grayscale3_g170840;
					Data3_g170840.Luminosity = In_Luminosity3_g170840;
					Data3_g170840.AlphaClip = In_AlphaClip3_g170840;
					Data3_g170840.AlphaFade = In_AlphaFade3_g170840;
					Data3_g170840.Translucency = In_Translucency3_g170840;
					Data3_g170840.Transmission = In_Transmission3_g170840;
					Data3_g170840.Thickness = In_Thickness3_g170840;
					Data3_g170840.Diffusion = In_Diffusion3_g170840;
					Data3_g170840.Depth = In_Depth3_g170840;
					}
					TVEVisualData Data4_g170847 = Data3_g170840;
					float Out_Dummy4_g170847 = 0;
					float3 Out_Albedo4_g170847 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170847 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170847 = float2( 0,0 );
					float3 Out_NormalWS4_g170847 = float3( 0,0,0 );
					float4 Out_Shader4_g170847 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170847 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170847 = 0;
					float Out_Grayscale4_g170847 = 0;
					float Out_Luminosity4_g170847 = 0;
					float Out_AlphaClip4_g170847 = 0;
					float Out_AlphaFade4_g170847 = 0;
					float3 Out_Translucency4_g170847 = float3( 0,0,0 );
					float Out_Transmission4_g170847 = 0;
					float Out_Thickness4_g170847 = 0;
					float Out_Diffusion4_g170847 = 0;
					float Out_Depth4_g170847 = 0;
					{
					Out_Dummy4_g170847 = Data4_g170847.Dummy;
					Out_Albedo4_g170847 = Data4_g170847.Albedo;
					Out_AlbedoRaw4_g170847 = Data4_g170847.AlbedoRaw;
					Out_NormalTS4_g170847 = Data4_g170847.NormalTS;
					Out_NormalWS4_g170847 = Data4_g170847.NormalWS;
					Out_Shader4_g170847 = Data4_g170847.Shader;
					Out_Emissive4_g170847= Data4_g170847.Emissive;
					Out_MultiMask4_g170847 = Data4_g170847.MultiMask;
					Out_Grayscale4_g170847 = Data4_g170847.Grayscale;
					Out_Luminosity4_g170847= Data4_g170847.Luminosity;
					Out_AlphaClip4_g170847 = Data4_g170847.AlphaClip;
					Out_AlphaFade4_g170847 = Data4_g170847.AlphaFade;
					Out_Translucency4_g170847 = Data4_g170847.Translucency;
					Out_Transmission4_g170847 = Data4_g170847.Transmission;
					Out_Thickness4_g170847 = Data4_g170847.Thickness;
					Out_Diffusion4_g170847 = Data4_g170847.Diffusion;
					Out_Depth4_g170847= Data4_g170847.Depth;
					}
					half3 Visual_Albedo292_g170845 = Out_Albedo4_g170847;
					float temp_output_280_12_g170845 = Out_Grayscale4_g170847;
					half Visual_Grayscale308_g170845 = temp_output_280_12_g170845;
					float3 temp_cast_34 = (Visual_Grayscale308_g170845).xxx;
					TVEGlobalData Data15_g170846 = Data204_g170496;
					float Out_Dummy15_g170846 = 0;
					float4 Out_CoatDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170846 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170846 = Data15_g170846.Dummy;
					Out_CoatDataRT15_g170846 = Data15_g170846.CoatDataRT;
					Out_PaintDataRT15_g170846 = Data15_g170846.PaintDataRT;
					Out_GlowDataRT15_g170846= Data15_g170846.GlowDataRT;
					Out_AtmoDataRT15_g170846= Data15_g170846.AtmoDataRT;
					Out_FadeDataRT15_g170846= Data15_g170846.FadeDataRT;
					Out_FormDataRT15_g170846 = Data15_g170846.FormDataRT;
					Out_FlowDataRT15_g170846 = Data15_g170846.FlowDataRT;
					}
					half4 Global_AtmoParams314_g170845 = Out_AtmoDataRT15_g170846;
					float temp_output_6_0_g170864 = (Global_AtmoParams314_g170845).x;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170864 = ( temp_output_6_0_g170864 + _DrynessElementMode );
					#else
					float staticSwitch14_g170864 = temp_output_6_0_g170864;
					#endif
					#ifdef TVE_DRYNESS_ELEMENT
					float staticSwitch351_g170845 = staticSwitch14_g170864;
					#else
					float staticSwitch351_g170845 = TVE_AtmoParams.x;
					#endif
					float lerpResult505_g170845 = lerp( 1.0 , ( staticSwitch351_g170845 * TVE_IsEnabled ) , _DrynessGlobalValue);
					half Dryness_GlobalValue352_g170845 = lerpResult505_g170845;
					float3 lerpResult485_g170845 = lerp( Visual_Albedo292_g170845 , temp_cast_34 , ( Dryness_GlobalValue352_g170845 * _DrynessGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170868 = 2.0;
					#else
					float staticSwitch1_g170868 = 4.594794;
					#endif
					half Dryness_TexMask478_g170845 = 1.0;
					float temp_output_280_11_g170845 = Out_MultiMask4_g170847;
					half Visual_MultiMask310_g170845 = temp_output_280_11_g170845;
					float lerpResult283_g170845 = lerp( 1.0 , Visual_MultiMask310_g170845 , _DrynessMultiValue);
					half Dryness_MultiMask302_g170845 = lerpResult283_g170845;
					float temp_output_280_15_g170845 = Out_Luminosity4_g170847;
					half Visual_Luminosity309_g170845 = temp_output_280_15_g170845;
					float clampResult17_g170857 = clamp( Visual_Luminosity309_g170845 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170861 = _DrynessLumaRemap.x;
					float temp_output_9_0_g170861 = ( clampResult17_g170857 - temp_output_7_0_g170861 );
					float lerpResult295_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170861 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
					half Dryness_LumaMask301_g170845 = lerpResult295_g170845;
					TVEModelData Data15_g170851 = Data16_g170483;
					float Out_Dummy15_g170851 = 0;
					float3 Out_PositionWS15_g170851 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170851 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170851 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170851 = float3( 0,0,0 );
					float4 Out_VertexData15_g170851 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170851 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170851 = Data15_g170851.Dummy;
					Out_PositionWS15_g170851 = Data15_g170851.PositionWS;
					Out_PositionWO15_g170851 = Data15_g170851.PositionWO;
					Out_PivotWS15_g170851 = Data15_g170851.PivotWS;
					Out_PivotWO15_g170851 = Data15_g170851.PivotWO;
					Out_NormalWS15_g170851 = Data15_g170851.NormalWS;
					Out_ViewDirWS15_g170851 = Data15_g170851.ViewDirWS;
					Out_VertexData15_g170851 = Data15_g170851.VertexData;
					Out_BoundsData15_g170851 = Data15_g170851.BoundsData;
					}
					half4 Model_VertexMasks386_g170845 = Out_VertexData15_g170851;
					float4 break375_g170845 = Model_VertexMasks386_g170845;
					float4 break33_g170854 = _dryness_vert_mode;
					float temp_output_30_0_g170854 = ( break375_g170845.x * break33_g170854.x );
					float temp_output_29_0_g170854 = ( break375_g170845.y * break33_g170854.y );
					float temp_output_31_0_g170854 = ( break375_g170845.z * break33_g170854.z );
					float temp_output_28_0_g170854 = ( temp_output_30_0_g170854 + temp_output_29_0_g170854 + temp_output_31_0_g170854 + ( break375_g170845.w * break33_g170854.w ) );
					float clampResult17_g170855 = clamp( temp_output_28_0_g170854 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170862 = _DrynessMeshRemap.x;
					float temp_output_9_0_g170862 = ( clampResult17_g170855 - temp_output_7_0_g170862 );
					float lerpResult452_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170862 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
					float temp_output_6_0_g170858 = lerpResult452_g170845;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170858 = ( temp_output_6_0_g170858 + _DrynessMeshMode );
					#else
					float staticSwitch14_g170858 = temp_output_6_0_g170858;
					#endif
					half Dryness_VertMask378_g170845 = staticSwitch14_g170858;
					half Dryness_MaskNoise291_g170845 = 1.0;
					half Custom_Mask411_g170845 = 1.0;
					float temp_output_7_0_g170866 = _DrynessBlendRemap.x;
					float temp_output_9_0_g170866 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170845 * Dryness_MultiMask302_g170845 * Dryness_LumaMask301_g170845 * Dryness_VertMask378_g170845 * Dryness_MaskNoise291_g170845 * Dryness_GlobalValue352_g170845 * Custom_Mask411_g170845 ) - temp_output_7_0_g170866 );
					half Dryness_Mask329_g170845 = saturate( ( ( temp_output_9_0_g170866 * _DrynessBlendRemap.z ) + 0.0001 ) );
					float3 lerpResult336_g170845 = lerp( Visual_Albedo292_g170845 , ( lerpResult485_g170845 * staticSwitch1_g170868 * (_DrynessColor).rgb ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float3 staticSwitch356_g170845 = lerpResult336_g170845;
					#else
					float3 staticSwitch356_g170845 = Visual_Albedo292_g170845;
					#endif
					half3 Final_Albedo331_g170845 = staticSwitch356_g170845;
					float3 In_Albedo3_g170848 = Final_Albedo331_g170845;
					float3 In_AlbedoRaw3_g170848 = Out_AlbedoRaw4_g170847;
					float2 In_NormalTS3_g170848 = Out_NormalTS4_g170847;
					float3 In_NormalWS3_g170848 = Out_NormalWS4_g170847;
					half4 Visual_Shader415_g170845 = Out_Shader4_g170847;
					float4 break438_g170845 = Visual_Shader415_g170845;
					float4 appendResult439_g170845 = (float4(break438_g170845.x , break438_g170845.y , break438_g170845.z , ( break438_g170845.w * _DrynessSmoothnessValue )));
					float4 lerpResult427_g170845 = lerp( Visual_Shader415_g170845 , appendResult439_g170845 , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float4 staticSwitch426_g170845 = lerpResult427_g170845;
					#else
					float4 staticSwitch426_g170845 = Visual_Shader415_g170845;
					#endif
					half4 Final_Shader433_g170845 = staticSwitch426_g170845;
					float4 In_Shader3_g170848 = Final_Shader433_g170845;
					float4 In_Emissive3_g170848 = Out_Emissive4_g170847;
					float In_Grayscale3_g170848 = temp_output_280_12_g170845;
					float In_Luminosity3_g170848 = temp_output_280_15_g170845;
					float In_MultiMask3_g170848 = temp_output_280_11_g170845;
					float In_AlphaClip3_g170848 = Out_AlphaClip4_g170847;
					float In_AlphaFade3_g170848 = Out_AlphaFade4_g170847;
					float3 In_Translucency3_g170848 = Out_Translucency4_g170847;
					half Visual_Transmission416_g170845 = Out_Transmission4_g170847;
					float lerpResult421_g170845 = lerp( Visual_Transmission416_g170845 , ( Visual_Transmission416_g170845 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float staticSwitch418_g170845 = lerpResult421_g170845;
					#else
					float staticSwitch418_g170845 = Visual_Transmission416_g170845;
					#endif
					half Final_Transmission425_g170845 = staticSwitch418_g170845;
					float In_Transmission3_g170848 = Final_Transmission425_g170845;
					float In_Thickness3_g170848 = Out_Thickness4_g170847;
					float In_Diffusion3_g170848 = Out_Diffusion4_g170847;
					float In_Depth3_g170848 = Out_Depth4_g170847;
					{
					Data3_g170848.Dummy = In_Dummy3_g170848;
					Data3_g170848.Albedo = In_Albedo3_g170848;
					Data3_g170848.AlbedoRaw = In_AlbedoRaw3_g170848;
					Data3_g170848.NormalTS = In_NormalTS3_g170848;
					Data3_g170848.NormalWS = In_NormalWS3_g170848;
					Data3_g170848.Shader = In_Shader3_g170848;
					Data3_g170848.Emissive= In_Emissive3_g170848;
					Data3_g170848.MultiMask = In_MultiMask3_g170848;
					Data3_g170848.Grayscale = In_Grayscale3_g170848;
					Data3_g170848.Luminosity = In_Luminosity3_g170848;
					Data3_g170848.AlphaClip = In_AlphaClip3_g170848;
					Data3_g170848.AlphaFade = In_AlphaFade3_g170848;
					Data3_g170848.Translucency = In_Translucency3_g170848;
					Data3_g170848.Transmission = In_Transmission3_g170848;
					Data3_g170848.Thickness = In_Thickness3_g170848;
					Data3_g170848.Diffusion = In_Diffusion3_g170848;
					Data3_g170848.Depth = In_Depth3_g170848;
					}
					TVEVisualData Data4_g170870 = Data3_g170848;
					float Out_Dummy4_g170870 = 0;
					float3 Out_Albedo4_g170870 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170870 = float2( 0,0 );
					float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
					float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170870 = 0;
					float Out_Grayscale4_g170870 = 0;
					float Out_Luminosity4_g170870 = 0;
					float Out_AlphaClip4_g170870 = 0;
					float Out_AlphaFade4_g170870 = 0;
					float3 Out_Translucency4_g170870 = float3( 0,0,0 );
					float Out_Transmission4_g170870 = 0;
					float Out_Thickness4_g170870 = 0;
					float Out_Diffusion4_g170870 = 0;
					float Out_Depth4_g170870 = 0;
					{
					Out_Dummy4_g170870 = Data4_g170870.Dummy;
					Out_Albedo4_g170870 = Data4_g170870.Albedo;
					Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
					Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
					Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
					Out_Shader4_g170870 = Data4_g170870.Shader;
					Out_Emissive4_g170870= Data4_g170870.Emissive;
					Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
					Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
					Out_Luminosity4_g170870= Data4_g170870.Luminosity;
					Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
					Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
					Out_Translucency4_g170870 = Data4_g170870.Translucency;
					Out_Transmission4_g170870 = Data4_g170870.Transmission;
					Out_Thickness4_g170870 = Data4_g170870.Thickness;
					Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
					Out_Depth4_g170870= Data4_g170870.Depth;
					}
					half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
					float4 vertexToFrag24_g170819 = IN.ase_texcoord10;
					half4 Interp_Data1269 = vertexToFrag24_g170819;
					float clampResult208_g170869 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
					#ifdef TVE_MOTION
					float3 staticSwitch214_g170869 = ( Visual_Albedo127_g170869 + ( ( Visual_Albedo127_g170869 * Visual_Albedo127_g170869 * 200.0 * _motion_highlight_color ) * clampResult208_g170869 ) );
					#else
					float3 staticSwitch214_g170869 = Visual_Albedo127_g170869;
					#endif
					half3 Final_Albedo160_g170869 = staticSwitch214_g170869;
					float3 In_Albedo3_g170871 = Final_Albedo160_g170869;
					float3 In_AlbedoRaw3_g170871 = Out_AlbedoRaw4_g170870;
					float2 In_NormalTS3_g170871 = Out_NormalTS4_g170870;
					float3 In_NormalWS3_g170871 = Out_NormalWS4_g170870;
					float4 In_Shader3_g170871 = Out_Shader4_g170870;
					float4 In_Emissive3_g170871 = Out_Emissive4_g170870;
					float In_Grayscale3_g170871 = Out_Grayscale4_g170870;
					float In_Luminosity3_g170871 = Out_Luminosity4_g170870;
					float In_MultiMask3_g170871 = Out_MultiMask4_g170870;
					float In_AlphaClip3_g170871 = Out_AlphaClip4_g170870;
					float In_AlphaFade3_g170871 = Out_AlphaFade4_g170870;
					float3 In_Translucency3_g170871 = Out_Translucency4_g170870;
					float In_Transmission3_g170871 = Out_Transmission4_g170870;
					float In_Thickness3_g170871 = Out_Thickness4_g170870;
					float In_Diffusion3_g170871 = Out_Diffusion4_g170870;
					float In_Depth3_g170871 = Out_Depth4_g170870;
					{
					Data3_g170871.Dummy = In_Dummy3_g170871;
					Data3_g170871.Albedo = In_Albedo3_g170871;
					Data3_g170871.AlbedoRaw = In_AlbedoRaw3_g170871;
					Data3_g170871.NormalTS = In_NormalTS3_g170871;
					Data3_g170871.NormalWS = In_NormalWS3_g170871;
					Data3_g170871.Shader = In_Shader3_g170871;
					Data3_g170871.Emissive= In_Emissive3_g170871;
					Data3_g170871.MultiMask = In_MultiMask3_g170871;
					Data3_g170871.Grayscale = In_Grayscale3_g170871;
					Data3_g170871.Luminosity = In_Luminosity3_g170871;
					Data3_g170871.AlphaClip = In_AlphaClip3_g170871;
					Data3_g170871.AlphaFade = In_AlphaFade3_g170871;
					Data3_g170871.Translucency = In_Translucency3_g170871;
					Data3_g170871.Transmission = In_Transmission3_g170871;
					Data3_g170871.Thickness = In_Thickness3_g170871;
					Data3_g170871.Diffusion = In_Diffusion3_g170871;
					Data3_g170871.Depth = In_Depth3_g170871;
					}
					TVEVisualData Data4_g170873 = Data3_g170871;
					float Out_Dummy4_g170873 = 0;
					float3 Out_Albedo4_g170873 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170873 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170873 = float2( 0,0 );
					float3 Out_NormalWS4_g170873 = float3( 0,0,0 );
					float4 Out_Shader4_g170873 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170873 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170873 = 0;
					float Out_Grayscale4_g170873 = 0;
					float Out_Luminosity4_g170873 = 0;
					float Out_AlphaClip4_g170873 = 0;
					float Out_AlphaFade4_g170873 = 0;
					float3 Out_Translucency4_g170873 = float3( 0,0,0 );
					float Out_Transmission4_g170873 = 0;
					float Out_Thickness4_g170873 = 0;
					float Out_Diffusion4_g170873 = 0;
					float Out_Depth4_g170873 = 0;
					{
					Out_Dummy4_g170873 = Data4_g170873.Dummy;
					Out_Albedo4_g170873 = Data4_g170873.Albedo;
					Out_AlbedoRaw4_g170873 = Data4_g170873.AlbedoRaw;
					Out_NormalTS4_g170873 = Data4_g170873.NormalTS;
					Out_NormalWS4_g170873 = Data4_g170873.NormalWS;
					Out_Shader4_g170873 = Data4_g170873.Shader;
					Out_Emissive4_g170873= Data4_g170873.Emissive;
					Out_MultiMask4_g170873 = Data4_g170873.MultiMask;
					Out_Grayscale4_g170873 = Data4_g170873.Grayscale;
					Out_Luminosity4_g170873= Data4_g170873.Luminosity;
					Out_AlphaClip4_g170873 = Data4_g170873.AlphaClip;
					Out_AlphaFade4_g170873 = Data4_g170873.AlphaFade;
					Out_Translucency4_g170873 = Data4_g170873.Translucency;
					Out_Transmission4_g170873 = Data4_g170873.Transmission;
					Out_Thickness4_g170873 = Data4_g170873.Thickness;
					Out_Diffusion4_g170873 = Data4_g170873.Diffusion;
					Out_Depth4_g170873= Data4_g170873.Depth;
					}
					half3 Visual_Albedo127_g170872 = Out_Albedo4_g170873;
					float3 temp_output_622_0_g170872 = (_OverlayColor).rgb;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170876) = _OverlayAlbedoTex;
					float localFilterTexture19_g170887 = ( 0.0 );
					SamplerState SS19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170887 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170887 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170887 = SamplerDefault19_g170887;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170887 = SamplerDefault19_g170887;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170887 = SamplerPoint19_g170887;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170887 = SamplerLow19_g170887;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170887 = SamplerMedium19_g170887;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170887 = SamplerHigh19_g170887;
					#endif
					}
					SamplerState Sampler238_g170876 = SS19_g170887;
					float4 temp_output_6_0_g170877 = _overlay_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170877 = ( temp_output_6_0_g170877 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
					#else
					float4 staticSwitch14_g170877 = temp_output_6_0_g170877;
					#endif
					half4 Overlay_Coords639_g170872 = staticSwitch14_g170877;
					float4 temp_output_37_0_g170876 = Overlay_Coords639_g170872;
					half4 Coords238_g170876 = temp_output_37_0_g170876;
					TVEModelData Data15_g170889 = Data16_g170483;
					float Out_Dummy15_g170889 = 0;
					float3 Out_PositionWS15_g170889 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170889 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170889 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170889 = float3( 0,0,0 );
					float4 Out_VertexData15_g170889 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170889 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170889 = Data15_g170889.Dummy;
					Out_PositionWS15_g170889 = Data15_g170889.PositionWS;
					Out_PositionWO15_g170889 = Data15_g170889.PositionWO;
					Out_PivotWS15_g170889 = Data15_g170889.PivotWS;
					Out_PivotWO15_g170889 = Data15_g170889.PivotWO;
					Out_NormalWS15_g170889 = Data15_g170889.NormalWS;
					Out_ViewDirWS15_g170889 = Data15_g170889.ViewDirWS;
					Out_VertexData15_g170889 = Data15_g170889.VertexData;
					Out_BoundsData15_g170889 = Data15_g170889.BoundsData;
					}
					half3 Model_PositionWO602_g170872 = Out_PositionWO15_g170889;
					float3 temp_output_279_0_g170876 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170876 = temp_output_279_0_g170876;
					half4 localSamplePlanar2D238_g170876 = SamplePlanar2D( Texture238_g170876 , Sampler238_g170876 , Coords238_g170876 , WorldPosition238_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler246_g170876 = SS19_g170887;
					half4 Coords246_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition246_g170876 = temp_output_279_0_g170876;
					half3 Model_NormalWS712_g170872 = Out_NormalWS15_g170889;
					float3 temp_output_280_0_g170876 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170876 = temp_output_280_0_g170876;
					half4 localSamplePlanar3D246_g170876 = SamplePlanar3D( Texture246_g170876 , Sampler246_g170876 , Coords246_g170876 , WorldPosition246_g170876 , WorldNormal246_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler234_g170876 = SS19_g170887;
					float4 Coords234_g170876 = temp_output_37_0_g170876;
					float3 WorldPosition234_g170876 = temp_output_279_0_g170876;
					float4 localSampleStochastic2D234_g170876 = SampleStochastic2D( Texture234_g170876 , Sampler234_g170876 , Coords234_g170876 , WorldPosition234_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler263_g170876 = SS19_g170887;
					half4 Coords263_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition263_g170876 = temp_output_279_0_g170876;
					half3 WorldNormal263_g170876 = temp_output_280_0_g170876;
					half4 localSampleStochastic3D263_g170876 = SampleStochastic3D( Texture263_g170876 , Sampler263_g170876 , Coords263_g170876 , WorldPosition263_g170876 , WorldNormal263_g170876 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch676_g170872 = localSamplePlanar3D246_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch676_g170872 = localSampleStochastic2D234_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch676_g170872 = localSampleStochastic3D263_g170876;
					#else
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#endif
					half3 Overlay_Albedo526_g170872 = (staticSwitch676_g170872).xyz;
					#ifdef TVE_OVERLAY_TEX
					float3 staticSwitch578_g170872 = ( temp_output_622_0_g170872 * Overlay_Albedo526_g170872 );
					#else
					float3 staticSwitch578_g170872 = temp_output_622_0_g170872;
					#endif
					float3 temp_output_6_0_g170890 = staticSwitch578_g170872;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + _OverlayTextureMode );
					#else
					float3 staticSwitch14_g170890 = temp_output_6_0_g170890;
					#endif
					float3 temp_cast_35 = (0.0).xxx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170880) = _OverlayGlitterTexRT;
					SamplerState Sampler246_g170880 = sampler_Linear_Repeat;
					float4 appendResult863_g170872 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170880 = appendResult863_g170872;
					half4 Coords246_g170880 = temp_output_37_0_g170880;
					float3 temp_output_279_0_g170880 = Model_PositionWO602_g170872;
					half3 WorldPosition246_g170880 = temp_output_279_0_g170880;
					float3 temp_output_280_0_g170880 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170880 = temp_output_280_0_g170880;
					half4 localSamplePlanar3D246_g170880 = SamplePlanar3D( Texture246_g170880 , Sampler246_g170880 , Coords246_g170880 , WorldPosition246_g170880 , WorldNormal246_g170880 );
					half Overlay_GlitterTex854_g170872 = (localSamplePlanar3D246_g170880).x;
					half3 Model_PositionWS879_g170872 = Out_PositionWS15_g170889;
					#ifdef TVE_OVERLAY_GLITTER
					float3 staticSwitch868_g170872 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170872 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170872 ) / _OverlayGlitterDistValue ) ) ) );
					#else
					float3 staticSwitch868_g170872 = temp_cast_35;
					#endif
					half3 Overlay_GlitterColor865_g170872 = staticSwitch868_g170872;
					half Overlay_TexMask908_g170872 = 1.0;
					float3 temp_output_739_21_g170872 = Out_NormalWS4_g170873;
					half3 Visual_NormalWS749_g170872 = temp_output_739_21_g170872;
					float clampResult17_g170896 = clamp( saturate( (Visual_NormalWS749_g170872).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170900 = _OverlayProjRemap.x;
					float temp_output_9_0_g170900 = ( clampResult17_g170896 - temp_output_7_0_g170900 );
					float lerpResult842_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170900 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
					half Overlay_MaskProj457_g170872 = lerpResult842_g170872;
					float temp_output_739_15_g170872 = Out_Luminosity4_g170873;
					half Visual_Luminosity654_g170872 = temp_output_739_15_g170872;
					float clampResult17_g170904 = clamp( Visual_Luminosity654_g170872 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170905 = _OverlayLumaRemap.x;
					float temp_output_9_0_g170905 = ( clampResult17_g170904 - temp_output_7_0_g170905 );
					float lerpResult587_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170905 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
					half Overlay_MaskLuma438_g170872 = lerpResult587_g170872;
					half4 Model_VertexMasks791_g170872 = Out_VertexData15_g170889;
					float4 break792_g170872 = Model_VertexMasks791_g170872;
					float4 break33_g170891 = _overlay_vert_mode;
					float temp_output_30_0_g170891 = ( break792_g170872.x * break33_g170891.x );
					float temp_output_29_0_g170891 = ( break792_g170872.y * break33_g170891.y );
					float temp_output_31_0_g170891 = ( break792_g170872.z * break33_g170891.z );
					float temp_output_28_0_g170891 = ( temp_output_30_0_g170891 + temp_output_29_0_g170891 + temp_output_31_0_g170891 + ( break792_g170872.w * break33_g170891.w ) );
					float clampResult17_g170892 = clamp( temp_output_28_0_g170891 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170901 = _OverlayMeshRemap.x;
					float temp_output_9_0_g170901 = ( clampResult17_g170892 - temp_output_7_0_g170901 );
					float lerpResult881_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170901 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
					float temp_output_6_0_g170897 = lerpResult881_g170872;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170897 = ( temp_output_6_0_g170897 + _OverlayMeshMode );
					#else
					float staticSwitch14_g170897 = temp_output_6_0_g170897;
					#endif
					half Overlay_VertMask801_g170872 = staticSwitch14_g170897;
					half Overlay_MaskNoise427_g170872 = 1.0;
					TVEGlobalData Data15_g170874 = Data204_g170496;
					float Out_Dummy15_g170874 = 0;
					float4 Out_CoatDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170874 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170874 = Data15_g170874.Dummy;
					Out_CoatDataRT15_g170874 = Data15_g170874.CoatDataRT;
					Out_PaintDataRT15_g170874 = Data15_g170874.PaintDataRT;
					Out_GlowDataRT15_g170874= Data15_g170874.GlowDataRT;
					Out_AtmoDataRT15_g170874= Data15_g170874.AtmoDataRT;
					Out_FadeDataRT15_g170874= Data15_g170874.FadeDataRT;
					Out_FormDataRT15_g170874 = Data15_g170874.FormDataRT;
					Out_FlowDataRT15_g170874 = Data15_g170874.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170872 = Out_AtmoDataRT15_g170874;
					float temp_output_6_0_g170906 = (Global_AtmoParams516_g170872).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170906 = ( temp_output_6_0_g170906 + _OverlayElementMode );
					#else
					float staticSwitch14_g170906 = temp_output_6_0_g170906;
					#endif
					#ifdef TVE_OVERLAY_ELEMENT
					float staticSwitch705_g170872 = staticSwitch14_g170906;
					#else
					float staticSwitch705_g170872 = TVE_AtmoParams.z;
					#endif
					float lerpResult937_g170872 = lerp( 1.0 , ( staticSwitch705_g170872 * TVE_IsEnabled ) , _OverlayGlobalValue);
					half Overlay_MaskGlobal429_g170872 = lerpResult937_g170872;
					half Custom_Mask646_g170872 = 1.0;
					float temp_output_7_0_g170903 = _OverlayBlendRemap.x;
					float temp_output_9_0_g170903 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170872 * Overlay_MaskProj457_g170872 * Overlay_MaskLuma438_g170872 * Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 * Custom_Mask646_g170872 ) - temp_output_7_0_g170903 );
					half Overlay_Mask494_g170872 = saturate( ( ( temp_output_9_0_g170903 / ( _OverlayBlendRemap.y - temp_output_7_0_g170903 ) ) + 0.0001 ) );
					float3 lerpResult467_g170872 = lerp( Visual_Albedo127_g170872 , ( staticSwitch14_g170890 + Overlay_GlitterColor865_g170872 ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float3 staticSwitch577_g170872 = lerpResult467_g170872;
					#else
					float3 staticSwitch577_g170872 = Visual_Albedo127_g170872;
					#endif
					half3 Final_Albedo493_g170872 = staticSwitch577_g170872;
					float3 In_Albedo3_g170875 = Final_Albedo493_g170872;
					float3 In_AlbedoRaw3_g170875 = Out_AlbedoRaw4_g170873;
					half2 Visual_NormalTS535_g170872 = Out_NormalTS4_g170873;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170878) = _OverlayNormalTex;
					float localFilterTexture29_g170888 = ( 0.0 );
					SamplerState SS29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170888 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170888 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170888 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170888 = SamplerDefault29_g170888;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170888 = SamplerDefault29_g170888;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170888 = SamplerPoint29_g170888;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170888 = SamplerLow29_g170888;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170888 = SamplerMedium29_g170888;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170888 = SamplerHigh29_g170888;
					#endif
					}
					SamplerState Sampler238_g170878 = SS29_g170888;
					float4 temp_output_37_0_g170878 = Overlay_Coords639_g170872;
					half4 Coords238_g170878 = temp_output_37_0_g170878;
					float3 temp_output_279_0_g170878 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170878 = temp_output_279_0_g170878;
					half4 localSamplePlanar2D238_g170878 = SamplePlanar2D( Texture238_g170878 , Sampler238_g170878 , Coords238_g170878 , WorldPosition238_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170878) = _OverlayNormalTex;
					SamplerState Sampler246_g170878 = SS29_g170888;
					half4 Coords246_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition246_g170878 = temp_output_279_0_g170878;
					float3 temp_output_280_0_g170878 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170878 = temp_output_280_0_g170878;
					half4 localSamplePlanar3D246_g170878 = SamplePlanar3D( Texture246_g170878 , Sampler246_g170878 , Coords246_g170878 , WorldPosition246_g170878 , WorldNormal246_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170878) = _OverlayNormalTex;
					SamplerState Sampler234_g170878 = SS29_g170888;
					float4 Coords234_g170878 = temp_output_37_0_g170878;
					float3 WorldPosition234_g170878 = temp_output_279_0_g170878;
					float4 localSampleStochastic2D234_g170878 = SampleStochastic2D( Texture234_g170878 , Sampler234_g170878 , Coords234_g170878 , WorldPosition234_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170878) = _OverlayNormalTex;
					SamplerState Sampler263_g170878 = SS29_g170888;
					half4 Coords263_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition263_g170878 = temp_output_279_0_g170878;
					half3 WorldNormal263_g170878 = temp_output_280_0_g170878;
					half4 localSampleStochastic3D263_g170878 = SampleStochastic3D( Texture263_g170878 , Sampler263_g170878 , Coords263_g170878 , WorldPosition263_g170878 , WorldNormal263_g170878 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch686_g170872 = localSamplePlanar3D246_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch686_g170872 = localSampleStochastic2D234_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch686_g170872 = localSampleStochastic3D263_g170878;
					#else
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#endif
					half4 Normal_Packed45_g170881 = staticSwitch686_g170872;
					float2 appendResult58_g170881 = (float2(( (Normal_Packed45_g170881).x * (Normal_Packed45_g170881).w ) , (Normal_Packed45_g170881).y));
					half2 Normal_Default50_g170881 = appendResult58_g170881;
					half2 Normal_ASTC41_g170881 = (Normal_Packed45_g170881).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170881 = Normal_ASTC41_g170881;
					#else
					float2 staticSwitch38_g170881 = Normal_Default50_g170881;
					#endif
					half2 Normal_NO_DTX544_g170881 = (Normal_Packed45_g170881).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170881 = Normal_NO_DTX544_g170881;
					#else
					float2 staticSwitch37_g170881 = staticSwitch38_g170881;
					#endif
					float2 temp_output_623_0_g170872 = (staticSwitch37_g170881*2.0 + -1.0);
					half2 Overlay_Normal528_g170872 = temp_output_623_0_g170872;
					#ifdef TVE_OVERLAY_TEX
					float2 staticSwitch579_g170872 = Overlay_Normal528_g170872;
					#else
					float2 staticSwitch579_g170872 = Visual_NormalTS535_g170872;
					#endif
					float2 lerpResult551_g170872 = lerp( Visual_NormalTS535_g170872 , ( staticSwitch579_g170872 * _OverlayNormalValue ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float2 staticSwitch583_g170872 = lerpResult551_g170872;
					#else
					float2 staticSwitch583_g170872 = Visual_NormalTS535_g170872;
					#endif
					half2 Final_NormalTS499_g170872 = staticSwitch583_g170872;
					float2 In_NormalTS3_g170875 = Final_NormalTS499_g170872;
					float3 In_NormalWS3_g170875 = temp_output_739_21_g170872;
					half4 Visual_Masks536_g170872 = Out_Shader4_g170873;
					float4 appendResult585_g170872 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
					float4 lerpResult584_g170872 = lerp( Visual_Masks536_g170872 , appendResult585_g170872 , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float4 staticSwitch586_g170872 = lerpResult584_g170872;
					#else
					float4 staticSwitch586_g170872 = Visual_Masks536_g170872;
					#endif
					half4 Final_Masks482_g170872 = staticSwitch586_g170872;
					float4 In_Shader3_g170875 = Final_Masks482_g170872;
					float4 In_Emissive3_g170875 = Out_Emissive4_g170873;
					float temp_output_739_12_g170872 = Out_Grayscale4_g170873;
					float In_Grayscale3_g170875 = temp_output_739_12_g170872;
					float In_Luminosity3_g170875 = temp_output_739_15_g170872;
					float In_MultiMask3_g170875 = Out_MultiMask4_g170873;
					float In_AlphaClip3_g170875 = Out_AlphaClip4_g170873;
					float In_AlphaFade3_g170875 = Out_AlphaFade4_g170873;
					float3 In_Translucency3_g170875 = Out_Translucency4_g170873;
					half Visual_Transmission699_g170872 = Out_Transmission4_g170873;
					float lerpResult746_g170872 = lerp( Visual_Transmission699_g170872 , ( Visual_Transmission699_g170872 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 ));
					#ifdef TVE_OVERLAY
					float staticSwitch703_g170872 = lerpResult746_g170872;
					#else
					float staticSwitch703_g170872 = Visual_Transmission699_g170872;
					#endif
					half Final_Transmission702_g170872 = staticSwitch703_g170872;
					float In_Transmission3_g170875 = Final_Transmission702_g170872;
					float In_Thickness3_g170875 = Out_Thickness4_g170873;
					float In_Diffusion3_g170875 = Out_Diffusion4_g170873;
					float In_Depth3_g170875 = Out_Depth4_g170873;
					{
					Data3_g170875.Dummy = In_Dummy3_g170875;
					Data3_g170875.Albedo = In_Albedo3_g170875;
					Data3_g170875.AlbedoRaw = In_AlbedoRaw3_g170875;
					Data3_g170875.NormalTS = In_NormalTS3_g170875;
					Data3_g170875.NormalWS = In_NormalWS3_g170875;
					Data3_g170875.Shader = In_Shader3_g170875;
					Data3_g170875.Emissive= In_Emissive3_g170875;
					Data3_g170875.MultiMask = In_MultiMask3_g170875;
					Data3_g170875.Grayscale = In_Grayscale3_g170875;
					Data3_g170875.Luminosity = In_Luminosity3_g170875;
					Data3_g170875.AlphaClip = In_AlphaClip3_g170875;
					Data3_g170875.AlphaFade = In_AlphaFade3_g170875;
					Data3_g170875.Translucency = In_Translucency3_g170875;
					Data3_g170875.Transmission = In_Transmission3_g170875;
					Data3_g170875.Thickness = In_Thickness3_g170875;
					Data3_g170875.Diffusion = In_Diffusion3_g170875;
					Data3_g170875.Depth = In_Depth3_g170875;
					}
					TVEVisualData Data4_g170910 = Data3_g170875;
					float Out_Dummy4_g170910 = 0;
					float3 Out_Albedo4_g170910 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170910 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170910 = float2( 0,0 );
					float3 Out_NormalWS4_g170910 = float3( 0,0,0 );
					float4 Out_Shader4_g170910 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170910 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170910 = 0;
					float Out_Grayscale4_g170910 = 0;
					float Out_Luminosity4_g170910 = 0;
					float Out_AlphaClip4_g170910 = 0;
					float Out_AlphaFade4_g170910 = 0;
					float3 Out_Translucency4_g170910 = float3( 0,0,0 );
					float Out_Transmission4_g170910 = 0;
					float Out_Thickness4_g170910 = 0;
					float Out_Diffusion4_g170910 = 0;
					float Out_Depth4_g170910 = 0;
					{
					Out_Dummy4_g170910 = Data4_g170910.Dummy;
					Out_Albedo4_g170910 = Data4_g170910.Albedo;
					Out_AlbedoRaw4_g170910 = Data4_g170910.AlbedoRaw;
					Out_NormalTS4_g170910 = Data4_g170910.NormalTS;
					Out_NormalWS4_g170910 = Data4_g170910.NormalWS;
					Out_Shader4_g170910 = Data4_g170910.Shader;
					Out_Emissive4_g170910= Data4_g170910.Emissive;
					Out_MultiMask4_g170910 = Data4_g170910.MultiMask;
					Out_Grayscale4_g170910 = Data4_g170910.Grayscale;
					Out_Luminosity4_g170910= Data4_g170910.Luminosity;
					Out_AlphaClip4_g170910 = Data4_g170910.AlphaClip;
					Out_AlphaFade4_g170910 = Data4_g170910.AlphaFade;
					Out_Translucency4_g170910 = Data4_g170910.Translucency;
					Out_Transmission4_g170910 = Data4_g170910.Transmission;
					Out_Thickness4_g170910 = Data4_g170910.Thickness;
					Out_Diffusion4_g170910 = Data4_g170910.Diffusion;
					Out_Depth4_g170910= Data4_g170910.Depth;
					}
					half3 Visual_Albedo127_g170909 = Out_Albedo4_g170910;
					TVEGlobalData Data15_g170915 = Data204_g170496;
					float Out_Dummy15_g170915 = 0;
					float4 Out_CoatDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170915 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170915 = Data15_g170915.Dummy;
					Out_CoatDataRT15_g170915 = Data15_g170915.CoatDataRT;
					Out_PaintDataRT15_g170915 = Data15_g170915.PaintDataRT;
					Out_GlowDataRT15_g170915= Data15_g170915.GlowDataRT;
					Out_AtmoDataRT15_g170915= Data15_g170915.AtmoDataRT;
					Out_FadeDataRT15_g170915= Data15_g170915.FadeDataRT;
					Out_FormDataRT15_g170915 = Data15_g170915.FormDataRT;
					Out_FlowDataRT15_g170915 = Data15_g170915.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170909 = Out_AtmoDataRT15_g170915;
					float4 temp_output_6_0_g170936 = Global_AtmoParams516_g170909;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170936 = ( temp_output_6_0_g170936 + _WetnessElementMode );
					#else
					float4 staticSwitch14_g170936 = temp_output_6_0_g170936;
					#endif
					#ifdef TVE_WETNESS_ELEMENT
					float4 staticSwitch663_g170909 = staticSwitch14_g170936;
					#else
					float4 staticSwitch663_g170909 = TVE_AtmoParams;
					#endif
					float2 lerpResult1121_g170909 = lerp( float2( 1,1 ) , (( staticSwitch663_g170909 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
					float2 break1123_g170909 = lerpResult1121_g170909;
					half Global_Wetness429_g170909 = break1123_g170909.x;
					half Wetness_Value1042_g170909 = ( _WetnessIntensityValue * Global_Wetness429_g170909 );
					TVEModelData Data15_g170921 = Data16_g170483;
					float Out_Dummy15_g170921 = 0;
					float3 Out_PositionWS15_g170921 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170921 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170921 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170921 = float3( 0,0,0 );
					float4 Out_VertexData15_g170921 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170921 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170921 = Data15_g170921.Dummy;
					Out_PositionWS15_g170921 = Data15_g170921.PositionWS;
					Out_PositionWO15_g170921 = Data15_g170921.PositionWO;
					Out_PivotWS15_g170921 = Data15_g170921.PivotWS;
					Out_PivotWO15_g170921 = Data15_g170921.PivotWO;
					Out_NormalWS15_g170921 = Data15_g170921.NormalWS;
					Out_ViewDirWS15_g170921 = Data15_g170921.ViewDirWS;
					Out_VertexData15_g170921 = Data15_g170921.VertexData;
					Out_BoundsData15_g170921 = Data15_g170921.BoundsData;
					}
					half4 Model_VertexData1030_g170909 = Out_VertexData15_g170921;
					float4 break1019_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170924 = _wetness_vert_mode;
					float temp_output_30_0_g170924 = ( break1019_g170909.x * break33_g170924.x );
					float temp_output_29_0_g170924 = ( break1019_g170909.y * break33_g170924.y );
					float temp_output_31_0_g170924 = ( break1019_g170909.z * break33_g170924.z );
					float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1019_g170909.w * break33_g170924.w ) );
					float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170932 = _WetnessMeshRemap.x;
					float temp_output_9_0_g170932 = ( clampResult17_g170923 - temp_output_7_0_g170932 );
					float lerpResult1026_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170932 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
					float temp_output_6_0_g170925 = lerpResult1026_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + _WetnessMeshMode );
					#else
					float staticSwitch14_g170925 = temp_output_6_0_g170925;
					#endif
					float temp_output_1025_0_g170909 = staticSwitch14_g170925;
					half Wetness_VertMask1024_g170909 = temp_output_1025_0_g170909;
					float temp_output_1043_0_g170909 = ( Wetness_Value1042_g170909 * Wetness_VertMask1024_g170909 );
					half Wetness_Mask866_g170909 = temp_output_1043_0_g170909;
					float4 break1083_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170927 = _wetness_water_vert_mode;
					float temp_output_30_0_g170927 = ( break1083_g170909.x * break33_g170927.x );
					float temp_output_29_0_g170927 = ( break1083_g170909.y * break33_g170927.y );
					float temp_output_31_0_g170927 = ( break1083_g170909.z * break33_g170927.z );
					float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1083_g170909.w * break33_g170927.w ) );
					float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170933 = _WetnessWaterMeshRemap.x;
					float temp_output_9_0_g170933 = ( clampResult17_g170926 - temp_output_7_0_g170933 );
					float lerpResult1089_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170933 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
					float temp_output_6_0_g170928 = lerpResult1089_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + _WetnessWaterMeshMode );
					#else
					float staticSwitch14_g170928 = temp_output_6_0_g170928;
					#endif
					float temp_output_1091_0_g170909 = staticSwitch14_g170928;
					half Water_VertMask1094_g170909 = temp_output_1091_0_g170909;
					half4 Visual_Masks536_g170909 = Out_Shader4_g170910;
					float lerpResult1013_g170909 = lerp( 1.0 , (Visual_Masks536_g170909).z , _WetnessWaterBaseValue);
					half Water_HeightMask782_g170909 = lerpResult1013_g170909;
					float clampResult17_g170922 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170909 * Water_VertMask1094_g170909 ) - Water_HeightMask782_g170909 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170935 = _WetnessWaterBlendRemap.x;
					float temp_output_9_0_g170935 = ( clampResult17_g170922 - temp_output_7_0_g170935 );
					half3 Model_NormalWS798_g170909 = Out_NormalWS15_g170921;
					float temp_output_786_0_g170909 = saturate( (Model_NormalWS798_g170909).y );
					half Wetness_ProjMask790_g170909 = temp_output_786_0_g170909;
					half Water_Mask760_g170909 = ( saturate( ( ( temp_output_9_0_g170935 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170909 );
					float3 lerpResult918_g170909 = lerp( Visual_Albedo127_g170909 , ( Visual_Albedo127_g170909 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float3 staticSwitch946_g170909 = lerpResult918_g170909;
					#else
					float3 staticSwitch946_g170909 = Visual_Albedo127_g170909;
					#endif
					float3 lerpResult768_g170909 = lerp( staticSwitch946_g170909 , ( staticSwitch946_g170909 * staticSwitch946_g170909 ) , _WetnessContrastValue);
					float3 lerpResult651_g170909 = lerp( Visual_Albedo127_g170909 , lerpResult768_g170909 , Wetness_Mask866_g170909);
					#ifdef TVE_WETNESS
					float3 staticSwitch577_g170909 = lerpResult651_g170909;
					#else
					float3 staticSwitch577_g170909 = Visual_Albedo127_g170909;
					#endif
					half3 Final_Albedo493_g170909 = staticSwitch577_g170909;
					float3 In_Albedo3_g170911 = Final_Albedo493_g170909;
					float3 In_AlbedoRaw3_g170911 = Out_AlbedoRaw4_g170910;
					half2 Visual_Normal535_g170909 = Out_NormalTS4_g170910;
					float lerpResult877_g170909 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch957_g170909 = ( Visual_Normal535_g170909 * lerpResult877_g170909 );
					#else
					float2 staticSwitch957_g170909 = Visual_Normal535_g170909;
					#endif
					float2 temp_cast_36 = (0.0).xx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170919) = _WetnessDropsTexRT;
					SamplerState Sampler238_g170919 = sampler_Linear_Repeat_Aniso8;
					float4 appendResult924_g170909 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170919 = appendResult924_g170909;
					half4 Coords238_g170919 = temp_output_37_0_g170919;
					half3 Model_PositionWO602_g170909 = Out_PositionWO15_g170921;
					float3 temp_output_279_0_g170919 = Model_PositionWO602_g170909;
					half3 WorldPosition238_g170919 = temp_output_279_0_g170919;
					half4 localSamplePlanar2D238_g170919 = SamplePlanar2D( Texture238_g170919 , Sampler238_g170919 , Coords238_g170919 , WorldPosition238_g170919 );
					float4 temp_output_1010_0_g170909 = localSamplePlanar2D238_g170919;
					half2 Rain_DropsNormal919_g170909 = (temp_output_1010_0_g170909).zw;
					float2 temp_output_903_0_g170909 = (Rain_DropsNormal919_g170909*2.0 + -1.0);
					half2 Rain_RingsNormal713_g170909 = (temp_output_1010_0_g170909).xy;
					float2 lerpResult904_g170909 = lerp( temp_output_903_0_g170909 , (Rain_RingsNormal713_g170909*2.0 + -1.0) , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch960_g170909 = lerpResult904_g170909;
					#else
					float2 staticSwitch960_g170909 = temp_output_903_0_g170909;
					#endif
					half2 Rain_Drops1002_g170909 = ( staticSwitch960_g170909 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
					half3 Model_PositionWS823_g170909 = Out_PositionWS15_g170921;
					half Global_Rain955_g170909 = break1123_g170909.y;
					half Rain_Value1067_g170909 = Global_Rain955_g170909;
					float4 break1097_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170930 = _wetness_drops_vert_mode;
					float temp_output_30_0_g170930 = ( break1097_g170909.x * break33_g170930.x );
					float temp_output_29_0_g170930 = ( break1097_g170909.y * break33_g170930.y );
					float temp_output_31_0_g170930 = ( break1097_g170909.z * break33_g170930.z );
					float temp_output_28_0_g170930 = ( temp_output_30_0_g170930 + temp_output_29_0_g170930 + temp_output_31_0_g170930 + ( break1097_g170909.w * break33_g170930.w ) );
					float clampResult17_g170929 = clamp( temp_output_28_0_g170930 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170934 = _WetnessDropsMeshRemap.x;
					float temp_output_9_0_g170934 = ( clampResult17_g170929 - temp_output_7_0_g170934 );
					float lerpResult1100_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170934 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
					float temp_output_6_0_g170931 = lerpResult1100_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170931 = ( temp_output_6_0_g170931 + _WetnessDropsMeshMode );
					#else
					float staticSwitch14_g170931 = temp_output_6_0_g170931;
					#endif
					float temp_output_1101_0_g170909 = staticSwitch14_g170931;
					half Rain_VertMask1108_g170909 = temp_output_1101_0_g170909;
					half Rain_Mask999_g170909 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170909 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170909 * Rain_VertMask1108_g170909 );
					half2 Normal_Planar45_g170918 = ( Rain_Drops1002_g170909 * Rain_Mask999_g170909 * Wetness_ProjMask790_g170909 );
					float2 break71_g170918 = Normal_Planar45_g170918;
					float3 appendResult72_g170918 = (float3(break71_g170918.x , 0.0 , break71_g170918.y));
					half2 Wetness_Normal526_g170909 = (mul( ase_worldToTangent, appendResult72_g170918 )).xy;
					#ifdef TVE_WETNESS_DROPS
					float2 staticSwitch583_g170909 = Wetness_Normal526_g170909;
					#else
					float2 staticSwitch583_g170909 = temp_cast_36;
					#endif
					#ifdef TVE_WETNESS
					float2 staticSwitch774_g170909 = ( staticSwitch957_g170909 + staticSwitch583_g170909 );
					#else
					float2 staticSwitch774_g170909 = Visual_Normal535_g170909;
					#endif
					half2 Final_Normal499_g170909 = staticSwitch774_g170909;
					float2 In_NormalTS3_g170911 = Final_Normal499_g170909;
					float3 In_NormalWS3_g170911 = Out_NormalWS4_g170910;
					float4 break658_g170909 = Visual_Masks536_g170909;
					float temp_output_935_0_g170909 = ( Wetness_Mask866_g170909 * _WetnessSmoothnessValue );
					float lerpResult941_g170909 = lerp( temp_output_935_0_g170909 , 2.0 , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float staticSwitch959_g170909 = lerpResult941_g170909;
					#else
					float staticSwitch959_g170909 = temp_output_935_0_g170909;
					#endif
					float4 appendResult661_g170909 = (float4(break658_g170909.x , break658_g170909.y , break658_g170909.z , saturate( ( break658_g170909.w + staticSwitch959_g170909 ) )));
					#ifdef TVE_WETNESS
					float4 staticSwitch586_g170909 = appendResult661_g170909;
					#else
					float4 staticSwitch586_g170909 = Visual_Masks536_g170909;
					#endif
					half4 Final_Masks482_g170909 = staticSwitch586_g170909;
					float4 In_Shader3_g170911 = Final_Masks482_g170909;
					float4 In_Emissive3_g170911 = Out_Emissive4_g170910;
					float In_Grayscale3_g170911 = Out_Grayscale4_g170910;
					float In_Luminosity3_g170911 = Out_Luminosity4_g170910;
					float In_MultiMask3_g170911 = Out_MultiMask4_g170910;
					float In_AlphaClip3_g170911 = Out_AlphaClip4_g170910;
					float In_AlphaFade3_g170911 = Out_AlphaFade4_g170910;
					float3 In_Translucency3_g170911 = Out_Translucency4_g170910;
					float In_Transmission3_g170911 = Out_Transmission4_g170910;
					float In_Thickness3_g170911 = Out_Thickness4_g170910;
					float In_Diffusion3_g170911 = Out_Diffusion4_g170910;
					float In_Depth3_g170911 = Out_Depth4_g170910;
					{
					Data3_g170911.Dummy = In_Dummy3_g170911;
					Data3_g170911.Albedo = In_Albedo3_g170911;
					Data3_g170911.AlbedoRaw = In_AlbedoRaw3_g170911;
					Data3_g170911.NormalTS = In_NormalTS3_g170911;
					Data3_g170911.NormalWS = In_NormalWS3_g170911;
					Data3_g170911.Shader = In_Shader3_g170911;
					Data3_g170911.Emissive= In_Emissive3_g170911;
					Data3_g170911.MultiMask = In_MultiMask3_g170911;
					Data3_g170911.Grayscale = In_Grayscale3_g170911;
					Data3_g170911.Luminosity = In_Luminosity3_g170911;
					Data3_g170911.AlphaClip = In_AlphaClip3_g170911;
					Data3_g170911.AlphaFade = In_AlphaFade3_g170911;
					Data3_g170911.Translucency = In_Translucency3_g170911;
					Data3_g170911.Transmission = In_Transmission3_g170911;
					Data3_g170911.Thickness = In_Thickness3_g170911;
					Data3_g170911.Diffusion = In_Diffusion3_g170911;
					Data3_g170911.Depth = In_Depth3_g170911;
					}
					TVEVisualData Data4_g170941 = Data3_g170911;
					float Out_Dummy4_g170941 = 0;
					float3 Out_Albedo4_g170941 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170941 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170941 = float2( 0,0 );
					float3 Out_NormalWS4_g170941 = float3( 0,0,0 );
					float4 Out_Shader4_g170941 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170941 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170941 = 0;
					float Out_Grayscale4_g170941 = 0;
					float Out_Luminosity4_g170941 = 0;
					float Out_AlphaClip4_g170941 = 0;
					float Out_AlphaFade4_g170941 = 0;
					float3 Out_Translucency4_g170941 = float3( 0,0,0 );
					float Out_Transmission4_g170941 = 0;
					float Out_Thickness4_g170941 = 0;
					float Out_Diffusion4_g170941 = 0;
					float Out_Depth4_g170941 = 0;
					{
					Out_Dummy4_g170941 = Data4_g170941.Dummy;
					Out_Albedo4_g170941 = Data4_g170941.Albedo;
					Out_AlbedoRaw4_g170941 = Data4_g170941.AlbedoRaw;
					Out_NormalTS4_g170941 = Data4_g170941.NormalTS;
					Out_NormalWS4_g170941 = Data4_g170941.NormalWS;
					Out_Shader4_g170941 = Data4_g170941.Shader;
					Out_Emissive4_g170941= Data4_g170941.Emissive;
					Out_MultiMask4_g170941 = Data4_g170941.MultiMask;
					Out_Grayscale4_g170941 = Data4_g170941.Grayscale;
					Out_Luminosity4_g170941= Data4_g170941.Luminosity;
					Out_AlphaClip4_g170941 = Data4_g170941.AlphaClip;
					Out_AlphaFade4_g170941 = Data4_g170941.AlphaFade;
					Out_Translucency4_g170941 = Data4_g170941.Translucency;
					Out_Transmission4_g170941 = Data4_g170941.Transmission;
					Out_Thickness4_g170941 = Data4_g170941.Thickness;
					Out_Diffusion4_g170941 = Data4_g170941.Diffusion;
					Out_Depth4_g170941= Data4_g170941.Depth;
					}
					float3 In_Albedo3_g170939 = Out_Albedo4_g170941;
					float3 In_AlbedoRaw3_g170939 = Out_AlbedoRaw4_g170941;
					float2 In_NormalTS3_g170939 = Out_NormalTS4_g170941;
					float3 In_NormalWS3_g170939 = Out_NormalWS4_g170941;
					float4 In_Shader3_g170939 = Out_Shader4_g170941;
					float4 In_Emissive3_g170939 = Out_Emissive4_g170941;
					float In_Grayscale3_g170939 = Out_Grayscale4_g170941;
					float In_Luminosity3_g170939 = Out_Luminosity4_g170941;
					float temp_output_836_11_g170938 = Out_MultiMask4_g170941;
					float In_MultiMask3_g170939 = temp_output_836_11_g170938;
					half Visual_AlphaClip667_g170938 = Out_AlphaClip4_g170941;
					TVEGlobalData Data15_g170940 = Data204_g170496;
					float Out_Dummy15_g170940 = 0;
					float4 Out_CoatDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170940 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170940 = Data15_g170940.Dummy;
					Out_CoatDataRT15_g170940 = Data15_g170940.CoatDataRT;
					Out_PaintDataRT15_g170940 = Data15_g170940.PaintDataRT;
					Out_GlowDataRT15_g170940= Data15_g170940.GlowDataRT;
					Out_AtmoDataRT15_g170940= Data15_g170940.AtmoDataRT;
					Out_FadeDataRT15_g170940= Data15_g170940.FadeDataRT;
					Out_FormDataRT15_g170940 = Data15_g170940.FormDataRT;
					Out_FlowDataRT15_g170940 = Data15_g170940.FlowDataRT;
					}
					half4 Global_FadeParams516_g170938 = Out_FadeDataRT15_g170940;
					float temp_output_6_0_g170947 = saturate( (Global_FadeParams516_g170938).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170947 = ( temp_output_6_0_g170947 + _CutoutElementMode );
					#else
					float staticSwitch14_g170947 = temp_output_6_0_g170947;
					#endif
					#ifdef TVE_CUTOUT_ELEMENT
					float staticSwitch663_g170938 = staticSwitch14_g170947;
					#else
					float staticSwitch663_g170938 = TVE_FadeParams.w;
					#endif
					float lerpResult843_g170938 = lerp( 1.0 , ( staticSwitch663_g170938 * TVE_IsEnabled ) , _CutoutGlobalValue);
					half Local_GlobalMask429_g170938 = lerpResult843_g170938;
					float lerpResult811_g170938 = lerp( 1.0 , Visual_AlphaClip667_g170938 , _CutoutAlphaValue);
					half Local_AlphaMask814_g170938 = lerpResult811_g170938;
					TVEModelData Data15_g170942 = Data16_g170483;
					float Out_Dummy15_g170942 = 0;
					float3 Out_PositionWS15_g170942 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170942 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170942 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170942 = float3( 0,0,0 );
					float4 Out_VertexData15_g170942 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170942 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170942 = Data15_g170942.Dummy;
					Out_PositionWS15_g170942 = Data15_g170942.PositionWS;
					Out_PositionWO15_g170942 = Data15_g170942.PositionWO;
					Out_PivotWS15_g170942 = Data15_g170942.PivotWS;
					Out_PivotWO15_g170942 = Data15_g170942.PivotWO;
					Out_NormalWS15_g170942 = Data15_g170942.NormalWS;
					Out_ViewDirWS15_g170942 = Data15_g170942.ViewDirWS;
					Out_VertexData15_g170942 = Data15_g170942.VertexData;
					Out_BoundsData15_g170942 = Data15_g170942.BoundsData;
					}
					half3 Model_PositionWO602_g170938 = Out_PositionWO15_g170942;
					float lerpResult673_g170938 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170938 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
					half Local_NoiseMask678_g170938 = lerpResult673_g170938;
					half4 Model_VertexMasks752_g170938 = Out_VertexData15_g170942;
					float4 break755_g170938 = Model_VertexMasks752_g170938;
					float4 break33_g170943 = _cutout_vert_mode;
					float temp_output_30_0_g170943 = ( break755_g170938.x * break33_g170943.x );
					float temp_output_29_0_g170943 = ( break755_g170938.y * break33_g170943.y );
					float temp_output_31_0_g170943 = ( break755_g170938.z * break33_g170943.z );
					float temp_output_28_0_g170943 = ( temp_output_30_0_g170943 + temp_output_29_0_g170943 + temp_output_31_0_g170943 + ( break755_g170938.w * break33_g170943.w ) );
					float clampResult17_g170944 = clamp( temp_output_28_0_g170943 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170946 = _CutoutMeshRemap.x;
					float temp_output_9_0_g170946 = ( clampResult17_g170944 - temp_output_7_0_g170946 );
					float lerpResult820_g170938 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170946 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
					float temp_output_6_0_g170945 = lerpResult820_g170938;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170945 = ( temp_output_6_0_g170945 + _CutoutMeshMode );
					#else
					float staticSwitch14_g170945 = temp_output_6_0_g170945;
					#endif
					float temp_output_801_0_g170938 = staticSwitch14_g170945;
					half Local_VertMask766_g170938 = temp_output_801_0_g170938;
					half Visual_MultiMask671_g170938 = temp_output_836_11_g170938;
					float lerpResult683_g170938 = lerp( 1.0 , Visual_MultiMask671_g170938 , _CutoutMultiValue);
					half Local_MultiMask685_g170938 = lerpResult683_g170938;
					float lerpResult728_g170938 = lerp( Visual_AlphaClip667_g170938 , min( Visual_AlphaClip667_g170938 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170938 ) - ( Local_AlphaMask814_g170938 * Local_NoiseMask678_g170938 * Local_VertMask766_g170938 ) ) ) ) , Local_MultiMask685_g170938);
					half Local_AlphaClip784_g170938 = lerpResult728_g170938;
					#ifdef TVE_CUTOUT
					float staticSwitch577_g170938 = Local_AlphaClip784_g170938;
					#else
					float staticSwitch577_g170938 = Visual_AlphaClip667_g170938;
					#endif
					half Final_AlphaClip795_g170938 = staticSwitch577_g170938;
					float In_AlphaClip3_g170939 = Final_AlphaClip795_g170938;
					float In_AlphaFade3_g170939 = Out_AlphaFade4_g170941;
					float3 In_Translucency3_g170939 = Out_Translucency4_g170941;
					float In_Transmission3_g170939 = Out_Transmission4_g170941;
					float In_Thickness3_g170939 = Out_Thickness4_g170941;
					float In_Diffusion3_g170939 = Out_Diffusion4_g170941;
					float In_Depth3_g170939 = Out_Depth4_g170941;
					{
					Data3_g170939.Dummy = In_Dummy3_g170939;
					Data3_g170939.Albedo = In_Albedo3_g170939;
					Data3_g170939.AlbedoRaw = In_AlbedoRaw3_g170939;
					Data3_g170939.NormalTS = In_NormalTS3_g170939;
					Data3_g170939.NormalWS = In_NormalWS3_g170939;
					Data3_g170939.Shader = In_Shader3_g170939;
					Data3_g170939.Emissive= In_Emissive3_g170939;
					Data3_g170939.MultiMask = In_MultiMask3_g170939;
					Data3_g170939.Grayscale = In_Grayscale3_g170939;
					Data3_g170939.Luminosity = In_Luminosity3_g170939;
					Data3_g170939.AlphaClip = In_AlphaClip3_g170939;
					Data3_g170939.AlphaFade = In_AlphaFade3_g170939;
					Data3_g170939.Translucency = In_Translucency3_g170939;
					Data3_g170939.Transmission = In_Transmission3_g170939;
					Data3_g170939.Thickness = In_Thickness3_g170939;
					Data3_g170939.Diffusion = In_Diffusion3_g170939;
					Data3_g170939.Depth = In_Depth3_g170939;
					}
					TVEVisualData Data4_g170957 = Data3_g170939;
					float Out_Dummy4_g170957 = 0;
					float3 Out_Albedo4_g170957 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170957 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170957 = float2( 0,0 );
					float3 Out_NormalWS4_g170957 = float3( 0,0,0 );
					float4 Out_Shader4_g170957 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170957 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170957 = 0;
					float Out_Grayscale4_g170957 = 0;
					float Out_Luminosity4_g170957 = 0;
					float Out_AlphaClip4_g170957 = 0;
					float Out_AlphaFade4_g170957 = 0;
					float3 Out_Translucency4_g170957 = float3( 0,0,0 );
					float Out_Transmission4_g170957 = 0;
					float Out_Thickness4_g170957 = 0;
					float Out_Diffusion4_g170957 = 0;
					float Out_Depth4_g170957 = 0;
					{
					Out_Dummy4_g170957 = Data4_g170957.Dummy;
					Out_Albedo4_g170957 = Data4_g170957.Albedo;
					Out_AlbedoRaw4_g170957 = Data4_g170957.AlbedoRaw;
					Out_NormalTS4_g170957 = Data4_g170957.NormalTS;
					Out_NormalWS4_g170957 = Data4_g170957.NormalWS;
					Out_Shader4_g170957 = Data4_g170957.Shader;
					Out_Emissive4_g170957= Data4_g170957.Emissive;
					Out_MultiMask4_g170957 = Data4_g170957.MultiMask;
					Out_Grayscale4_g170957 = Data4_g170957.Grayscale;
					Out_Luminosity4_g170957= Data4_g170957.Luminosity;
					Out_AlphaClip4_g170957 = Data4_g170957.AlphaClip;
					Out_AlphaFade4_g170957 = Data4_g170957.AlphaFade;
					Out_Translucency4_g170957 = Data4_g170957.Translucency;
					Out_Transmission4_g170957 = Data4_g170957.Transmission;
					Out_Thickness4_g170957 = Data4_g170957.Thickness;
					Out_Diffusion4_g170957 = Data4_g170957.Diffusion;
					Out_Depth4_g170957= Data4_g170957.Depth;
					}
					float3 In_Albedo3_g170958 = Out_Albedo4_g170957;
					float3 In_AlbedoRaw3_g170958 = Out_AlbedoRaw4_g170957;
					float2 In_NormalTS3_g170958 = Out_NormalTS4_g170957;
					float3 In_NormalWS3_g170958 = Out_NormalWS4_g170957;
					float4 In_Shader3_g170958 = Out_Shader4_g170957;
					float4 In_Emissive3_g170958 = Out_Emissive4_g170957;
					float In_Grayscale3_g170958 = Out_Grayscale4_g170957;
					float In_Luminosity3_g170958 = Out_Luminosity4_g170957;
					float temp_output_821_11_g170955 = Out_MultiMask4_g170957;
					float In_MultiMask3_g170958 = temp_output_821_11_g170955;
					half Visual_AlphaClip754_g170955 = Out_AlphaClip4_g170957;
					half Dither_Constant768_g170955 = _DitherConstantValue;
					float3 ase_positionWS = IN.ase_texcoord11.xyz;
					half Dither_BiasProximity881_g170955 = TVE_DitherParams.x;
					half Dither_BiasEnabled883_g170955 = TVE_DitherParams.w;
					float lerpResult884_g170955 = lerp( 1.0 , Dither_BiasProximity881_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170960 = _DitherProximityMaxValue;
					float temp_output_9_0_g170960 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170955 ) - temp_output_7_0_g170960 );
					half Dither_Proximity767_g170955 = ( saturate( ( ( temp_output_9_0_g170960 / ( _DitherProximityMinValue - temp_output_7_0_g170960 ) ) + 0.0001 ) ) * _DitherProximityValue );
					TVEModelData Data15_g170959 = Data16_g170483;
					float Out_Dummy15_g170959 = 0;
					float3 Out_PositionWS15_g170959 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170959 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170959 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170959 = float3( 0,0,0 );
					float4 Out_VertexData15_g170959 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170959 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170959 = Data15_g170959.Dummy;
					Out_PositionWS15_g170959 = Data15_g170959.PositionWS;
					Out_PositionWO15_g170959 = Data15_g170959.PositionWO;
					Out_PivotWS15_g170959 = Data15_g170959.PivotWS;
					Out_PivotWO15_g170959 = Data15_g170959.PivotWO;
					Out_NormalWS15_g170959 = Data15_g170959.NormalWS;
					Out_ViewDirWS15_g170959 = Data15_g170959.ViewDirWS;
					Out_VertexData15_g170959 = Data15_g170959.VertexData;
					Out_BoundsData15_g170959 = Data15_g170959.BoundsData;
					}
					half3 Model_PositionWS776_g170955 = Out_PositionWS15_g170959;
					half Dither_BiasDistance882_g170955 = TVE_DitherParams.z;
					float lerpResult888_g170955 = lerp( 1.0 , Dither_BiasDistance882_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170961 = _DitherDistanceMinValue;
					float temp_output_9_0_g170961 = ( ( distance( Model_PositionWS776_g170955 , _WorldSpaceCameraPos ) * lerpResult888_g170955 ) - temp_output_7_0_g170961 );
					half Dither_Distance856_g170955 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherDistanceMaxValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherDistanceValue );
					half3 Model_ViewDirWS845_g170955 = Out_ViewDirWS15_g170959;
					float3 normalizeResult792_g170955 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
					float dotResult778_g170955 = dot( Model_ViewDirWS845_g170955 , normalizeResult792_g170955 );
					half Dither_Glancing784_g170955 = ( saturate( ( ( 1.0 - abs( dotResult778_g170955 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
					half Dither_Value429_g170955 = max( max( max( Dither_Constant768_g170955 , Dither_Proximity767_g170955 ) , Dither_Distance856_g170955 ) , Dither_Glancing784_g170955 );
					half3 Model_PositionWO602_g170955 = Out_PositionWO15_g170959;
					half3 Dither_PositionWO895_g170955 = ( Model_PositionWO602_g170955 * 20.0 );
					half Local_MaskNoise678_g170955 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170955 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
					half Visual_MultiMask671_g170955 = temp_output_821_11_g170955;
					float lerpResult683_g170955 = lerp( 1.0 , Visual_MultiMask671_g170955 , _DitherMultiValue);
					half Local_MaskMulti685_g170955 = lerpResult683_g170955;
					half Custom_Mask826_g170955 = 1.0;
					float lerpResult728_g170955 = lerp( Visual_AlphaClip754_g170955 , min( Visual_AlphaClip754_g170955 , ( -0.001 - ( Dither_Value429_g170955 - Local_MaskNoise678_g170955 ) ) ) , ( Local_MaskMulti685_g170955 * Custom_Mask826_g170955 ));
					half Local_AlphaClip834_g170955 = lerpResult728_g170955;
					#ifdef TVE_DITHER
					float staticSwitch577_g170955 = Local_AlphaClip834_g170955;
					#else
					float staticSwitch577_g170955 = Visual_AlphaClip754_g170955;
					#endif
					half Final_AlphaClip493_g170955 = staticSwitch577_g170955;
					float In_AlphaClip3_g170958 = Final_AlphaClip493_g170955;
					float In_AlphaFade3_g170958 = Out_AlphaFade4_g170957;
					float3 In_Translucency3_g170958 = Out_Translucency4_g170957;
					float In_Transmission3_g170958 = Out_Transmission4_g170957;
					float In_Thickness3_g170958 = Out_Thickness4_g170957;
					float In_Diffusion3_g170958 = Out_Diffusion4_g170957;
					float In_Depth3_g170958 = Out_Depth4_g170957;
					{
					Data3_g170958.Dummy = In_Dummy3_g170958;
					Data3_g170958.Albedo = In_Albedo3_g170958;
					Data3_g170958.AlbedoRaw = In_AlbedoRaw3_g170958;
					Data3_g170958.NormalTS = In_NormalTS3_g170958;
					Data3_g170958.NormalWS = In_NormalWS3_g170958;
					Data3_g170958.Shader = In_Shader3_g170958;
					Data3_g170958.Emissive= In_Emissive3_g170958;
					Data3_g170958.MultiMask = In_MultiMask3_g170958;
					Data3_g170958.Grayscale = In_Grayscale3_g170958;
					Data3_g170958.Luminosity = In_Luminosity3_g170958;
					Data3_g170958.AlphaClip = In_AlphaClip3_g170958;
					Data3_g170958.AlphaFade = In_AlphaFade3_g170958;
					Data3_g170958.Translucency = In_Translucency3_g170958;
					Data3_g170958.Transmission = In_Transmission3_g170958;
					Data3_g170958.Thickness = In_Thickness3_g170958;
					Data3_g170958.Diffusion = In_Diffusion3_g170958;
					Data3_g170958.Depth = In_Depth3_g170958;
					}
					TVEVisualData Data4_g170984 = Data3_g170958;
					float Out_Dummy4_g170984 = 0;
					float3 Out_Albedo4_g170984 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170984 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170984 = float2( 0,0 );
					float3 Out_NormalWS4_g170984 = float3( 0,0,0 );
					float4 Out_Shader4_g170984 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170984 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170984 = 0;
					float Out_Grayscale4_g170984 = 0;
					float Out_Luminosity4_g170984 = 0;
					float Out_AlphaClip4_g170984 = 0;
					float Out_AlphaFade4_g170984 = 0;
					float3 Out_Translucency4_g170984 = float3( 0,0,0 );
					float Out_Transmission4_g170984 = 0;
					float Out_Thickness4_g170984 = 0;
					float Out_Diffusion4_g170984 = 0;
					float Out_Depth4_g170984 = 0;
					{
					Out_Dummy4_g170984 = Data4_g170984.Dummy;
					Out_Albedo4_g170984 = Data4_g170984.Albedo;
					Out_AlbedoRaw4_g170984 = Data4_g170984.AlbedoRaw;
					Out_NormalTS4_g170984 = Data4_g170984.NormalTS;
					Out_NormalWS4_g170984 = Data4_g170984.NormalWS;
					Out_Shader4_g170984 = Data4_g170984.Shader;
					Out_Emissive4_g170984= Data4_g170984.Emissive;
					Out_MultiMask4_g170984 = Data4_g170984.MultiMask;
					Out_Grayscale4_g170984 = Data4_g170984.Grayscale;
					Out_Luminosity4_g170984= Data4_g170984.Luminosity;
					Out_AlphaClip4_g170984 = Data4_g170984.AlphaClip;
					Out_AlphaFade4_g170984 = Data4_g170984.AlphaFade;
					Out_Translucency4_g170984 = Data4_g170984.Translucency;
					Out_Transmission4_g170984 = Data4_g170984.Transmission;
					Out_Thickness4_g170984 = Data4_g170984.Thickness;
					Out_Diffusion4_g170984 = Data4_g170984.Diffusion;
					Out_Depth4_g170984= Data4_g170984.Depth;
					}
					float3 temp_output_297_0_g170980 = Out_Albedo4_g170984;
					float3 In_Albedo3_g170995 = temp_output_297_0_g170980;
					float3 temp_output_297_23_g170980 = Out_AlbedoRaw4_g170984;
					float3 In_AlbedoRaw3_g170995 = temp_output_297_23_g170980;
					float2 In_NormalTS3_g170995 = Out_NormalTS4_g170984;
					float3 In_NormalWS3_g170995 = Out_NormalWS4_g170984;
					float4 In_Shader3_g170995 = Out_Shader4_g170984;
					float4 temp_cast_37 = (0.0).xxxx;
					half4 Visual_Emissive255_g170980 = Out_Emissive4_g170984;
					TVEModelData Data15_g170985 = Data16_g170483;
					float Out_Dummy15_g170985 = 0;
					float3 Out_PositionWS15_g170985 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170985 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170985 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170985 = float3( 0,0,0 );
					float4 Out_VertexData15_g170985 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170985 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170985 = Data15_g170985.Dummy;
					Out_PositionWS15_g170985 = Data15_g170985.PositionWS;
					Out_PositionWO15_g170985 = Data15_g170985.PositionWO;
					Out_PivotWS15_g170985 = Data15_g170985.PivotWS;
					Out_PivotWO15_g170985 = Data15_g170985.PivotWO;
					Out_NormalWS15_g170985 = Data15_g170985.NormalWS;
					Out_ViewDirWS15_g170985 = Data15_g170985.ViewDirWS;
					Out_VertexData15_g170985 = Data15_g170985.VertexData;
					Out_BoundsData15_g170985 = Data15_g170985.BoundsData;
					}
					half4 Model_VertexMasks216_g170980 = Out_VertexData15_g170985;
					float4 break251_g170980 = Model_VertexMasks216_g170980;
					float4 break33_g170990 = _emissive_vert_mode;
					float temp_output_30_0_g170990 = ( break251_g170980.x * break33_g170990.x );
					float temp_output_29_0_g170990 = ( break251_g170980.y * break33_g170990.y );
					float temp_output_31_0_g170990 = ( break251_g170980.z * break33_g170990.z );
					float temp_output_28_0_g170990 = ( temp_output_30_0_g170990 + temp_output_29_0_g170990 + temp_output_31_0_g170990 + ( break251_g170980.w * break33_g170990.w ) );
					float clampResult17_g170989 = clamp( temp_output_28_0_g170990 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170993 = _EmissiveMeshRemap.x;
					float temp_output_9_0_g170993 = ( clampResult17_g170989 - temp_output_7_0_g170993 );
					float lerpResult303_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170993 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
					float temp_output_6_0_g170992 = lerpResult303_g170980;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170992 = ( temp_output_6_0_g170992 + _EmissiveMeshMode );
					#else
					float staticSwitch14_g170992 = temp_output_6_0_g170992;
					#endif
					half Emissive_MeshMask221_g170980 = staticSwitch14_g170992;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170982) = _EmissiveMaskTex;
					SamplerState Sampler276_g170982 = sampler_Linear_Repeat;
					float4 temp_output_6_0_g170983 = _emissive_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170983 = ( temp_output_6_0_g170983 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
					#else
					float4 staticSwitch14_g170983 = temp_output_6_0_g170983;
					#endif
					half4 Emissive_Coords167_g170980 = staticSwitch14_g170983;
					float4 temp_output_37_0_g170982 = Emissive_Coords167_g170980;
					half4 Coords276_g170982 = temp_output_37_0_g170982;
					half2 TexCoord276_g170982 = IN.ase_texcoord3.xy;
					half4 localSampleMain276_g170982 = SampleMain( Texture276_g170982 , Sampler276_g170982 , Coords276_g170982 , TexCoord276_g170982 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170982) = _EmissiveMaskTex;
					SamplerState Sampler275_g170982 = sampler_Linear_Repeat;
					half4 Coords275_g170982 = temp_output_37_0_g170982;
					half2 TexCoord275_g170982 = IN.ase_texcoord4.xy;
					half4 localSampleExtra275_g170982 = SampleExtra( Texture275_g170982 , Sampler275_g170982 , Coords275_g170982 , TexCoord275_g170982 );
					#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
					float4 staticSwitch176_g170980 = localSampleExtra275_g170982;
					#else
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#endif
					half4 Emissive_MaskTex201_g170980 = staticSwitch176_g170980;
					float clampResult17_g170991 = clamp( (Emissive_MaskTex201_g170980).x , 0.0001 , 0.9999 );
					float temp_output_7_0_g170994 = _EmissiveMaskRemap.x;
					float temp_output_9_0_g170994 = ( clampResult17_g170991 - temp_output_7_0_g170994 );
					float lerpResult302_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170994 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
					half Emissive_Mask103_g170980 = lerpResult302_g170980;
					float temp_output_279_0_g170980 = ( Emissive_MeshMask221_g170980 * Emissive_Mask103_g170980 );
					float3 appendResult293_g170980 = (float3(temp_output_279_0_g170980 , temp_output_279_0_g170980 , temp_output_279_0_g170980));
					half3 Local_EmissiveColor278_g170980 = appendResult293_g170980;
					float3 temp_output_316_0_g170980 = (TVE_GlowParams).xyz;
					TVEGlobalData Data15_g170981 = Data204_g170496;
					float Out_Dummy15_g170981 = 0;
					float4 Out_CoatDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170981 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170981 = Data15_g170981.Dummy;
					Out_CoatDataRT15_g170981 = Data15_g170981.CoatDataRT;
					Out_PaintDataRT15_g170981 = Data15_g170981.PaintDataRT;
					Out_GlowDataRT15_g170981= Data15_g170981.GlowDataRT;
					Out_AtmoDataRT15_g170981= Data15_g170981.AtmoDataRT;
					Out_FadeDataRT15_g170981= Data15_g170981.FadeDataRT;
					Out_FormDataRT15_g170981 = Data15_g170981.FormDataRT;
					Out_FlowDataRT15_g170981 = Data15_g170981.FlowDataRT;
					}
					half4 Global_GlowParams179_g170980 = Out_GlowDataRT15_g170981;
					float3 temp_output_6_0_g170987 = (Global_GlowParams179_g170980).xyz;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170987 = ( temp_output_6_0_g170987 + _EmissiveElementMode );
					#else
					float3 staticSwitch14_g170987 = temp_output_6_0_g170987;
					#endif
					#ifdef TVE_EMISSIVE_ELEMENT
					float3 staticSwitch228_g170980 = staticSwitch14_g170987;
					#else
					float3 staticSwitch228_g170980 = temp_output_316_0_g170980;
					#endif
					float3 lerpResult299_g170980 = lerp( float3( 1,1,1 ) , staticSwitch228_g170980 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
					half3 Emissive_GlobalMask248_g170980 = lerpResult299_g170980;
					half3 Visual_AlbedoRaw306_g170980 = temp_output_297_23_g170980;
					float3 lerpResult307_g170980 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170980 , _EmissiveColorMode);
					half3 Local_EmissiveValue88_g170980 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170980 * lerpResult307_g170980 );
					half3 Emissive_Blend260_g170980 = ( ( (Visual_Emissive255_g170980).xyz * Local_EmissiveColor278_g170980 ) * Local_EmissiveValue88_g170980 );
					float3 temp_output_3_0_g170986 = Emissive_Blend260_g170980;
					float temp_output_15_0_g170986 = _emissive_power_value;
					float3 temp_output_23_0_g170986 = ( temp_output_3_0_g170986 * temp_output_15_0_g170986 );
					half Local_EmissiveMask294_g170980 = temp_output_279_0_g170980;
					float4 appendResult295_g170980 = (float4(temp_output_23_0_g170986 , Local_EmissiveMask294_g170980));
					#ifdef TVE_EMISSIVE
					float4 staticSwitch129_g170980 = appendResult295_g170980;
					#else
					float4 staticSwitch129_g170980 = temp_cast_37;
					#endif
					half4 Final_Emissive184_g170980 = staticSwitch129_g170980;
					float4 In_Emissive3_g170995 = Final_Emissive184_g170980;
					float In_Grayscale3_g170995 = Out_Grayscale4_g170984;
					float In_Luminosity3_g170995 = Out_Luminosity4_g170984;
					float temp_output_297_11_g170980 = Out_MultiMask4_g170984;
					float In_MultiMask3_g170995 = temp_output_297_11_g170980;
					float In_AlphaClip3_g170995 = Out_AlphaClip4_g170984;
					float In_AlphaFade3_g170995 = Out_AlphaFade4_g170984;
					float3 In_Translucency3_g170995 = Out_Translucency4_g170984;
					float In_Transmission3_g170995 = Out_Transmission4_g170984;
					float In_Thickness3_g170995 = Out_Thickness4_g170984;
					float In_Diffusion3_g170995 = Out_Diffusion4_g170984;
					float In_Depth3_g170995 = Out_Depth4_g170984;
					{
					Data3_g170995.Dummy = In_Dummy3_g170995;
					Data3_g170995.Albedo = In_Albedo3_g170995;
					Data3_g170995.AlbedoRaw = In_AlbedoRaw3_g170995;
					Data3_g170995.NormalTS = In_NormalTS3_g170995;
					Data3_g170995.NormalWS = In_NormalWS3_g170995;
					Data3_g170995.Shader = In_Shader3_g170995;
					Data3_g170995.Emissive= In_Emissive3_g170995;
					Data3_g170995.MultiMask = In_MultiMask3_g170995;
					Data3_g170995.Grayscale = In_Grayscale3_g170995;
					Data3_g170995.Luminosity = In_Luminosity3_g170995;
					Data3_g170995.AlphaClip = In_AlphaClip3_g170995;
					Data3_g170995.AlphaFade = In_AlphaFade3_g170995;
					Data3_g170995.Translucency = In_Translucency3_g170995;
					Data3_g170995.Transmission = In_Transmission3_g170995;
					Data3_g170995.Thickness = In_Thickness3_g170995;
					Data3_g170995.Diffusion = In_Diffusion3_g170995;
					Data3_g170995.Depth = In_Depth3_g170995;
					}
					TVEVisualData Data4_g171014 = Data3_g170995;
					float Out_Dummy4_g171014 = 0;
					float3 Out_Albedo4_g171014 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171014 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171014 = float2( 0,0 );
					float3 Out_NormalWS4_g171014 = float3( 0,0,0 );
					float4 Out_Shader4_g171014 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171014 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171014 = 0;
					float Out_Grayscale4_g171014 = 0;
					float Out_Luminosity4_g171014 = 0;
					float Out_AlphaClip4_g171014 = 0;
					float Out_AlphaFade4_g171014 = 0;
					float3 Out_Translucency4_g171014 = float3( 0,0,0 );
					float Out_Transmission4_g171014 = 0;
					float Out_Thickness4_g171014 = 0;
					float Out_Diffusion4_g171014 = 0;
					float Out_Depth4_g171014 = 0;
					{
					Out_Dummy4_g171014 = Data4_g171014.Dummy;
					Out_Albedo4_g171014 = Data4_g171014.Albedo;
					Out_AlbedoRaw4_g171014 = Data4_g171014.AlbedoRaw;
					Out_NormalTS4_g171014 = Data4_g171014.NormalTS;
					Out_NormalWS4_g171014 = Data4_g171014.NormalWS;
					Out_Shader4_g171014 = Data4_g171014.Shader;
					Out_Emissive4_g171014= Data4_g171014.Emissive;
					Out_MultiMask4_g171014 = Data4_g171014.MultiMask;
					Out_Grayscale4_g171014 = Data4_g171014.Grayscale;
					Out_Luminosity4_g171014= Data4_g171014.Luminosity;
					Out_AlphaClip4_g171014 = Data4_g171014.AlphaClip;
					Out_AlphaFade4_g171014 = Data4_g171014.AlphaFade;
					Out_Translucency4_g171014 = Data4_g171014.Translucency;
					Out_Transmission4_g171014 = Data4_g171014.Transmission;
					Out_Thickness4_g171014 = Data4_g171014.Thickness;
					Out_Diffusion4_g171014 = Data4_g171014.Diffusion;
					Out_Depth4_g171014= Data4_g171014.Depth;
					}
					half3 Visual_Albedo199_g171013 = Out_Albedo4_g171014;
					float3 temp_cast_38 = (0.0).xxx;
					half3 Subsurface_Color264_g171013 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171013 );
					half Visual_Transmission138_g171013 = Out_Transmission4_g171014;
					half Subsurface_Value268_g171013 = _SubsurfaceIntensityValue;
					TVEGlobalData Data15_g171016 = Data204_g170496;
					float Out_Dummy15_g171016 = 0;
					float4 Out_CoatDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g171016 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171016 = Data15_g171016.Dummy;
					Out_CoatDataRT15_g171016 = Data15_g171016.CoatDataRT;
					Out_PaintDataRT15_g171016 = Data15_g171016.PaintDataRT;
					Out_GlowDataRT15_g171016= Data15_g171016.GlowDataRT;
					Out_AtmoDataRT15_g171016= Data15_g171016.AtmoDataRT;
					Out_FadeDataRT15_g171016= Data15_g171016.FadeDataRT;
					Out_FormDataRT15_g171016 = Data15_g171016.FormDataRT;
					Out_FlowDataRT15_g171016 = Data15_g171016.FlowDataRT;
					}
					half4 Global_GlowParams373_g171013 = Out_GlowDataRT15_g171016;
					float temp_output_6_0_g171019 = saturate( (Global_GlowParams373_g171013).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g171019 = ( temp_output_6_0_g171019 + _SubsurfaceElementMode );
					#else
					float staticSwitch14_g171019 = temp_output_6_0_g171019;
					#endif
					#ifdef TVE_SUBSURFACE_ELEMENT
					float staticSwitch367_g171013 = staticSwitch14_g171019;
					#else
					float staticSwitch367_g171013 = TVE_GlowParams.w;
					#endif
					float lerpResult403_g171013 = lerp( 1.0 , staticSwitch367_g171013 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
					half Subsurface_GlobalMask369_g171013 = lerpResult403_g171013;
					float temp_output_301_11_g171013 = Out_MultiMask4_g171014;
					half Visual_MultiMask292_g171013 = temp_output_301_11_g171013;
					float lerpResult293_g171013 = lerp( 1.0 , Visual_MultiMask292_g171013 , _SubsurfaceMultiValue);
					half Subsurface_MultiMask296_g171013 = lerpResult293_g171013;
					half Custom_Mask363_g171013 = 1.0;
					#ifdef TVE_SUBSURFACE
					float staticSwitch345_g171013 = ( Visual_Transmission138_g171013 * Subsurface_Value268_g171013 * Subsurface_GlobalMask369_g171013 * Subsurface_MultiMask296_g171013 * Custom_Mask363_g171013 );
					#else
					float staticSwitch345_g171013 = 0.0;
					#endif
					half Final_Transmission269_g171013 = staticSwitch345_g171013;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch348_g171013 = ( Subsurface_Color264_g171013 * Final_Transmission269_g171013 * 10.0 );
					#else
					float3 staticSwitch348_g171013 = temp_cast_38;
					#endif
					half3 Final_Translucency254_g171013 = staticSwitch348_g171013;
					TVEModelData Data15_g171017 = Data16_g170483;
					float Out_Dummy15_g171017 = 0;
					float3 Out_PositionWS15_g171017 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171017 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171017 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g171017 = float3( 0,0,0 );
					float4 Out_VertexData15_g171017 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171017 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171017 = Data15_g171017.Dummy;
					Out_PositionWS15_g171017 = Data15_g171017.PositionWS;
					Out_PositionWO15_g171017 = Data15_g171017.PositionWO;
					Out_PivotWS15_g171017 = Data15_g171017.PivotWS;
					Out_PivotWO15_g171017 = Data15_g171017.PivotWO;
					Out_NormalWS15_g171017 = Data15_g171017.NormalWS;
					Out_ViewDirWS15_g171017 = Data15_g171017.ViewDirWS;
					Out_VertexData15_g171017 = Data15_g171017.VertexData;
					Out_BoundsData15_g171017 = Data15_g171017.BoundsData;
					}
					half3 Model_ViewDirWS392_g171013 = Out_ViewDirWS15_g171017;
					float dotResult324_g171013 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171013 );
					float saferPower323_g171013 = abs( saturate( dotResult324_g171013 ) );
					#ifdef UNITY_PASS_FORWARDADD
					float staticSwitch330_g171013 = 0.0;
					#else
					float staticSwitch330_g171013 = ( pow( saferPower323_g171013 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
					#endif
					half Mask_Subsurface_View320_g171013 = staticSwitch330_g171013;
					float3 temp_output_6_0_g171018 = ( Final_Translucency254_g171013 * Mask_Subsurface_View320_g171013 );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171018 = ( temp_output_6_0_g171018 + _SubsurfaceAproxInfo );
					#else
					float3 staticSwitch14_g171018 = temp_output_6_0_g171018;
					#endif
					half3 Subsurface_Approximation333_g171013 = staticSwitch14_g171018;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch353_g171013 = ( Visual_Albedo199_g171013 + Subsurface_Approximation333_g171013 );
					#else
					float3 staticSwitch353_g171013 = Visual_Albedo199_g171013;
					#endif
					half3 Final_Albedo312_g171013 = staticSwitch353_g171013;
					float3 In_Albedo3_g171015 = Final_Albedo312_g171013;
					float3 In_AlbedoRaw3_g171015 = Out_AlbedoRaw4_g171014;
					float2 In_NormalTS3_g171015 = Out_NormalTS4_g171014;
					float3 In_NormalWS3_g171015 = Out_NormalWS4_g171014;
					float4 In_Shader3_g171015 = Out_Shader4_g171014;
					float4 In_Emissive3_g171015 = Out_Emissive4_g171014;
					float In_Grayscale3_g171015 = Out_Grayscale4_g171014;
					float In_Luminosity3_g171015 = Out_Luminosity4_g171014;
					float In_MultiMask3_g171015 = temp_output_301_11_g171013;
					float In_AlphaClip3_g171015 = Out_AlphaClip4_g171014;
					float In_AlphaFade3_g171015 = Out_AlphaFade4_g171014;
					float3 In_Translucency3_g171015 = Final_Translucency254_g171013;
					float In_Transmission3_g171015 = Final_Transmission269_g171013;
					#ifdef TVE_SUBSURFACE
					float staticSwitch351_g171013 = 0.0;
					#else
					float staticSwitch351_g171013 = 1.0;
					#endif
					half Final_Thickness275_g171013 = staticSwitch351_g171013;
					float In_Thickness3_g171015 = Final_Thickness275_g171013;
					float Final_Diffusion340_g171013 = _SubsurfaceDiffusion;
					float In_Diffusion3_g171015 = Final_Diffusion340_g171013;
					float In_Depth3_g171015 = Out_Depth4_g171014;
					{
					Data3_g171015.Dummy = In_Dummy3_g171015;
					Data3_g171015.Albedo = In_Albedo3_g171015;
					Data3_g171015.AlbedoRaw = In_AlbedoRaw3_g171015;
					Data3_g171015.NormalTS = In_NormalTS3_g171015;
					Data3_g171015.NormalWS = In_NormalWS3_g171015;
					Data3_g171015.Shader = In_Shader3_g171015;
					Data3_g171015.Emissive= In_Emissive3_g171015;
					Data3_g171015.MultiMask = In_MultiMask3_g171015;
					Data3_g171015.Grayscale = In_Grayscale3_g171015;
					Data3_g171015.Luminosity = In_Luminosity3_g171015;
					Data3_g171015.AlphaClip = In_AlphaClip3_g171015;
					Data3_g171015.AlphaFade = In_AlphaFade3_g171015;
					Data3_g171015.Translucency = In_Translucency3_g171015;
					Data3_g171015.Transmission = In_Transmission3_g171015;
					Data3_g171015.Thickness = In_Thickness3_g171015;
					Data3_g171015.Diffusion = In_Diffusion3_g171015;
					Data3_g171015.Depth = In_Depth3_g171015;
					}
					TVEVisualData Data4_g171040 = Data3_g171015;
					float Out_Dummy4_g171040 = 0;
					float3 Out_Albedo4_g171040 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171040 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171040 = float2( 0,0 );
					float3 Out_NormalWS4_g171040 = float3( 0,0,0 );
					float4 Out_Shader4_g171040 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171040 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171040 = 0;
					float Out_Grayscale4_g171040 = 0;
					float Out_Luminosity4_g171040 = 0;
					float Out_AlphaClip4_g171040 = 0;
					float Out_AlphaFade4_g171040 = 0;
					float3 Out_Translucency4_g171040 = float3( 0,0,0 );
					float Out_Transmission4_g171040 = 0;
					float Out_Thickness4_g171040 = 0;
					float Out_Diffusion4_g171040 = 0;
					float Out_Depth4_g171040 = 0;
					{
					Out_Dummy4_g171040 = Data4_g171040.Dummy;
					Out_Albedo4_g171040 = Data4_g171040.Albedo;
					Out_AlbedoRaw4_g171040 = Data4_g171040.AlbedoRaw;
					Out_NormalTS4_g171040 = Data4_g171040.NormalTS;
					Out_NormalWS4_g171040 = Data4_g171040.NormalWS;
					Out_Shader4_g171040 = Data4_g171040.Shader;
					Out_Emissive4_g171040= Data4_g171040.Emissive;
					Out_MultiMask4_g171040 = Data4_g171040.MultiMask;
					Out_Grayscale4_g171040 = Data4_g171040.Grayscale;
					Out_Luminosity4_g171040= Data4_g171040.Luminosity;
					Out_AlphaClip4_g171040 = Data4_g171040.AlphaClip;
					Out_AlphaFade4_g171040 = Data4_g171040.AlphaFade;
					Out_Translucency4_g171040 = Data4_g171040.Translucency;
					Out_Transmission4_g171040 = Data4_g171040.Transmission;
					Out_Thickness4_g171040 = Data4_g171040.Thickness;
					Out_Diffusion4_g171040 = Data4_g171040.Diffusion;
					Out_Depth4_g171040= Data4_g171040.Depth;
					}
					half3 Input_Albedo24_g171039 = Out_Albedo4_g171040;
					#ifdef UNITY_COLORSPACE_GAMMA
					float4 staticSwitch22_g171039 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
					#else
					float4 staticSwitch22_g171039 = half4( 0.04, 0.04, 0.04, 0.96 );
					#endif
					half4 ColorSpaceDielectricSpec23_g171039 = staticSwitch22_g171039;
					float4 break24_g171035 = Out_Shader4_g171040;
					half Metallic95_g171035 = break24_g171035.x;
					half Input_Metallic25_g171039 = Metallic95_g171035;
					half OneMinusReflectivity31_g171039 = ( (ColorSpaceDielectricSpec23_g171039).w - ( (ColorSpaceDielectricSpec23_g171039).w * Input_Metallic25_g171039 ) );
					
					float localCustomAlphaClip20_g171045 = ( 0.0 );
					float temp_output_3_0_g171045 = Out_AlphaClip4_g171040;
					float Alpha20_g171045 = temp_output_3_0_g171045;
					float temp_output_15_0_g171045 = 0.0;
					float Treshold20_g171045 = temp_output_15_0_g171045;
					{
					#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
					clip(Alpha20_g171045 - Treshold20_g171045);
					#endif
					}
					

					o.Albedo = ( Input_Albedo24_g171039 * OneMinusReflectivity31_g171039 );
					o.Normal = half3( 0, 0, 1 );
					o.Emission = (Out_Emissive4_g171040).xyz;
					o.Alpha = saturate( ( Alpha20_g171045 * Out_AlphaFade4_g171040 ) );

					#ifdef _ALPHATEST_ON
						clip( o.Alpha - AlphaClipThreshold );
					#endif

					UnityMetaInput metaIN;
					UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
					metaIN.Albedo = o.Albedo;
					metaIN.Emission = o.Emission;
					#ifdef EDITOR_VISUALIZATION
						metaIN.VizUV = IN.vizUV;
						metaIN.LightCoord = IN.lightCoord;
					#endif
					return UnityMetaFragment(metaIN);
				}
				ENDCG
			}

			
			Pass
			{
				
				Name "ShadowCaster"
				Tags { "LightMode"="ShadowCaster" }
				ZWrite On
				ZTest LEqual
				AlphaToMask Off

				CGPROGRAM
				#define ASE_GEOMETRY 1
				#define ASE_FRAGMENT_NORMAL 0
				#define ASE_NEEDS_FRAG_SHADOWCOORDS
				#pragma multi_compile_instancing
				#pragma multi_compile __ LOD_FADE_CROSSFADE
				#pragma multi_compile_fog
				#define _SPECULAR_SETUP 1
				#define ASE_LIGHTING_SIMPLE 1
				#define _ENVIRONMENTREFLECTIONS_OFF 1
				#define ASE_ABSOLUTE_VERTEX_POS 1
				#define ASE_VERSION 19802
				#define ASE_USING_SAMPLING_MACROS 1

				#pragma vertex vert
				#pragma fragment frag
				#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
				#pragma multi_compile_shadowcaster
				#ifndef UNITY_PASS_SHADOWCASTER
					#define UNITY_PASS_SHADOWCASTER
				#endif
				#include "HLSLSupport.cginc"
				#ifdef ASE_GEOMETRY
					#ifndef UNITY_INSTANCED_LOD_FADE
						#define UNITY_INSTANCED_LOD_FADE
					#endif
					#ifndef UNITY_INSTANCED_SH
						#define UNITY_INSTANCED_SH
					#endif
					#ifndef UNITY_INSTANCED_LIGHTMAPSTS
						#define UNITY_INSTANCED_LIGHTMAPSTS
					#endif
				#endif
				#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
					#define CAN_SKIP_VPOS
				#endif
				#include "UnityShaderVariables.cginc"
				#include "UnityCG.cginc"
				#include "Lighting.cginc"
				#include "UnityPBSLighting.cginc"

				#include "UnityStandardBRDF.cginc"
				#define ASE_NEEDS_VERT_POSITION
				#define ASE_NEEDS_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES3
				#define ASE_NEEDS_VERT_NORMAL
				#define ASE_NEEDS_VERT_TANGENT
				#define ASE_NEEDS_TEXTURE_COORDINATES0
				#define ASE_NEEDS_VERT_TEXTURE_COORDINATES0
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES0
				#define ASE_NEEDS_TEXTURE_COORDINATES2
				#define ASE_NEEDS_FRAG_TEXTURE_COORDINATES2
				#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
				#pragma shader_feature_local_vertex TVE_SIZEFADE
				#pragma shader_feature_local_vertex TVE_PERSPECTIVE
				#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
				#pragma shader_feature_local_vertex TVE_SIZEFADE_ELEMENT
				#pragma shader_feature_local_vertex TVE_MOTION
				#pragma shader_feature_local TVE_LEGACY
				#pragma shader_feature_local_vertex TVE_MOTION_ELEMENT
				#pragma shader_feature_local_vertex TVE_NORMAL
				#pragma shader_feature_local_fragment TVE_SUBSURFACE
				#pragma shader_feature_local_fragment TVE_WETNESS
				#pragma shader_feature_local_fragment TVE_OVERLAY
				#pragma shader_feature_local_fragment TVE_MOTION
				#pragma shader_feature_local_fragment TVE_DRYNESS
				#pragma shader_feature_local_fragment TVE_TINTING
				#pragma shader_feature_local_fragment TVE_VARIATION
				#pragma shader_feature_local_fragment TVE_GRADIENT
				#pragma shader_feature_local_fragment TVE_OCCLUSION
				#pragma shader_feature_local_fragment TVE_THIRD
				#pragma shader_feature_local_fragment TVE_SECOND
				#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
				#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
				#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
				#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
				#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
				#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
				#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
				#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
				#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_WATER
				#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
				#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
				#pragma shader_feature_local_fragment TVE_CUTOUT
				#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
				#pragma shader_feature_local_fragment TVE_DITHER
				#pragma shader_feature_local_fragment TVE_EMISSIVE
				#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
				#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
				#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
				//SHADER INJECTION POINT BEGIN
				//SHADER INJECTION POINT END
				  
				struct TVEVisualData
				{  
					half Dummy;  
					half3 Albedo;
					half3 AlbedoRaw;
					half2 NormalTS;
					half3 NormalWS; 
					half4 Shader;
					half4 Emissive;
					half AlphaClip;
					half AlphaFade;
					half MultiMask;
					half Grayscale;
					half Luminosity;
					half3 Translucency;
					half Transmission;
					half Thickness;
					float Diffusion;
					float Depth;
				};  
				    
				struct TVEModelData
				{    
					half Dummy;    
					half3 PositionOS;
					half3 PositionWS;
					half3 PositionWO;
					half3 PositionRawOS;
					half3 PositionAddOS;
					half3 PivotOS;
					half3 PivotWS;
					half3 PivotWO;
					half3 NormalOS;
					half3 NormalWS;
					half3 NormalRawOS;
					half3 NormalRawWS;
					half4 TangentOS;
					half3 ViewDirWS;
					half4 VertexData;
					half4 PhaseData;
					half4 BoundsData;
					half4 RotationData;
				};    
				      
				struct TVEGlobalData
				{      
					half Dummy;      
					half4 CoatDataRT;
					half4 PaintDataRT;
					half4 GlowDataRT;
					half4 AtmoDataRT;
					half4 FadeDataRT;
					half4 FormDataRT;
					half4 FlowDataRT;
				};      
				        
				struct TVEMasksData
				{        
					half4 Mask0;
					half4 Mask1;
					half4 Mask2;
					half4 Mask3;
				};        
				#define TVE_GEOMETRY_SHADER
				//#pragma editor_sync_compilation
				#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
					#define ASE_NEEDS_TEXTURE_COORDINATES2
				#endif
				#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
				#else//ASE Sampling Macros
				#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
				#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
				#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
				#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
				#define SAMPLE_TEXTURE3D(tex,samplerTex,coord) tex3D(tex,coord)
				#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
				#endif//ASE Sampling Macros
				


				struct appdata
				{
					float4 vertex : POSITION;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					float4 ase_texcoord : TEXCOORD0;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct v2f
				{
					V2F_SHADOW_CASTER;
					float4 ase_texcoord1 : TEXCOORD1;
					float4 ase_texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_texcoord4 : TEXCOORD4;
					float4 ase_texcoord5 : TEXCOORD5;
					float4 ase_color : COLOR;
					float4 ase_texcoord6 : TEXCOORD6;
					float4 ase_texcoord7 : TEXCOORD7;
					float4 ase_texcoord8 : TEXCOORD8;
					float4 ase_texcoord9 : TEXCOORD9;
					UNITY_VERTEX_INPUT_INSTANCE_ID
					UNITY_VERTEX_OUTPUT_STEREO
				};

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					sampler3D _DitherMaskLOD;
				#endif
				#ifdef ASE_TESSELLATION
					float _TessPhongStrength;
					float _TessValue;
					float _TessMin;
					float _TessMax;
					float _TessEdgeLength;
					float _TessMaxDisp;
				#endif

				uniform half _SubsurfaceAngleValue;
				uniform float _SubsurfaceDiffusion;
				uniform float4 _SubsurfaceDiffusion_Asset;
				uniform half _SubsurfaceSpace;
				uniform half _SubsurfaceScatteringValue;
				uniform half _render_cull;
				uniform half _render_src;
				uniform half _render_dst;
				uniform half _render_zw;
				uniform half _render_coverage;
				uniform half _IsGeneralShader;
				uniform half _IsSimpleShader;
				uniform half _RenderZWrite;
				uniform half _IsVersion;
				uniform half _RenderCategory;
				uniform half _RenderEnd;
				uniform half _RenderMode;
				uniform half _RenderCull;
				uniform half _RenderNormal;
				uniform half _RenderBakeGI;
				uniform half _RenderDecals;
				uniform half _RenderSSR;
				uniform half _RenderPriority;
				uniform half _RenderQueue;
				uniform half _RenderMotion;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
				SamplerState sampler_BumpMap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
				SamplerState sampler_MainTex;
				uniform half _Cutoff;
				uniform half4 _Color;
				uniform half _IsTVEShader;
				uniform half _IsCustomShader;
				uniform half _IsShared;
				uniform half _IsCollected;
				uniform half _IsConverted;
				uniform half _IsIdentifier;
				uniform half _RenderFilter;
				uniform half _RenderShadow;
				uniform half _RenderClip;
				UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
				SamplerState sampler_NoiseTex3D;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_NoiseTexSS);
				SamplerState sampler_NoiseTexSS;
				uniform half _NormalCategory;
				uniform half _NormalEnd;
				uniform half _NormalSpace;
				uniform half _NormalBakeMode;
				uniform half _MotionCategory;
				uniform half _MotionWindEnd;
				uniform half _MotionElementMode;
				uniform half _MotionPushInfo;
				uniform half _SizeFadeCategory;
				uniform half _SizeFadeEnd;
				uniform half _PerspectiveCategory;
				uniform half _PerspectiveEnd;
				uniform half _ObjectCategory;
				uniform half _ObjectEnd;
				uniform half _ObjectModelMode;
				uniform half _ObjectPivotMode;
				uniform half _ObjectPhaseMode;
				uniform half _ObjectBoundsInfo;
				uniform float3 TVE_WorldOrigin;
				uniform half4 TVE_TimeParams;
				uniform half4 _object_phase_mode;
				uniform half _ObjectHeightValue;
				uniform half _ObjectRadiusValue;
				uniform half _PerspectivePhaseValue;
				uniform half _PerspectiveIntensityValue;
				uniform half _PerspectiveAngleValue;
				uniform half4 TVE_SizeFadeParams;
				uniform half _SizeFadeDistMaxValue;
				uniform half _SizeFadeDistMinValue;
				uniform half _SizeFadeScaleValue;
				uniform half4 TVE_FormParams;
				uniform half _GlobalCategory;
				uniform half _GlobalEnd;
				uniform half _GlobalPivotInfo;
				uniform half _GlobalCoatLayerValue;
				uniform float TVE_CoatLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatBaseTex);
				uniform half4 TVE_RenderBaseCoords;
				uniform half _GlobalCoatPivotValue;
				SamplerState sampler_Linear_Clamp;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_CoatNearTex);
				uniform half4 TVE_RenderNearCoords;
				SamplerState sampler_Linear_Repeat;
				uniform float4 TVE_RenderNearPositionR;
				uniform half TVE_RenderNearFadeValue;
				uniform half4 TVE_CoatParams;
				uniform half _GlobalPaintLayerValue;
				uniform float TVE_PaintLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintBaseTex);
				uniform half _GlobalPaintPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_PaintNearTex);
				uniform half4 TVE_PaintParams;
				uniform half _GlobalGlowLayerValue;
				uniform float TVE_GlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowBaseTex);
				uniform half _GlobalGlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_GlowNearTex);
				uniform half4 TVE_GlowParams;
				uniform half _GlobalAtmoLayerValue;
				uniform float TVE_AtmoLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoBaseTex);
				uniform half _GlobalAtmoPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_AtmoNearTex);
				uniform half4 TVE_AtmoParams;
				uniform half _GlobalFadeLayerValue;
				uniform float TVE_FadeLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeBaseTex);
				uniform half _GlobalFadePivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FadeNearTex);
				uniform half4 TVE_FadeParams;
				uniform half _GlobalFormLayerValue;
				uniform float TVE_FormLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormBaseTex);
				uniform half _GlobalFormPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FormNearTex);
				uniform half _GlobalFlowLayerValue;
				uniform float TVE_FlowLayers[10];
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowBaseTex);
				uniform half _GlobalFlowPivotValue;
				UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_FlowNearTex);
				uniform half4 TVE_FlowParams;
				uniform half _SizeFadeElementMode;
				uniform half _SizeFadeGlobalValue;
				uniform half TVE_IsEnabled;
				uniform half _SizeFadeScaleMode;
				uniform half _SizeFadeIntensityValue;
				uniform half _MotionSmallIntensityValue;
				uniform half4 _motion_small_vert_mode;
				uniform half4 _motion_small_proc_mode;
				uniform half _motion_small_mask_mode;
				uniform half4 _MotionSmallMaskRemap;
				uniform half _MotionSmallMaskMode;
				uniform half4 TVE_MotionParams;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
				uniform half _MotionSmallPivotValue;
				uniform half _MotionSmallPhaseValue;
				uniform half _MotionSmallTillingValue;
				uniform half _MotionSmallSpeedValue;
				uniform half _MotionSmallNoiseValue;
				uniform half4 TVE_MotionParamsEditor;
				uniform half _MotionIntensityValue;
				uniform half _MotionSmallDelayValue;
				uniform half _MotionSmallPushValue;
				uniform half _MotionTinyIntensityValue;
				uniform half _MotionDistValue;
				uniform half4 _motion_tiny_vert_mode;
				uniform half4 _motion_tiny_proc_mode;
				uniform half _motion_tiny_mask_mode;
				uniform half4 _MotionTinyMaskRemap;
				uniform half _MotionTinyMaskMode;
				uniform half _MotionTinyTillingValue;
				uniform half _MotionTinySpeedValue;
				uniform half _MotionTinyNoiseValue;
				uniform half _MotionBasePivotValue;
				uniform half _MotionBasePhaseValue;
				uniform half _MotionBaseTillingValue;
				uniform half _MotionBaseSpeedValue;
				uniform half _MotionBaseNoiseValue;
				uniform half _MotionBaseDelayValue;
				uniform half _MotionBasePushValue;
				uniform half _motion_small_mode;
				uniform half _MotionBaseIntensityValue;
				uniform half4 _motion_base_vert_mode;
				uniform half4 _motion_base_proc_mode;
				uniform half _motion_base_mask_mode;
				uniform half4 _MotionBaseMaskRemap;
				uniform half _MotionBaseMaskMode;
				uniform half _NormalFlattenValue;
				uniform half3 _NormalSphereOffsetValue;
				uniform half _NormalSphereValue;
				uniform half _NormalComputeValue;
				uniform half4 _normal_vert_mode;
				uniform half4 _NormalMeshRemap;
				uniform half _NormalMeshValue;
				uniform half _NormalMeshMode;
				uniform half _DisableSRPBatcher;
				uniform half _SubsurfaceCategory;
				uniform half _SubsurfaceEnd;
				uniform half _SubsurfaceDirectValue;
				uniform half _SubsurfaceNormalValue;
				uniform half _SubsurfaceAmbientValue;
				uniform half _SubsurfaceShadowValue;
				uniform half _EmissiveCategory;
				uniform half _EmissiveEnd;
				uniform half _EmissivePowerMode;
				uniform half _EmissivePowerValue;
				uniform half _EmissiveFlagMode;
				uniform half _DitherCategory;
				uniform half _DitherEnd;
				uniform half _CutoutCategory;
				uniform half _CutoutEnd;
				uniform half _CutoutSpace;
				uniform half _CutoutBakeMode;
				uniform half _WetnessCategory;
				uniform half _WetnessEnd;
				uniform half _WetnessBakeMode;
				uniform half _OverlayCategory;
				uniform half _OverlayEnd;
				uniform half _OverlaySpace;
				uniform half _OverlayBakeMode;
				uniform half _DrynessCategory;
				uniform half _DrynessEnd;
				uniform half _DrynessSpace;
				uniform half _DrynessBakeMode;
				uniform half _TintingCategory;
				uniform half _TintingEnd;
				uniform half _TintingSpace;
				uniform half _TintingBakeMode;
				uniform half _VariationCategory;
				uniform half _VariationEnd;
				uniform half _GradientCategory;
				uniform half _GradientEnd;
				uniform half _GradientBakeMode;
				uniform half _OcclusionCategory;
				uniform half _OcclusionEnd;
				uniform half _OcclusionBakeMode;
				uniform half _DetailCategory;
				uniform half _DetailEnd;
				uniform half _ThirdSampleMode;
				uniform half _ThirdCoordMode;
				uniform half4 _ThirdCoordValue;
				uniform half _ThirdMaskSampleMode;
				uniform half _ThirdMaskCoordMode;
				uniform half4 _ThirdMaskCoordValue;
				uniform half _ThirdBakeMode;
				uniform half _LayerCategory;
				uniform half _LayerEnd;
				uniform half _SecondSampleMode;
				uniform half _SecondCoordMode;
				uniform half4 _SecondCoordValue;
				uniform half _SecondMaskSampleMode;
				uniform half _SecondMaskCoordMode;
				uniform half4 _SecondMaskCoordValue;
				uniform half _SecondBakeMode;
				uniform half _MainCategory;
				uniform half _MainEnd;
				uniform half _MainSampleMode;
				uniform half _MainCoordMode;
				uniform half4 _MainCoordValue;
				uniform half _MainMultiMaskInfo;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
				SamplerState sampler_Linear_Repeat_Aniso8;
				SamplerState sampler_Point_Repeat;
				uniform half4 _main_coord_value;
				uniform half _MainAlbedoValue;
				uniform half4 _MainColorTwo;
				uniform half4 _MainColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
				uniform half _MainMetallicValue;
				uniform half4 _MainOcclusionRemap;
				uniform half _MainOcclusionValue;
				uniform half4 _MainSmoothnessRemap;
				uniform half _MainSmoothnessValue;
				uniform half4 _MainMultiRemap;
				uniform half _MainColorMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
				uniform half _MainNormalValue;
				uniform half _MainAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
				uniform half4 _second_coord_value;
				uniform half _SecondAlbedoValue;
				uniform half4 _SecondColorTwo;
				uniform half4 _SecondColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
				uniform half _SecondMetallicValue;
				uniform half4 _SecondOcclusionRemap;
				uniform half _SecondOcclusionValue;
				uniform half4 _SecondSmoothnessRemap;
				uniform half _SecondSmoothnessValue;
				uniform half4 _SecondMultiRemap;
				uniform half _SecondColorMode;
				uniform half _SecondBlendAlbedoValue;
				uniform half _SecondIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
				uniform half4 _second_mask_coord_value;
				uniform half4 _SecondMaskRemap;
				uniform half _SecondMaskValue;
				uniform half4 _SecondLumaRemap;
				uniform half _SecondLumaValue;
				uniform half4 _SecondProjRemap;
				uniform half _SecondProjValue;
				uniform half4 _second_vert_mode;
				uniform half4 _SecondMeshRemap;
				uniform half _SecondMeshValue;
				uniform half _SecondMeshMode;
				uniform half _SecondElementMode;
				uniform half _SecondGlobalValue;
				uniform half4 _SecondBlendRemap;
				uniform half _SecondBlendIntensityValue;
				uniform half _SecondBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
				uniform half _SecondNormalValue;
				uniform half _SecondBlendShaderValue;
				uniform half _SecondAlphaClipValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
				uniform half4 _third_coord_value;
				uniform half _ThirdAlbedoValue;
				uniform half4 _ThirdColorTwo;
				uniform half4 _ThirdColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
				uniform half _ThirdMetallicValue;
				uniform half4 _ThirdOcclusionRemap;
				uniform half _ThirdOcclusionValue;
				uniform half4 _ThirdSmoothnessRemap;
				uniform half _ThirdSmoothnessValue;
				uniform half4 _ThirdMultiRemap;
				uniform half _ThirdColorMode;
				uniform half _ThirdBlendAlbedoValue;
				uniform half _ThirdIntensityValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
				uniform half4 _third_mask_coord_value;
				uniform half4 _ThirdMaskRemap;
				uniform half _ThirdMaskValue;
				uniform half4 _ThirdLumaRemap;
				uniform half _ThirdLumaValue;
				uniform half4 _third_vert_mode;
				uniform half4 _ThirdMeshRemap;
				uniform half _ThirdMeshValue;
				uniform half _ThirdMeshMode;
				uniform half4 _ThirdProjRemap;
				uniform half _ThirdProjValue;
				uniform half _ThirdElementMode;
				uniform half _ThirdGlobalValue;
				uniform half4 _ThirdBlendRemap;
				uniform half _ThirdBlendIntensityValue;
				uniform half _ThirdBlendNormalValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
				uniform half _ThirdNormalValue;
				uniform half _ThirdBlendShaderValue;
				uniform half _ThirdAlphaClipValue;
				uniform half4 _OcclusionColorTwo;
				uniform half4 _OcclusionColorOne;
				uniform half4 _occlusion_vert_mode;
				uniform half4 _OcclusionMeshRemap;
				uniform half _OcclusionMeshMode;
				uniform half _OcclusionIntensityValue;
				uniform half4 _GradientColorTwo;
				uniform half4 _GradientColorOne;
				uniform half4 _gradient_vert_mode;
				uniform half4 _GradientMeshRemap;
				uniform half _GradientMeshMode;
				uniform half _GradientIntensityValue;
				uniform half _GradientMultiValue;
				uniform half4 _VariationColorTwo;
				uniform half4 _VariationColorOne;
				uniform half _VariationNoisePivotValue;
				uniform half _VariationNoiseTillingValue;
				uniform half4 _VariationNoiseRemap;
				uniform half _VariationIntensityValue;
				uniform half _VariationMultiValue;
				uniform half _TintingElementMode;
				uniform half _TintingGlobalValue;
				uniform half _TintingGrayValue;
				uniform float4 _TintingColor;
				uniform half _TintingIntensityValue;
				uniform half _TintingMultiValue;
				uniform half4 _TintingLumaRemap;
				uniform half _TintingLumaValue;
				uniform half4 _tinting_vert_mode;
				uniform half4 _TintingMeshRemap;
				uniform half _TintingMeshValue;
				uniform half _TintingMeshMode;
				uniform half4 _TintingBlendRemap;
				uniform half _DrynessElementMode;
				uniform half _DrynessGlobalValue;
				uniform half _DrynessGrayValue;
				uniform float4 _DrynessColor;
				uniform half _DrynessIntensityValue;
				uniform half _DrynessMultiValue;
				uniform half4 _DrynessLumaRemap;
				uniform half _DrynessLumaValue;
				uniform half4 _dryness_vert_mode;
				uniform half4 _DrynessMeshRemap;
				uniform half _DrynessMeshValue;
				uniform half _DrynessMeshMode;
				uniform half4 _DrynessBlendRemap;
				uniform half _DrynessSmoothnessValue;
				uniform half _DrynessSubsurfaceValue;
				uniform half3 _motion_highlight_color;
				uniform half _MotionHighlightValue;
				uniform half4 _MotionHighlightColor;
				uniform half4 _OverlayColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
				uniform half4 _overlay_coord_value;
				uniform half _OverlaySampleMode;
				uniform half _OverlayCoordMode;
				uniform half4 _OverlayCoordValue;
				uniform half _OverlayTextureMode;
				uniform half _OverlayGlitterIntensityValue;
				uniform half4 _OverlayGlitterColor;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTexRT);
				uniform half _OverlayGlitterTillingValue;
				uniform half _OverlayGlitterDistValue;
				uniform half _OverlayIntensityValue;
				uniform half4 _OverlayProjRemap;
				uniform half _OverlayProjValue;
				uniform half4 _OverlayLumaRemap;
				uniform half _OverlayLumaValue;
				uniform half4 _overlay_vert_mode;
				uniform half4 _OverlayMeshRemap;
				uniform half _OverlayMeshValue;
				uniform half _OverlayMeshMode;
				uniform half _OverlayElementMode;
				uniform half _OverlayGlobalValue;
				uniform half4 _OverlayBlendRemap;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
				uniform half _OverlayNormalValue;
				uniform half _OverlaySmoothnessValue;
				uniform half _OverlaySubsurfaceValue;
				uniform half4 _WetnessWaterColor;
				uniform half _WetnessWaterIntensityValue;
				uniform half _WetnessIntensityValue;
				uniform half _WetnessElementMode;
				uniform half _WetnessGlobalValue;
				uniform half4 _wetness_vert_mode;
				uniform half4 _WetnessMeshRemap;
				uniform half _WetnessMeshValue;
				uniform half _WetnessMeshMode;
				uniform half4 _wetness_water_vert_mode;
				uniform half4 _WetnessWaterMeshRemap;
				uniform half _WetnessWaterMeshValue;
				uniform half _WetnessWaterMeshMode;
				uniform half _WetnessWaterBaseValue;
				uniform half4 _WetnessWaterBlendRemap;
				uniform half _WetnessContrastValue;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTexRT);
				uniform half _WetnessDropsTillingValue;
				uniform half _WetnessDropsIntensityValue;
				uniform half _WetnessDropsNormalValue;
				uniform half _WetnessDropsDistValue;
				uniform half4 _wetness_drops_vert_mode;
				uniform half4 _WetnessDropsMeshRemap;
				uniform half _WetnessDropsMeshValue;
				uniform half _WetnessDropsMeshMode;
				uniform half _WetnessSmoothnessValue;
				uniform half _CutoutIntensityValue;
				uniform half _CutoutElementMode;
				uniform half _CutoutGlobalValue;
				uniform half _CutoutAlphaValue;
				uniform half _CutoutNoiseTillingValue;
				uniform half _CutoutNoiseValue;
				uniform half4 _cutout_vert_mode;
				uniform half4 _CutoutMeshRemap;
				uniform half _CutoutMeshValue;
				uniform half _CutoutMeshMode;
				uniform half _CutoutMultiValue;
				uniform half _DitherConstantValue;
				uniform half4 TVE_DitherParams;
				uniform half _DitherProximityMaxValue;
				uniform half _DitherProximityMinValue;
				uniform half _DitherProximityValue;
				uniform half _DitherDistanceMinValue;
				uniform half _DitherDistanceMaxValue;
				uniform half _DitherDistanceValue;
				uniform half _DitherGlancingAngleValue;
				uniform half _DitherGlancingValue;
				uniform half _DitherNoiseTillingValue;
				uniform half _DitherMultiValue;
				uniform half4 _emissive_vert_mode;
				uniform half4 _EmissiveMeshRemap;
				uniform half _EmissiveMeshValue;
				uniform half _EmissiveMeshMode;
				UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
				uniform half4 _emissive_coord_value;
				uniform half _EmissiveSampleMode;
				uniform half _EmissiveCoordMode;
				uniform half4 _EmissiveCoordValue;
				uniform half4 _EmissiveMaskRemap;
				uniform half _EmissiveMaskValue;
				uniform half _EmissiveIntensityValue;
				uniform half4 _EmissiveColor;
				uniform half _EmissiveElementMode;
				uniform half _EmissiveGlobalValue;
				uniform half _EmissiveColorMode;
				uniform float _emissive_power_value;
				uniform half4 _SubsurfaceColor;
				uniform half _SubsurfaceIntensityValue;
				uniform half _SubsurfaceElementMode;
				uniform half _SubsurfaceGlobalValue;
				uniform half _SubsurfaceMultiValue;
				uniform half3 TVE_MainLightDirection;
				uniform half _SubsurfaceAproxInfo;


				float4 mod289( float4 x )
				{
					return x - floor(x * 0.00346020761) * 289.0;
				}
				
				float4 perm( float4 x )
				{
					    return mod289((x * 34.0 + 1.0) * x);
				}
				
				float SimpleNoise3D( float3 p )
				{
					    // Compute integer and fractional parts.
					    float3 i = floor(p);
					    float3 f = p - i;
					    // Cubic interpolation (smoothstep)
					    f = f * f * (3.0 - 2.0 * f);
					    // Build 4-component vectors using swizzling.
					    // a = (i.x, i.x+1, i.y, i.y+1)
					    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
					    // Permutations along the x and y axes.
					    float4 k1 = perm(a.xyxy);
					    float4 k2 = perm(k1.xyxy + a.zzww);
					    // Incorporate the z component.
					    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
					    float4 k3 = perm(c);
					    float4 k4 = perm(c + 1.0);
					    // Map results to the [0,1] range.
					    float4 o1 = frac(k3 * 0.0243902439);
					    float4 o2 = frac(k4 * 0.0243902439);
					    // Interpolate along z, then x, then y.
					    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
					    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
					    return lerp(o4.x, o4.y, f.y); 
				}
				
				float2 DecodeFloatToVector2( float enc )
				{
					float2 result ;
					result.y = enc % 2048;
					result.x = floor(enc / 2048);
					return result / (2048 - 1);
				}
				
				float3 ASESafeNormalize(float3 inVec)
				{
					float dp3 = max(1.175494351e-38, dot(inVec, inVec));
					return inVec* rsqrt(dp3);
				}
				
				void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
				{
					ZX = WorldPosition.xz * Coords.xx - Coords.zz;
					ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
					XY = WorldPosition.xy * Coords.xy - Coords.zw;
				}
				
				half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
				{
					half2 UV = TexCoord * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
					return tex;
				}
				
				void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
				{
					half3 powNormal = abs( WorldNormal.xyz );
					half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
					weights /= ( weights.x + weights.y + weights.z ).xxx;
					T1 = weights.y;
					T2 = weights.x;
					T3 = weights.z;
				}
				
				half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
					half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
					half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
					return tex1 * T1 + tex2 * T2 + tex3 * T3;
				}
				
				void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
				{
					half2 vertex1, vertex2, vertex3;
					// Scaling of the input
					half2 uv = UV * 3.464; // 2 * sqrt (3)
					// Skew input space into simplex triangle grid
					const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
					half2 skewedCoord = mul( gridToSkewedGrid, uv );
					// Compute local triangle vertex IDs and local barycentric coordinates
					int2 baseId = int2( floor( skewedCoord ) );
					half3 temp = half3( frac( skewedCoord ), 0 );
					temp.z = 1.0 - temp.x - temp.y;
					if ( temp.z > 0.0 )
					{
						W1 = temp.z;
						W2 = temp.y;
						W3 = temp.x;
						vertex1 = baseId;
						vertex2 = baseId + int2( 0, 1 );
						vertex3 = baseId + int2( 1, 0 );
					}
					else
					{
						W1 = -temp.z;
						W2 = 1.0 - temp.y;
						W3 = 1.0 - temp.x;
						vertex1 = baseId + int2( 1, 1 );
						vertex2 = baseId + int2( 1, 0 );
						vertex3 = baseId + int2( 0, 1 );
					}
					UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
					UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
					UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
					return;
				}
				
				float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
				{
					half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
					half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
					half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
					half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
					return tex1 * W1 + tex2 * W2 + tex3 * W3;
				}
				
				half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
				{
					half2 ZX, ZY, XY;
					ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
					half2 UV1, UV2, UV3;
					half W1, W2, W3;
					half4 tex1, tex2, tex3;
					ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
					half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
					half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
					tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
					tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
					tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
					half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
					half T1, T2, T3;
					ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
					return texZX * T1 + texZY * T2 + texXY * T3;
				}
				

				v2f VertexFunction( appdata v  )
				{
					UNITY_SETUP_INSTANCE_ID(v);
					v2f o;
					UNITY_INITIALIZE_OUTPUT(v2f,o);
					UNITY_TRANSFER_INSTANCE_ID(v,o);
					UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

					TVEModelData Data16_g171023 = (TVEModelData)0;
					float In_Dummy16_g171023 = 0.0;
					TVEModelData Data16_g171012 = (TVEModelData)0;
					half Dummy1575_g170996 = ( _NormalCategory + _NormalEnd + _NormalSpace + _NormalBakeMode );
					float In_Dummy16_g171012 = Dummy1575_g170996;
					TVEModelData Data16_g170972 = (TVEModelData)0;
					float In_Dummy16_g170972 = 0.0;
					TVEModelData Data16_g170744 = (TVEModelData)0;
					half Dummy181_g170727 = ( ( _MotionCategory + _MotionWindEnd ) + ( _MotionElementMode + _MotionPushInfo ) );
					float In_Dummy16_g170744 = Dummy181_g170727;
					TVEModelData Data16_g170681 = (TVEModelData)0;
					half Dummy181_g170679 = ( _SizeFadeCategory + _SizeFadeEnd );
					float In_Dummy16_g170681 = Dummy181_g170679;
					TVEModelData Data16_g170585 = (TVEModelData)0;
					half Dummy181_g170582 = ( _PerspectiveCategory + _PerspectiveEnd );
					float In_Dummy16_g170585 = Dummy181_g170582;
					TVEModelData Data16_g170580 = (TVEModelData)0;
					float In_Dummy16_g170580 = 0.0;
					TVEModelData Data16_g170482 = (TVEModelData)0;
					half Dummy207_g170478 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode + _ObjectBoundsInfo );
					float In_Dummy16_g170482 = Dummy207_g170478;
					half3 PositionOS131_g170478 = v.vertex.xyz;
					float3 In_PositionOS16_g170482 = PositionOS131_g170478;
					float3 ase_positionWS = mul( unity_ObjectToWorld, float4( ( v.vertex ).xyz, 1 ) ).xyz;
					float3 vertexToFrag73_g170478 = ase_positionWS;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170482 = PositionWS122_g170478;
					float4x4 break19_g170488 = unity_ObjectToWorld;
					float3 appendResult20_g170488 = (float3(break19_g170488[ 0 ][ 3 ] , break19_g170488[ 1 ][ 3 ] , break19_g170488[ 2 ][ 3 ]));
					float3 temp_output_340_7_g170478 = appendResult20_g170488;
					float4x4 break19_g170490 = unity_ObjectToWorld;
					float3 appendResult20_g170490 = (float3(break19_g170490[ 0 ][ 3 ] , break19_g170490[ 1 ][ 3 ] , break19_g170490[ 2 ][ 3 ]));
					float3 _Vector0 = float3(0,0,0);
					float3 appendResult60_g170486 = (float3(v.ase_texcoord3.x , v.ase_texcoord3.z , v.ase_texcoord3.y));
					float3 break233_g170478 = PositionOS131_g170478;
					float3 appendResult234_g170478 = (float3(break233_g170478.x , 0.0 , break233_g170478.z));
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch229_g170478 = _Vector0;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch229_g170478 = appendResult60_g170486;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch229_g170478 = appendResult234_g170478;
					#else
					float3 staticSwitch229_g170478 = _Vector0;
					#endif
					half3 PivotOS149_g170478 = staticSwitch229_g170478;
					float3 temp_output_122_0_g170490 = PivotOS149_g170478;
					float3 PivotsOnlyWS105_g170490 = mul( unity_ObjectToWorld, float4( temp_output_122_0_g170490 , 0.0 ) ).xyz;
					float3 temp_output_341_7_g170478 = ( appendResult20_g170490 + PivotsOnlyWS105_g170490 );
					#if defined( TVE_PIVOT_OFF )
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#elif defined( TVE_PIVOT_BAKED )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#elif defined( TVE_PIVOT_PROC )
					float3 staticSwitch236_g170478 = temp_output_341_7_g170478;
					#else
					float3 staticSwitch236_g170478 = temp_output_340_7_g170478;
					#endif
					float3 vertexToFrag76_g170478 = staticSwitch236_g170478;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170482 = PositionWO132_g170478;
					float3 In_PositionRawOS16_g170482 = PositionOS131_g170478;
					float3 In_PositionAddOS16_g170482 = float3( 0,0,0 );
					float3 In_PivotOS16_g170482 = PivotOS149_g170478;
					float3 In_PivotWS16_g170482 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170482 = PivotWO133_g170478;
					half3 NormalOS134_g170478 = v.normal;
					float3 In_NormalOS16_g170482 = NormalOS134_g170478;
					float3 ase_normalWS = UnityObjectToWorldNormal( v.normal );
					float3 normalizedWorldNormal = normalize( ase_normalWS );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170482 = Normal_WS95_g170478;
					float3 In_NormalRawOS16_g170482 = NormalOS134_g170478;
					float3 objToWorldDir298_g170478 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0.0 ) ).xyz );
					half3 Normal_RawWS136_g170478 = objToWorldDir298_g170478;
					float3 In_NormalRawWS16_g170482 = Normal_RawWS136_g170478;
					half4 TangentlOS153_g170478 = v.tangent;
					float4 In_TangentOS16_g170482 = TangentlOS153_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170482 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = v.ase_color;
					float4 In_VertexData16_g170482 = VertexMasks171_g170478;
					float mulTime113_g170485 = _Time.y * 0.52;
					float lerpResult128_g170485 = lerp( mulTime113_g170485 , ( ( mulTime113_g170485 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float3 break319_g170478 = PivotWO133_g170478;
					half Pivot_Position322_g170478 = ( break319_g170478.x + break319_g170478.z );
					float mulTime113_g170484 = _Time.y * 0.27;
					float lerpResult128_g170484 = lerp( mulTime113_g170484 , ( ( mulTime113_g170484 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					float4 break33_g170487 = _object_phase_mode;
					float temp_output_30_0_g170487 = ( v.ase_color.r * break33_g170487.x );
					float temp_output_29_0_g170487 = ( v.ase_color.g * break33_g170487.y );
					float temp_output_31_0_g170487 = ( v.ase_color.b * break33_g170487.z );
					float temp_output_28_0_g170487 = ( temp_output_30_0_g170487 + temp_output_29_0_g170487 + temp_output_31_0_g170487 + ( v.ase_color.a * break33_g170487.w ) );
					float temp_output_315_0_g170478 = (frac( ( temp_output_28_0_g170487 + Pivot_Position322_g170478 ) )*2.0 + -1.0);
					float4 appendResult177_g170478 = (float4(sin( ( lerpResult128_g170485 + Pivot_Position322_g170478 ) ) , sin( ( lerpResult128_g170484 + Pivot_Position322_g170478 ) ) , temp_output_315_0_g170478 , 1.0));
					half4 MotionMasks176_g170478 = appendResult177_g170478;
					float4 In_PhaseData16_g170482 = MotionMasks176_g170478;
					half Object_HeightValue267_g170478 = _ObjectHeightValue;
					half Object_RadiusValue268_g170478 = _ObjectRadiusValue;
					float temp_output_270_0_g170478 = (PositionOS131_g170478).y;
					half Bounds_HeightMask274_g170478 = saturate( ( temp_output_270_0_g170478 / Object_HeightValue267_g170478 ) );
					half Bounds_SphereMask282_g170478 = saturate( ( length( PositionOS131_g170478 ) / max( Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 ) ) );
					float4 appendResult253_g170478 = (float4(Object_HeightValue267_g170478 , Object_RadiusValue268_g170478 , Bounds_HeightMask274_g170478 , Bounds_SphereMask282_g170478));
					half4 BoundsData254_g170478 = appendResult253_g170478;
					float4 In_BoundsData16_g170482 = BoundsData254_g170478;
					float4 In_RotationData16_g170482 = float4( 0,0,0,0 );
					{
					Data16_g170482.Dummy = In_Dummy16_g170482;
					Data16_g170482.PositionOS = In_PositionOS16_g170482;
					Data16_g170482.PositionWS = In_PositionWS16_g170482;
					Data16_g170482.PositionWO = In_PositionWO16_g170482;
					Data16_g170482.PositionRawOS = In_PositionRawOS16_g170482;
					Data16_g170482.PositionAddOS = In_PositionAddOS16_g170482;
					Data16_g170482.PivotOS = In_PivotOS16_g170482;
					Data16_g170482.PivotWS = In_PivotWS16_g170482;
					Data16_g170482.PivotWO = In_PivotWO16_g170482;
					Data16_g170482.NormalOS = In_NormalOS16_g170482;
					Data16_g170482.NormalWS = In_NormalWS16_g170482;
					Data16_g170482.NormalRawOS = In_NormalRawOS16_g170482;
					Data16_g170482.NormalRawWS = In_NormalRawWS16_g170482;
					Data16_g170482.TangentOS = In_TangentOS16_g170482;
					Data16_g170482.ViewDirWS = In_ViewDirWS16_g170482;
					Data16_g170482.VertexData = In_VertexData16_g170482;
					Data16_g170482.PhaseData = In_PhaseData16_g170482;
					Data16_g170482.BoundsData = In_BoundsData16_g170482;
					Data16_g170482.RotationData = In_RotationData16_g170482;
					}
					TVEModelData Data15_g170581 = Data16_g170482;
					float Out_Dummy15_g170581 = 0;
					float3 Out_PositionOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170581 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170581 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170581 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170581 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170581 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170581 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170581 = float3( 0,0,0 );
					float4 Out_VertexData15_g170581 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170581 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170581 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170581 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170581 = Data15_g170581.Dummy;
					Out_PositionOS15_g170581 = Data15_g170581.PositionOS;
					Out_PositionWS15_g170581 = Data15_g170581.PositionWS;
					Out_PositionWO15_g170581 = Data15_g170581.PositionWO;
					Out_PositionRawOS15_g170581 = Data15_g170581.PositionRawOS;
					Out_PositionAddOS15_g170581 = Data15_g170581.PositionAddOS;
					Out_PivotOS15_g170581 = Data15_g170581.PivotOS;
					Out_PivotWS15_g170581 = Data15_g170581.PivotWS;
					Out_PivotWO15_g170581 = Data15_g170581.PivotWO;
					Out_NormalOS15_g170581 = Data15_g170581.NormalOS;
					Out_NormalWS15_g170581 = Data15_g170581.NormalWS;
					Out_NormalRawOS15_g170581 = Data15_g170581.NormalRawOS;
					Out_NormalRawWS15_g170581 = Data15_g170581.NormalRawWS;
					Out_TangentOS15_g170581 = Data15_g170581.TangentOS;
					Out_ViewDirWS15_g170581 = Data15_g170581.ViewDirWS;
					Out_VertexData15_g170581 = Data15_g170581.VertexData;
					Out_PhaseData15_g170581 = Data15_g170581.PhaseData;
					Out_BoundsData15_g170581 = Data15_g170581.BoundsData;
					Out_RotationData15_g170581 = Data15_g170581.RotationData;
					}
					float3 temp_output_218_24_g170579 = Out_PivotOS15_g170581;
					float3 In_PositionOS16_g170580 = ( Out_PositionOS15_g170581 - temp_output_218_24_g170579 );
					float3 In_PositionWS16_g170580 = Out_PositionWS15_g170581;
					float3 In_PositionWO16_g170580 = Out_PositionWO15_g170581;
					float3 In_PositionRawOS16_g170580 = Out_PositionRawOS15_g170581;
					float3 In_PositionAddOS16_g170580 = Out_PositionAddOS15_g170581;
					float3 In_PivotOS16_g170580 = temp_output_218_24_g170579;
					float3 In_PivotWS16_g170580 = Out_PivotWS15_g170581;
					float3 In_PivotWO16_g170580 = Out_PivotWO15_g170581;
					float3 In_NormalOS16_g170580 = Out_NormalOS15_g170581;
					float3 In_NormalWS16_g170580 = Out_NormalWS15_g170581;
					float3 In_NormalRawOS16_g170580 = Out_NormalRawOS15_g170581;
					float3 In_NormalRawWS16_g170580 = Out_NormalRawWS15_g170581;
					float4 In_TangentOS16_g170580 = Out_TangentOS15_g170581;
					float3 In_ViewDirWS16_g170580 = Out_ViewDirWS15_g170581;
					float4 In_VertexData16_g170580 = Out_VertexData15_g170581;
					float4 In_PhaseData16_g170580 = Out_PhaseData15_g170581;
					float4 In_BoundsData16_g170580 = Out_BoundsData15_g170581;
					float4 In_RotationData16_g170580 = Out_RotationData15_g170581;
					{
					Data16_g170580.Dummy = In_Dummy16_g170580;
					Data16_g170580.PositionOS = In_PositionOS16_g170580;
					Data16_g170580.PositionWS = In_PositionWS16_g170580;
					Data16_g170580.PositionWO = In_PositionWO16_g170580;
					Data16_g170580.PositionRawOS = In_PositionRawOS16_g170580;
					Data16_g170580.PositionAddOS = In_PositionAddOS16_g170580;
					Data16_g170580.PivotOS = In_PivotOS16_g170580;
					Data16_g170580.PivotWS = In_PivotWS16_g170580;
					Data16_g170580.PivotWO = In_PivotWO16_g170580;
					Data16_g170580.NormalOS = In_NormalOS16_g170580;
					Data16_g170580.NormalWS = In_NormalWS16_g170580;
					Data16_g170580.NormalRawOS = In_NormalRawOS16_g170580;
					Data16_g170580.NormalRawWS = In_NormalRawWS16_g170580;
					Data16_g170580.TangentOS = In_TangentOS16_g170580;
					Data16_g170580.ViewDirWS = In_ViewDirWS16_g170580;
					Data16_g170580.VertexData = In_VertexData16_g170580;
					Data16_g170580.PhaseData = In_PhaseData16_g170580;
					Data16_g170580.BoundsData = In_BoundsData16_g170580;
					Data16_g170580.RotationData = In_RotationData16_g170580;
					}
					TVEModelData Data15_g170583 = Data16_g170580;
					float Out_Dummy15_g170583 = 0;
					float3 Out_PositionOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170583 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170583 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170583 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170583 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170583 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170583 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170583 = float3( 0,0,0 );
					float4 Out_VertexData15_g170583 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170583 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170583 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170583 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170583 = Data15_g170583.Dummy;
					Out_PositionOS15_g170583 = Data15_g170583.PositionOS;
					Out_PositionWS15_g170583 = Data15_g170583.PositionWS;
					Out_PositionWO15_g170583 = Data15_g170583.PositionWO;
					Out_PositionRawOS15_g170583 = Data15_g170583.PositionRawOS;
					Out_PositionAddOS15_g170583 = Data15_g170583.PositionAddOS;
					Out_PivotOS15_g170583 = Data15_g170583.PivotOS;
					Out_PivotWS15_g170583 = Data15_g170583.PivotWS;
					Out_PivotWO15_g170583 = Data15_g170583.PivotWO;
					Out_NormalOS15_g170583 = Data15_g170583.NormalOS;
					Out_NormalWS15_g170583 = Data15_g170583.NormalWS;
					Out_NormalRawOS15_g170583 = Data15_g170583.NormalRawOS;
					Out_NormalRawWS15_g170583 = Data15_g170583.NormalRawWS;
					Out_TangentOS15_g170583 = Data15_g170583.TangentOS;
					Out_ViewDirWS15_g170583 = Data15_g170583.ViewDirWS;
					Out_VertexData15_g170583 = Data15_g170583.VertexData;
					Out_PhaseData15_g170583 = Data15_g170583.PhaseData;
					Out_BoundsData15_g170583 = Data15_g170583.BoundsData;
					Out_RotationData15_g170583 = Data15_g170583.RotationData;
					}
					half3 Model_PositionOS147_g170582 = Out_PositionOS15_g170583;
					float3 ase_viewVectorWS = ( _WorldSpaceCameraPos.xyz - ase_positionWS );
					float3 ase_viewDirSafeWS = Unity_SafeNormalize( ase_viewVectorWS );
					float4x4 break117_g170584 = unity_CameraToWorld;
					float3 appendResult118_g170584 = (float3(break117_g170584[ 0 ][ 2 ] , break117_g170584[ 1 ][ 2 ] , break117_g170584[ 2 ][ 2 ]));
					float3 lerpResult209_g170582 = lerp( ase_viewDirSafeWS , -appendResult118_g170584 , unity_OrthoParams.w);
					float3 break201_g170582 = cross( lerpResult209_g170582 , half3( 0, 1, 0 ) );
					float3 appendResult196_g170582 = (float3(-break201_g170582.z , 0.0 , break201_g170582.x));
					float4 temp_output_149_27_g170582 = Out_PhaseData15_g170583;
					half4 Model_PhaseData218_g170582 = temp_output_149_27_g170582;
					float temp_output_222_0_g170582 = ( ((Model_PhaseData218_g170582).z*2.0 + -1.0) * _PerspectivePhaseValue );
					float3 appendResult224_g170582 = (float3(temp_output_222_0_g170582 , 0.0 , temp_output_222_0_g170582));
					float dotResult189_g170582 = dot( ase_viewDirSafeWS , float3( 0, 1, 0 ) );
					float saferPower192_g170582 = abs( dotResult189_g170582 );
					#ifdef TVE_PERSPECTIVE
					float3 staticSwitch211_g170582 = ( Model_PositionOS147_g170582 + ( ( mul( unity_WorldToObject, float4( appendResult196_g170582 , 0.0 ) ).xyz + appendResult224_g170582 ) * _PerspectiveIntensityValue * pow( saferPower192_g170582 , _PerspectiveAngleValue ) * saturate( (Model_PositionOS147_g170582).y ) ) );
					#else
					float3 staticSwitch211_g170582 = Model_PositionOS147_g170582;
					#endif
					half3 Final_Position178_g170582 = staticSwitch211_g170582;
					float3 In_PositionOS16_g170585 = Final_Position178_g170582;
					float3 In_PositionWS16_g170585 = Out_PositionWS15_g170583;
					float3 In_PositionWO16_g170585 = Out_PositionWO15_g170583;
					float3 In_PositionRawOS16_g170585 = Out_PositionRawOS15_g170583;
					float3 In_PositionAddOS16_g170585 = Out_PositionAddOS15_g170583;
					float3 In_PivotOS16_g170585 = Out_PivotOS15_g170583;
					float3 In_PivotWS16_g170585 = Out_PivotWS15_g170583;
					float3 In_PivotWO16_g170585 = Out_PivotWO15_g170583;
					float3 In_NormalOS16_g170585 = Out_NormalOS15_g170583;
					float3 In_NormalWS16_g170585 = Out_NormalWS15_g170583;
					float3 In_NormalRawOS16_g170585 = Out_NormalRawOS15_g170583;
					float3 In_NormalRawWS16_g170585 = Out_NormalRawWS15_g170583;
					float4 In_TangentOS16_g170585 = Out_TangentOS15_g170583;
					float3 In_ViewDirWS16_g170585 = Out_ViewDirWS15_g170583;
					float4 In_VertexData16_g170585 = Out_VertexData15_g170583;
					float4 In_PhaseData16_g170585 = temp_output_149_27_g170582;
					float4 In_BoundsData16_g170585 = Out_BoundsData15_g170583;
					float4 In_RotationData16_g170585 = Out_RotationData15_g170583;
					{
					Data16_g170585.Dummy = In_Dummy16_g170585;
					Data16_g170585.PositionOS = In_PositionOS16_g170585;
					Data16_g170585.PositionWS = In_PositionWS16_g170585;
					Data16_g170585.PositionWO = In_PositionWO16_g170585;
					Data16_g170585.PositionRawOS = In_PositionRawOS16_g170585;
					Data16_g170585.PositionAddOS = In_PositionAddOS16_g170585;
					Data16_g170585.PivotOS = In_PivotOS16_g170585;
					Data16_g170585.PivotWS = In_PivotWS16_g170585;
					Data16_g170585.PivotWO = In_PivotWO16_g170585;
					Data16_g170585.NormalOS = In_NormalOS16_g170585;
					Data16_g170585.NormalWS = In_NormalWS16_g170585;
					Data16_g170585.NormalRawOS = In_NormalRawOS16_g170585;
					Data16_g170585.NormalRawWS = In_NormalRawWS16_g170585;
					Data16_g170585.TangentOS = In_TangentOS16_g170585;
					Data16_g170585.ViewDirWS = In_ViewDirWS16_g170585;
					Data16_g170585.VertexData = In_VertexData16_g170585;
					Data16_g170585.PhaseData = In_PhaseData16_g170585;
					Data16_g170585.BoundsData = In_BoundsData16_g170585;
					Data16_g170585.RotationData = In_RotationData16_g170585;
					}
					TVEModelData Data15_g170680 = Data16_g170585;
					float Out_Dummy15_g170680 = 0;
					float3 Out_PositionOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170680 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170680 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170680 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170680 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170680 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170680 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170680 = float3( 0,0,0 );
					float4 Out_VertexData15_g170680 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170680 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170680 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170680 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170680 = Data15_g170680.Dummy;
					Out_PositionOS15_g170680 = Data15_g170680.PositionOS;
					Out_PositionWS15_g170680 = Data15_g170680.PositionWS;
					Out_PositionWO15_g170680 = Data15_g170680.PositionWO;
					Out_PositionRawOS15_g170680 = Data15_g170680.PositionRawOS;
					Out_PositionAddOS15_g170680 = Data15_g170680.PositionAddOS;
					Out_PivotOS15_g170680 = Data15_g170680.PivotOS;
					Out_PivotWS15_g170680 = Data15_g170680.PivotWS;
					Out_PivotWO15_g170680 = Data15_g170680.PivotWO;
					Out_NormalOS15_g170680 = Data15_g170680.NormalOS;
					Out_NormalWS15_g170680 = Data15_g170680.NormalWS;
					Out_NormalRawOS15_g170680 = Data15_g170680.NormalRawOS;
					Out_NormalRawWS15_g170680 = Data15_g170680.NormalRawWS;
					Out_TangentOS15_g170680 = Data15_g170680.TangentOS;
					Out_ViewDirWS15_g170680 = Data15_g170680.ViewDirWS;
					Out_VertexData15_g170680 = Data15_g170680.VertexData;
					Out_PhaseData15_g170680 = Data15_g170680.PhaseData;
					Out_BoundsData15_g170680 = Data15_g170680.BoundsData;
					Out_RotationData15_g170680 = Data15_g170680.RotationData;
					}
					half3 Model_PositionOS147_g170679 = Out_PositionOS15_g170680;
					float3 temp_cast_5 = (1.0).xxx;
					float3 temp_output_210_19_g170679 = Out_PivotWO15_g170680;
					half3 Model_PivotWO162_g170679 = temp_output_210_19_g170679;
					float lerpResult216_g170679 = lerp( 1.0 , TVE_SizeFadeParams.z , TVE_SizeFadeParams.w);
					float temp_output_7_0_g170685 = _SizeFadeDistMaxValue;
					float temp_output_9_0_g170685 = ( ( distance( _WorldSpaceCameraPos , Model_PivotWO162_g170679 ) * lerpResult216_g170679 ) - temp_output_7_0_g170685 );
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170682 = Data204_g170496;
					float Out_Dummy15_g170682 = 0;
					float4 Out_CoatDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170682 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170682 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170682 = Data15_g170682.Dummy;
					Out_CoatDataRT15_g170682 = Data15_g170682.CoatDataRT;
					Out_PaintDataRT15_g170682 = Data15_g170682.PaintDataRT;
					Out_GlowDataRT15_g170682= Data15_g170682.GlowDataRT;
					Out_AtmoDataRT15_g170682= Data15_g170682.AtmoDataRT;
					Out_FadeDataRT15_g170682= Data15_g170682.FadeDataRT;
					Out_FormDataRT15_g170682 = Data15_g170682.FormDataRT;
					Out_FlowDataRT15_g170682 = Data15_g170682.FlowDataRT;
					}
					half4 Input_FormParams188_g170679 = Out_FormDataRT15_g170682;
					float temp_output_6_0_g170683 = saturate( (Input_FormParams188_g170679).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170683 = ( temp_output_6_0_g170683 + _SizeFadeElementMode );
					#else
					float staticSwitch14_g170683 = temp_output_6_0_g170683;
					#endif
					#ifdef TVE_SIZEFADE_ELEMENT
					float staticSwitch194_g170679 = staticSwitch14_g170683;
					#else
					float staticSwitch194_g170679 = TVE_FormParams.w;
					#endif
					float lerpResult213_g170679 = lerp( 1.0 , staticSwitch194_g170679 , ( _SizeFadeGlobalValue * TVE_IsEnabled ));
					half SizeFade_MaskGlobal192_g170679 = lerpResult213_g170679;
					half User_Mask232_g170679 = 1.0;
					float temp_output_189_0_g170679 = ( saturate( ( ( temp_output_9_0_g170685 / ( _SizeFadeDistMinValue - temp_output_7_0_g170685 ) ) + 0.0001 ) ) * _SizeFadeScaleValue * SizeFade_MaskGlobal192_g170679 * User_Mask232_g170679 );
					float3 appendResult200_g170679 = (float3(temp_output_189_0_g170679 , temp_output_189_0_g170679 , temp_output_189_0_g170679));
					float3 appendResult201_g170679 = (float3(1.0 , temp_output_189_0_g170679 , 1.0));
					float3 lerpResult202_g170679 = lerp( appendResult200_g170679 , appendResult201_g170679 , _SizeFadeScaleMode);
					float3 lerpResult184_g170679 = lerp( temp_cast_5 , lerpResult202_g170679 , _SizeFadeIntensityValue);
					#ifdef TVE_SIZEFADE
					float3 staticSwitch199_g170679 = ( lerpResult184_g170679 * Model_PositionOS147_g170679 );
					#else
					float3 staticSwitch199_g170679 = Model_PositionOS147_g170679;
					#endif
					half3 Final_Position178_g170679 = staticSwitch199_g170679;
					float3 In_PositionOS16_g170681 = Final_Position178_g170679;
					float3 In_PositionWS16_g170681 = Out_PositionWS15_g170680;
					float3 In_PositionWO16_g170681 = Out_PositionWO15_g170680;
					float3 In_PositionRawOS16_g170681 = Out_PositionRawOS15_g170680;
					float3 In_PositionAddOS16_g170681 = Out_PositionAddOS15_g170680;
					float3 temp_output_210_24_g170679 = Out_PivotOS15_g170680;
					float3 In_PivotOS16_g170681 = temp_output_210_24_g170679;
					float3 In_PivotWS16_g170681 = Out_PivotWS15_g170680;
					float3 In_PivotWO16_g170681 = temp_output_210_19_g170679;
					float3 In_NormalOS16_g170681 = Out_NormalOS15_g170680;
					float3 In_NormalWS16_g170681 = Out_NormalWS15_g170680;
					float3 In_NormalRawOS16_g170681 = Out_NormalRawOS15_g170680;
					float3 In_NormalRawWS16_g170681 = Out_NormalRawWS15_g170680;
					float4 In_TangentOS16_g170681 = Out_TangentOS15_g170680;
					float3 In_ViewDirWS16_g170681 = Out_ViewDirWS15_g170680;
					float4 In_VertexData16_g170681 = Out_VertexData15_g170680;
					float4 In_PhaseData16_g170681 = Out_PhaseData15_g170680;
					float4 In_BoundsData16_g170681 = Out_BoundsData15_g170680;
					float4 In_RotationData16_g170681 = Out_RotationData15_g170680;
					{
					Data16_g170681.Dummy = In_Dummy16_g170681;
					Data16_g170681.PositionOS = In_PositionOS16_g170681;
					Data16_g170681.PositionWS = In_PositionWS16_g170681;
					Data16_g170681.PositionWO = In_PositionWO16_g170681;
					Data16_g170681.PositionRawOS = In_PositionRawOS16_g170681;
					Data16_g170681.PositionAddOS = In_PositionAddOS16_g170681;
					Data16_g170681.PivotOS = In_PivotOS16_g170681;
					Data16_g170681.PivotWS = In_PivotWS16_g170681;
					Data16_g170681.PivotWO = In_PivotWO16_g170681;
					Data16_g170681.NormalOS = In_NormalOS16_g170681;
					Data16_g170681.NormalWS = In_NormalWS16_g170681;
					Data16_g170681.NormalRawOS = In_NormalRawOS16_g170681;
					Data16_g170681.NormalRawWS = In_NormalRawWS16_g170681;
					Data16_g170681.TangentOS = In_TangentOS16_g170681;
					Data16_g170681.ViewDirWS = In_ViewDirWS16_g170681;
					Data16_g170681.VertexData = In_VertexData16_g170681;
					Data16_g170681.PhaseData = In_PhaseData16_g170681;
					Data16_g170681.BoundsData = In_BoundsData16_g170681;
					Data16_g170681.RotationData = In_RotationData16_g170681;
					}
					TVEModelData Data15_g170743 = Data16_g170681;
					float Out_Dummy15_g170743 = 0;
					float3 Out_PositionOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170743 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170743 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170743 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170743 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170743 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170743 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170743 = float3( 0,0,0 );
					float4 Out_VertexData15_g170743 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170743 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170743 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170743 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170743 = Data15_g170743.Dummy;
					Out_PositionOS15_g170743 = Data15_g170743.PositionOS;
					Out_PositionWS15_g170743 = Data15_g170743.PositionWS;
					Out_PositionWO15_g170743 = Data15_g170743.PositionWO;
					Out_PositionRawOS15_g170743 = Data15_g170743.PositionRawOS;
					Out_PositionAddOS15_g170743 = Data15_g170743.PositionAddOS;
					Out_PivotOS15_g170743 = Data15_g170743.PivotOS;
					Out_PivotWS15_g170743 = Data15_g170743.PivotWS;
					Out_PivotWO15_g170743 = Data15_g170743.PivotWO;
					Out_NormalOS15_g170743 = Data15_g170743.NormalOS;
					Out_NormalWS15_g170743 = Data15_g170743.NormalWS;
					Out_NormalRawOS15_g170743 = Data15_g170743.NormalRawOS;
					Out_NormalRawWS15_g170743 = Data15_g170743.NormalRawWS;
					Out_TangentOS15_g170743 = Data15_g170743.TangentOS;
					Out_ViewDirWS15_g170743 = Data15_g170743.ViewDirWS;
					Out_VertexData15_g170743 = Data15_g170743.VertexData;
					Out_PhaseData15_g170743 = Data15_g170743.PhaseData;
					Out_BoundsData15_g170743 = Data15_g170743.BoundsData;
					Out_RotationData15_g170743 = Data15_g170743.RotationData;
					}
					float3 temp_output_2503_0_g170727 = Out_PositionOS15_g170743;
					float3 In_PositionOS16_g170744 = temp_output_2503_0_g170727;
					float3 temp_output_2503_16_g170727 = Out_PositionWS15_g170743;
					float3 In_PositionWS16_g170744 = temp_output_2503_16_g170727;
					float3 temp_output_2503_17_g170727 = Out_PositionWO15_g170743;
					float3 In_PositionWO16_g170744 = temp_output_2503_17_g170727;
					float3 In_PositionRawOS16_g170744 = Out_PositionRawOS15_g170743;
					float3 temp_cast_35 = (0.0).xxx;
					float4 temp_output_2503_29_g170727 = Out_VertexData15_g170743;
					half4 Model_VertexMasks518_g170727 = temp_output_2503_29_g170727;
					float4 break1689_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170728 = _motion_small_vert_mode;
					float temp_output_30_0_g170728 = ( break1689_g170727.x * break33_g170728.x );
					float temp_output_29_0_g170728 = ( break1689_g170727.y * break33_g170728.y );
					float temp_output_31_0_g170728 = ( break1689_g170727.z * break33_g170728.z );
					float temp_output_28_0_g170728 = ( temp_output_30_0_g170728 + temp_output_29_0_g170728 + temp_output_31_0_g170728 + ( break1689_g170727.w * break33_g170728.w ) );
					float temp_output_1727_0_g170727 = temp_output_28_0_g170728;
					float4 temp_output_2503_30_g170727 = Out_BoundsData15_g170743;
					half4 Model_BoundsData1322_g170727 = temp_output_2503_30_g170727;
					float4 break33_g170730 = _motion_small_proc_mode;
					float temp_output_30_0_g170730 = ( (Model_BoundsData1322_g170727).z * break33_g170730.x );
					float temp_output_29_0_g170730 = ( (Model_BoundsData1322_g170727).w * break33_g170730.y );
					float temp_output_1734_0_g170727 = ( temp_output_30_0_g170730 + temp_output_29_0_g170730 );
					float lerpResult1906_g170727 = lerp( temp_output_1727_0_g170727 , temp_output_1734_0_g170727 , _motion_small_mask_mode);
					float enc1805_g170727 = v.ase_texcoord.z;
					float2 localDecodeFloatToVector21805_g170727 = DecodeFloatToVector2( enc1805_g170727 );
					float2 break1804_g170727 = localDecodeFloatToVector21805_g170727;
					half Small_Mask_Legacy1806_g170727 = break1804_g170727.x;
					#ifdef TVE_LEGACY
					float staticSwitch1800_g170727 = Small_Mask_Legacy1806_g170727;
					#else
					float staticSwitch1800_g170727 = lerpResult1906_g170727;
					#endif
					float clampResult17_g170732 = clamp( staticSwitch1800_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170741 = _MotionSmallMaskRemap.x;
					float temp_output_9_0_g170741 = ( clampResult17_g170732 - temp_output_7_0_g170741 );
					float temp_output_6_0_g170739 = saturate( ( ( temp_output_9_0_g170741 * _MotionSmallMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170739 = ( temp_output_6_0_g170739 + _MotionSmallMaskMode );
					#else
					float staticSwitch14_g170739 = temp_output_6_0_g170739;
					#endif
					half Small_Mask640_g170727 = staticSwitch14_g170739;
					float4 lerpResult836_g170752 = lerp( half4( 0, 1, 1, 0 ) , TVE_MotionParams , TVE_MotionParams.w);
					float2 Global_WindDirWS2542_g170727 = (lerpResult836_g170752).xy;
					half2 Input_WindDirWS803_g170753 = Global_WindDirWS2542_g170727;
					half3 Model_PositionWO162_g170727 = temp_output_2503_17_g170727;
					half3 Input_ModelPositionWO761_g170745 = Model_PositionWO162_g170727;
					float3 temp_output_2503_19_g170727 = Out_PivotWO15_g170743;
					half3 Model_PivotWO402_g170727 = temp_output_2503_19_g170727;
					half3 Input_ModelPivotsWO419_g170745 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170745 = _MotionSmallPivotValue;
					float3 lerpResult771_g170745 = lerp( Input_ModelPositionWO761_g170745 , Input_ModelPivotsWO419_g170745 , Input_MotionPivots629_g170745);
					float4 temp_output_2503_27_g170727 = Out_PhaseData15_g170743;
					half4 Model_PhaseData489_g170727 = temp_output_2503_27_g170727;
					half4 Input_ModelMotionData763_g170745 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170745 = _MotionSmallPhaseValue;
					half3 Small_Position1421_g170727 = ( lerpResult771_g170745 + ( (Input_ModelMotionData763_g170745).z * Input_MotionPhase764_g170745 * 5.0 ) );
					half3 Input_PositionWO419_g170753 = Small_Position1421_g170727;
					half Input_MotionTilling321_g170753 = ( _MotionSmallTillingValue + 0.2 );
					half2 Noise_Coord515_g170753 = ( -(Input_PositionWO419_g170753).xz * Input_MotionTilling321_g170753 * 0.005 );
					float2 temp_output_3_0_g170755 = Noise_Coord515_g170753;
					float2 temp_output_21_0_g170755 = Input_WindDirWS803_g170753;
					float lerpResult128_g170754 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170753 = _MotionSmallSpeedValue;
					half Noise_Speed516_g170753 = ( lerpResult128_g170754 * 0.02 * Input_MotionSpeed62_g170753 );
					float temp_output_15_0_g170755 = Noise_Speed516_g170753;
					float temp_output_23_0_g170755 = frac( temp_output_15_0_g170755 );
					float4 lerpResult39_g170755 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * temp_output_23_0_g170755 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170755 + ( temp_output_21_0_g170755 * frac( ( temp_output_15_0_g170755 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170755 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170753 = lerpResult39_g170755;
					half2 Noise_DirWS858_g170753 = ((temp_output_635_0_g170753).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170753 = _MotionSmallNoiseValue;
					half Global_WInd769_g170752 = (lerpResult836_g170752).z;
					TVEGlobalData Data15_g170751 = Data204_g170496;
					float Out_Dummy15_g170751 = 0;
					float4 Out_CoatDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170751 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170751 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170751 = Data15_g170751.Dummy;
					Out_CoatDataRT15_g170751 = Data15_g170751.CoatDataRT;
					Out_PaintDataRT15_g170751 = Data15_g170751.PaintDataRT;
					Out_GlowDataRT15_g170751= Data15_g170751.GlowDataRT;
					Out_AtmoDataRT15_g170751= Data15_g170751.AtmoDataRT;
					Out_FadeDataRT15_g170751= Data15_g170751.FadeDataRT;
					Out_FormDataRT15_g170751 = Data15_g170751.FormDataRT;
					Out_FlowDataRT15_g170751 = Data15_g170751.FlowDataRT;
					}
					half4 Global_FlowParams2668_g170727 = Out_FlowDataRT15_g170751;
					half4 Input_GlobalFlow826_g170752 = Global_FlowParams2668_g170727;
					float temp_output_764_0_g170752 = (Input_GlobalFlow826_g170752).w;
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch612_g170752 = saturate( temp_output_764_0_g170752 );
					#else
					float staticSwitch612_g170752 = Global_WInd769_g170752;
					#endif
					float lerpResult853_g170752 = lerp( staticSwitch612_g170752 , saturate( (staticSwitch612_g170752*TVE_MotionParamsEditor.x + TVE_MotionParamsEditor.y) ) , TVE_MotionParamsEditor.w);
					half Input_MotionValue629_g170752 = _MotionIntensityValue;
					half Global_WindValue1855_g170727 = ( lerpResult853_g170752 * Input_MotionValue629_g170752 );
					half Input_WindValue881_g170753 = Global_WindValue1855_g170727;
					float lerpResult701_g170753 = lerp( 1.0 , Input_MotionNoise552_g170753 , Input_WindValue881_g170753);
					float2 lerpResult646_g170753 = lerp( Input_WindDirWS803_g170753 , Noise_DirWS858_g170753 , lerpResult701_g170753);
					half2 Small_DirWS817_g170753 = lerpResult646_g170753;
					float2 break823_g170753 = Small_DirWS817_g170753;
					half4 Noise_Params685_g170753 = temp_output_635_0_g170753;
					half Wind_Sinus820_g170753 = ( ((Noise_Params685_g170753).b*2.0 + -1.0) * Input_MotionNoise552_g170753 * 0.6 );
					float3 appendResult824_g170753 = (float3(break823_g170753.x , Wind_Sinus820_g170753 , break823_g170753.y));
					half Input_MotionDelay753_g170753 = _MotionSmallDelayValue;
					float lerpResult756_g170753 = lerp( 1.0 , ( Input_WindValue881_g170753 * Input_WindValue881_g170753 ) , Input_MotionDelay753_g170753);
					half Wind_Delay815_g170753 = lerpResult756_g170753;
					float3 appendResult825_g170753 = (float3(Wind_Delay815_g170753 , 1.0 , Wind_Delay815_g170753));
					float3 temp_output_827_0_g170753 = ( ( appendResult824_g170753 * Input_WindValue881_g170753 ) * appendResult825_g170753 );
					float2 break857_g170753 = Noise_DirWS858_g170753;
					float3 appendResult833_g170753 = (float3(break857_g170753.x , Wind_Sinus820_g170753 , break857_g170753.y));
					half Global_PushWave2675_g170727 = (Input_GlobalFlow826_g170752).z;
					half Input_PushWave890_g170753 = Global_PushWave2675_g170727;
					float2 temp_output_790_0_g170752 = (Input_GlobalFlow826_g170752).xy;
					half Global_PushAlpha1504_g170727 = saturate( length( temp_output_790_0_g170752 ) );
					half Input_PushAlpha806_g170753 = ( Global_PushAlpha1504_g170727 * _MotionSmallPushValue );
					float3 lerpResult840_g170753 = lerp( temp_output_827_0_g170753 , ( appendResult833_g170753 * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float3 staticSwitch829_g170753 = lerpResult840_g170753;
					#else
					float3 staticSwitch829_g170753 = temp_output_827_0_g170753;
					#endif
					float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
					float3 temp_output_847_0_g170753 = ( mul( unity_WorldToObject, float4( staticSwitch829_g170753 , 0.0 ) ).xyz * ase_parentObjectScale );
					half3 Small_Squash1489_g170727 = temp_output_847_0_g170753;
					half3 Small_Motion789_g170727 = ( _MotionSmallIntensityValue * Small_Mask640_g170727 * Small_Squash1489_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch495_g170727 = Small_Motion789_g170727;
					#else
					float3 staticSwitch495_g170727 = temp_cast_35;
					#endif
					float3 temp_cast_38 = (0.0).xxx;
					half3 Model_PositionWS1819_g170727 = temp_output_2503_16_g170727;
					half Global_DistMask1820_g170727 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170727 ) / _MotionDistValue ) ) );
					float4 break1710_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170729 = _motion_tiny_vert_mode;
					float temp_output_30_0_g170729 = ( break1710_g170727.x * break33_g170729.x );
					float temp_output_29_0_g170729 = ( break1710_g170727.y * break33_g170729.y );
					float temp_output_31_0_g170729 = ( break1710_g170727.z * break33_g170729.z );
					float temp_output_28_0_g170729 = ( temp_output_30_0_g170729 + temp_output_29_0_g170729 + temp_output_31_0_g170729 + ( break1710_g170727.w * break33_g170729.w ) );
					float temp_output_1729_0_g170727 = temp_output_28_0_g170729;
					float4 break33_g170731 = _motion_tiny_proc_mode;
					float temp_output_30_0_g170731 = ( (Model_BoundsData1322_g170727).z * break33_g170731.x );
					float temp_output_29_0_g170731 = ( (Model_BoundsData1322_g170727).w * break33_g170731.y );
					float temp_output_1735_0_g170727 = ( temp_output_30_0_g170731 + temp_output_29_0_g170731 );
					float lerpResult1908_g170727 = lerp( temp_output_1729_0_g170727 , temp_output_1735_0_g170727 , _motion_tiny_mask_mode);
					half Tiny_Mask_Legacy1807_g170727 = break1804_g170727.y;
					#ifdef TVE_LEGACY
					float staticSwitch1810_g170727 = Tiny_Mask_Legacy1807_g170727;
					#else
					float staticSwitch1810_g170727 = lerpResult1908_g170727;
					#endif
					float clampResult17_g170733 = clamp( staticSwitch1810_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170742 = _MotionTinyMaskRemap.x;
					float temp_output_9_0_g170742 = ( clampResult17_g170733 - temp_output_7_0_g170742 );
					float temp_output_6_0_g170734 = saturate( ( ( temp_output_9_0_g170742 * _MotionTinyMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170734 = ( temp_output_6_0_g170734 + _MotionTinyMaskMode );
					#else
					float staticSwitch14_g170734 = temp_output_6_0_g170734;
					#endif
					half Tiny_Mask218_g170727 = staticSwitch14_g170734;
					float3 temp_output_2503_20_g170727 = Out_NormalOS15_g170743;
					half3 Model_NormalOS554_g170727 = temp_output_2503_20_g170727;
					half3 Input_NormalOS533_g170747 = Model_NormalOS554_g170727;
					half3 Tiny_Position2469_g170727 = Model_PositionWO162_g170727;
					half3 Input_PositionWO500_g170747 = Tiny_Position2469_g170727;
					half Input_MotionTilling321_g170747 = ( _MotionTinyTillingValue + 0.1 );
					float lerpResult128_g170749 = lerp( _Time.y , ( ( _Time.y * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170747 = _MotionTinySpeedValue;
					half3 Flutter_Noise535_g170747 = (SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( ( (Input_PositionWO500_g170747).xz * Input_MotionTilling321_g170747 * 0.005 ) + ( lerpResult128_g170749 * Input_MotionSpeed62_g170747 * 0.02 ) ), 0.0 ).rgb*2.0 + -1.0);
					half Input_MotionNoise542_g170747 = _MotionTinyNoiseValue;
					float3 lerpResult537_g170747 = lerp( ( Input_NormalOS533_g170747 * Flutter_Noise535_g170747 ) , Flutter_Noise535_g170747 , Input_MotionNoise542_g170747);
					half2 Input_WindDirWS803_g170758 = Global_WindDirWS2542_g170727;
					half3 Input_ModelPositionWO761_g170746 = Model_PositionWO162_g170727;
					half3 Input_ModelPivotsWO419_g170746 = Model_PivotWO402_g170727;
					half Input_MotionPivots629_g170746 = _MotionBasePivotValue;
					float3 lerpResult771_g170746 = lerp( Input_ModelPositionWO761_g170746 , Input_ModelPivotsWO419_g170746 , Input_MotionPivots629_g170746);
					half4 Input_ModelMotionData763_g170746 = Model_PhaseData489_g170727;
					half Input_MotionPhase764_g170746 = _MotionBasePhaseValue;
					half3 Base_Position1394_g170727 = ( lerpResult771_g170746 + ( (Input_ModelMotionData763_g170746).z * Input_MotionPhase764_g170746 * 5.0 ) );
					half3 Input_PositionWO419_g170758 = Base_Position1394_g170727;
					half Input_MotionTilling321_g170758 = ( _MotionBaseTillingValue + 0.2 );
					half2 Noise_Coord515_g170758 = ( -(Input_PositionWO419_g170758).xz * Input_MotionTilling321_g170758 * 0.005 );
					float2 temp_output_3_0_g170762 = Noise_Coord515_g170758;
					float2 temp_output_21_0_g170762 = Input_WindDirWS803_g170758;
					float mulTime113_g170761 = _Time.y * 0.02;
					float lerpResult128_g170761 = lerp( mulTime113_g170761 , ( ( mulTime113_g170761 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
					half Input_MotionSpeed62_g170758 = _MotionBaseSpeedValue;
					half Noise_Speed516_g170758 = ( lerpResult128_g170761 * Input_MotionSpeed62_g170758 );
					float temp_output_15_0_g170762 = Noise_Speed516_g170758;
					float temp_output_23_0_g170762 = frac( temp_output_15_0_g170762 );
					float4 lerpResult39_g170762 = lerp( SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * temp_output_23_0_g170762 ) ), 0.0 ) , SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, ( temp_output_3_0_g170762 + ( temp_output_21_0_g170762 * frac( ( temp_output_15_0_g170762 + 0.5 ) ) ) ), 0.0 ) , ( abs( ( temp_output_23_0_g170762 - 0.5 ) ) / 0.5 ));
					float4 temp_output_635_0_g170758 = lerpResult39_g170762;
					half2 Noise_DirWS825_g170758 = ((temp_output_635_0_g170758).rg*2.0 + -1.0);
					half Input_MotionNoise552_g170758 = _MotionBaseNoiseValue;
					half Input_WindValue853_g170758 = Global_WindValue1855_g170727;
					float lerpResult701_g170758 = lerp( 1.0 , Input_MotionNoise552_g170758 , Input_WindValue853_g170758);
					float2 lerpResult646_g170758 = lerp( Input_WindDirWS803_g170758 , Noise_DirWS825_g170758 , lerpResult701_g170758);
					half Input_MotionDelay753_g170758 = _MotionBaseDelayValue;
					float lerpResult756_g170758 = lerp( 1.0 , ( Input_WindValue853_g170758 * Input_WindValue853_g170758 ) , Input_MotionDelay753_g170758);
					half Wind_Delay815_g170758 = lerpResult756_g170758;
					float2 temp_output_809_0_g170758 = ( lerpResult646_g170758 * Input_WindValue853_g170758 * Wind_Delay815_g170758 );
					half2 Bend_Dir859_g170758 = temp_output_809_0_g170758;
					float temp_output_862_0_g170758 = ( length( Bend_Dir859_g170758 ) * Input_MotionNoise552_g170758 );
					float2 Global_PushDirWS1972_g170727 = temp_output_790_0_g170752;
					half2 Input_PushDirWS807_g170758 = Global_PushDirWS1972_g170727;
					half Input_PushWave858_g170758 = Global_PushWave2675_g170727;
					half Input_PushAlpha806_g170758 = ( Global_PushAlpha1504_g170727 * _MotionBasePushValue );
					float lerpResult831_g170758 = lerp( temp_output_862_0_g170758 , ( saturate( length( Input_PushDirWS807_g170758 ) ) * Input_PushWave858_g170758 ) , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch828_g170758 = lerpResult831_g170758;
					#else
					float staticSwitch828_g170758 = temp_output_862_0_g170758;
					#endif
					half Base_Wave1159_g170727 = staticSwitch828_g170758;
					float temp_output_888_0_g170753 = ( (Noise_Params685_g170753).b * Input_WindValue881_g170753 );
					float lerpResult867_g170753 = lerp( temp_output_888_0_g170753 , ( (Noise_Params685_g170753).b * Input_PushWave890_g170753 ) , Input_PushAlpha806_g170753);
					#ifdef TVE_MOTION_ELEMENT
					float staticSwitch886_g170753 = lerpResult867_g170753;
					#else
					float staticSwitch886_g170753 = temp_output_888_0_g170753;
					#endif
					half Small_Wave1427_g170727 = staticSwitch886_g170753;
					float lerpResult2422_g170727 = lerp( Base_Wave1159_g170727 , Small_Wave1427_g170727 , _motion_small_mode);
					half Global_Wave1475_g170727 = lerpResult2422_g170727;
					half Input_GlobalWave546_g170747 = Global_Wave1475_g170727;
					float temp_output_548_0_g170747 = ( Input_GlobalWave546_g170747 * Input_GlobalWave546_g170747 );
					half Flutter_Wave556_g170747 = temp_output_548_0_g170747;
					half3 Tiny_Noise859_g170727 = ( lerpResult537_g170747 * Flutter_Wave556_g170747 );
					half3 Tiny_Flutter1451_g170727 = ( _MotionTinyIntensityValue * Global_DistMask1820_g170727 * Tiny_Mask218_g170727 * Tiny_Noise859_g170727 );
					#ifdef TVE_MOTION
					float3 staticSwitch414_g170727 = Tiny_Flutter1451_g170727;
					#else
					float3 staticSwitch414_g170727 = temp_cast_38;
					#endif
					half3 Final_PositionADD1569_g170727 = ( staticSwitch495_g170727 + staticSwitch414_g170727 );
					float3 In_PositionAddOS16_g170744 = Final_PositionADD1569_g170727;
					float3 temp_output_2503_24_g170727 = Out_PivotOS15_g170743;
					float3 In_PivotOS16_g170744 = temp_output_2503_24_g170727;
					float3 In_PivotWS16_g170744 = Out_PivotWS15_g170743;
					float3 In_PivotWO16_g170744 = temp_output_2503_19_g170727;
					float3 In_NormalOS16_g170744 = temp_output_2503_20_g170727;
					float3 In_NormalWS16_g170744 = Out_NormalWS15_g170743;
					float3 In_NormalRawOS16_g170744 = Out_NormalRawOS15_g170743;
					float3 In_NormalRawWS16_g170744 = Out_NormalRawWS15_g170743;
					float4 In_TangentOS16_g170744 = Out_TangentOS15_g170743;
					float3 In_ViewDirWS16_g170744 = Out_ViewDirWS15_g170743;
					float4 In_VertexData16_g170744 = temp_output_2503_29_g170727;
					float4 In_PhaseData16_g170744 = temp_output_2503_27_g170727;
					float4 In_BoundsData16_g170744 = temp_output_2503_30_g170727;
					float4 break748_g170727 = Model_VertexMasks518_g170727;
					float4 break33_g170736 = _motion_base_vert_mode;
					float temp_output_30_0_g170736 = ( break748_g170727.x * break33_g170736.x );
					float temp_output_29_0_g170736 = ( break748_g170727.y * break33_g170736.y );
					float temp_output_31_0_g170736 = ( break748_g170727.z * break33_g170736.z );
					float temp_output_28_0_g170736 = ( temp_output_30_0_g170736 + temp_output_29_0_g170736 + temp_output_31_0_g170736 + ( break748_g170727.w * break33_g170736.w ) );
					float temp_output_1731_0_g170727 = temp_output_28_0_g170736;
					float4 break33_g170737 = _motion_base_proc_mode;
					float temp_output_30_0_g170737 = ( (Model_BoundsData1322_g170727).z * break33_g170737.x );
					float temp_output_29_0_g170737 = ( (Model_BoundsData1322_g170727).w * break33_g170737.y );
					float temp_output_1733_0_g170727 = ( temp_output_30_0_g170737 + temp_output_29_0_g170737 );
					float lerpResult1904_g170727 = lerp( temp_output_1731_0_g170727 , temp_output_1733_0_g170727 , _motion_base_mask_mode);
					float clampResult17_g170735 = clamp( lerpResult1904_g170727 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170740 = _MotionBaseMaskRemap.x;
					float temp_output_9_0_g170740 = ( clampResult17_g170735 - temp_output_7_0_g170740 );
					float temp_output_6_0_g170738 = saturate( ( ( temp_output_9_0_g170740 * _MotionBaseMaskRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170738 = ( temp_output_6_0_g170738 + _MotionBaseMaskMode );
					#else
					float staticSwitch14_g170738 = temp_output_6_0_g170738;
					#endif
					half Base_Mask217_g170727 = staticSwitch14_g170738;
					float2 lerpResult811_g170758 = lerp( temp_output_809_0_g170758 , Input_PushDirWS807_g170758 , Input_PushAlpha806_g170758);
					#ifdef TVE_MOTION_ELEMENT
					float2 staticSwitch808_g170758 = lerpResult811_g170758;
					#else
					float2 staticSwitch808_g170758 = temp_output_809_0_g170758;
					#endif
					float2 temp_output_38_0_g170759 = staticSwitch808_g170758;
					float2 break83_g170759 = temp_output_38_0_g170759;
					float3 appendResult79_g170759 = (float3(break83_g170759.x , 0.0 , break83_g170759.y));
					half2 Base_Bending893_g170727 = (( mul( unity_WorldToObject, float4( appendResult79_g170759 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
					half2 Base_Motion1440_g170727 = ( _MotionBaseIntensityValue * Base_Mask217_g170727 * Base_Bending893_g170727 );
					#ifdef TVE_MOTION
					float2 staticSwitch2384_g170727 = Base_Motion1440_g170727;
					#else
					float2 staticSwitch2384_g170727 = float2( 0,0 );
					#endif
					float4 appendResult2023_g170727 = (float4(staticSwitch2384_g170727 , 0.0 , 0.0));
					half4 Final_RotationData1570_g170727 = appendResult2023_g170727;
					float4 In_RotationData16_g170744 = Final_RotationData1570_g170727;
					{
					Data16_g170744.Dummy = In_Dummy16_g170744;
					Data16_g170744.PositionOS = In_PositionOS16_g170744;
					Data16_g170744.PositionWS = In_PositionWS16_g170744;
					Data16_g170744.PositionWO = In_PositionWO16_g170744;
					Data16_g170744.PositionRawOS = In_PositionRawOS16_g170744;
					Data16_g170744.PositionAddOS = In_PositionAddOS16_g170744;
					Data16_g170744.PivotOS = In_PivotOS16_g170744;
					Data16_g170744.PivotWS = In_PivotWS16_g170744;
					Data16_g170744.PivotWO = In_PivotWO16_g170744;
					Data16_g170744.NormalOS = In_NormalOS16_g170744;
					Data16_g170744.NormalWS = In_NormalWS16_g170744;
					Data16_g170744.NormalRawOS = In_NormalRawOS16_g170744;
					Data16_g170744.NormalRawWS = In_NormalRawWS16_g170744;
					Data16_g170744.TangentOS = In_TangentOS16_g170744;
					Data16_g170744.ViewDirWS = In_ViewDirWS16_g170744;
					Data16_g170744.VertexData = In_VertexData16_g170744;
					Data16_g170744.PhaseData = In_PhaseData16_g170744;
					Data16_g170744.BoundsData = In_BoundsData16_g170744;
					Data16_g170744.RotationData = In_RotationData16_g170744;
					}
					TVEModelData Data15_g170971 = Data16_g170744;
					float Out_Dummy15_g170971 = 0;
					float3 Out_PositionOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170971 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170971 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170971 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170971 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170971 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170971 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170971 = float3( 0,0,0 );
					float4 Out_VertexData15_g170971 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170971 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170971 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170971 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170971 = Data15_g170971.Dummy;
					Out_PositionOS15_g170971 = Data15_g170971.PositionOS;
					Out_PositionWS15_g170971 = Data15_g170971.PositionWS;
					Out_PositionWO15_g170971 = Data15_g170971.PositionWO;
					Out_PositionRawOS15_g170971 = Data15_g170971.PositionRawOS;
					Out_PositionAddOS15_g170971 = Data15_g170971.PositionAddOS;
					Out_PivotOS15_g170971 = Data15_g170971.PivotOS;
					Out_PivotWS15_g170971 = Data15_g170971.PivotWS;
					Out_PivotWO15_g170971 = Data15_g170971.PivotWO;
					Out_NormalOS15_g170971 = Data15_g170971.NormalOS;
					Out_NormalWS15_g170971 = Data15_g170971.NormalWS;
					Out_NormalRawOS15_g170971 = Data15_g170971.NormalRawOS;
					Out_NormalRawWS15_g170971 = Data15_g170971.NormalRawWS;
					Out_TangentOS15_g170971 = Data15_g170971.TangentOS;
					Out_ViewDirWS15_g170971 = Data15_g170971.ViewDirWS;
					Out_VertexData15_g170971 = Data15_g170971.VertexData;
					Out_PhaseData15_g170971 = Data15_g170971.PhaseData;
					Out_BoundsData15_g170971 = Data15_g170971.BoundsData;
					Out_RotationData15_g170971 = Data15_g170971.RotationData;
					}
					half3 Model_PositionOS147_g170970 = Out_PositionOS15_g170971;
					half3 VertexPos40_g170974 = Model_PositionOS147_g170970;
					float3 appendResult74_g170974 = (float3(VertexPos40_g170974.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g170974 = appendResult74_g170974;
					float3 break84_g170974 = VertexPos40_g170974;
					float3 appendResult81_g170974 = (float3(0.0 , break84_g170974.y , break84_g170974.z));
					half3 VertexPosOtherAxis82_g170974 = appendResult81_g170974;
					float4 temp_output_1567_33_g170970 = Out_RotationData15_g170971;
					half4 Model_VertexBend1569_g170970 = temp_output_1567_33_g170970;
					float2 break1582_g170970 = (Model_VertexBend1569_g170970).xy;
					half Angle44_g170974 = break1582_g170970.y;
					half3 VertexPos40_g170977 = ( VertexPosRotationAxis50_g170974 + ( VertexPosOtherAxis82_g170974 * cos( Angle44_g170974 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g170974 ) * sin( Angle44_g170974 ) ) );
					float3 appendResult74_g170977 = (float3(0.0 , 0.0 , VertexPos40_g170977.z));
					half3 VertexPosRotationAxis50_g170977 = appendResult74_g170977;
					float3 break84_g170977 = VertexPos40_g170977;
					float3 appendResult81_g170977 = (float3(break84_g170977.x , break84_g170977.y , 0.0));
					half3 VertexPosOtherAxis82_g170977 = appendResult81_g170977;
					half Angle44_g170977 = -break1582_g170970.x;
					float3 temp_output_1584_19_g170970 = ( VertexPosRotationAxis50_g170977 + ( VertexPosOtherAxis82_g170977 * cos( Angle44_g170977 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g170977 ) * sin( Angle44_g170977 ) ) );
					float3 temp_output_6_0_g170976 = temp_output_1584_19_g170970;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch65_g170976 = Model_PositionOS147_g170970;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g170976 = temp_output_6_0_g170976;
					#else
					float3 staticSwitch69_g170976 = staticSwitch65_g170976;
					#endif
					float3 temp_output_1585_0_g170970 = staticSwitch69_g170976;
					float3 temp_output_1567_31_g170970 = Out_PositionAddOS15_g170971;
					half3 Model_PositionADD1568_g170970 = temp_output_1567_31_g170970;
					half3 Final_PositionOS178_g170970 = ( temp_output_1585_0_g170970 + Model_PositionADD1568_g170970 );
					float3 In_PositionOS16_g170972 = Final_PositionOS178_g170970;
					float3 In_PositionWS16_g170972 = Out_PositionWS15_g170971;
					float3 In_PositionWO16_g170972 = Out_PositionWO15_g170971;
					float3 In_PositionRawOS16_g170972 = Out_PositionRawOS15_g170971;
					float3 In_PositionAddOS16_g170972 = temp_output_1567_31_g170970;
					float3 In_PivotOS16_g170972 = Out_PivotOS15_g170971;
					float3 In_PivotWS16_g170972 = Out_PivotWS15_g170971;
					float3 In_PivotWO16_g170972 = Out_PivotWO15_g170971;
					float3 In_NormalOS16_g170972 = Out_NormalOS15_g170971;
					float3 In_NormalWS16_g170972 = Out_NormalWS15_g170971;
					float3 In_NormalRawOS16_g170972 = Out_NormalRawOS15_g170971;
					float3 In_NormalRawWS16_g170972 = Out_NormalRawWS15_g170971;
					float4 In_TangentOS16_g170972 = Out_TangentOS15_g170971;
					float3 In_ViewDirWS16_g170972 = Out_ViewDirWS15_g170971;
					float4 In_VertexData16_g170972 = Out_VertexData15_g170971;
					float4 In_PhaseData16_g170972 = Out_PhaseData15_g170971;
					float4 In_BoundsData16_g170972 = Out_BoundsData15_g170971;
					float4 In_RotationData16_g170972 = temp_output_1567_33_g170970;
					{
					Data16_g170972.Dummy = In_Dummy16_g170972;
					Data16_g170972.PositionOS = In_PositionOS16_g170972;
					Data16_g170972.PositionWS = In_PositionWS16_g170972;
					Data16_g170972.PositionWO = In_PositionWO16_g170972;
					Data16_g170972.PositionRawOS = In_PositionRawOS16_g170972;
					Data16_g170972.PositionAddOS = In_PositionAddOS16_g170972;
					Data16_g170972.PivotOS = In_PivotOS16_g170972;
					Data16_g170972.PivotWS = In_PivotWS16_g170972;
					Data16_g170972.PivotWO = In_PivotWO16_g170972;
					Data16_g170972.NormalOS = In_NormalOS16_g170972;
					Data16_g170972.NormalWS = In_NormalWS16_g170972;
					Data16_g170972.NormalRawOS = In_NormalRawOS16_g170972;
					Data16_g170972.NormalRawWS = In_NormalRawWS16_g170972;
					Data16_g170972.TangentOS = In_TangentOS16_g170972;
					Data16_g170972.ViewDirWS = In_ViewDirWS16_g170972;
					Data16_g170972.VertexData = In_VertexData16_g170972;
					Data16_g170972.PhaseData = In_PhaseData16_g170972;
					Data16_g170972.BoundsData = In_BoundsData16_g170972;
					Data16_g170972.RotationData = In_RotationData16_g170972;
					}
					TVEModelData Data15_g170997 = Data16_g170972;
					float Out_Dummy15_g170997 = 0;
					float3 Out_PositionOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170997 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotOS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170997 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170997 = float3( 0,0,0 );
					float3 Out_NormalOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g170997 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g170997 = float3( 0,0,0 );
					float4 Out_TangentOS15_g170997 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g170997 = float3( 0,0,0 );
					float4 Out_VertexData15_g170997 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g170997 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170997 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g170997 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170997 = Data15_g170997.Dummy;
					Out_PositionOS15_g170997 = Data15_g170997.PositionOS;
					Out_PositionWS15_g170997 = Data15_g170997.PositionWS;
					Out_PositionWO15_g170997 = Data15_g170997.PositionWO;
					Out_PositionRawOS15_g170997 = Data15_g170997.PositionRawOS;
					Out_PositionAddOS15_g170997 = Data15_g170997.PositionAddOS;
					Out_PivotOS15_g170997 = Data15_g170997.PivotOS;
					Out_PivotWS15_g170997 = Data15_g170997.PivotWS;
					Out_PivotWO15_g170997 = Data15_g170997.PivotWO;
					Out_NormalOS15_g170997 = Data15_g170997.NormalOS;
					Out_NormalWS15_g170997 = Data15_g170997.NormalWS;
					Out_NormalRawOS15_g170997 = Data15_g170997.NormalRawOS;
					Out_NormalRawWS15_g170997 = Data15_g170997.NormalRawWS;
					Out_TangentOS15_g170997 = Data15_g170997.TangentOS;
					Out_ViewDirWS15_g170997 = Data15_g170997.ViewDirWS;
					Out_VertexData15_g170997 = Data15_g170997.VertexData;
					Out_PhaseData15_g170997 = Data15_g170997.PhaseData;
					Out_BoundsData15_g170997 = Data15_g170997.BoundsData;
					Out_RotationData15_g170997 = Data15_g170997.RotationData;
					}
					float3 In_PositionOS16_g171012 = Out_PositionOS15_g170997;
					float3 In_PositionWS16_g171012 = Out_PositionWS15_g170997;
					float3 temp_output_1567_17_g170996 = Out_PositionWO15_g170997;
					float3 In_PositionWO16_g171012 = temp_output_1567_17_g170996;
					float3 temp_output_1567_26_g170996 = Out_PositionRawOS15_g170997;
					float3 In_PositionRawOS16_g171012 = temp_output_1567_26_g170996;
					float3 In_PositionAddOS16_g171012 = Out_PositionAddOS15_g170997;
					float3 In_PivotOS16_g171012 = Out_PivotOS15_g170997;
					float3 In_PivotWS16_g171012 = Out_PivotWS15_g170997;
					float3 In_PivotWO16_g171012 = Out_PivotWO15_g170997;
					half3 Model_NormalOS1568_g170996 = Out_NormalOS15_g170997;
					half3 _Vector1 = half3(0,1,0);
					float3 lerpResult1589_g170996 = lerp( Model_NormalOS1568_g170996 , _Vector1 , _NormalFlattenValue);
					half3 Model_PositionRAW1592_g170996 = temp_output_1567_26_g170996;
					float3 normalizeResult1594_g170996 = ASESafeNormalize( ( Model_PositionRAW1592_g170996 + _NormalSphereOffsetValue ) );
					float3 lerpResult1585_g170996 = lerp( lerpResult1589_g170996 , normalizeResult1594_g170996 , _NormalSphereValue);
					half3 VertexPos40_g170999 = lerpResult1585_g170996;
					half3 VertexPos40_g171000 = VertexPos40_g170999;
					float3 appendResult74_g171000 = (float3(VertexPos40_g171000.x , 0.0 , 0.0));
					half3 VertexPosRotationAxis50_g171000 = appendResult74_g171000;
					float3 break84_g171000 = VertexPos40_g171000;
					float3 appendResult81_g171000 = (float3(0.0 , break84_g171000.y , break84_g171000.z));
					half3 VertexPosOtherAxis82_g171000 = appendResult81_g171000;
					float4 temp_output_1567_33_g170996 = Out_RotationData15_g170997;
					half4 Model_RotationData1583_g170996 = temp_output_1567_33_g170996;
					half2 Angle44_g170999 = Model_RotationData1583_g170996.xy;
					half Angle44_g171000 = (Angle44_g170999).y;
					half3 VertexPos40_g171001 = ( VertexPosRotationAxis50_g171000 + ( VertexPosOtherAxis82_g171000 * cos( Angle44_g171000 ) ) + ( cross( float3( 1, 0, 0 ) , VertexPosOtherAxis82_g171000 ) * sin( Angle44_g171000 ) ) );
					float3 appendResult74_g171001 = (float3(0.0 , 0.0 , VertexPos40_g171001.z));
					half3 VertexPosRotationAxis50_g171001 = appendResult74_g171001;
					float3 break84_g171001 = VertexPos40_g171001;
					float3 appendResult81_g171001 = (float3(break84_g171001.x , break84_g171001.y , 0.0));
					half3 VertexPosOtherAxis82_g171001 = appendResult81_g171001;
					half Angle44_g171001 = -(Angle44_g170999).x;
					float3 lerpResult1591_g170996 = lerp( lerpResult1585_g170996 , ( VertexPosRotationAxis50_g171001 + ( VertexPosOtherAxis82_g171001 * cos( Angle44_g171001 ) ) + ( cross( float3( 0, 0, 1 ) , VertexPosOtherAxis82_g171001 ) * sin( Angle44_g171001 ) ) ) , _NormalComputeValue);
					float3 temp_output_6_0_g171011 = lerpResult1591_g170996;
					#ifdef TVE_MOTION
					float3 staticSwitch65_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch65_g171011 = lerpResult1585_g170996;
					#endif
					#ifdef TVE_CONFORM
					float3 staticSwitch69_g171011 = temp_output_6_0_g171011;
					#else
					float3 staticSwitch69_g171011 = staticSwitch65_g171011;
					#endif
					float4 temp_output_1567_29_g170996 = Out_VertexData15_g170997;
					half4 Model_VertexData1608_g170996 = temp_output_1567_29_g170996;
					float4 break1683_g170996 = Model_VertexData1608_g170996;
					float4 break33_g171002 = _normal_vert_mode;
					float temp_output_30_0_g171002 = ( break1683_g170996.x * break33_g171002.x );
					float temp_output_29_0_g171002 = ( break1683_g170996.y * break33_g171002.y );
					float temp_output_31_0_g171002 = ( break1683_g170996.z * break33_g171002.z );
					float temp_output_28_0_g171002 = ( temp_output_30_0_g171002 + temp_output_29_0_g171002 + temp_output_31_0_g171002 + ( break1683_g170996.w * break33_g171002.w ) );
					float clampResult17_g171003 = clamp( temp_output_28_0_g171002 , 0.0001 , 0.9999 );
					float temp_output_7_0_g171007 = _NormalMeshRemap.x;
					float temp_output_9_0_g171007 = ( clampResult17_g171003 - temp_output_7_0_g171007 );
					float lerpResult1695_g170996 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g171007 * _NormalMeshRemap.z ) + 0.0001 ) ) , _NormalMeshValue);
					float temp_output_6_0_g171004 = lerpResult1695_g170996;
					#ifdef TVE_DUMMY
					float staticSwitch14_g171004 = ( temp_output_6_0_g171004 + _NormalMeshMode );
					#else
					float staticSwitch14_g171004 = temp_output_6_0_g171004;
					#endif
					float temp_output_1690_0_g170996 = staticSwitch14_g171004;
					half Normal_MeskMask1691_g170996 = temp_output_1690_0_g170996;
					half Normal_Proj_Mask1647_g170996 = 1.0;
					float temp_output_1699_0_g170996 = ( Normal_MeskMask1691_g170996 * Normal_Proj_Mask1647_g170996 );
					float3 lerpResult1670_g170996 = lerp( Model_NormalOS1568_g170996 , staticSwitch69_g171011 , temp_output_1699_0_g170996);
					#ifdef TVE_NORMAL
					float3 staticSwitch1716_g170996 = lerpResult1670_g170996;
					#else
					float3 staticSwitch1716_g170996 = Model_NormalOS1568_g170996;
					#endif
					half3 Final_NormalOS178_g170996 = staticSwitch1716_g170996;
					float3 In_NormalOS16_g171012 = Final_NormalOS178_g170996;
					float3 temp_output_1567_21_g170996 = Out_NormalWS15_g170997;
					float3 In_NormalWS16_g171012 = temp_output_1567_21_g170996;
					float3 In_NormalRawOS16_g171012 = Out_NormalRawOS15_g170997;
					float3 In_NormalRawWS16_g171012 = Out_NormalRawWS15_g170997;
					float4 In_TangentOS16_g171012 = Out_TangentOS15_g170997;
					float3 In_ViewDirWS16_g171012 = Out_ViewDirWS15_g170997;
					float4 In_VertexData16_g171012 = temp_output_1567_29_g170996;
					float4 In_PhaseData16_g171012 = Out_PhaseData15_g170997;
					float4 In_BoundsData16_g171012 = Out_BoundsData15_g170997;
					float4 In_RotationData16_g171012 = temp_output_1567_33_g170996;
					{
					Data16_g171012.Dummy = In_Dummy16_g171012;
					Data16_g171012.PositionOS = In_PositionOS16_g171012;
					Data16_g171012.PositionWS = In_PositionWS16_g171012;
					Data16_g171012.PositionWO = In_PositionWO16_g171012;
					Data16_g171012.PositionRawOS = In_PositionRawOS16_g171012;
					Data16_g171012.PositionAddOS = In_PositionAddOS16_g171012;
					Data16_g171012.PivotOS = In_PivotOS16_g171012;
					Data16_g171012.PivotWS = In_PivotWS16_g171012;
					Data16_g171012.PivotWO = In_PivotWO16_g171012;
					Data16_g171012.NormalOS = In_NormalOS16_g171012;
					Data16_g171012.NormalWS = In_NormalWS16_g171012;
					Data16_g171012.NormalRawOS = In_NormalRawOS16_g171012;
					Data16_g171012.NormalRawWS = In_NormalRawWS16_g171012;
					Data16_g171012.TangentOS = In_TangentOS16_g171012;
					Data16_g171012.ViewDirWS = In_ViewDirWS16_g171012;
					Data16_g171012.VertexData = In_VertexData16_g171012;
					Data16_g171012.PhaseData = In_PhaseData16_g171012;
					Data16_g171012.BoundsData = In_BoundsData16_g171012;
					Data16_g171012.RotationData = In_RotationData16_g171012;
					}
					TVEModelData Data15_g171022 = Data16_g171012;
					float Out_Dummy15_g171022 = 0;
					float3 Out_PositionOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171022 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171022 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171022 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171022 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171022 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171022 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171022 = float3( 0,0,0 );
					float4 Out_VertexData15_g171022 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171022 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171022 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171022 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171022 = Data15_g171022.Dummy;
					Out_PositionOS15_g171022 = Data15_g171022.PositionOS;
					Out_PositionWS15_g171022 = Data15_g171022.PositionWS;
					Out_PositionWO15_g171022 = Data15_g171022.PositionWO;
					Out_PositionRawOS15_g171022 = Data15_g171022.PositionRawOS;
					Out_PositionAddOS15_g171022 = Data15_g171022.PositionAddOS;
					Out_PivotOS15_g171022 = Data15_g171022.PivotOS;
					Out_PivotWS15_g171022 = Data15_g171022.PivotWS;
					Out_PivotWO15_g171022 = Data15_g171022.PivotWO;
					Out_NormalOS15_g171022 = Data15_g171022.NormalOS;
					Out_NormalWS15_g171022 = Data15_g171022.NormalWS;
					Out_NormalRawOS15_g171022 = Data15_g171022.NormalRawOS;
					Out_NormalRawWS15_g171022 = Data15_g171022.NormalRawWS;
					Out_TangentOS15_g171022 = Data15_g171022.TangentOS;
					Out_ViewDirWS15_g171022 = Data15_g171022.ViewDirWS;
					Out_VertexData15_g171022 = Data15_g171022.VertexData;
					Out_PhaseData15_g171022 = Data15_g171022.PhaseData;
					Out_BoundsData15_g171022 = Data15_g171022.BoundsData;
					Out_RotationData15_g171022 = Data15_g171022.RotationData;
					}
					float3 temp_output_217_24_g171021 = Out_PivotOS15_g171022;
					float3 In_PositionOS16_g171023 = ( Out_PositionOS15_g171022 + temp_output_217_24_g171021 );
					float3 In_PositionWS16_g171023 = Out_PositionWS15_g171022;
					float3 In_PositionWO16_g171023 = Out_PositionWO15_g171022;
					float3 In_PositionRawOS16_g171023 = Out_PositionRawOS15_g171022;
					float3 In_PositionAddOS16_g171023 = Out_PositionAddOS15_g171022;
					float3 In_PivotOS16_g171023 = temp_output_217_24_g171021;
					float3 In_PivotWS16_g171023 = Out_PivotWS15_g171022;
					float3 In_PivotWO16_g171023 = Out_PivotWO15_g171022;
					float3 In_NormalOS16_g171023 = Out_NormalOS15_g171022;
					float3 In_NormalWS16_g171023 = Out_NormalWS15_g171022;
					float3 In_NormalRawOS16_g171023 = Out_NormalRawOS15_g171022;
					float3 In_NormalRawWS16_g171023 = Out_NormalRawWS15_g171022;
					float4 In_TangentOS16_g171023 = Out_TangentOS15_g171022;
					float3 In_ViewDirWS16_g171023 = Out_ViewDirWS15_g171022;
					float4 In_VertexData16_g171023 = Out_VertexData15_g171022;
					float4 In_PhaseData16_g171023 = Out_PhaseData15_g171022;
					float4 In_BoundsData16_g171023 = Out_BoundsData15_g171022;
					float4 In_RotationData16_g171023 = Out_RotationData15_g171022;
					{
					Data16_g171023.Dummy = In_Dummy16_g171023;
					Data16_g171023.PositionOS = In_PositionOS16_g171023;
					Data16_g171023.PositionWS = In_PositionWS16_g171023;
					Data16_g171023.PositionWO = In_PositionWO16_g171023;
					Data16_g171023.PositionRawOS = In_PositionRawOS16_g171023;
					Data16_g171023.PositionAddOS = In_PositionAddOS16_g171023;
					Data16_g171023.PivotOS = In_PivotOS16_g171023;
					Data16_g171023.PivotWS = In_PivotWS16_g171023;
					Data16_g171023.PivotWO = In_PivotWO16_g171023;
					Data16_g171023.NormalOS = In_NormalOS16_g171023;
					Data16_g171023.NormalWS = In_NormalWS16_g171023;
					Data16_g171023.NormalRawOS = In_NormalRawOS16_g171023;
					Data16_g171023.NormalRawWS = In_NormalRawWS16_g171023;
					Data16_g171023.TangentOS = In_TangentOS16_g171023;
					Data16_g171023.ViewDirWS = In_ViewDirWS16_g171023;
					Data16_g171023.VertexData = In_VertexData16_g171023;
					Data16_g171023.PhaseData = In_PhaseData16_g171023;
					Data16_g171023.BoundsData = In_BoundsData16_g171023;
					Data16_g171023.RotationData = In_RotationData16_g171023;
					}
					TVEModelData Data15_g171037 = Data16_g171023;
					float Out_Dummy15_g171037 = 0;
					float3 Out_PositionOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171037 = float3( 0,0,0 );
					float3 Out_PositionRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_PositionAddOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotOS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171037 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171037 = float3( 0,0,0 );
					float3 Out_NormalOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawOS15_g171037 = float3( 0,0,0 );
					float3 Out_NormalRawWS15_g171037 = float3( 0,0,0 );
					float4 Out_TangentOS15_g171037 = float4( 0,0,0,0 );
					float3 Out_ViewDirWS15_g171037 = float3( 0,0,0 );
					float4 Out_VertexData15_g171037 = float4( 0,0,0,0 );
					float4 Out_PhaseData15_g171037 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171037 = float4( 0,0,0,0 );
					float4 Out_RotationData15_g171037 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171037 = Data15_g171037.Dummy;
					Out_PositionOS15_g171037 = Data15_g171037.PositionOS;
					Out_PositionWS15_g171037 = Data15_g171037.PositionWS;
					Out_PositionWO15_g171037 = Data15_g171037.PositionWO;
					Out_PositionRawOS15_g171037 = Data15_g171037.PositionRawOS;
					Out_PositionAddOS15_g171037 = Data15_g171037.PositionAddOS;
					Out_PivotOS15_g171037 = Data15_g171037.PivotOS;
					Out_PivotWS15_g171037 = Data15_g171037.PivotWS;
					Out_PivotWO15_g171037 = Data15_g171037.PivotWO;
					Out_NormalOS15_g171037 = Data15_g171037.NormalOS;
					Out_NormalWS15_g171037 = Data15_g171037.NormalWS;
					Out_NormalRawOS15_g171037 = Data15_g171037.NormalRawOS;
					Out_NormalRawWS15_g171037 = Data15_g171037.NormalRawWS;
					Out_TangentOS15_g171037 = Data15_g171037.TangentOS;
					Out_ViewDirWS15_g171037 = Data15_g171037.ViewDirWS;
					Out_VertexData15_g171037 = Data15_g171037.VertexData;
					Out_PhaseData15_g171037 = Data15_g171037.PhaseData;
					Out_BoundsData15_g171037 = Data15_g171037.BoundsData;
					Out_RotationData15_g171037 = Data15_g171037.RotationData;
					}
					float3 temp_output_6_0_g171050 = ( Out_PositionOS15_g171037 + _DisableSRPBatcher );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171050 = ( temp_output_6_0_g171050 + 0.0 );
					#else
					float3 staticSwitch14_g171050 = temp_output_6_0_g171050;
					#endif
					float3 temp_output_154_0_g171035 = staticSwitch14_g171050;
					
					o.ase_texcoord3.xyz = vertexToFrag73_g170478;
					o.ase_texcoord4.xyz = vertexToFrag76_g170478;
					o.ase_texcoord5.xyz = ase_normalWS;
					float3 ase_tangentWS = UnityObjectToWorldDir( v.tangent );
					o.ase_texcoord6.xyz = ase_tangentWS;
					float ase_tangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
					float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
					o.ase_texcoord7.xyz = ase_bitangentWS;
					float temp_output_6_0_g170750 = ( _MotionHighlightValue * Global_DistMask1820_g170727 * ( Tiny_Mask218_g170727 * Tiny_Mask218_g170727 ) * ( Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 * Global_Wave1475_g170727 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170750 = ( temp_output_6_0_g170750 + _MotionHighlightColor.r );
					#else
					float staticSwitch14_g170750 = temp_output_6_0_g170750;
					#endif
					half Wave_Mask1263 = staticSwitch14_g170750;
					float4 appendResult23_g170819 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask1263));
					float4 vertexToFrag24_g170819 = appendResult23_g170819;
					o.ase_texcoord8 = vertexToFrag24_g170819;
					o.ase_texcoord9.xyz = ase_positionWS;
					
					o.ase_texcoord1 = v.ase_texcoord;
					o.ase_texcoord2.xy = v.texcoord2.xyzw.xy;
					o.ase_color = v.ase_color;
					
					//setting value to unused interpolator channels and avoid initialization warnings
					o.ase_texcoord2.zw = 0;
					o.ase_texcoord3.w = 0;
					o.ase_texcoord4.w = 0;
					o.ase_texcoord5.w = 0;
					o.ase_texcoord6.w = 0;
					o.ase_texcoord7.w = 0;
					o.ase_texcoord9.w = 0;

					#ifdef ASE_ABSOLUTE_VERTEX_POS
						float3 defaultVertexValue = v.vertex.xyz;
					#else
						float3 defaultVertexValue = float3(0, 0, 0);
					#endif
					float3 vertexValue = temp_output_154_0_g171035;
					#ifdef ASE_ABSOLUTE_VERTEX_POS
						v.vertex.xyz = vertexValue;
					#else
						v.vertex.xyz += vertexValue;
					#endif
					v.vertex.w = 1;
					v.normal = Out_NormalOS15_g171037;
					v.tangent = Out_TangentOS15_g171037;

					TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
					return o;
				}

				#if defined(ASE_TESSELLATION)
				struct VertexControl
				{
					float4 vertex : INTERNALTESSPOS;
					float4 tangent : TANGENT;
					float3 normal : NORMAL;
					float4 texcoord1 : TEXCOORD1;
					float4 texcoord2 : TEXCOORD2;
					float4 ase_texcoord3 : TEXCOORD3;
					float4 ase_color : COLOR;
					float4 ase_texcoord : TEXCOORD0;

					UNITY_VERTEX_INPUT_INSTANCE_ID
				};

				struct TessellationFactors
				{
					float edge[3] : SV_TessFactor;
					float inside : SV_InsideTessFactor;
				};

				VertexControl vert ( appdata v )
				{
					VertexControl o;
					UNITY_SETUP_INSTANCE_ID(v);
					UNITY_TRANSFER_INSTANCE_ID(v, o);
					o.vertex = v.vertex;
					o.tangent = v.tangent;
					o.normal = v.normal;
					o.texcoord1 = v.texcoord1;
					o.texcoord2 = v.texcoord2;
					o.ase_texcoord3 = v.ase_texcoord3;
					o.ase_color = v.ase_color;
					o.ase_texcoord = v.ase_texcoord;
					return o;
				}

				TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
				{
					TessellationFactors o;
					float4 tf = 1;
					float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
					float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
					#if defined(ASE_FIXED_TESSELLATION)
					tf = FixedTess( tessValue );
					#elif defined(ASE_DISTANCE_TESSELLATION)
					tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
					#elif defined(ASE_LENGTH_TESSELLATION)
					tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
					#elif defined(ASE_LENGTH_CULL_TESSELLATION)
					tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
					#endif
					o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
					return o;
				}

				[domain("tri")]
				[partitioning("fractional_odd")]
				[outputtopology("triangle_cw")]
				[patchconstantfunc("TessellationFunction")]
				[outputcontrolpoints(3)]
				VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
				{
				   return patch[id];
				}

				[domain("tri")]
				v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
				{
					appdata o = (appdata) 0;
					o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
					o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
					o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
					o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
					o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
					o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
					o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
					o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
					#if defined(ASE_PHONG_TESSELLATION)
					float3 pp[3];
					for (int i = 0; i < 3; ++i)
						pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
					float phongStrength = _TessPhongStrength;
					o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
					#endif
					UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
					return VertexFunction(o);
				}
				#else
				v2f vert( appdata v )
				{
					return VertexFunction( v );
				}
				#endif

				half4 frag( v2f IN 
					#if defined( ASE_DEPTH_WRITE_ON )
					, out float outputDepth : SV_Depth
					#endif
					#if !defined( CAN_SKIP_VPOS )
					, UNITY_VPOS_TYPE vpos : VPOS
					#endif
					) : SV_Target
				{
					UNITY_SETUP_INSTANCE_ID(IN);

					#ifdef LOD_FADE_CROSSFADE
						UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
					#endif

					#if defined(ASE_LIGHTING_SIMPLE)
						SurfaceOutput o = (SurfaceOutput)0;
					#else
						#if defined(_SPECULAR_SETUP)
							SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
						#else
							SurfaceOutputStandard o = (SurfaceOutputStandard)0;
						#endif
					#endif

					float localCustomAlphaClip20_g171045 = ( 0.0 );
					float localBreakData4_g171040 = ( 0.0 );
					float localCompData3_g171015 = ( 0.0 );
					TVEVisualData Data3_g171015 = (TVEVisualData)0;
					half Dummy145_g171013 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) );
					float In_Dummy3_g171015 = Dummy145_g171013;
					float localBreakData4_g171014 = ( 0.0 );
					float localCompData3_g170995 = ( 0.0 );
					TVEVisualData Data3_g170995 = (TVEVisualData)0;
					half Dummy145_g170980 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
					float In_Dummy3_g170995 = Dummy145_g170980;
					float localBreakData4_g170984 = ( 0.0 );
					float localCompData3_g170958 = ( 0.0 );
					TVEVisualData Data3_g170958 = (TVEVisualData)0;
					half Dummy594_g170955 = ( _DitherCategory + _DitherEnd );
					float In_Dummy3_g170958 = Dummy594_g170955;
					float localBreakData4_g170957 = ( 0.0 );
					float localCompData3_g170939 = ( 0.0 );
					TVEVisualData Data3_g170939 = (TVEVisualData)0;
					half Dummy594_g170938 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeMode );
					float In_Dummy3_g170939 = Dummy594_g170938;
					float localBreakData4_g170941 = ( 0.0 );
					float localCompData3_g170911 = ( 0.0 );
					TVEVisualData Data3_g170911 = (TVEVisualData)0;
					half Dummy594_g170909 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeMode );
					float In_Dummy3_g170911 = Dummy594_g170909;
					float localBreakData4_g170910 = ( 0.0 );
					float localCompData3_g170875 = ( 0.0 );
					TVEVisualData Data3_g170875 = (TVEVisualData)0;
					half Dummy594_g170872 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeMode );
					float In_Dummy3_g170875 = Dummy594_g170872;
					float localBreakData4_g170873 = ( 0.0 );
					float localCompData3_g170871 = ( 0.0 );
					TVEVisualData Data3_g170871 = (TVEVisualData)0;
					float In_Dummy3_g170871 = 0.0;
					float localBreakData4_g170870 = ( 0.0 );
					float localCompData3_g170848 = ( 0.0 );
					TVEVisualData Data3_g170848 = (TVEVisualData)0;
					half Dummy205_g170845 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeMode );
					float In_Dummy3_g170848 = Dummy205_g170845;
					float localBreakData4_g170847 = ( 0.0 );
					float localCompData3_g170840 = ( 0.0 );
					TVEVisualData Data3_g170840 = (TVEVisualData)0;
					half Dummy205_g170820 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode );
					float In_Dummy3_g170840 = Dummy205_g170820;
					float localBreakData4_g170824 = ( 0.0 );
					float localCompData3_g170810 = ( 0.0 );
					TVEVisualData Data3_g170810 = (TVEVisualData)0;
					half Dummy220_g170808 = ( _VariationCategory + _VariationEnd );
					float In_Dummy3_g170810 = Dummy220_g170808;
					float localBreakData4_g170809 = ( 0.0 );
					float localCompData3_g170801 = ( 0.0 );
					TVEVisualData Data3_g170801 = (TVEVisualData)0;
					half Dummy220_g170798 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
					float In_Dummy3_g170801 = Dummy220_g170798;
					float localBreakData4_g170800 = ( 0.0 );
					float localCompData3_g170790 = ( 0.0 );
					TVEVisualData Data3_g170790 = (TVEVisualData)0;
					half Dummy202_g170788 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
					float In_Dummy3_g170790 = Dummy202_g170788;
					float localBreakData4_g170789 = ( 0.0 );
					float localCompData3_g170695 = ( 0.0 );
					TVEVisualData Data3_g170695 = (TVEVisualData)0;
					half4 Dummy944_g170687 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdBakeMode );
					float In_Dummy3_g170695 = Dummy944_g170687.x;
					float localBreakData4_g170694 = ( 0.0 );
					float localCompData3_g170656 = ( 0.0 );
					TVEVisualData Data3_g170656 = (TVEVisualData)0;
					half4 Dummy946_g170638 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondBakeMode );
					float In_Dummy3_g170656 = Dummy946_g170638.x;
					float localBreakData4_g170646 = ( 0.0 );
					float localCompData3_g170628 = ( 0.0 );
					TVEVisualData Data3_g170628 = (TVEVisualData)0;
					half4 Dummy130_g170617 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) + _MainMultiMaskInfo );
					float In_Dummy3_g170628 = Dummy130_g170617.x;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170621) = _MainAlbedoTex;
					float localFilterTexture19_g170624 = ( 0.0 );
					SamplerState SS19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170624 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170624 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170624 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170624 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170624 = SamplerDefault19_g170624;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170624 = SamplerDefault19_g170624;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170624 = SamplerPoint19_g170624;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170624 = SamplerLow19_g170624;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170624 = SamplerMedium19_g170624;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170624 = SamplerHigh19_g170624;
					#endif
					}
					SamplerState Sampler276_g170621 = SS19_g170624;
					half4 Local_Coords180_g170617 = _main_coord_value;
					float4 temp_output_37_0_g170621 = Local_Coords180_g170617;
					half4 Coords276_g170621 = temp_output_37_0_g170621;
					half2 TexCoord276_g170621 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170621 = SampleMain( Texture276_g170621 , Sampler276_g170621 , Coords276_g170621 , TexCoord276_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170621) = _MainAlbedoTex;
					SamplerState Sampler275_g170621 = SS19_g170624;
					half4 Coords275_g170621 = temp_output_37_0_g170621;
					half2 TexCoord275_g170621 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170621 = SampleExtra( Texture275_g170621 , Sampler275_g170621 , Coords275_g170621 , TexCoord275_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170621) = _MainAlbedoTex;
					SamplerState Sampler238_g170621 = SS19_g170624;
					half4 Coords238_g170621 = temp_output_37_0_g170621;
					TVEModelData Data16_g170483 = (TVEModelData)0;
					float In_Dummy16_g170483 = 0.0;
					float3 vertexToFrag73_g170478 = IN.ase_texcoord3.xyz;
					half3 PositionWS122_g170478 = vertexToFrag73_g170478;
					float3 In_PositionWS16_g170483 = PositionWS122_g170478;
					float3 vertexToFrag76_g170478 = IN.ase_texcoord4.xyz;
					half3 PivotWS121_g170478 = vertexToFrag76_g170478;
					#ifdef TVE_SCOPE_DYNAMIC
					float3 staticSwitch204_g170478 = ( PositionWS122_g170478 - PivotWS121_g170478 );
					#else
					float3 staticSwitch204_g170478 = PositionWS122_g170478;
					#endif
					half3 PositionWO132_g170478 = ( staticSwitch204_g170478 - TVE_WorldOrigin );
					float3 In_PositionWO16_g170483 = PositionWO132_g170478;
					float3 In_PivotWS16_g170483 = PivotWS121_g170478;
					half3 PivotWO133_g170478 = ( PivotWS121_g170478 - TVE_WorldOrigin );
					float3 In_PivotWO16_g170483 = PivotWO133_g170478;
					float3 ase_normalWS = IN.ase_texcoord5.xyz;
					float3 normalizedWorldNormal = normalize( ase_normalWS );
					half3 Normal_WS95_g170478 = normalizedWorldNormal;
					float3 In_NormalWS16_g170483 = Normal_WS95_g170478;
					float3 normalizeResult296_g170478 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170478 ) );
					half3 ViewDirWS169_g170478 = normalizeResult296_g170478;
					float3 In_ViewDirWS16_g170483 = ViewDirWS169_g170478;
					half4 VertexMasks171_g170478 = IN.ase_color;
					float4 In_VertexData16_g170483 = VertexMasks171_g170478;
					float4 In_BoundsData16_g170483 = float4( 1,1,1,1 );
					{
					Data16_g170483.Dummy = In_Dummy16_g170483;
					Data16_g170483.PositionWS = In_PositionWS16_g170483;
					Data16_g170483.PositionWO = In_PositionWO16_g170483;
					Data16_g170483.PivotWS = In_PivotWS16_g170483;
					Data16_g170483.PivotWO = In_PivotWO16_g170483;
					Data16_g170483.NormalWS = In_NormalWS16_g170483;
					Data16_g170483.ViewDirWS = In_ViewDirWS16_g170483;
					Data16_g170483.VertexData = In_VertexData16_g170483;
					Data16_g170483.BoundsData = In_BoundsData16_g170483;
					}
					TVEModelData Data15_g170627 = Data16_g170483;
					float Out_Dummy15_g170627 = 0;
					float3 Out_PositionWS15_g170627 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170627 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170627 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170627 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170627 = float3( 0,0,0 );
					float4 Out_VertexData15_g170627 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170627 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170627 = Data15_g170627.Dummy;
					Out_PositionWS15_g170627 = Data15_g170627.PositionWS;
					Out_PositionWO15_g170627 = Data15_g170627.PositionWO;
					Out_PivotWS15_g170627 = Data15_g170627.PivotWS;
					Out_PivotWO15_g170627 = Data15_g170627.PivotWO;
					Out_NormalWS15_g170627 = Data15_g170627.NormalWS;
					Out_ViewDirWS15_g170627 = Data15_g170627.ViewDirWS;
					Out_VertexData15_g170627 = Data15_g170627.VertexData;
					Out_BoundsData15_g170627 = Data15_g170627.BoundsData;
					}
					half3 Model_PositionWO222_g170617 = Out_PositionWO15_g170627;
					float3 temp_output_279_0_g170621 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170621 = temp_output_279_0_g170621;
					half4 localSamplePlanar2D238_g170621 = SamplePlanar2D( Texture238_g170621 , Sampler238_g170621 , Coords238_g170621 , WorldPosition238_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170621) = _MainAlbedoTex;
					SamplerState Sampler246_g170621 = SS19_g170624;
					half4 Coords246_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition246_g170621 = temp_output_279_0_g170621;
					half3 Model_NormalWS226_g170617 = Out_NormalWS15_g170627;
					float3 temp_output_280_0_g170621 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170621 = temp_output_280_0_g170621;
					half4 localSamplePlanar3D246_g170621 = SamplePlanar3D( Texture246_g170621 , Sampler246_g170621 , Coords246_g170621 , WorldPosition246_g170621 , WorldNormal246_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170621) = _MainAlbedoTex;
					SamplerState Sampler234_g170621 = SS19_g170624;
					float4 Coords234_g170621 = temp_output_37_0_g170621;
					float3 WorldPosition234_g170621 = temp_output_279_0_g170621;
					float4 localSampleStochastic2D234_g170621 = SampleStochastic2D( Texture234_g170621 , Sampler234_g170621 , Coords234_g170621 , WorldPosition234_g170621 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170621) = _MainAlbedoTex;
					SamplerState Sampler263_g170621 = SS19_g170624;
					half4 Coords263_g170621 = temp_output_37_0_g170621;
					half3 WorldPosition263_g170621 = temp_output_279_0_g170621;
					half3 WorldNormal263_g170621 = temp_output_280_0_g170621;
					half4 localSampleStochastic3D263_g170621 = SampleStochastic3D( Texture263_g170621 , Sampler263_g170621 , Coords263_g170621 , WorldPosition263_g170621 , WorldNormal263_g170621 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch184_g170617 = localSampleExtra275_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch184_g170617 = localSamplePlanar2D238_g170621;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch184_g170617 = localSamplePlanar3D246_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch184_g170617 = localSampleStochastic2D234_g170621;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch184_g170617 = localSampleStochastic3D263_g170621;
					#else
					float4 staticSwitch184_g170617 = localSampleMain276_g170621;
					#endif
					half4 Local_AlbedoTex185_g170617 = staticSwitch184_g170617;
					float3 lerpResult53_g170617 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170617).xyz , _MainAlbedoValue);
					half3 Local_AlbedoRGB107_g170617 = lerpResult53_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170623) = _MainShaderTex;
					float localFilterTexture30_g170626 = ( 0.0 );
					SamplerState SS30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170626 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170626 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170626 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170626 = SamplerDefault30_g170626;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170626 = SamplerDefault30_g170626;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170626 = SamplerPoint30_g170626;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170626 = SamplerLow30_g170626;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170626 = SamplerMedium30_g170626;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170626 = SamplerHigh30_g170626;
					#endif
					}
					SamplerState Sampler276_g170623 = SS30_g170626;
					float4 temp_output_37_0_g170623 = Local_Coords180_g170617;
					half4 Coords276_g170623 = temp_output_37_0_g170623;
					half2 TexCoord276_g170623 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170623 = SampleMain( Texture276_g170623 , Sampler276_g170623 , Coords276_g170623 , TexCoord276_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170623) = _MainShaderTex;
					SamplerState Sampler275_g170623 = SS30_g170626;
					half4 Coords275_g170623 = temp_output_37_0_g170623;
					half2 TexCoord275_g170623 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170623 = SampleExtra( Texture275_g170623 , Sampler275_g170623 , Coords275_g170623 , TexCoord275_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170623) = _MainShaderTex;
					SamplerState Sampler238_g170623 = SS30_g170626;
					half4 Coords238_g170623 = temp_output_37_0_g170623;
					float3 temp_output_279_0_g170623 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170623 = temp_output_279_0_g170623;
					half4 localSamplePlanar2D238_g170623 = SamplePlanar2D( Texture238_g170623 , Sampler238_g170623 , Coords238_g170623 , WorldPosition238_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170623) = _MainShaderTex;
					SamplerState Sampler246_g170623 = SS30_g170626;
					half4 Coords246_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition246_g170623 = temp_output_279_0_g170623;
					float3 temp_output_280_0_g170623 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170623 = temp_output_280_0_g170623;
					half4 localSamplePlanar3D246_g170623 = SamplePlanar3D( Texture246_g170623 , Sampler246_g170623 , Coords246_g170623 , WorldPosition246_g170623 , WorldNormal246_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170623) = _MainShaderTex;
					SamplerState Sampler234_g170623 = SS30_g170626;
					float4 Coords234_g170623 = temp_output_37_0_g170623;
					float3 WorldPosition234_g170623 = temp_output_279_0_g170623;
					float4 localSampleStochastic2D234_g170623 = SampleStochastic2D( Texture234_g170623 , Sampler234_g170623 , Coords234_g170623 , WorldPosition234_g170623 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170623) = _MainShaderTex;
					SamplerState Sampler263_g170623 = SS30_g170626;
					half4 Coords263_g170623 = temp_output_37_0_g170623;
					half3 WorldPosition263_g170623 = temp_output_279_0_g170623;
					half3 WorldNormal263_g170623 = temp_output_280_0_g170623;
					half4 localSampleStochastic3D263_g170623 = SampleStochastic3D( Texture263_g170623 , Sampler263_g170623 , Coords263_g170623 , WorldPosition263_g170623 , WorldNormal263_g170623 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch198_g170617 = localSampleExtra275_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch198_g170617 = localSamplePlanar2D238_g170623;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch198_g170617 = localSamplePlanar3D246_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch198_g170617 = localSampleStochastic2D234_g170623;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch198_g170617 = localSampleStochastic3D263_g170623;
					#else
					float4 staticSwitch198_g170617 = localSampleMain276_g170623;
					#endif
					half4 Local_ShaderTex199_g170617 = staticSwitch198_g170617;
					float clampResult17_g170635 = clamp( (Local_ShaderTex199_g170617).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170634 = _MainOcclusionRemap.x;
					float temp_output_9_0_g170634 = ( clampResult17_g170635 - temp_output_7_0_g170634 );
					float lerpResult23_g170617 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170634 * _MainOcclusionRemap.z ) + 0.0001 ) ) , _MainOcclusionValue);
					half Local_Occlusion313_g170617 = lerpResult23_g170617;
					float clampResult17_g170637 = clamp( (Local_ShaderTex199_g170617).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170636 = _MainSmoothnessRemap.x;
					float temp_output_9_0_g170636 = ( clampResult17_g170637 - temp_output_7_0_g170636 );
					half Local_Smoothness317_g170617 = ( saturate( ( ( temp_output_9_0_g170636 * _MainSmoothnessRemap.z ) + 0.0001 ) ) * _MainSmoothnessValue );
					float4 appendResult73_g170617 = (float4(( (Local_ShaderTex199_g170617).x * _MainMetallicValue ) , Local_Occlusion313_g170617 , (Local_ShaderTex199_g170617).z , Local_Smoothness317_g170617));
					half4 Local_Masks109_g170617 = appendResult73_g170617;
					float clampResult17_g170632 = clamp( (Local_Masks109_g170617).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170633 = _MainMultiRemap.x;
					float temp_output_9_0_g170633 = ( clampResult17_g170632 - temp_output_7_0_g170633 );
					half Local_MultiMask78_g170617 = saturate( ( ( temp_output_9_0_g170633 * _MainMultiRemap.z ) + 0.0001 ) );
					float lerpResult58_g170617 = lerp( 1.0 , Local_MultiMask78_g170617 , _MainColorMode);
					float4 lerpResult62_g170617 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170617);
					half3 Local_ColorRGB93_g170617 = (lerpResult62_g170617).rgb;
					half3 Local_Albedo139_g170617 = ( Local_AlbedoRGB107_g170617 * Local_ColorRGB93_g170617 );
					float3 In_Albedo3_g170628 = Local_Albedo139_g170617;
					float3 In_AlbedoRaw3_g170628 = Local_Albedo139_g170617;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170622) = _MainNormalTex;
					float localFilterTexture29_g170625 = ( 0.0 );
					SamplerState SS29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170625 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170625 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170625 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170625 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170625 = SamplerDefault29_g170625;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170625 = SamplerDefault29_g170625;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170625 = SamplerPoint29_g170625;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170625 = SamplerLow29_g170625;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170625 = SamplerMedium29_g170625;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170625 = SamplerHigh29_g170625;
					#endif
					}
					SamplerState Sampler276_g170622 = SS29_g170625;
					float4 temp_output_37_0_g170622 = Local_Coords180_g170617;
					half4 Coords276_g170622 = temp_output_37_0_g170622;
					half2 TexCoord276_g170622 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170622 = SampleMain( Texture276_g170622 , Sampler276_g170622 , Coords276_g170622 , TexCoord276_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170622) = _MainNormalTex;
					SamplerState Sampler275_g170622 = SS29_g170625;
					half4 Coords275_g170622 = temp_output_37_0_g170622;
					half2 TexCoord275_g170622 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170622 = SampleExtra( Texture275_g170622 , Sampler275_g170622 , Coords275_g170622 , TexCoord275_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170622) = _MainNormalTex;
					SamplerState Sampler238_g170622 = SS29_g170625;
					half4 Coords238_g170622 = temp_output_37_0_g170622;
					float3 temp_output_279_0_g170622 = Model_PositionWO222_g170617;
					half3 WorldPosition238_g170622 = temp_output_279_0_g170622;
					half4 localSamplePlanar2D238_g170622 = SamplePlanar2D( Texture238_g170622 , Sampler238_g170622 , Coords238_g170622 , WorldPosition238_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170622) = _MainNormalTex;
					SamplerState Sampler246_g170622 = SS29_g170625;
					half4 Coords246_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition246_g170622 = temp_output_279_0_g170622;
					float3 temp_output_280_0_g170622 = Model_NormalWS226_g170617;
					half3 WorldNormal246_g170622 = temp_output_280_0_g170622;
					half4 localSamplePlanar3D246_g170622 = SamplePlanar3D( Texture246_g170622 , Sampler246_g170622 , Coords246_g170622 , WorldPosition246_g170622 , WorldNormal246_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170622) = _MainNormalTex;
					SamplerState Sampler234_g170622 = SS29_g170625;
					float4 Coords234_g170622 = temp_output_37_0_g170622;
					float3 WorldPosition234_g170622 = temp_output_279_0_g170622;
					float4 localSampleStochastic2D234_g170622 = SampleStochastic2D( Texture234_g170622 , Sampler234_g170622 , Coords234_g170622 , WorldPosition234_g170622 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170622) = _MainNormalTex;
					SamplerState Sampler263_g170622 = SS29_g170625;
					half4 Coords263_g170622 = temp_output_37_0_g170622;
					half3 WorldPosition263_g170622 = temp_output_279_0_g170622;
					half3 WorldNormal263_g170622 = temp_output_280_0_g170622;
					half4 localSampleStochastic3D263_g170622 = SampleStochastic3D( Texture263_g170622 , Sampler263_g170622 , Coords263_g170622 , WorldPosition263_g170622 , WorldNormal263_g170622 );
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float4 staticSwitch193_g170617 = localSampleExtra275_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float4 staticSwitch193_g170617 = localSamplePlanar2D238_g170622;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float4 staticSwitch193_g170617 = localSamplePlanar3D246_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch193_g170617 = localSampleStochastic2D234_g170622;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch193_g170617 = localSampleStochastic3D263_g170622;
					#else
					float4 staticSwitch193_g170617 = localSampleMain276_g170622;
					#endif
					half4 Local_NormaTex191_g170617 = staticSwitch193_g170617;
					half4 Normal_Packed45_g170618 = Local_NormaTex191_g170617;
					float2 appendResult58_g170618 = (float2(( (Normal_Packed45_g170618).x * (Normal_Packed45_g170618).w ) , (Normal_Packed45_g170618).y));
					half2 Normal_Default50_g170618 = appendResult58_g170618;
					half2 Normal_ASTC41_g170618 = (Normal_Packed45_g170618).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170618 = Normal_ASTC41_g170618;
					#else
					float2 staticSwitch38_g170618 = Normal_Default50_g170618;
					#endif
					half2 Normal_NO_DTX544_g170618 = (Normal_Packed45_g170618).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170618 = Normal_NO_DTX544_g170618;
					#else
					float2 staticSwitch37_g170618 = staticSwitch38_g170618;
					#endif
					float2 temp_output_26_0_g170617 = ( (staticSwitch37_g170618*2.0 + -1.0) * _MainNormalValue );
					float3 ase_tangentWS = IN.ase_texcoord6.xyz;
					float3 ase_bitangentWS = IN.ase_texcoord7.xyz;
					float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
					half2 Normal_Planar45_g170619 = temp_output_26_0_g170617;
					float2 break71_g170619 = Normal_Planar45_g170619;
					float3 appendResult72_g170619 = (float3(break71_g170619.x , 0.0 , break71_g170619.y));
					float2 temp_output_205_0_g170617 = (mul( ase_worldToTangent, appendResult72_g170619 )).xy;
					#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch204_g170617 = temp_output_205_0_g170617;
					#else
					float2 staticSwitch204_g170617 = temp_output_26_0_g170617;
					#endif
					half2 Local_NormalTS108_g170617 = staticSwitch204_g170617;
					float2 In_NormalTS3_g170628 = Local_NormalTS108_g170617;
					float3 appendResult68_g170620 = (float3(Local_NormalTS108_g170617 , 1.0));
					float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
					float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
					float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
					float3 tanNormal74_g170620 = appendResult68_g170620;
					float3 worldNormal74_g170620 = normalize( float3( dot( tanToWorld0, tanNormal74_g170620 ), dot( tanToWorld1, tanNormal74_g170620 ), dot( tanToWorld2, tanNormal74_g170620 ) ) );
					half3 Local_NormalWS250_g170617 = worldNormal74_g170620;
					float3 In_NormalWS3_g170628 = Local_NormalWS250_g170617;
					float4 In_Shader3_g170628 = Local_Masks109_g170617;
					float4 In_Emissive3_g170628 = half4( 1, 1, 1, 1 );
					float3 temp_output_3_0_g170629 = Local_Albedo139_g170617;
					float dotResult20_g170629 = dot( temp_output_3_0_g170629 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Local_Grayscale110_g170617 = dotResult20_g170629;
					float In_Grayscale3_g170628 = Local_Grayscale110_g170617;
					float clampResult144_g170617 = clamp( saturate( ( Local_Grayscale110_g170617 * 5.0 ) ) , 0.2 , 1.0 );
					half Local_Luminosity145_g170617 = clampResult144_g170617;
					float In_Luminosity3_g170628 = Local_Luminosity145_g170617;
					float In_MultiMask3_g170628 = Local_MultiMask78_g170617;
					float temp_output_187_0_g170617 = (Local_AlbedoTex185_g170617).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch236_g170617 = ( temp_output_187_0_g170617 - _MainAlphaClipValue );
					#else
					float staticSwitch236_g170617 = temp_output_187_0_g170617;
					#endif
					half Local_AlphaClip111_g170617 = staticSwitch236_g170617;
					float In_AlphaClip3_g170628 = Local_AlphaClip111_g170617;
					half Local_AlphaFade246_g170617 = (lerpResult62_g170617).a;
					float In_AlphaFade3_g170628 = Local_AlphaFade246_g170617;
					float3 temp_cast_4 = (1.0).xxx;
					float3 In_Translucency3_g170628 = temp_cast_4;
					float In_Transmission3_g170628 = 1.0;
					float In_Thickness3_g170628 = 0.0;
					float In_Diffusion3_g170628 = 0.0;
					float In_Depth3_g170628 = 0.0;
					{
					Data3_g170628.Dummy = In_Dummy3_g170628;
					Data3_g170628.Albedo = In_Albedo3_g170628;
					Data3_g170628.AlbedoRaw = In_AlbedoRaw3_g170628;
					Data3_g170628.NormalTS = In_NormalTS3_g170628;
					Data3_g170628.NormalWS = In_NormalWS3_g170628;
					Data3_g170628.Shader = In_Shader3_g170628;
					Data3_g170628.Emissive= In_Emissive3_g170628;
					Data3_g170628.MultiMask = In_MultiMask3_g170628;
					Data3_g170628.Grayscale = In_Grayscale3_g170628;
					Data3_g170628.Luminosity = In_Luminosity3_g170628;
					Data3_g170628.AlphaClip = In_AlphaClip3_g170628;
					Data3_g170628.AlphaFade = In_AlphaFade3_g170628;
					Data3_g170628.Translucency = In_Translucency3_g170628;
					Data3_g170628.Transmission = In_Transmission3_g170628;
					Data3_g170628.Thickness = In_Thickness3_g170628;
					Data3_g170628.Diffusion = In_Diffusion3_g170628;
					Data3_g170628.Depth = In_Depth3_g170628;
					}
					TVEVisualData Data4_g170646 = Data3_g170628;
					float Out_Dummy4_g170646 = 0;
					float3 Out_Albedo4_g170646 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170646 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170646 = float2( 0,0 );
					float3 Out_NormalWS4_g170646 = float3( 0,0,0 );
					float4 Out_Shader4_g170646 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170646 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170646 = 0;
					float Out_Grayscale4_g170646 = 0;
					float Out_Luminosity4_g170646 = 0;
					float Out_AlphaClip4_g170646 = 0;
					float Out_AlphaFade4_g170646 = 0;
					float3 Out_Translucency4_g170646 = float3( 0,0,0 );
					float Out_Transmission4_g170646 = 0;
					float Out_Thickness4_g170646 = 0;
					float Out_Diffusion4_g170646 = 0;
					float Out_Depth4_g170646 = 0;
					{
					Out_Dummy4_g170646 = Data4_g170646.Dummy;
					Out_Albedo4_g170646 = Data4_g170646.Albedo;
					Out_AlbedoRaw4_g170646 = Data4_g170646.AlbedoRaw;
					Out_NormalTS4_g170646 = Data4_g170646.NormalTS;
					Out_NormalWS4_g170646 = Data4_g170646.NormalWS;
					Out_Shader4_g170646 = Data4_g170646.Shader;
					Out_Emissive4_g170646= Data4_g170646.Emissive;
					Out_MultiMask4_g170646 = Data4_g170646.MultiMask;
					Out_Grayscale4_g170646 = Data4_g170646.Grayscale;
					Out_Luminosity4_g170646= Data4_g170646.Luminosity;
					Out_AlphaClip4_g170646 = Data4_g170646.AlphaClip;
					Out_AlphaFade4_g170646 = Data4_g170646.AlphaFade;
					Out_Translucency4_g170646 = Data4_g170646.Translucency;
					Out_Transmission4_g170646 = Data4_g170646.Transmission;
					Out_Thickness4_g170646 = Data4_g170646.Thickness;
					Out_Diffusion4_g170646 = Data4_g170646.Diffusion;
					Out_Depth4_g170646= Data4_g170646.Depth;
					}
					half3 Visual_Albedo527_g170638 = Out_Albedo4_g170646;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170639) = _SecondAlbedoTex;
					float localFilterTexture19_g170652 = ( 0.0 );
					SamplerState SS19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170652 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170652 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170652 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170652 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170652 = SamplerDefault19_g170652;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170652 = SamplerDefault19_g170652;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170652 = SamplerPoint19_g170652;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170652 = SamplerLow19_g170652;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170652 = SamplerMedium19_g170652;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170652 = SamplerHigh19_g170652;
					#endif
					}
					SamplerState Sampler276_g170639 = SS19_g170652;
					half4 Local_LayerCoords790_g170638 = _second_coord_value;
					float4 temp_output_37_0_g170639 = Local_LayerCoords790_g170638;
					half4 Coords276_g170639 = temp_output_37_0_g170639;
					half2 TexCoord276_g170639 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170639 = SampleMain( Texture276_g170639 , Sampler276_g170639 , Coords276_g170639 , TexCoord276_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170639) = _SecondAlbedoTex;
					SamplerState Sampler275_g170639 = SS19_g170652;
					half4 Coords275_g170639 = temp_output_37_0_g170639;
					half2 TexCoord275_g170639 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170639 = SampleExtra( Texture275_g170639 , Sampler275_g170639 , Coords275_g170639 , TexCoord275_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170639) = _SecondAlbedoTex;
					SamplerState Sampler238_g170639 = SS19_g170652;
					half4 Coords238_g170639 = temp_output_37_0_g170639;
					TVEModelData Data15_g170655 = Data16_g170483;
					float Out_Dummy15_g170655 = 0;
					float3 Out_PositionWS15_g170655 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170655 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170655 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170655 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170655 = float3( 0,0,0 );
					float4 Out_VertexData15_g170655 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170655 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170655 = Data15_g170655.Dummy;
					Out_PositionWS15_g170655 = Data15_g170655.PositionWS;
					Out_PositionWO15_g170655 = Data15_g170655.PositionWO;
					Out_PivotWS15_g170655 = Data15_g170655.PivotWS;
					Out_PivotWO15_g170655 = Data15_g170655.PivotWO;
					Out_NormalWS15_g170655 = Data15_g170655.NormalWS;
					Out_ViewDirWS15_g170655 = Data15_g170655.ViewDirWS;
					Out_VertexData15_g170655 = Data15_g170655.VertexData;
					Out_BoundsData15_g170655 = Data15_g170655.BoundsData;
					}
					half3 Model_PositionWO636_g170638 = Out_PositionWO15_g170655;
					float3 temp_output_279_0_g170639 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170639 = temp_output_279_0_g170639;
					half4 localSamplePlanar2D238_g170639 = SamplePlanar2D( Texture238_g170639 , Sampler238_g170639 , Coords238_g170639 , WorldPosition238_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170639) = _SecondAlbedoTex;
					SamplerState Sampler246_g170639 = SS19_g170652;
					half4 Coords246_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition246_g170639 = temp_output_279_0_g170639;
					half3 Model_NormalWS869_g170638 = Out_NormalWS15_g170655;
					float3 temp_output_280_0_g170639 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170639 = temp_output_280_0_g170639;
					half4 localSamplePlanar3D246_g170639 = SamplePlanar3D( Texture246_g170639 , Sampler246_g170639 , Coords246_g170639 , WorldPosition246_g170639 , WorldNormal246_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170639) = _SecondAlbedoTex;
					SamplerState Sampler234_g170639 = SS19_g170652;
					float4 Coords234_g170639 = temp_output_37_0_g170639;
					float3 WorldPosition234_g170639 = temp_output_279_0_g170639;
					float4 localSampleStochastic2D234_g170639 = SampleStochastic2D( Texture234_g170639 , Sampler234_g170639 , Coords234_g170639 , WorldPosition234_g170639 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170639) = _SecondAlbedoTex;
					SamplerState Sampler263_g170639 = SS19_g170652;
					half4 Coords263_g170639 = temp_output_37_0_g170639;
					half3 WorldPosition263_g170639 = temp_output_279_0_g170639;
					half3 WorldNormal263_g170639 = temp_output_280_0_g170639;
					half4 localSampleStochastic3D263_g170639 = SampleStochastic3D( Texture263_g170639 , Sampler263_g170639 , Coords263_g170639 , WorldPosition263_g170639 , WorldNormal263_g170639 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170638 = localSampleExtra275_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170638 = localSamplePlanar2D238_g170639;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170638 = localSamplePlanar3D246_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170638 = localSampleStochastic2D234_g170639;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170638 = localSampleStochastic3D263_g170639;
					#else
					float4 staticSwitch693_g170638 = localSampleMain276_g170639;
					#endif
					half4 Local_AlbedoTex777_g170638 = staticSwitch693_g170638;
					float3 lerpResult716_g170638 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170638).xyz , _SecondAlbedoValue);
					half3 Local_AlbedoRGB771_g170638 = lerpResult716_g170638;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170641) = _SecondShaderTex;
					float localFilterTexture30_g170654 = ( 0.0 );
					SamplerState SS30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170654 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170654 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170654 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170654 = SamplerDefault30_g170654;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170654 = SamplerDefault30_g170654;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170654 = SamplerPoint30_g170654;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170654 = SamplerLow30_g170654;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170654 = SamplerMedium30_g170654;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170654 = SamplerHigh30_g170654;
					#endif
					}
					SamplerState Sampler276_g170641 = SS30_g170654;
					float4 temp_output_37_0_g170641 = Local_LayerCoords790_g170638;
					half4 Coords276_g170641 = temp_output_37_0_g170641;
					half2 TexCoord276_g170641 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170641 = SampleMain( Texture276_g170641 , Sampler276_g170641 , Coords276_g170641 , TexCoord276_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170641) = _SecondShaderTex;
					SamplerState Sampler275_g170641 = SS30_g170654;
					half4 Coords275_g170641 = temp_output_37_0_g170641;
					half2 TexCoord275_g170641 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170641 = SampleExtra( Texture275_g170641 , Sampler275_g170641 , Coords275_g170641 , TexCoord275_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170641) = _SecondShaderTex;
					SamplerState Sampler238_g170641 = SS30_g170654;
					half4 Coords238_g170641 = temp_output_37_0_g170641;
					float3 temp_output_279_0_g170641 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170641 = temp_output_279_0_g170641;
					half4 localSamplePlanar2D238_g170641 = SamplePlanar2D( Texture238_g170641 , Sampler238_g170641 , Coords238_g170641 , WorldPosition238_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170641) = _SecondShaderTex;
					SamplerState Sampler246_g170641 = SS30_g170654;
					half4 Coords246_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition246_g170641 = temp_output_279_0_g170641;
					float3 temp_output_280_0_g170641 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170641 = temp_output_280_0_g170641;
					half4 localSamplePlanar3D246_g170641 = SamplePlanar3D( Texture246_g170641 , Sampler246_g170641 , Coords246_g170641 , WorldPosition246_g170641 , WorldNormal246_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170641) = _SecondShaderTex;
					SamplerState Sampler234_g170641 = SS30_g170654;
					float4 Coords234_g170641 = temp_output_37_0_g170641;
					float3 WorldPosition234_g170641 = temp_output_279_0_g170641;
					float4 localSampleStochastic2D234_g170641 = SampleStochastic2D( Texture234_g170641 , Sampler234_g170641 , Coords234_g170641 , WorldPosition234_g170641 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170641) = _SecondShaderTex;
					SamplerState Sampler263_g170641 = SS30_g170654;
					half4 Coords263_g170641 = temp_output_37_0_g170641;
					half3 WorldPosition263_g170641 = temp_output_279_0_g170641;
					half3 WorldNormal263_g170641 = temp_output_280_0_g170641;
					half4 localSampleStochastic3D263_g170641 = SampleStochastic3D( Texture263_g170641 , Sampler263_g170641 , Coords263_g170641 , WorldPosition263_g170641 , WorldNormal263_g170641 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170638 = localSampleExtra275_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170638 = localSamplePlanar2D238_g170641;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170638 = localSamplePlanar3D246_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170638 = localSampleStochastic2D234_g170641;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170638 = localSampleStochastic3D263_g170641;
					#else
					float4 staticSwitch722_g170638 = localSampleMain276_g170641;
					#endif
					half4 Local_ShaderTex775_g170638 = staticSwitch722_g170638;
					float clampResult17_g170672 = clamp( (Local_ShaderTex775_g170638).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170671 = _SecondOcclusionRemap.x;
					float temp_output_9_0_g170671 = ( clampResult17_g170672 - temp_output_7_0_g170671 );
					float lerpResult1058_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170671 * _SecondOcclusionRemap.z ) + 0.0001 ) ) , _SecondOcclusionValue);
					half Local_Occlusion1067_g170638 = lerpResult1058_g170638;
					float clampResult17_g170674 = clamp( (Local_ShaderTex775_g170638).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170673 = _SecondSmoothnessRemap.x;
					float temp_output_9_0_g170673 = ( clampResult17_g170674 - temp_output_7_0_g170673 );
					half Local_Smoothness1068_g170638 = ( saturate( ( ( temp_output_9_0_g170673 * _SecondSmoothnessRemap.z ) + 0.0001 ) ) * _SecondSmoothnessValue );
					float4 appendResult749_g170638 = (float4(( (Local_ShaderTex775_g170638).x * _SecondMetallicValue ) , Local_Occlusion1067_g170638 , (Local_ShaderTex775_g170638).z , Local_Smoothness1068_g170638));
					half4 Local_Masks750_g170638 = appendResult749_g170638;
					float clampResult17_g170675 = clamp( (Local_Masks750_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170678 = _SecondMultiRemap.x;
					float temp_output_9_0_g170678 = ( clampResult17_g170675 - temp_output_7_0_g170678 );
					float temp_output_765_0_g170638 = saturate( ( ( temp_output_9_0_g170678 * _SecondMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170638 = temp_output_765_0_g170638;
					float lerpResult705_g170638 = lerp( 1.0 , Local_MultiMask767_g170638 , _SecondColorMode);
					float4 lerpResult706_g170638 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170638);
					half3 Local_ColorRGB774_g170638 = (lerpResult706_g170638).rgb;
					half3 Local_Albedo768_g170638 = ( Local_AlbedoRGB771_g170638 * Local_ColorRGB774_g170638 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170649 = 2.0;
					#else
					float staticSwitch1_g170649 = 4.594794;
					#endif
					float3 lerpResult985_g170638 = lerp( Local_Albedo768_g170638 , ( Visual_Albedo527_g170638 * Local_Albedo768_g170638 * staticSwitch1_g170649 ) , _SecondBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170642) = _SecondMaskTex;
					SamplerState Sampler276_g170642 = sampler_Linear_Repeat;
					half4 Local_BlendCoords813_g170638 = _second_mask_coord_value;
					float4 temp_output_37_0_g170642 = Local_BlendCoords813_g170638;
					half4 Coords276_g170642 = temp_output_37_0_g170642;
					half2 TexCoord276_g170642 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170642 = SampleMain( Texture276_g170642 , Sampler276_g170642 , Coords276_g170642 , TexCoord276_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170642) = _SecondMaskTex;
					SamplerState Sampler275_g170642 = sampler_Linear_Repeat;
					half4 Coords275_g170642 = temp_output_37_0_g170642;
					half2 TexCoord275_g170642 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170642 = SampleExtra( Texture275_g170642 , Sampler275_g170642 , Coords275_g170642 , TexCoord275_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170642) = _SecondMaskTex;
					SamplerState Sampler238_g170642 = sampler_Linear_Repeat;
					half4 Coords238_g170642 = temp_output_37_0_g170642;
					float3 temp_output_279_0_g170642 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170642 = temp_output_279_0_g170642;
					half4 localSamplePlanar2D238_g170642 = SamplePlanar2D( Texture238_g170642 , Sampler238_g170642 , Coords238_g170642 , WorldPosition238_g170642 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170642) = _SecondMaskTex;
					SamplerState Sampler246_g170642 = sampler_Linear_Repeat;
					half4 Coords246_g170642 = temp_output_37_0_g170642;
					half3 WorldPosition246_g170642 = temp_output_279_0_g170642;
					float3 temp_output_280_0_g170642 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170642 = temp_output_280_0_g170642;
					half4 localSamplePlanar3D246_g170642 = SamplePlanar3D( Texture246_g170642 , Sampler246_g170642 , Coords246_g170642 , WorldPosition246_g170642 , WorldNormal246_g170642 );
					#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170638 = localSampleExtra275_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170638 = localSamplePlanar2D238_g170642;
					#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170638 = localSamplePlanar3D246_g170642;
					#else
					float4 staticSwitch817_g170638 = localSampleMain276_g170642;
					#endif
					half4 Local_MaskTex861_g170638 = staticSwitch817_g170638;
					float clampResult17_g170658 = clamp( (Local_MaskTex861_g170638).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170662 = _SecondMaskRemap.x;
					float temp_output_9_0_g170662 = ( clampResult17_g170658 - temp_output_7_0_g170662 );
					float lerpResult1015_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170662 * _SecondMaskRemap.z ) + 0.0001 ) ) , _SecondMaskValue);
					half Blend_TexMask429_g170638 = lerpResult1015_g170638;
					half Visual_Luminosity1041_g170638 = Out_Luminosity4_g170646;
					float clampResult17_g170667 = clamp( Visual_Luminosity1041_g170638 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170668 = _SecondLumaRemap.x;
					float temp_output_9_0_g170668 = ( clampResult17_g170667 - temp_output_7_0_g170668 );
					float lerpResult1036_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170668 * _SecondLumaRemap.z ) + 0.0001 ) ) , _SecondLumaValue);
					half Blend_LumaMask1033_g170638 = lerpResult1036_g170638;
					half3 Visual_NormalWS951_g170638 = Out_NormalWS4_g170646;
					float clampResult17_g170663 = clamp( saturate( (Visual_NormalWS951_g170638).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170665 = _SecondProjRemap.x;
					float temp_output_9_0_g170665 = ( clampResult17_g170663 - temp_output_7_0_g170665 );
					float lerpResult996_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170665 * _SecondProjRemap.z ) + 0.0001 ) ) , _SecondProjValue);
					half Blend_ProjMask434_g170638 = lerpResult996_g170638;
					half4 Model_VertexMasks964_g170638 = Out_VertexData15_g170655;
					float4 break965_g170638 = Model_VertexMasks964_g170638;
					float4 break33_g170659 = _second_vert_mode;
					float temp_output_30_0_g170659 = ( break965_g170638.x * break33_g170659.x );
					float temp_output_29_0_g170659 = ( break965_g170638.y * break33_g170659.y );
					float temp_output_31_0_g170659 = ( break965_g170638.z * break33_g170659.z );
					float temp_output_28_0_g170659 = ( temp_output_30_0_g170659 + temp_output_29_0_g170659 + temp_output_31_0_g170659 + ( break965_g170638.w * break33_g170659.w ) );
					float clampResult17_g170657 = clamp( temp_output_28_0_g170659 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170661 = _SecondMeshRemap.x;
					float temp_output_9_0_g170661 = ( clampResult17_g170657 - temp_output_7_0_g170661 );
					float lerpResult1017_g170638 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170661 * _SecondMeshRemap.z ) + 0.0001 ) ) , _SecondMeshValue);
					float temp_output_6_0_g170660 = lerpResult1017_g170638;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170660 = ( temp_output_6_0_g170660 + _SecondMeshMode );
					#else
					float staticSwitch14_g170660 = temp_output_6_0_g170660;
					#endif
					half Blend_VertMask918_g170638 = staticSwitch14_g170660;
					float localBuildGlobalData204_g170496 = ( 0.0 );
					TVEGlobalData Data204_g170496 = (TVEGlobalData)0;
					half Dummy211_g170496 = ( _GlobalCategory + _GlobalEnd + _GlobalPivotInfo );
					float In_Dummy204_g170496 = Dummy211_g170496;
					float temp_output_82_0_g170506 = _GlobalCoatLayerValue;
					float temp_output_19_0_g170508 = TVE_CoatLayers[(int)temp_output_82_0_g170506];
					TVEModelData Data15_g170542 = Data16_g170483;
					float Out_Dummy15_g170542 = 0;
					float3 Out_PositionWS15_g170542 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170542 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170542 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170542 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170542 = float3( 0,0,0 );
					float4 Out_VertexData15_g170542 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170542 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170542 = Data15_g170542.Dummy;
					Out_PositionWS15_g170542 = Data15_g170542.PositionWS;
					Out_PositionWO15_g170542 = Data15_g170542.PositionWO;
					Out_PivotWS15_g170542 = Data15_g170542.PivotWS;
					Out_PivotWO15_g170542 = Data15_g170542.PivotWO;
					Out_NormalWS15_g170542 = Data15_g170542.NormalWS;
					Out_ViewDirWS15_g170542 = Data15_g170542.ViewDirWS;
					Out_VertexData15_g170542 = Data15_g170542.VertexData;
					Out_BoundsData15_g170542 = Data15_g170542.BoundsData;
					}
					half3 Model_PositionWS143_g170496 = Out_PositionWS15_g170542;
					half3 Model_PivotWS145_g170496 = Out_PivotWS15_g170542;
					float3 lerpResult300_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalCoatPivotValue);
					half3 Input_Position180_g170509 = lerpResult300_g170496;
					float2 temp_output_75_0_g170509 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_82_0_g170509 = temp_output_82_0_g170506;
					float2 temp_output_119_0_g170509 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170509).xz ) );
					float temp_output_7_0_g170514 = 1.0;
					float temp_output_9_0_g170514 = ( saturate( ( distance( Input_Position180_g170509 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170514 );
					float4 lerpResult131_g170509 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170509,temp_output_82_0_g170509), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_CoatNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170509,temp_output_82_0_g170509), 0.0 ) , saturate( ( temp_output_9_0_g170514 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170514 ) ) ));
					float4 temp_output_17_0_g170508 = lerpResult131_g170509;
					float4 temp_output_3_0_g170508 = TVE_CoatParams;
					float4 ifLocalVar18_g170508 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170508 >= 0.5 )
					ifLocalVar18_g170508 = temp_output_17_0_g170508;
					else
					ifLocalVar18_g170508 = temp_output_3_0_g170508;
					float4 lerpResult22_g170508 = lerp( temp_output_3_0_g170508 , temp_output_17_0_g170508 , temp_output_19_0_g170508);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170508 = lerpResult22_g170508;
					#else
					float4 staticSwitch24_g170508 = ifLocalVar18_g170508;
					#endif
					half4 Coat_Params302_g170496 = staticSwitch24_g170508;
					float4 In_CoatDataRT204_g170496 = Coat_Params302_g170496;
					float temp_output_82_0_g170497 = _GlobalPaintLayerValue;
					float temp_output_19_0_g170499 = TVE_PaintLayers[(int)temp_output_82_0_g170497];
					float3 lerpResult85_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalPaintPivotValue);
					half3 Input_Position180_g170500 = lerpResult85_g170496;
					float2 temp_output_75_0_g170500 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_82_0_g170500 = temp_output_82_0_g170497;
					float2 temp_output_119_0_g170500 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170500).xz ) );
					float temp_output_7_0_g170505 = 1.0;
					float temp_output_9_0_g170505 = ( saturate( ( distance( Input_Position180_g170500 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170505 );
					float4 lerpResult131_g170500 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170500,temp_output_82_0_g170500), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170500,temp_output_82_0_g170500), 0.0 ) , saturate( ( temp_output_9_0_g170505 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170505 ) ) ));
					float4 temp_output_17_0_g170499 = lerpResult131_g170500;
					float4 temp_output_3_0_g170499 = TVE_PaintParams;
					float4 ifLocalVar18_g170499 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170499 >= 0.5 )
					ifLocalVar18_g170499 = temp_output_17_0_g170499;
					else
					ifLocalVar18_g170499 = temp_output_3_0_g170499;
					float4 lerpResult22_g170499 = lerp( temp_output_3_0_g170499 , temp_output_17_0_g170499 , temp_output_19_0_g170499);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170499 = lerpResult22_g170499;
					#else
					float4 staticSwitch24_g170499 = ifLocalVar18_g170499;
					#endif
					half4 Paint_Params71_g170496 = staticSwitch24_g170499;
					float4 In_PaintDataRT204_g170496 = Paint_Params71_g170496;
					float temp_output_82_0_g170543 = _GlobalGlowLayerValue;
					float temp_output_19_0_g170545 = TVE_GlowLayers[(int)temp_output_82_0_g170543];
					float3 lerpResult247_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalGlowPivotValue);
					half3 Input_Position180_g170546 = lerpResult247_g170496;
					float2 temp_output_75_0_g170546 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_82_0_g170546 = temp_output_82_0_g170543;
					float2 temp_output_119_0_g170546 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170546).xz ) );
					float temp_output_7_0_g170551 = 1.0;
					float temp_output_9_0_g170551 = ( saturate( ( distance( Input_Position180_g170546 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170551 );
					float4 lerpResult131_g170546 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170546,temp_output_82_0_g170546), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170546,temp_output_82_0_g170546), 0.0 ) , saturate( ( temp_output_9_0_g170551 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170551 ) ) ));
					float4 temp_output_17_0_g170545 = lerpResult131_g170546;
					float4 temp_output_3_0_g170545 = TVE_GlowParams;
					float4 ifLocalVar18_g170545 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170545 >= 0.5 )
					ifLocalVar18_g170545 = temp_output_17_0_g170545;
					else
					ifLocalVar18_g170545 = temp_output_3_0_g170545;
					float4 lerpResult22_g170545 = lerp( temp_output_3_0_g170545 , temp_output_17_0_g170545 , temp_output_19_0_g170545);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170545 = lerpResult22_g170545;
					#else
					float4 staticSwitch24_g170545 = ifLocalVar18_g170545;
					#endif
					half4 Glow_Params248_g170496 = staticSwitch24_g170545;
					float4 In_GlowDataRT204_g170496 = Glow_Params248_g170496;
					float temp_output_132_0_g170524 = _GlobalAtmoLayerValue;
					float temp_output_19_0_g170526 = TVE_AtmoLayers[(int)temp_output_132_0_g170524];
					float3 lerpResult104_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalAtmoPivotValue);
					half3 Input_Position180_g170527 = lerpResult104_g170496;
					float2 temp_output_75_0_g170527 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_82_0_g170527 = temp_output_132_0_g170524;
					float2 temp_output_119_0_g170527 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170527).xz ) );
					float temp_output_7_0_g170532 = 1.0;
					float temp_output_9_0_g170532 = ( saturate( ( distance( Input_Position180_g170527 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170532 );
					float4 lerpResult131_g170527 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170527,temp_output_82_0_g170527), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170527,temp_output_82_0_g170527), 0.0 ) , saturate( ( temp_output_9_0_g170532 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170532 ) ) ));
					float4 temp_output_17_0_g170526 = lerpResult131_g170527;
					float4 temp_output_3_0_g170526 = TVE_AtmoParams;
					float4 ifLocalVar18_g170526 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170526 >= 0.5 )
					ifLocalVar18_g170526 = temp_output_17_0_g170526;
					else
					ifLocalVar18_g170526 = temp_output_3_0_g170526;
					float4 lerpResult22_g170526 = lerp( temp_output_3_0_g170526 , temp_output_17_0_g170526 , temp_output_19_0_g170526);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170526 = lerpResult22_g170526;
					#else
					float4 staticSwitch24_g170526 = ifLocalVar18_g170526;
					#endif
					half4 Atmo_Params80_g170496 = staticSwitch24_g170526;
					float4 In_AtmoDataRT204_g170496 = Atmo_Params80_g170496;
					float temp_output_132_0_g170533 = _GlobalFadeLayerValue;
					float temp_output_19_0_g170535 = TVE_FadeLayers[(int)temp_output_132_0_g170533];
					float3 lerpResult382_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFadePivotValue);
					half3 Input_Position180_g170536 = lerpResult382_g170496;
					float2 temp_output_75_0_g170536 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_82_0_g170536 = temp_output_132_0_g170533;
					float2 temp_output_119_0_g170536 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170536).xz ) );
					float temp_output_7_0_g170541 = 1.0;
					float temp_output_9_0_g170541 = ( saturate( ( distance( Input_Position180_g170536 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170541 );
					float4 lerpResult131_g170536 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170536,temp_output_82_0_g170536), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170536,temp_output_82_0_g170536), 0.0 ) , saturate( ( temp_output_9_0_g170541 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170541 ) ) ));
					float4 temp_output_17_0_g170535 = lerpResult131_g170536;
					float4 temp_output_3_0_g170535 = TVE_FadeParams;
					float4 ifLocalVar18_g170535 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170535 >= 0.5 )
					ifLocalVar18_g170535 = temp_output_17_0_g170535;
					else
					ifLocalVar18_g170535 = temp_output_3_0_g170535;
					float4 lerpResult22_g170535 = lerp( temp_output_3_0_g170535 , temp_output_17_0_g170535 , temp_output_19_0_g170535);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170535 = lerpResult22_g170535;
					#else
					float4 staticSwitch24_g170535 = ifLocalVar18_g170535;
					#endif
					half4 Fade_Params387_g170496 = staticSwitch24_g170535;
					float4 In_FadeDataRT204_g170496 = Fade_Params387_g170496;
					float temp_output_130_0_g170515 = _GlobalFormLayerValue;
					float temp_output_19_0_g170517 = TVE_FormLayers[(int)temp_output_130_0_g170515];
					float3 lerpResult168_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFormPivotValue);
					half3 Input_Position180_g170518 = lerpResult168_g170496;
					float2 temp_output_75_0_g170518 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_82_0_g170518 = temp_output_130_0_g170515;
					float2 temp_output_119_0_g170518 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170518).xz ) );
					float temp_output_7_0_g170523 = 1.0;
					float temp_output_9_0_g170523 = ( saturate( ( distance( Input_Position180_g170518 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170523 );
					float4 lerpResult131_g170518 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170518,temp_output_82_0_g170518), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170518,temp_output_82_0_g170518), 0.0 ) , saturate( ( temp_output_9_0_g170523 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170523 ) ) ));
					float4 temp_output_17_0_g170517 = lerpResult131_g170518;
					float4 temp_output_3_0_g170517 = TVE_FormParams;
					float4 ifLocalVar18_g170517 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170517 >= 0.5 )
					ifLocalVar18_g170517 = temp_output_17_0_g170517;
					else
					ifLocalVar18_g170517 = temp_output_3_0_g170517;
					float4 lerpResult22_g170517 = lerp( temp_output_3_0_g170517 , temp_output_17_0_g170517 , temp_output_19_0_g170517);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170517 = lerpResult22_g170517;
					#else
					float4 staticSwitch24_g170517 = ifLocalVar18_g170517;
					#endif
					half4 Form_Params112_g170496 = staticSwitch24_g170517;
					float4 In_FormDataRT204_g170496 = Form_Params112_g170496;
					float temp_output_136_0_g170561 = _GlobalFlowLayerValue;
					float temp_output_19_0_g170563 = TVE_FlowLayers[(int)temp_output_136_0_g170561];
					float3 lerpResult400_g170496 = lerp( Model_PositionWS143_g170496 , Model_PivotWS145_g170496 , _GlobalFlowPivotValue);
					half3 Input_Position180_g170564 = lerpResult400_g170496;
					float2 temp_output_75_0_g170564 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_82_0_g170564 = temp_output_136_0_g170561;
					float2 temp_output_119_0_g170564 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170564).xz ) );
					float temp_output_7_0_g170569 = 1.0;
					float temp_output_9_0_g170569 = ( saturate( ( distance( Input_Position180_g170564 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170569 );
					float4 lerpResult131_g170564 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170564,temp_output_82_0_g170564), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FlowNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170564,temp_output_82_0_g170564), 0.0 ) , saturate( ( temp_output_9_0_g170569 / ( TVE_RenderNearFadeValue - temp_output_7_0_g170569 ) ) ));
					float4 temp_output_17_0_g170563 = lerpResult131_g170564;
					float4 temp_output_3_0_g170563 = TVE_FlowParams;
					float4 ifLocalVar18_g170563 = 0;
					UNITY_BRANCH 
					if( temp_output_19_0_g170563 >= 0.5 )
					ifLocalVar18_g170563 = temp_output_17_0_g170563;
					else
					ifLocalVar18_g170563 = temp_output_3_0_g170563;
					float4 lerpResult22_g170563 = lerp( temp_output_3_0_g170563 , temp_output_17_0_g170563 , temp_output_19_0_g170563);
					#ifdef SHADER_API_MOBILE
					float4 staticSwitch24_g170563 = lerpResult22_g170563;
					#else
					float4 staticSwitch24_g170563 = ifLocalVar18_g170563;
					#endif
					half4 Flow_Params405_g170496 = staticSwitch24_g170563;
					float4 In_FlowDataRT204_g170496 = Flow_Params405_g170496;
					{
					Data204_g170496.Dummy = In_Dummy204_g170496;
					Data204_g170496.CoatDataRT = In_CoatDataRT204_g170496;
					Data204_g170496.PaintDataRT = In_PaintDataRT204_g170496;
					Data204_g170496.GlowDataRT = In_GlowDataRT204_g170496;
					Data204_g170496.AtmoDataRT= In_AtmoDataRT204_g170496;
					Data204_g170496.FadeDataRT = In_FadeDataRT204_g170496;
					Data204_g170496.FormDataRT= In_FormDataRT204_g170496;
					Data204_g170496.FlowDataRT = In_FlowDataRT204_g170496;
					}
					TVEGlobalData Data15_g170645 = Data204_g170496;
					float Out_Dummy15_g170645 = 0;
					float4 Out_CoatDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170645 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170645 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170645 = Data15_g170645.Dummy;
					Out_CoatDataRT15_g170645 = Data15_g170645.CoatDataRT;
					Out_PaintDataRT15_g170645 = Data15_g170645.PaintDataRT;
					Out_GlowDataRT15_g170645= Data15_g170645.GlowDataRT;
					Out_AtmoDataRT15_g170645= Data15_g170645.AtmoDataRT;
					Out_FadeDataRT15_g170645= Data15_g170645.FadeDataRT;
					Out_FormDataRT15_g170645 = Data15_g170645.FormDataRT;
					Out_FlowDataRT15_g170645 = Data15_g170645.FlowDataRT;
					}
					half4 Global_CoatParams975_g170638 = Out_CoatDataRT15_g170645;
					float temp_output_6_0_g170669 = (Global_CoatParams975_g170638).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170669 = ( temp_output_6_0_g170669 + _SecondElementMode );
					#else
					float staticSwitch14_g170669 = temp_output_6_0_g170669;
					#endif
					#ifdef TVE_SECOND_ELEMENT
					float staticSwitch971_g170638 = staticSwitch14_g170669;
					#else
					float staticSwitch971_g170638 = TVE_CoatParams.z;
					#endif
					float lerpResult1013_g170638 = lerp( 1.0 , staticSwitch971_g170638 , ( _SecondGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask972_g170638 = lerpResult1013_g170638;
					float clampResult17_g170664 = clamp( ( _SecondIntensityValue * Blend_TexMask429_g170638 * Blend_LumaMask1033_g170638 * Blend_ProjMask434_g170638 * Blend_VertMask918_g170638 * Blend_GlobalMask972_g170638 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170666 = _SecondBlendRemap.x;
					float temp_output_9_0_g170666 = ( clampResult17_g170664 - temp_output_7_0_g170666 );
					half Blend_Mask412_g170638 = ( saturate( ( ( temp_output_9_0_g170666 * _SecondBlendRemap.z ) + 0.0001 ) ) * _SecondBlendIntensityValue );
					float3 lerpResult403_g170638 = lerp( Visual_Albedo527_g170638 , lerpResult985_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float3 staticSwitch415_g170638 = lerpResult403_g170638;
					#else
					float3 staticSwitch415_g170638 = Visual_Albedo527_g170638;
					#endif
					half3 Final_Albedo601_g170638 = staticSwitch415_g170638;
					float3 In_Albedo3_g170656 = Final_Albedo601_g170638;
					float3 In_AlbedoRaw3_g170656 = Final_Albedo601_g170638;
					half2 Visual_NormalTS529_g170638 = Out_NormalTS4_g170646;
					float2 lerpResult40_g170647 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170638 , _SecondBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170640) = _SecondNormalTex;
					float localFilterTexture29_g170653 = ( 0.0 );
					SamplerState SS29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170653 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170653 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170653 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170653 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170653 = SamplerDefault29_g170653;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170653 = SamplerDefault29_g170653;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170653 = SamplerPoint29_g170653;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170653 = SamplerLow29_g170653;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170653 = SamplerMedium29_g170653;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170653 = SamplerHigh29_g170653;
					#endif
					}
					SamplerState Sampler276_g170640 = SS29_g170653;
					float4 temp_output_37_0_g170640 = Local_LayerCoords790_g170638;
					half4 Coords276_g170640 = temp_output_37_0_g170640;
					half2 TexCoord276_g170640 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170640 = SampleMain( Texture276_g170640 , Sampler276_g170640 , Coords276_g170640 , TexCoord276_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170640) = _SecondNormalTex;
					SamplerState Sampler275_g170640 = SS29_g170653;
					half4 Coords275_g170640 = temp_output_37_0_g170640;
					half2 TexCoord275_g170640 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170640 = SampleExtra( Texture275_g170640 , Sampler275_g170640 , Coords275_g170640 , TexCoord275_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170640) = _SecondNormalTex;
					SamplerState Sampler238_g170640 = SS29_g170653;
					half4 Coords238_g170640 = temp_output_37_0_g170640;
					float3 temp_output_279_0_g170640 = Model_PositionWO636_g170638;
					half3 WorldPosition238_g170640 = temp_output_279_0_g170640;
					half4 localSamplePlanar2D238_g170640 = SamplePlanar2D( Texture238_g170640 , Sampler238_g170640 , Coords238_g170640 , WorldPosition238_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170640) = _SecondNormalTex;
					SamplerState Sampler246_g170640 = SS29_g170653;
					half4 Coords246_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition246_g170640 = temp_output_279_0_g170640;
					float3 temp_output_280_0_g170640 = Model_NormalWS869_g170638;
					half3 WorldNormal246_g170640 = temp_output_280_0_g170640;
					half4 localSamplePlanar3D246_g170640 = SamplePlanar3D( Texture246_g170640 , Sampler246_g170640 , Coords246_g170640 , WorldPosition246_g170640 , WorldNormal246_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170640) = _SecondNormalTex;
					SamplerState Sampler234_g170640 = SS29_g170653;
					float4 Coords234_g170640 = temp_output_37_0_g170640;
					float3 WorldPosition234_g170640 = temp_output_279_0_g170640;
					float4 localSampleStochastic2D234_g170640 = SampleStochastic2D( Texture234_g170640 , Sampler234_g170640 , Coords234_g170640 , WorldPosition234_g170640 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170640) = _SecondNormalTex;
					SamplerState Sampler263_g170640 = SS29_g170653;
					half4 Coords263_g170640 = temp_output_37_0_g170640;
					half3 WorldPosition263_g170640 = temp_output_279_0_g170640;
					half3 WorldNormal263_g170640 = temp_output_280_0_g170640;
					half4 localSampleStochastic3D263_g170640 = SampleStochastic3D( Texture263_g170640 , Sampler263_g170640 , Coords263_g170640 , WorldPosition263_g170640 , WorldNormal263_g170640 );
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170638 = localSampleExtra275_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170638 = localSamplePlanar2D238_g170640;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170638 = localSamplePlanar3D246_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170638 = localSampleStochastic2D234_g170640;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170638 = localSampleStochastic3D263_g170640;
					#else
					float4 staticSwitch698_g170638 = localSampleMain276_g170640;
					#endif
					half4 Local_NormalTex776_g170638 = staticSwitch698_g170638;
					half4 Normal_Packed45_g170643 = Local_NormalTex776_g170638;
					float2 appendResult58_g170643 = (float2(( (Normal_Packed45_g170643).x * (Normal_Packed45_g170643).w ) , (Normal_Packed45_g170643).y));
					half2 Normal_Default50_g170643 = appendResult58_g170643;
					half2 Normal_ASTC41_g170643 = (Normal_Packed45_g170643).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170643 = Normal_ASTC41_g170643;
					#else
					float2 staticSwitch38_g170643 = Normal_Default50_g170643;
					#endif
					half2 Normal_NO_DTX544_g170643 = (Normal_Packed45_g170643).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170643 = Normal_NO_DTX544_g170643;
					#else
					float2 staticSwitch37_g170643 = staticSwitch38_g170643;
					#endif
					float2 temp_output_724_0_g170638 = ( (staticSwitch37_g170643*2.0 + -1.0) * _SecondNormalValue );
					half2 Normal_Planar45_g170644 = temp_output_724_0_g170638;
					float2 break71_g170644 = Normal_Planar45_g170644;
					float3 appendResult72_g170644 = (float3(break71_g170644.x , 0.0 , break71_g170644.y));
					float2 temp_output_858_0_g170638 = (mul( ase_worldToTangent, appendResult72_g170644 )).xy;
					#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170638 = temp_output_858_0_g170638;
					#else
					float2 staticSwitch727_g170638 = temp_output_724_0_g170638;
					#endif
					half2 Local_NormalTS729_g170638 = staticSwitch727_g170638;
					float2 temp_output_36_0_g170647 = ( lerpResult40_g170647 + Local_NormalTS729_g170638 );
					float2 lerpResult405_g170638 = lerp( Visual_NormalTS529_g170638 , temp_output_36_0_g170647 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float2 staticSwitch418_g170638 = lerpResult405_g170638;
					#else
					float2 staticSwitch418_g170638 = Visual_NormalTS529_g170638;
					#endif
					half2 Final_NormalTS612_g170638 = staticSwitch418_g170638;
					float2 In_NormalTS3_g170656 = Final_NormalTS612_g170638;
					float3 appendResult68_g170648 = (float3(Final_NormalTS612_g170638 , 1.0));
					float3 tanNormal74_g170648 = appendResult68_g170648;
					float3 worldNormal74_g170648 = normalize( float3( dot( tanToWorld0, tanNormal74_g170648 ), dot( tanToWorld1, tanNormal74_g170648 ), dot( tanToWorld2, tanNormal74_g170648 ) ) );
					half3 Final_NormalWS950_g170638 = worldNormal74_g170648;
					float3 In_NormalWS3_g170656 = Final_NormalWS950_g170638;
					half4 Visual_Shader531_g170638 = Out_Shader4_g170646;
					float4 lerpResult994_g170638 = lerp( Local_Masks750_g170638 , ( Visual_Shader531_g170638 * Local_Masks750_g170638 ) , _SecondBlendShaderValue);
					float4 lerpResult440_g170638 = lerp( Visual_Shader531_g170638 , lerpResult994_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float4 staticSwitch451_g170638 = lerpResult440_g170638;
					#else
					float4 staticSwitch451_g170638 = Visual_Shader531_g170638;
					#endif
					half4 Final_Masks613_g170638 = staticSwitch451_g170638;
					float4 In_Shader3_g170656 = Final_Masks613_g170638;
					float4 In_Emissive3_g170656 = Out_Emissive4_g170646;
					float3 temp_output_3_0_g170650 = Final_Albedo601_g170638;
					float dotResult20_g170650 = dot( temp_output_3_0_g170650 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170638 = dotResult20_g170650;
					float In_Grayscale3_g170656 = Final_Grayscale615_g170638;
					float clampResult651_g170638 = clamp( saturate( ( Final_Grayscale615_g170638 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170638 = clampResult651_g170638;
					float In_Luminosity3_g170656 = Final_Luminosity652_g170638;
					half Visual_MultiMask547_g170638 = Out_MultiMask4_g170646;
					float lerpResult477_g170638 = lerp( Visual_MultiMask547_g170638 , Local_MultiMask767_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch482_g170638 = lerpResult477_g170638;
					#else
					float staticSwitch482_g170638 = Visual_MultiMask547_g170638;
					#endif
					half Final_MultiMask572_g170638 = staticSwitch482_g170638;
					float In_MultiMask3_g170656 = Final_MultiMask572_g170638;
					half Visual_AlphaClip559_g170638 = Out_AlphaClip4_g170646;
					float temp_output_718_0_g170638 = (Local_AlbedoTex777_g170638).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch932_g170638 = ( temp_output_718_0_g170638 - _SecondAlphaClipValue );
					#else
					float staticSwitch932_g170638 = temp_output_718_0_g170638;
					#endif
					half Local_AlphaClip772_g170638 = staticSwitch932_g170638;
					float lerpResult448_g170638 = lerp( Visual_AlphaClip559_g170638 , Local_AlphaClip772_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch564_g170638 = lerpResult448_g170638;
					#else
					float staticSwitch564_g170638 = Visual_AlphaClip559_g170638;
					#endif
					half Final_AlphaClip602_g170638 = staticSwitch564_g170638;
					float In_AlphaClip3_g170656 = Final_AlphaClip602_g170638;
					half Visual_AlphaFade588_g170638 = Out_AlphaFade4_g170646;
					half Local_AlphaFade773_g170638 = (lerpResult706_g170638).a;
					float lerpResult604_g170638 = lerp( Visual_AlphaFade588_g170638 , Local_AlphaFade773_g170638 , Blend_Mask412_g170638);
					#ifdef TVE_SECOND
					float staticSwitch608_g170638 = lerpResult604_g170638;
					#else
					float staticSwitch608_g170638 = Visual_AlphaFade588_g170638;
					#endif
					half Final_AlphaFade611_g170638 = staticSwitch608_g170638;
					float In_AlphaFade3_g170656 = Final_AlphaFade611_g170638;
					float3 In_Translucency3_g170656 = Out_Translucency4_g170646;
					float In_Transmission3_g170656 = Out_Transmission4_g170646;
					float In_Thickness3_g170656 = Out_Thickness4_g170646;
					float In_Diffusion3_g170656 = Out_Diffusion4_g170646;
					float In_Depth3_g170656 = Out_Depth4_g170646;
					{
					Data3_g170656.Dummy = In_Dummy3_g170656;
					Data3_g170656.Albedo = In_Albedo3_g170656;
					Data3_g170656.AlbedoRaw = In_AlbedoRaw3_g170656;
					Data3_g170656.NormalTS = In_NormalTS3_g170656;
					Data3_g170656.NormalWS = In_NormalWS3_g170656;
					Data3_g170656.Shader = In_Shader3_g170656;
					Data3_g170656.Emissive= In_Emissive3_g170656;
					Data3_g170656.MultiMask = In_MultiMask3_g170656;
					Data3_g170656.Grayscale = In_Grayscale3_g170656;
					Data3_g170656.Luminosity = In_Luminosity3_g170656;
					Data3_g170656.AlphaClip = In_AlphaClip3_g170656;
					Data3_g170656.AlphaFade = In_AlphaFade3_g170656;
					Data3_g170656.Translucency = In_Translucency3_g170656;
					Data3_g170656.Transmission = In_Transmission3_g170656;
					Data3_g170656.Thickness = In_Thickness3_g170656;
					Data3_g170656.Diffusion = In_Diffusion3_g170656;
					Data3_g170656.Depth = In_Depth3_g170656;
					}
					TVEVisualData Data4_g170694 = Data3_g170656;
					float Out_Dummy4_g170694 = 0;
					float3 Out_Albedo4_g170694 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170694 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170694 = float2( 0,0 );
					float3 Out_NormalWS4_g170694 = float3( 0,0,0 );
					float4 Out_Shader4_g170694 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170694 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170694 = 0;
					float Out_Grayscale4_g170694 = 0;
					float Out_Luminosity4_g170694 = 0;
					float Out_AlphaClip4_g170694 = 0;
					float Out_AlphaFade4_g170694 = 0;
					float3 Out_Translucency4_g170694 = float3( 0,0,0 );
					float Out_Transmission4_g170694 = 0;
					float Out_Thickness4_g170694 = 0;
					float Out_Diffusion4_g170694 = 0;
					float Out_Depth4_g170694 = 0;
					{
					Out_Dummy4_g170694 = Data4_g170694.Dummy;
					Out_Albedo4_g170694 = Data4_g170694.Albedo;
					Out_AlbedoRaw4_g170694 = Data4_g170694.AlbedoRaw;
					Out_NormalTS4_g170694 = Data4_g170694.NormalTS;
					Out_NormalWS4_g170694 = Data4_g170694.NormalWS;
					Out_Shader4_g170694 = Data4_g170694.Shader;
					Out_Emissive4_g170694= Data4_g170694.Emissive;
					Out_MultiMask4_g170694 = Data4_g170694.MultiMask;
					Out_Grayscale4_g170694 = Data4_g170694.Grayscale;
					Out_Luminosity4_g170694= Data4_g170694.Luminosity;
					Out_AlphaClip4_g170694 = Data4_g170694.AlphaClip;
					Out_AlphaFade4_g170694 = Data4_g170694.AlphaFade;
					Out_Translucency4_g170694 = Data4_g170694.Translucency;
					Out_Transmission4_g170694 = Data4_g170694.Transmission;
					Out_Thickness4_g170694 = Data4_g170694.Thickness;
					Out_Diffusion4_g170694 = Data4_g170694.Diffusion;
					Out_Depth4_g170694= Data4_g170694.Depth;
					}
					half3 Visual_Albedo527_g170687 = Out_Albedo4_g170694;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170688) = _ThirdAlbedoTex;
					float localFilterTexture19_g170703 = ( 0.0 );
					SamplerState SS19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170703 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170703 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170703 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170703 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170703 = SamplerDefault19_g170703;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170703 = SamplerDefault19_g170703;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170703 = SamplerPoint19_g170703;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170703 = SamplerLow19_g170703;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170703 = SamplerMedium19_g170703;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170703 = SamplerHigh19_g170703;
					#endif
					}
					SamplerState Sampler276_g170688 = SS19_g170703;
					half4 Local_LayerCoords790_g170687 = _third_coord_value;
					float4 temp_output_37_0_g170688 = Local_LayerCoords790_g170687;
					half4 Coords276_g170688 = temp_output_37_0_g170688;
					half2 TexCoord276_g170688 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170688 = SampleMain( Texture276_g170688 , Sampler276_g170688 , Coords276_g170688 , TexCoord276_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler275_g170688 = SS19_g170703;
					half4 Coords275_g170688 = temp_output_37_0_g170688;
					half2 TexCoord275_g170688 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170688 = SampleExtra( Texture275_g170688 , Sampler275_g170688 , Coords275_g170688 , TexCoord275_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler238_g170688 = SS19_g170703;
					half4 Coords238_g170688 = temp_output_37_0_g170688;
					TVEModelData Data15_g170706 = Data16_g170483;
					float Out_Dummy15_g170706 = 0;
					float3 Out_PositionWS15_g170706 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170706 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170706 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170706 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170706 = float3( 0,0,0 );
					float4 Out_VertexData15_g170706 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170706 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170706 = Data15_g170706.Dummy;
					Out_PositionWS15_g170706 = Data15_g170706.PositionWS;
					Out_PositionWO15_g170706 = Data15_g170706.PositionWO;
					Out_PivotWS15_g170706 = Data15_g170706.PivotWS;
					Out_PivotWO15_g170706 = Data15_g170706.PivotWO;
					Out_NormalWS15_g170706 = Data15_g170706.NormalWS;
					Out_ViewDirWS15_g170706 = Data15_g170706.ViewDirWS;
					Out_VertexData15_g170706 = Data15_g170706.VertexData;
					Out_BoundsData15_g170706 = Data15_g170706.BoundsData;
					}
					half3 Model_PositionWO636_g170687 = Out_PositionWO15_g170706;
					float3 temp_output_279_0_g170688 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170688 = temp_output_279_0_g170688;
					half4 localSamplePlanar2D238_g170688 = SamplePlanar2D( Texture238_g170688 , Sampler238_g170688 , Coords238_g170688 , WorldPosition238_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler246_g170688 = SS19_g170703;
					half4 Coords246_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition246_g170688 = temp_output_279_0_g170688;
					half3 Model_NormalWS869_g170687 = Out_NormalWS15_g170706;
					float3 temp_output_280_0_g170688 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170688 = temp_output_280_0_g170688;
					half4 localSamplePlanar3D246_g170688 = SamplePlanar3D( Texture246_g170688 , Sampler246_g170688 , Coords246_g170688 , WorldPosition246_g170688 , WorldNormal246_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler234_g170688 = SS19_g170703;
					float4 Coords234_g170688 = temp_output_37_0_g170688;
					float3 WorldPosition234_g170688 = temp_output_279_0_g170688;
					float4 localSampleStochastic2D234_g170688 = SampleStochastic2D( Texture234_g170688 , Sampler234_g170688 , Coords234_g170688 , WorldPosition234_g170688 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170688) = _ThirdAlbedoTex;
					SamplerState Sampler263_g170688 = SS19_g170703;
					half4 Coords263_g170688 = temp_output_37_0_g170688;
					half3 WorldPosition263_g170688 = temp_output_279_0_g170688;
					half3 WorldNormal263_g170688 = temp_output_280_0_g170688;
					half4 localSampleStochastic3D263_g170688 = SampleStochastic3D( Texture263_g170688 , Sampler263_g170688 , Coords263_g170688 , WorldPosition263_g170688 , WorldNormal263_g170688 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch693_g170687 = localSampleExtra275_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch693_g170687 = localSamplePlanar2D238_g170688;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch693_g170687 = localSamplePlanar3D246_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch693_g170687 = localSampleStochastic2D234_g170688;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch693_g170687 = localSampleStochastic3D263_g170688;
					#else
					float4 staticSwitch693_g170687 = localSampleMain276_g170688;
					#endif
					half4 Local_AlbedoTex777_g170687 = staticSwitch693_g170687;
					float3 lerpResult716_g170687 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170687).xyz , _ThirdAlbedoValue);
					half3 Local_AlbedoRGB771_g170687 = lerpResult716_g170687;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170690) = _ThirdShaderTex;
					float localFilterTexture30_g170705 = ( 0.0 );
					SamplerState SS30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerDefault30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerPoint30_g170705 = sampler_Point_Repeat;
					SamplerState SamplerLow30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerMedium30_g170705 = sampler_Linear_Repeat;
					SamplerState SamplerHigh30_g170705 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS30_g170705 = SamplerDefault30_g170705;
					#if defined (TVE_FILTER_DEFAULT)
					    SS30_g170705 = SamplerDefault30_g170705;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS30_g170705 = SamplerPoint30_g170705;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS30_g170705 = SamplerLow30_g170705;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS30_g170705 = SamplerMedium30_g170705;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS30_g170705 = SamplerHigh30_g170705;
					#endif
					}
					SamplerState Sampler276_g170690 = SS30_g170705;
					float4 temp_output_37_0_g170690 = Local_LayerCoords790_g170687;
					half4 Coords276_g170690 = temp_output_37_0_g170690;
					half2 TexCoord276_g170690 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170690 = SampleMain( Texture276_g170690 , Sampler276_g170690 , Coords276_g170690 , TexCoord276_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170690) = _ThirdShaderTex;
					SamplerState Sampler275_g170690 = SS30_g170705;
					half4 Coords275_g170690 = temp_output_37_0_g170690;
					half2 TexCoord275_g170690 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170690 = SampleExtra( Texture275_g170690 , Sampler275_g170690 , Coords275_g170690 , TexCoord275_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170690) = _ThirdShaderTex;
					SamplerState Sampler238_g170690 = SS30_g170705;
					half4 Coords238_g170690 = temp_output_37_0_g170690;
					float3 temp_output_279_0_g170690 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170690 = temp_output_279_0_g170690;
					half4 localSamplePlanar2D238_g170690 = SamplePlanar2D( Texture238_g170690 , Sampler238_g170690 , Coords238_g170690 , WorldPosition238_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170690) = _ThirdShaderTex;
					SamplerState Sampler246_g170690 = SS30_g170705;
					half4 Coords246_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition246_g170690 = temp_output_279_0_g170690;
					float3 temp_output_280_0_g170690 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170690 = temp_output_280_0_g170690;
					half4 localSamplePlanar3D246_g170690 = SamplePlanar3D( Texture246_g170690 , Sampler246_g170690 , Coords246_g170690 , WorldPosition246_g170690 , WorldNormal246_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170690) = _ThirdShaderTex;
					SamplerState Sampler234_g170690 = SS30_g170705;
					float4 Coords234_g170690 = temp_output_37_0_g170690;
					float3 WorldPosition234_g170690 = temp_output_279_0_g170690;
					float4 localSampleStochastic2D234_g170690 = SampleStochastic2D( Texture234_g170690 , Sampler234_g170690 , Coords234_g170690 , WorldPosition234_g170690 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170690) = _ThirdShaderTex;
					SamplerState Sampler263_g170690 = SS30_g170705;
					half4 Coords263_g170690 = temp_output_37_0_g170690;
					half3 WorldPosition263_g170690 = temp_output_279_0_g170690;
					half3 WorldNormal263_g170690 = temp_output_280_0_g170690;
					half4 localSampleStochastic3D263_g170690 = SampleStochastic3D( Texture263_g170690 , Sampler263_g170690 , Coords263_g170690 , WorldPosition263_g170690 , WorldNormal263_g170690 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch722_g170687 = localSampleExtra275_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch722_g170687 = localSamplePlanar2D238_g170690;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch722_g170687 = localSamplePlanar3D246_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch722_g170687 = localSampleStochastic2D234_g170690;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch722_g170687 = localSampleStochastic3D263_g170690;
					#else
					float4 staticSwitch722_g170687 = localSampleMain276_g170690;
					#endif
					half4 Local_ShaderTex775_g170687 = staticSwitch722_g170687;
					float clampResult17_g170724 = clamp( (Local_ShaderTex775_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170723 = _ThirdOcclusionRemap.x;
					float temp_output_9_0_g170723 = ( clampResult17_g170724 - temp_output_7_0_g170723 );
					float lerpResult1072_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170723 * _ThirdOcclusionRemap.z ) + 0.0001 ) ) , _ThirdOcclusionValue);
					half Local_Occlusion1084_g170687 = lerpResult1072_g170687;
					float clampResult17_g170726 = clamp( (Local_ShaderTex775_g170687).w , 0.0001 , 0.9999 );
					float temp_output_7_0_g170725 = _ThirdSmoothnessRemap.x;
					float temp_output_9_0_g170725 = ( clampResult17_g170726 - temp_output_7_0_g170725 );
					half Local_Smoothness1085_g170687 = ( saturate( ( ( temp_output_9_0_g170725 * _ThirdSmoothnessRemap.z ) + 0.0001 ) ) * _ThirdSmoothnessValue );
					float4 appendResult749_g170687 = (float4(( (Local_ShaderTex775_g170687).x * _ThirdMetallicValue ) , Local_Occlusion1084_g170687 , (Local_ShaderTex775_g170687).z , Local_Smoothness1085_g170687));
					half4 Local_Masks750_g170687 = appendResult749_g170687;
					float clampResult17_g170721 = clamp( (Local_Masks750_g170687).z , 0.0001 , 0.9999 );
					float temp_output_7_0_g170722 = _ThirdMultiRemap.x;
					float temp_output_9_0_g170722 = ( clampResult17_g170721 - temp_output_7_0_g170722 );
					float temp_output_765_0_g170687 = saturate( ( ( temp_output_9_0_g170722 * _ThirdMultiRemap.z ) + 0.0001 ) );
					half Local_MultiMask767_g170687 = temp_output_765_0_g170687;
					float lerpResult705_g170687 = lerp( 1.0 , Local_MultiMask767_g170687 , _ThirdColorMode);
					float4 lerpResult706_g170687 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170687);
					half3 Local_ColorRGB774_g170687 = (lerpResult706_g170687).rgb;
					half3 Local_Albedo768_g170687 = ( Local_AlbedoRGB771_g170687 * Local_ColorRGB774_g170687 );
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170699 = 2.0;
					#else
					float staticSwitch1_g170699 = 4.594794;
					#endif
					float3 lerpResult985_g170687 = lerp( Local_Albedo768_g170687 , ( Visual_Albedo527_g170687 * Local_Albedo768_g170687 * staticSwitch1_g170699 ) , _ThirdBlendAlbedoValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170701) = _ThirdMaskTex;
					SamplerState Sampler276_g170701 = sampler_Linear_Repeat;
					half4 Local_MaskCoords813_g170687 = _third_mask_coord_value;
					float4 temp_output_37_0_g170701 = Local_MaskCoords813_g170687;
					half4 Coords276_g170701 = temp_output_37_0_g170701;
					half2 TexCoord276_g170701 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170701 = SampleMain( Texture276_g170701 , Sampler276_g170701 , Coords276_g170701 , TexCoord276_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170701) = _ThirdMaskTex;
					SamplerState Sampler275_g170701 = sampler_Linear_Repeat;
					half4 Coords275_g170701 = temp_output_37_0_g170701;
					half2 TexCoord275_g170701 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170701 = SampleExtra( Texture275_g170701 , Sampler275_g170701 , Coords275_g170701 , TexCoord275_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170701) = _ThirdMaskTex;
					SamplerState Sampler238_g170701 = sampler_Linear_Repeat;
					half4 Coords238_g170701 = temp_output_37_0_g170701;
					float3 temp_output_279_0_g170701 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170701 = temp_output_279_0_g170701;
					half4 localSamplePlanar2D238_g170701 = SamplePlanar2D( Texture238_g170701 , Sampler238_g170701 , Coords238_g170701 , WorldPosition238_g170701 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170701) = _ThirdMaskTex;
					SamplerState Sampler246_g170701 = sampler_Linear_Repeat;
					half4 Coords246_g170701 = temp_output_37_0_g170701;
					half3 WorldPosition246_g170701 = temp_output_279_0_g170701;
					float3 temp_output_280_0_g170701 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170701 = temp_output_280_0_g170701;
					half4 localSamplePlanar3D246_g170701 = SamplePlanar3D( Texture246_g170701 , Sampler246_g170701 , Coords246_g170701 , WorldPosition246_g170701 , WorldNormal246_g170701 );
					#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
					float4 staticSwitch817_g170687 = localSampleExtra275_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
					float4 staticSwitch817_g170687 = localSamplePlanar2D238_g170701;
					#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
					float4 staticSwitch817_g170687 = localSamplePlanar3D246_g170701;
					#else
					float4 staticSwitch817_g170687 = localSampleMain276_g170701;
					#endif
					half4 Local_MaskTex861_g170687 = staticSwitch817_g170687;
					float clampResult17_g170708 = clamp( (Local_MaskTex861_g170687).y , 0.0001 , 0.9999 );
					float temp_output_7_0_g170712 = _ThirdMaskRemap.x;
					float temp_output_9_0_g170712 = ( clampResult17_g170708 - temp_output_7_0_g170712 );
					float lerpResult1028_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170712 * _ThirdMaskRemap.z ) + 0.0001 ) ) , _ThirdMaskValue);
					half Detail_TexMask429_g170687 = lerpResult1028_g170687;
					half Visual_Luminosity1049_g170687 = Out_Luminosity4_g170694;
					float clampResult17_g170717 = clamp( Visual_Luminosity1049_g170687 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170718 = _ThirdLumaRemap.x;
					float temp_output_9_0_g170718 = ( clampResult17_g170717 - temp_output_7_0_g170718 );
					float lerpResult1040_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170718 * _ThirdLumaRemap.z ) + 0.0001 ) ) , _ThirdLumaValue);
					half Blend_LumaMask1046_g170687 = lerpResult1040_g170687;
					half4 Model_VertexMasks960_g170687 = Out_VertexData15_g170706;
					float4 break961_g170687 = Model_VertexMasks960_g170687;
					float4 break33_g170709 = _third_vert_mode;
					float temp_output_30_0_g170709 = ( break961_g170687.x * break33_g170709.x );
					float temp_output_29_0_g170709 = ( break961_g170687.y * break33_g170709.y );
					float temp_output_31_0_g170709 = ( break961_g170687.z * break33_g170709.z );
					float temp_output_28_0_g170709 = ( temp_output_30_0_g170709 + temp_output_29_0_g170709 + temp_output_31_0_g170709 + ( break961_g170687.w * break33_g170709.w ) );
					float clampResult17_g170707 = clamp( temp_output_28_0_g170709 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170711 = _ThirdMeshRemap.x;
					float temp_output_9_0_g170711 = ( clampResult17_g170707 - temp_output_7_0_g170711 );
					float lerpResult1026_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170711 * _ThirdMeshRemap.z ) + 0.0001 ) ) , _ThirdMeshValue);
					float temp_output_6_0_g170710 = lerpResult1026_g170687;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170710 = ( temp_output_6_0_g170710 + _ThirdMeshMode );
					#else
					float staticSwitch14_g170710 = temp_output_6_0_g170710;
					#endif
					half Blend_VertMask913_g170687 = staticSwitch14_g170710;
					half3 Visual_NormalWS953_g170687 = Out_NormalWS4_g170694;
					float clampResult17_g170713 = clamp( saturate( (Visual_NormalWS953_g170687).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170715 = _ThirdProjRemap.x;
					float temp_output_9_0_g170715 = ( clampResult17_g170713 - temp_output_7_0_g170715 );
					float lerpResult1004_g170687 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170715 * _ThirdProjRemap.z ) + 0.0001 ) ) , _ThirdProjValue);
					half Blend_ProjMask912_g170687 = lerpResult1004_g170687;
					TVEGlobalData Data15_g170696 = Data204_g170496;
					float Out_Dummy15_g170696 = 0;
					float4 Out_CoatDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170696 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170696 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170696 = Data15_g170696.Dummy;
					Out_CoatDataRT15_g170696 = Data15_g170696.CoatDataRT;
					Out_PaintDataRT15_g170696 = Data15_g170696.PaintDataRT;
					Out_GlowDataRT15_g170696= Data15_g170696.GlowDataRT;
					Out_AtmoDataRT15_g170696= Data15_g170696.AtmoDataRT;
					Out_FadeDataRT15_g170696= Data15_g170696.FadeDataRT;
					Out_FormDataRT15_g170696 = Data15_g170696.FormDataRT;
					Out_FlowDataRT15_g170696 = Data15_g170696.FlowDataRT;
					}
					half4 Global_CoatParams972_g170687 = Out_CoatDataRT15_g170696;
					float temp_output_6_0_g170719 = (Global_CoatParams972_g170687).y;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170719 = ( temp_output_6_0_g170719 + _ThirdElementMode );
					#else
					float staticSwitch14_g170719 = temp_output_6_0_g170719;
					#endif
					#ifdef TVE_THIRD_ELEMENT
					float staticSwitch1056_g170687 = staticSwitch14_g170719;
					#else
					float staticSwitch1056_g170687 = TVE_CoatParams.y;
					#endif
					float lerpResult1060_g170687 = lerp( 1.0 , staticSwitch1056_g170687 , ( _ThirdGlobalValue * TVE_IsEnabled ));
					half Blend_GlobalMask968_g170687 = lerpResult1060_g170687;
					float clampResult17_g170714 = clamp( ( _ThirdIntensityValue * Detail_TexMask429_g170687 * Blend_LumaMask1046_g170687 * Blend_VertMask913_g170687 * Blend_ProjMask912_g170687 * Blend_GlobalMask968_g170687 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170716 = _ThirdBlendRemap.x;
					float temp_output_9_0_g170716 = ( clampResult17_g170714 - temp_output_7_0_g170716 );
					half Detail_Mask412_g170687 = ( saturate( ( ( temp_output_9_0_g170716 * _ThirdBlendRemap.z ) + 0.0001 ) ) * _ThirdBlendIntensityValue );
					float3 lerpResult989_g170687 = lerp( Visual_Albedo527_g170687 , lerpResult985_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float3 staticSwitch415_g170687 = lerpResult989_g170687;
					#else
					float3 staticSwitch415_g170687 = Visual_Albedo527_g170687;
					#endif
					half3 Final_Albedo601_g170687 = staticSwitch415_g170687;
					float3 In_Albedo3_g170695 = Final_Albedo601_g170687;
					float3 In_AlbedoRaw3_g170695 = Final_Albedo601_g170687;
					half2 Visual_NormalTS529_g170687 = Out_NormalTS4_g170694;
					float2 lerpResult40_g170697 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170687 , _ThirdBlendNormalValue);
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170689) = _ThirdNormalTex;
					float localFilterTexture29_g170704 = ( 0.0 );
					SamplerState SS29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170704 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170704 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170704 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170704 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170704 = SamplerDefault29_g170704;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170704 = SamplerDefault29_g170704;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170704 = SamplerPoint29_g170704;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170704 = SamplerLow29_g170704;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170704 = SamplerMedium29_g170704;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170704 = SamplerHigh29_g170704;
					#endif
					}
					SamplerState Sampler276_g170689 = SS29_g170704;
					float4 temp_output_37_0_g170689 = Local_LayerCoords790_g170687;
					half4 Coords276_g170689 = temp_output_37_0_g170689;
					half2 TexCoord276_g170689 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170689 = SampleMain( Texture276_g170689 , Sampler276_g170689 , Coords276_g170689 , TexCoord276_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170689) = _ThirdNormalTex;
					SamplerState Sampler275_g170689 = SS29_g170704;
					half4 Coords275_g170689 = temp_output_37_0_g170689;
					half2 TexCoord275_g170689 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170689 = SampleExtra( Texture275_g170689 , Sampler275_g170689 , Coords275_g170689 , TexCoord275_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170689) = _ThirdNormalTex;
					SamplerState Sampler238_g170689 = SS29_g170704;
					half4 Coords238_g170689 = temp_output_37_0_g170689;
					float3 temp_output_279_0_g170689 = Model_PositionWO636_g170687;
					half3 WorldPosition238_g170689 = temp_output_279_0_g170689;
					half4 localSamplePlanar2D238_g170689 = SamplePlanar2D( Texture238_g170689 , Sampler238_g170689 , Coords238_g170689 , WorldPosition238_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170689) = _ThirdNormalTex;
					SamplerState Sampler246_g170689 = SS29_g170704;
					half4 Coords246_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition246_g170689 = temp_output_279_0_g170689;
					float3 temp_output_280_0_g170689 = Model_NormalWS869_g170687;
					half3 WorldNormal246_g170689 = temp_output_280_0_g170689;
					half4 localSamplePlanar3D246_g170689 = SamplePlanar3D( Texture246_g170689 , Sampler246_g170689 , Coords246_g170689 , WorldPosition246_g170689 , WorldNormal246_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170689) = _ThirdNormalTex;
					SamplerState Sampler234_g170689 = SS29_g170704;
					float4 Coords234_g170689 = temp_output_37_0_g170689;
					float3 WorldPosition234_g170689 = temp_output_279_0_g170689;
					float4 localSampleStochastic2D234_g170689 = SampleStochastic2D( Texture234_g170689 , Sampler234_g170689 , Coords234_g170689 , WorldPosition234_g170689 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170689) = _ThirdNormalTex;
					SamplerState Sampler263_g170689 = SS29_g170704;
					half4 Coords263_g170689 = temp_output_37_0_g170689;
					half3 WorldPosition263_g170689 = temp_output_279_0_g170689;
					half3 WorldNormal263_g170689 = temp_output_280_0_g170689;
					half4 localSampleStochastic3D263_g170689 = SampleStochastic3D( Texture263_g170689 , Sampler263_g170689 , Coords263_g170689 , WorldPosition263_g170689 , WorldNormal263_g170689 );
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float4 staticSwitch698_g170687 = localSampleExtra275_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float4 staticSwitch698_g170687 = localSamplePlanar2D238_g170689;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float4 staticSwitch698_g170687 = localSamplePlanar3D246_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch698_g170687 = localSampleStochastic2D234_g170689;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch698_g170687 = localSampleStochastic3D263_g170689;
					#else
					float4 staticSwitch698_g170687 = localSampleMain276_g170689;
					#endif
					half4 Local_NormalTex776_g170687 = staticSwitch698_g170687;
					half4 Normal_Packed45_g170691 = Local_NormalTex776_g170687;
					float2 appendResult58_g170691 = (float2(( (Normal_Packed45_g170691).x * (Normal_Packed45_g170691).w ) , (Normal_Packed45_g170691).y));
					half2 Normal_Default50_g170691 = appendResult58_g170691;
					half2 Normal_ASTC41_g170691 = (Normal_Packed45_g170691).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170691 = Normal_ASTC41_g170691;
					#else
					float2 staticSwitch38_g170691 = Normal_Default50_g170691;
					#endif
					half2 Normal_NO_DTX544_g170691 = (Normal_Packed45_g170691).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170691 = Normal_NO_DTX544_g170691;
					#else
					float2 staticSwitch37_g170691 = staticSwitch38_g170691;
					#endif
					float2 temp_output_724_0_g170687 = ( (staticSwitch37_g170691*2.0 + -1.0) * _ThirdNormalValue );
					half2 Normal_Planar45_g170692 = temp_output_724_0_g170687;
					float2 break71_g170692 = Normal_Planar45_g170692;
					float3 appendResult72_g170692 = (float3(break71_g170692.x , 0.0 , break71_g170692.y));
					float2 temp_output_858_0_g170687 = (mul( ase_worldToTangent, appendResult72_g170692 )).xy;
					#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
					float2 staticSwitch727_g170687 = temp_output_858_0_g170687;
					#else
					float2 staticSwitch727_g170687 = temp_output_724_0_g170687;
					#endif
					half2 Local_NormalTS729_g170687 = staticSwitch727_g170687;
					float2 temp_output_36_0_g170697 = ( lerpResult40_g170697 + Local_NormalTS729_g170687 );
					float2 lerpResult405_g170687 = lerp( Visual_NormalTS529_g170687 , temp_output_36_0_g170697 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float2 staticSwitch418_g170687 = lerpResult405_g170687;
					#else
					float2 staticSwitch418_g170687 = Visual_NormalTS529_g170687;
					#endif
					half2 Final_NormalTS612_g170687 = staticSwitch418_g170687;
					float2 In_NormalTS3_g170695 = Final_NormalTS612_g170687;
					float3 appendResult68_g170698 = (float3(Final_NormalTS612_g170687 , 1.0));
					float3 tanNormal74_g170698 = appendResult68_g170698;
					float3 worldNormal74_g170698 = normalize( float3( dot( tanToWorld0, tanNormal74_g170698 ), dot( tanToWorld1, tanNormal74_g170698 ), dot( tanToWorld2, tanNormal74_g170698 ) ) );
					half3 Final_NormalWS956_g170687 = worldNormal74_g170698;
					float3 In_NormalWS3_g170695 = Final_NormalWS956_g170687;
					half4 Visual_Shader531_g170687 = Out_Shader4_g170694;
					float4 lerpResult1000_g170687 = lerp( Local_Masks750_g170687 , ( Visual_Shader531_g170687 * Local_Masks750_g170687 ) , _ThirdBlendShaderValue);
					float4 lerpResult998_g170687 = lerp( Visual_Shader531_g170687 , lerpResult1000_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float4 staticSwitch451_g170687 = lerpResult998_g170687;
					#else
					float4 staticSwitch451_g170687 = Visual_Shader531_g170687;
					#endif
					half4 Final_Masks613_g170687 = staticSwitch451_g170687;
					float4 In_Shader3_g170695 = Final_Masks613_g170687;
					float4 In_Emissive3_g170695 = Out_Emissive4_g170694;
					float3 temp_output_3_0_g170700 = Final_Albedo601_g170687;
					float dotResult20_g170700 = dot( temp_output_3_0_g170700 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale615_g170687 = dotResult20_g170700;
					float In_Grayscale3_g170695 = Final_Grayscale615_g170687;
					float clampResult651_g170687 = clamp( saturate( ( Final_Grayscale615_g170687 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity652_g170687 = clampResult651_g170687;
					float In_Luminosity3_g170695 = Final_Luminosity652_g170687;
					half Visual_MultiMask547_g170687 = Out_MultiMask4_g170694;
					float lerpResult477_g170687 = lerp( Visual_MultiMask547_g170687 , Local_MultiMask767_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch482_g170687 = lerpResult477_g170687;
					#else
					float staticSwitch482_g170687 = Visual_MultiMask547_g170687;
					#endif
					half Final_MultiMask572_g170687 = staticSwitch482_g170687;
					float In_MultiMask3_g170695 = Final_MultiMask572_g170687;
					half Visual_AlphaClip559_g170687 = Out_AlphaClip4_g170694;
					float temp_output_718_0_g170687 = (Local_AlbedoTex777_g170687).w;
					#ifdef TVE_ALPHA_CLIP
					float staticSwitch924_g170687 = ( temp_output_718_0_g170687 - _ThirdAlphaClipValue );
					#else
					float staticSwitch924_g170687 = temp_output_718_0_g170687;
					#endif
					half Local_AlphaClip772_g170687 = staticSwitch924_g170687;
					float lerpResult448_g170687 = lerp( Visual_AlphaClip559_g170687 , Local_AlphaClip772_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch564_g170687 = lerpResult448_g170687;
					#else
					float staticSwitch564_g170687 = Visual_AlphaClip559_g170687;
					#endif
					half Final_AlphaClip602_g170687 = staticSwitch564_g170687;
					float In_AlphaClip3_g170695 = Final_AlphaClip602_g170687;
					half Visual_AlphaFade588_g170687 = Out_AlphaFade4_g170694;
					half Local_AlphaFade773_g170687 = (lerpResult706_g170687).a;
					float lerpResult604_g170687 = lerp( Visual_AlphaFade588_g170687 , Local_AlphaFade773_g170687 , Detail_Mask412_g170687);
					#ifdef TVE_THIRD
					float staticSwitch608_g170687 = lerpResult604_g170687;
					#else
					float staticSwitch608_g170687 = Visual_AlphaFade588_g170687;
					#endif
					half Final_AlphaFade611_g170687 = staticSwitch608_g170687;
					float In_AlphaFade3_g170695 = Final_AlphaFade611_g170687;
					float3 In_Translucency3_g170695 = Out_Translucency4_g170694;
					float In_Transmission3_g170695 = Out_Transmission4_g170694;
					float In_Thickness3_g170695 = Out_Thickness4_g170694;
					float In_Diffusion3_g170695 = Out_Diffusion4_g170694;
					float In_Depth3_g170695 = Out_Depth4_g170694;
					{
					Data3_g170695.Dummy = In_Dummy3_g170695;
					Data3_g170695.Albedo = In_Albedo3_g170695;
					Data3_g170695.AlbedoRaw = In_AlbedoRaw3_g170695;
					Data3_g170695.NormalTS = In_NormalTS3_g170695;
					Data3_g170695.NormalWS = In_NormalWS3_g170695;
					Data3_g170695.Shader = In_Shader3_g170695;
					Data3_g170695.Emissive= In_Emissive3_g170695;
					Data3_g170695.MultiMask = In_MultiMask3_g170695;
					Data3_g170695.Grayscale = In_Grayscale3_g170695;
					Data3_g170695.Luminosity = In_Luminosity3_g170695;
					Data3_g170695.AlphaClip = In_AlphaClip3_g170695;
					Data3_g170695.AlphaFade = In_AlphaFade3_g170695;
					Data3_g170695.Translucency = In_Translucency3_g170695;
					Data3_g170695.Transmission = In_Transmission3_g170695;
					Data3_g170695.Thickness = In_Thickness3_g170695;
					Data3_g170695.Diffusion = In_Diffusion3_g170695;
					Data3_g170695.Depth = In_Depth3_g170695;
					}
					TVEVisualData Data4_g170789 = Data3_g170695;
					float Out_Dummy4_g170789 = 0;
					float3 Out_Albedo4_g170789 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170789 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170789 = float2( 0,0 );
					float3 Out_NormalWS4_g170789 = float3( 0,0,0 );
					float4 Out_Shader4_g170789 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170789 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170789 = 0;
					float Out_Grayscale4_g170789 = 0;
					float Out_Luminosity4_g170789 = 0;
					float Out_AlphaClip4_g170789 = 0;
					float Out_AlphaFade4_g170789 = 0;
					float3 Out_Translucency4_g170789 = float3( 0,0,0 );
					float Out_Transmission4_g170789 = 0;
					float Out_Thickness4_g170789 = 0;
					float Out_Diffusion4_g170789 = 0;
					float Out_Depth4_g170789 = 0;
					{
					Out_Dummy4_g170789 = Data4_g170789.Dummy;
					Out_Albedo4_g170789 = Data4_g170789.Albedo;
					Out_AlbedoRaw4_g170789 = Data4_g170789.AlbedoRaw;
					Out_NormalTS4_g170789 = Data4_g170789.NormalTS;
					Out_NormalWS4_g170789 = Data4_g170789.NormalWS;
					Out_Shader4_g170789 = Data4_g170789.Shader;
					Out_Emissive4_g170789= Data4_g170789.Emissive;
					Out_MultiMask4_g170789 = Data4_g170789.MultiMask;
					Out_Grayscale4_g170789 = Data4_g170789.Grayscale;
					Out_Luminosity4_g170789= Data4_g170789.Luminosity;
					Out_AlphaClip4_g170789 = Data4_g170789.AlphaClip;
					Out_AlphaFade4_g170789 = Data4_g170789.AlphaFade;
					Out_Translucency4_g170789 = Data4_g170789.Translucency;
					Out_Transmission4_g170789 = Data4_g170789.Transmission;
					Out_Thickness4_g170789 = Data4_g170789.Thickness;
					Out_Diffusion4_g170789 = Data4_g170789.Diffusion;
					Out_Depth4_g170789= Data4_g170789.Depth;
					}
					half3 Visual_Albedo127_g170788 = Out_Albedo4_g170789;
					TVEModelData Data15_g170796 = Data16_g170483;
					float Out_Dummy15_g170796 = 0;
					float3 Out_PositionWS15_g170796 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170796 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170796 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170796 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170796 = float3( 0,0,0 );
					float4 Out_VertexData15_g170796 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170796 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170796 = Data15_g170796.Dummy;
					Out_PositionWS15_g170796 = Data15_g170796.PositionWS;
					Out_PositionWO15_g170796 = Data15_g170796.PositionWO;
					Out_PivotWS15_g170796 = Data15_g170796.PivotWS;
					Out_PivotWO15_g170796 = Data15_g170796.PivotWO;
					Out_NormalWS15_g170796 = Data15_g170796.NormalWS;
					Out_ViewDirWS15_g170796 = Data15_g170796.ViewDirWS;
					Out_VertexData15_g170796 = Data15_g170796.VertexData;
					Out_BoundsData15_g170796 = Data15_g170796.BoundsData;
					}
					half4 Model_VertexData206_g170788 = Out_VertexData15_g170796;
					float4 break208_g170788 = Model_VertexData206_g170788;
					float4 break33_g170794 = _occlusion_vert_mode;
					float temp_output_30_0_g170794 = ( break208_g170788.x * break33_g170794.x );
					float temp_output_29_0_g170794 = ( break208_g170788.y * break33_g170794.y );
					float temp_output_31_0_g170794 = ( break208_g170788.z * break33_g170794.z );
					float temp_output_28_0_g170794 = ( temp_output_30_0_g170794 + temp_output_29_0_g170794 + temp_output_31_0_g170794 + ( break208_g170788.w * break33_g170794.w ) );
					float temp_output_194_0_g170788 = temp_output_28_0_g170794;
					float clampResult17_g170792 = clamp( temp_output_194_0_g170788 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170797 = _OcclusionMeshRemap.x;
					float temp_output_9_0_g170797 = ( clampResult17_g170792 - temp_output_7_0_g170797 );
					float temp_output_6_0_g170793 = saturate( ( ( temp_output_9_0_g170797 * _OcclusionMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170793 = ( temp_output_6_0_g170793 + _OcclusionMeshMode );
					#else
					float staticSwitch14_g170793 = temp_output_6_0_g170793;
					#endif
					half Occlusion_Mask82_g170788 = staticSwitch14_g170793;
					float3 lerpResult75_g170788 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170788);
					float3 lerpResult186_g170788 = lerp( Visual_Albedo127_g170788 , ( Visual_Albedo127_g170788 * lerpResult75_g170788 ) , _OcclusionIntensityValue);
					#ifdef TVE_OCCLUSION
					float3 staticSwitch171_g170788 = lerpResult186_g170788;
					#else
					float3 staticSwitch171_g170788 = Visual_Albedo127_g170788;
					#endif
					half3 Final_Albedo160_g170788 = staticSwitch171_g170788;
					float3 In_Albedo3_g170790 = Final_Albedo160_g170788;
					float3 In_AlbedoRaw3_g170790 = Final_Albedo160_g170788;
					float2 In_NormalTS3_g170790 = Out_NormalTS4_g170789;
					float3 In_NormalWS3_g170790 = Out_NormalWS4_g170789;
					float4 In_Shader3_g170790 = Out_Shader4_g170789;
					float4 In_Emissive3_g170790 = Out_Emissive4_g170789;
					float3 temp_output_3_0_g170791 = Final_Albedo160_g170788;
					float dotResult20_g170791 = dot( temp_output_3_0_g170791 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170788 = dotResult20_g170791;
					float In_Grayscale3_g170790 = Final_Grayscale164_g170788;
					float clampResult180_g170788 = clamp( saturate( ( Final_Grayscale164_g170788 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Shading181_g170788 = clampResult180_g170788;
					float In_Luminosity3_g170790 = Final_Shading181_g170788;
					float In_MultiMask3_g170790 = Out_MultiMask4_g170789;
					float In_AlphaClip3_g170790 = Out_AlphaClip4_g170789;
					float In_AlphaFade3_g170790 = Out_AlphaFade4_g170789;
					float3 In_Translucency3_g170790 = Out_Translucency4_g170789;
					float In_Transmission3_g170790 = Out_Transmission4_g170789;
					float In_Thickness3_g170790 = Out_Thickness4_g170789;
					float In_Diffusion3_g170790 = Out_Diffusion4_g170789;
					float In_Depth3_g170790 = Out_Depth4_g170789;
					{
					Data3_g170790.Dummy = In_Dummy3_g170790;
					Data3_g170790.Albedo = In_Albedo3_g170790;
					Data3_g170790.AlbedoRaw = In_AlbedoRaw3_g170790;
					Data3_g170790.NormalTS = In_NormalTS3_g170790;
					Data3_g170790.NormalWS = In_NormalWS3_g170790;
					Data3_g170790.Shader = In_Shader3_g170790;
					Data3_g170790.Emissive= In_Emissive3_g170790;
					Data3_g170790.MultiMask = In_MultiMask3_g170790;
					Data3_g170790.Grayscale = In_Grayscale3_g170790;
					Data3_g170790.Luminosity = In_Luminosity3_g170790;
					Data3_g170790.AlphaClip = In_AlphaClip3_g170790;
					Data3_g170790.AlphaFade = In_AlphaFade3_g170790;
					Data3_g170790.Translucency = In_Translucency3_g170790;
					Data3_g170790.Transmission = In_Transmission3_g170790;
					Data3_g170790.Thickness = In_Thickness3_g170790;
					Data3_g170790.Diffusion = In_Diffusion3_g170790;
					Data3_g170790.Depth = In_Depth3_g170790;
					}
					TVEVisualData Data4_g170800 = Data3_g170790;
					float Out_Dummy4_g170800 = 0;
					float3 Out_Albedo4_g170800 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170800 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170800 = float2( 0,0 );
					float3 Out_NormalWS4_g170800 = float3( 0,0,0 );
					float4 Out_Shader4_g170800 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170800 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170800 = 0;
					float Out_Grayscale4_g170800 = 0;
					float Out_Luminosity4_g170800 = 0;
					float Out_AlphaClip4_g170800 = 0;
					float Out_AlphaFade4_g170800 = 0;
					float3 Out_Translucency4_g170800 = float3( 0,0,0 );
					float Out_Transmission4_g170800 = 0;
					float Out_Thickness4_g170800 = 0;
					float Out_Diffusion4_g170800 = 0;
					float Out_Depth4_g170800 = 0;
					{
					Out_Dummy4_g170800 = Data4_g170800.Dummy;
					Out_Albedo4_g170800 = Data4_g170800.Albedo;
					Out_AlbedoRaw4_g170800 = Data4_g170800.AlbedoRaw;
					Out_NormalTS4_g170800 = Data4_g170800.NormalTS;
					Out_NormalWS4_g170800 = Data4_g170800.NormalWS;
					Out_Shader4_g170800 = Data4_g170800.Shader;
					Out_Emissive4_g170800= Data4_g170800.Emissive;
					Out_MultiMask4_g170800 = Data4_g170800.MultiMask;
					Out_Grayscale4_g170800 = Data4_g170800.Grayscale;
					Out_Luminosity4_g170800= Data4_g170800.Luminosity;
					Out_AlphaClip4_g170800 = Data4_g170800.AlphaClip;
					Out_AlphaFade4_g170800 = Data4_g170800.AlphaFade;
					Out_Translucency4_g170800 = Data4_g170800.Translucency;
					Out_Transmission4_g170800 = Data4_g170800.Transmission;
					Out_Thickness4_g170800 = Data4_g170800.Thickness;
					Out_Diffusion4_g170800 = Data4_g170800.Diffusion;
					Out_Depth4_g170800= Data4_g170800.Depth;
					}
					half3 Visual_Albedo127_g170798 = Out_Albedo4_g170800;
					TVEModelData Data15_g170806 = Data16_g170483;
					float Out_Dummy15_g170806 = 0;
					float3 Out_PositionWS15_g170806 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170806 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170806 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170806 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170806 = float3( 0,0,0 );
					float4 Out_VertexData15_g170806 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170806 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170806 = Data15_g170806.Dummy;
					Out_PositionWS15_g170806 = Data15_g170806.PositionWS;
					Out_PositionWO15_g170806 = Data15_g170806.PositionWO;
					Out_PivotWS15_g170806 = Data15_g170806.PivotWS;
					Out_PivotWO15_g170806 = Data15_g170806.PivotWO;
					Out_NormalWS15_g170806 = Data15_g170806.NormalWS;
					Out_ViewDirWS15_g170806 = Data15_g170806.ViewDirWS;
					Out_VertexData15_g170806 = Data15_g170806.VertexData;
					Out_BoundsData15_g170806 = Data15_g170806.BoundsData;
					}
					half4 Model_VertexData224_g170798 = Out_VertexData15_g170806;
					float4 break226_g170798 = Model_VertexData224_g170798;
					float4 break33_g170799 = _gradient_vert_mode;
					float temp_output_30_0_g170799 = ( break226_g170798.x * break33_g170799.x );
					float temp_output_29_0_g170799 = ( break226_g170798.y * break33_g170799.y );
					float temp_output_31_0_g170799 = ( break226_g170798.z * break33_g170799.z );
					float temp_output_28_0_g170799 = ( temp_output_30_0_g170799 + temp_output_29_0_g170799 + temp_output_31_0_g170799 + ( break226_g170798.w * break33_g170799.w ) );
					float temp_output_211_0_g170798 = temp_output_28_0_g170799;
					float clampResult17_g170804 = clamp( temp_output_211_0_g170798 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170807 = _GradientMeshRemap.x;
					float temp_output_9_0_g170807 = ( clampResult17_g170804 - temp_output_7_0_g170807 );
					float temp_output_6_0_g170805 = saturate( ( ( temp_output_9_0_g170807 * _GradientMeshRemap.z ) + 0.0001 ) );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170805 = ( temp_output_6_0_g170805 + _GradientMeshMode );
					#else
					float staticSwitch14_g170805 = temp_output_6_0_g170805;
					#endif
					half Gradient_VertMask82_g170798 = staticSwitch14_g170805;
					half Gradient_Mask200_g170798 = Gradient_VertMask82_g170798;
					float3 lerpResult75_g170798 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170798);
					float temp_output_162_11_g170798 = Out_MultiMask4_g170800;
					half Visual_MultiMask196_g170798 = temp_output_162_11_g170798;
					float lerpResult190_g170798 = lerp( 1.0 , Visual_MultiMask196_g170798 , _GradientMultiValue);
					half Gradient_MultiMask194_g170798 = lerpResult190_g170798;
					float3 lerpResult186_g170798 = lerp( Visual_Albedo127_g170798 , ( Visual_Albedo127_g170798 * lerpResult75_g170798 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170798 ));
					#ifdef TVE_GRADIENT
					float3 staticSwitch171_g170798 = lerpResult186_g170798;
					#else
					float3 staticSwitch171_g170798 = Visual_Albedo127_g170798;
					#endif
					half3 Final_Albedo160_g170798 = staticSwitch171_g170798;
					float3 In_Albedo3_g170801 = Final_Albedo160_g170798;
					float3 In_AlbedoRaw3_g170801 = Final_Albedo160_g170798;
					float2 In_NormalTS3_g170801 = Out_NormalTS4_g170800;
					float3 In_NormalWS3_g170801 = Out_NormalWS4_g170800;
					float4 In_Shader3_g170801 = Out_Shader4_g170800;
					float4 In_Emissive3_g170801 = Out_Emissive4_g170800;
					float3 temp_output_3_0_g170802 = Final_Albedo160_g170798;
					float dotResult20_g170802 = dot( temp_output_3_0_g170802 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170798 = dotResult20_g170802;
					float In_Grayscale3_g170801 = Final_Grayscale164_g170798;
					float clampResult180_g170798 = clamp( saturate( ( Final_Grayscale164_g170798 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170798 = clampResult180_g170798;
					float In_Luminosity3_g170801 = Final_Luminosity181_g170798;
					float In_MultiMask3_g170801 = temp_output_162_11_g170798;
					float In_AlphaClip3_g170801 = Out_AlphaClip4_g170800;
					float In_AlphaFade3_g170801 = Out_AlphaFade4_g170800;
					float3 In_Translucency3_g170801 = Out_Translucency4_g170800;
					float In_Transmission3_g170801 = Out_Transmission4_g170800;
					float In_Thickness3_g170801 = Out_Thickness4_g170800;
					float In_Diffusion3_g170801 = Out_Diffusion4_g170800;
					float In_Depth3_g170801 = Out_Depth4_g170800;
					{
					Data3_g170801.Dummy = In_Dummy3_g170801;
					Data3_g170801.Albedo = In_Albedo3_g170801;
					Data3_g170801.AlbedoRaw = In_AlbedoRaw3_g170801;
					Data3_g170801.NormalTS = In_NormalTS3_g170801;
					Data3_g170801.NormalWS = In_NormalWS3_g170801;
					Data3_g170801.Shader = In_Shader3_g170801;
					Data3_g170801.Emissive= In_Emissive3_g170801;
					Data3_g170801.MultiMask = In_MultiMask3_g170801;
					Data3_g170801.Grayscale = In_Grayscale3_g170801;
					Data3_g170801.Luminosity = In_Luminosity3_g170801;
					Data3_g170801.AlphaClip = In_AlphaClip3_g170801;
					Data3_g170801.AlphaFade = In_AlphaFade3_g170801;
					Data3_g170801.Translucency = In_Translucency3_g170801;
					Data3_g170801.Transmission = In_Transmission3_g170801;
					Data3_g170801.Thickness = In_Thickness3_g170801;
					Data3_g170801.Diffusion = In_Diffusion3_g170801;
					Data3_g170801.Depth = In_Depth3_g170801;
					}
					TVEVisualData Data4_g170809 = Data3_g170801;
					float Out_Dummy4_g170809 = 0;
					float3 Out_Albedo4_g170809 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170809 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170809 = float2( 0,0 );
					float3 Out_NormalWS4_g170809 = float3( 0,0,0 );
					float4 Out_Shader4_g170809 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170809 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170809 = 0;
					float Out_Grayscale4_g170809 = 0;
					float Out_Luminosity4_g170809 = 0;
					float Out_AlphaClip4_g170809 = 0;
					float Out_AlphaFade4_g170809 = 0;
					float3 Out_Translucency4_g170809 = float3( 0,0,0 );
					float Out_Transmission4_g170809 = 0;
					float Out_Thickness4_g170809 = 0;
					float Out_Diffusion4_g170809 = 0;
					float Out_Depth4_g170809 = 0;
					{
					Out_Dummy4_g170809 = Data4_g170809.Dummy;
					Out_Albedo4_g170809 = Data4_g170809.Albedo;
					Out_AlbedoRaw4_g170809 = Data4_g170809.AlbedoRaw;
					Out_NormalTS4_g170809 = Data4_g170809.NormalTS;
					Out_NormalWS4_g170809 = Data4_g170809.NormalWS;
					Out_Shader4_g170809 = Data4_g170809.Shader;
					Out_Emissive4_g170809= Data4_g170809.Emissive;
					Out_MultiMask4_g170809 = Data4_g170809.MultiMask;
					Out_Grayscale4_g170809 = Data4_g170809.Grayscale;
					Out_Luminosity4_g170809= Data4_g170809.Luminosity;
					Out_AlphaClip4_g170809 = Data4_g170809.AlphaClip;
					Out_AlphaFade4_g170809 = Data4_g170809.AlphaFade;
					Out_Translucency4_g170809 = Data4_g170809.Translucency;
					Out_Transmission4_g170809 = Data4_g170809.Transmission;
					Out_Thickness4_g170809 = Data4_g170809.Thickness;
					Out_Diffusion4_g170809 = Data4_g170809.Diffusion;
					Out_Depth4_g170809= Data4_g170809.Depth;
					}
					half3 Visual_Albedo127_g170808 = Out_Albedo4_g170809;
					TVEModelData Data15_g170811 = Data16_g170483;
					float Out_Dummy15_g170811 = 0;
					float3 Out_PositionWS15_g170811 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170811 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170811 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170811 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170811 = float3( 0,0,0 );
					float4 Out_VertexData15_g170811 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170811 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170811 = Data15_g170811.Dummy;
					Out_PositionWS15_g170811 = Data15_g170811.PositionWS;
					Out_PositionWO15_g170811 = Data15_g170811.PositionWO;
					Out_PivotWS15_g170811 = Data15_g170811.PivotWS;
					Out_PivotWO15_g170811 = Data15_g170811.PivotWO;
					Out_NormalWS15_g170811 = Data15_g170811.NormalWS;
					Out_ViewDirWS15_g170811 = Data15_g170811.ViewDirWS;
					Out_VertexData15_g170811 = Data15_g170811.VertexData;
					Out_BoundsData15_g170811 = Data15_g170811.BoundsData;
					}
					half3 Model_PositionWO224_g170808 = Out_PositionWO15_g170811;
					half3 Model_PivotWO239_g170808 = Out_PivotWO15_g170811;
					float3 lerpResult242_g170808 = lerp( Model_PositionWO224_g170808 , Model_PivotWO239_g170808 , _VariationNoisePivotValue);
					float clampResult17_g170813 = clamp( SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( lerpResult242_g170808 * ( _VariationNoiseTillingValue * 0.01 ) ) ).r , 0.0001 , 0.9999 );
					float temp_output_7_0_g170814 = _VariationNoiseRemap.x;
					float temp_output_9_0_g170814 = ( clampResult17_g170813 - temp_output_7_0_g170814 );
					float temp_output_238_0_g170808 = saturate( ( ( temp_output_9_0_g170814 * _VariationNoiseRemap.z ) + 0.0001 ) );
					half Variaton_NoiseMask82_g170808 = temp_output_238_0_g170808;
					half Variaton_Mask200_g170808 = Variaton_NoiseMask82_g170808;
					float3 lerpResult75_g170808 = lerp( (_VariationColorTwo).rgb , (_VariationColorOne).rgb , Variaton_Mask200_g170808);
					float temp_output_162_11_g170808 = Out_MultiMask4_g170809;
					half Visual_MultiMask196_g170808 = temp_output_162_11_g170808;
					float lerpResult190_g170808 = lerp( 1.0 , Visual_MultiMask196_g170808 , _VariationMultiValue);
					half Variaton_MultiMask194_g170808 = lerpResult190_g170808;
					float3 lerpResult186_g170808 = lerp( Visual_Albedo127_g170808 , ( Visual_Albedo127_g170808 * lerpResult75_g170808 ) , ( _VariationIntensityValue * Variaton_MultiMask194_g170808 ));
					#ifdef TVE_VARIATION
					float3 staticSwitch171_g170808 = lerpResult186_g170808;
					#else
					float3 staticSwitch171_g170808 = Visual_Albedo127_g170808;
					#endif
					half3 Final_Albedo160_g170808 = staticSwitch171_g170808;
					float3 In_Albedo3_g170810 = Final_Albedo160_g170808;
					float3 In_AlbedoRaw3_g170810 = Final_Albedo160_g170808;
					float2 In_NormalTS3_g170810 = Out_NormalTS4_g170809;
					float3 In_NormalWS3_g170810 = Out_NormalWS4_g170809;
					float4 In_Shader3_g170810 = Out_Shader4_g170809;
					float4 In_Emissive3_g170810 = Out_Emissive4_g170809;
					float3 temp_output_3_0_g170812 = Final_Albedo160_g170808;
					float dotResult20_g170812 = dot( temp_output_3_0_g170812 , float3( 0.2126, 0.7152, 0.0722 ) );
					half Final_Grayscale164_g170808 = dotResult20_g170812;
					float In_Grayscale3_g170810 = Final_Grayscale164_g170808;
					float clampResult180_g170808 = clamp( saturate( ( Final_Grayscale164_g170808 * 5.0 ) ) , 0.2 , 1.0 );
					half Final_Luminosity181_g170808 = clampResult180_g170808;
					float In_Luminosity3_g170810 = Final_Luminosity181_g170808;
					float In_MultiMask3_g170810 = temp_output_162_11_g170808;
					float In_AlphaClip3_g170810 = Out_AlphaClip4_g170809;
					float In_AlphaFade3_g170810 = Out_AlphaFade4_g170809;
					float3 In_Translucency3_g170810 = Out_Translucency4_g170809;
					float In_Transmission3_g170810 = Out_Transmission4_g170809;
					float In_Thickness3_g170810 = Out_Thickness4_g170809;
					float In_Diffusion3_g170810 = Out_Diffusion4_g170809;
					float In_Depth3_g170810 = Out_Depth4_g170809;
					{
					Data3_g170810.Dummy = In_Dummy3_g170810;
					Data3_g170810.Albedo = In_Albedo3_g170810;
					Data3_g170810.AlbedoRaw = In_AlbedoRaw3_g170810;
					Data3_g170810.NormalTS = In_NormalTS3_g170810;
					Data3_g170810.NormalWS = In_NormalWS3_g170810;
					Data3_g170810.Shader = In_Shader3_g170810;
					Data3_g170810.Emissive= In_Emissive3_g170810;
					Data3_g170810.MultiMask = In_MultiMask3_g170810;
					Data3_g170810.Grayscale = In_Grayscale3_g170810;
					Data3_g170810.Luminosity = In_Luminosity3_g170810;
					Data3_g170810.AlphaClip = In_AlphaClip3_g170810;
					Data3_g170810.AlphaFade = In_AlphaFade3_g170810;
					Data3_g170810.Translucency = In_Translucency3_g170810;
					Data3_g170810.Transmission = In_Transmission3_g170810;
					Data3_g170810.Thickness = In_Thickness3_g170810;
					Data3_g170810.Diffusion = In_Diffusion3_g170810;
					Data3_g170810.Depth = In_Depth3_g170810;
					}
					TVEVisualData Data4_g170824 = Data3_g170810;
					float Out_Dummy4_g170824 = 0;
					float3 Out_Albedo4_g170824 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170824 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170824 = float2( 0,0 );
					float3 Out_NormalWS4_g170824 = float3( 0,0,0 );
					float4 Out_Shader4_g170824 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170824 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170824 = 0;
					float Out_Grayscale4_g170824 = 0;
					float Out_Luminosity4_g170824 = 0;
					float Out_AlphaClip4_g170824 = 0;
					float Out_AlphaFade4_g170824 = 0;
					float3 Out_Translucency4_g170824 = float3( 0,0,0 );
					float Out_Transmission4_g170824 = 0;
					float Out_Thickness4_g170824 = 0;
					float Out_Diffusion4_g170824 = 0;
					float Out_Depth4_g170824 = 0;
					{
					Out_Dummy4_g170824 = Data4_g170824.Dummy;
					Out_Albedo4_g170824 = Data4_g170824.Albedo;
					Out_AlbedoRaw4_g170824 = Data4_g170824.AlbedoRaw;
					Out_NormalTS4_g170824 = Data4_g170824.NormalTS;
					Out_NormalWS4_g170824 = Data4_g170824.NormalWS;
					Out_Shader4_g170824 = Data4_g170824.Shader;
					Out_Emissive4_g170824= Data4_g170824.Emissive;
					Out_MultiMask4_g170824 = Data4_g170824.MultiMask;
					Out_Grayscale4_g170824 = Data4_g170824.Grayscale;
					Out_Luminosity4_g170824= Data4_g170824.Luminosity;
					Out_AlphaClip4_g170824 = Data4_g170824.AlphaClip;
					Out_AlphaFade4_g170824 = Data4_g170824.AlphaFade;
					Out_Translucency4_g170824 = Data4_g170824.Translucency;
					Out_Transmission4_g170824 = Data4_g170824.Transmission;
					Out_Thickness4_g170824 = Data4_g170824.Thickness;
					Out_Diffusion4_g170824 = Data4_g170824.Diffusion;
					Out_Depth4_g170824= Data4_g170824.Depth;
					}
					half3 Visual_Albedo139_g170820 = Out_Albedo4_g170824;
					float temp_output_200_12_g170820 = Out_Grayscale4_g170824;
					half Visual_Grayscale150_g170820 = temp_output_200_12_g170820;
					float3 temp_cast_33 = (Visual_Grayscale150_g170820).xxx;
					TVEGlobalData Data15_g170821 = Data204_g170496;
					float Out_Dummy15_g170821 = 0;
					float4 Out_CoatDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170821 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170821 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170821 = Data15_g170821.Dummy;
					Out_CoatDataRT15_g170821 = Data15_g170821.CoatDataRT;
					Out_PaintDataRT15_g170821 = Data15_g170821.PaintDataRT;
					Out_GlowDataRT15_g170821= Data15_g170821.GlowDataRT;
					Out_AtmoDataRT15_g170821= Data15_g170821.AtmoDataRT;
					Out_FadeDataRT15_g170821= Data15_g170821.FadeDataRT;
					Out_FormDataRT15_g170821 = Data15_g170821.FormDataRT;
					Out_FlowDataRT15_g170821 = Data15_g170821.FlowDataRT;
					}
					half4 Global_PaintParams209_g170820 = Out_PaintDataRT15_g170821;
					float4 temp_output_6_0_g170838 = Global_PaintParams209_g170820;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170838 = ( temp_output_6_0_g170838 + _TintingElementMode );
					#else
					float4 staticSwitch14_g170838 = temp_output_6_0_g170838;
					#endif
					#ifdef TVE_TINTING_ELEMENT
					float4 staticSwitch283_g170820 = staticSwitch14_g170838;
					#else
					float4 staticSwitch283_g170820 = TVE_PaintParams;
					#endif
					float4 lerpResult412_g170820 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g170820 , ( _TintingGlobalValue * TVE_IsEnabled ));
					half Tinting_GlobalValue285_g170820 = saturate( (lerpResult412_g170820).w );
					float3 lerpResult368_g170820 = lerp( Visual_Albedo139_g170820 , temp_cast_33 , ( Tinting_GlobalValue285_g170820 * _TintingGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170844 = 2.0;
					#else
					float staticSwitch1_g170844 = 4.594794;
					#endif
					half3 Tinting_GlobalColor290_g170820 = (lerpResult412_g170820).xyz;
					float temp_output_200_11_g170820 = Out_MultiMask4_g170824;
					half Visual_MultiMask181_g170820 = temp_output_200_11_g170820;
					float lerpResult147_g170820 = lerp( 1.0 , Visual_MultiMask181_g170820 , _TintingMultiValue);
					half Tinting_MutiMask121_g170820 = lerpResult147_g170820;
					half Tinting_TexMask385_g170820 = 1.0;
					float temp_output_200_15_g170820 = Out_Luminosity4_g170824;
					half Visual_Luminosity257_g170820 = temp_output_200_15_g170820;
					float clampResult17_g170831 = clamp( Visual_Luminosity257_g170820 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170835 = _TintingLumaRemap.x;
					float temp_output_9_0_g170835 = ( clampResult17_g170831 - temp_output_7_0_g170835 );
					float lerpResult228_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170835 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
					half Tinting_LumaMask153_g170820 = lerpResult228_g170820;
					TVEModelData Data15_g170825 = Data16_g170483;
					float Out_Dummy15_g170825 = 0;
					float3 Out_PositionWS15_g170825 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170825 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170825 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170825 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170825 = float3( 0,0,0 );
					float4 Out_VertexData15_g170825 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170825 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170825 = Data15_g170825.Dummy;
					Out_PositionWS15_g170825 = Data15_g170825.PositionWS;
					Out_PositionWO15_g170825 = Data15_g170825.PositionWO;
					Out_PivotWS15_g170825 = Data15_g170825.PivotWS;
					Out_PivotWO15_g170825 = Data15_g170825.PivotWO;
					Out_NormalWS15_g170825 = Data15_g170825.NormalWS;
					Out_ViewDirWS15_g170825 = Data15_g170825.ViewDirWS;
					Out_VertexData15_g170825 = Data15_g170825.VertexData;
					Out_BoundsData15_g170825 = Data15_g170825.BoundsData;
					}
					half4 Model_VertexMasks307_g170820 = Out_VertexData15_g170825;
					float4 break311_g170820 = Model_VertexMasks307_g170820;
					float4 break33_g170828 = _tinting_vert_mode;
					float temp_output_30_0_g170828 = ( break311_g170820.x * break33_g170828.x );
					float temp_output_29_0_g170828 = ( break311_g170820.y * break33_g170828.y );
					float temp_output_31_0_g170828 = ( break311_g170820.z * break33_g170828.z );
					float temp_output_28_0_g170828 = ( temp_output_30_0_g170828 + temp_output_29_0_g170828 + temp_output_31_0_g170828 + ( break311_g170820.w * break33_g170828.w ) );
					float clampResult17_g170830 = clamp( temp_output_28_0_g170828 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170836 = _TintingMeshRemap.x;
					float temp_output_9_0_g170836 = ( clampResult17_g170830 - temp_output_7_0_g170836 );
					float lerpResult370_g170820 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170836 * _TintingMeshRemap.z ) + 0.0001 ) ) , _TintingMeshValue);
					float temp_output_6_0_g170832 = lerpResult370_g170820;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170832 = ( temp_output_6_0_g170832 + _TintingMeshMode );
					#else
					float staticSwitch14_g170832 = temp_output_6_0_g170832;
					#endif
					half Tinting_VertMask309_g170820 = staticSwitch14_g170832;
					half Tinting_NoiseMask213_g170820 = 1.0;
					half Custom_Mask345_g170820 = 1.0;
					half Tinting_CoreMasks433_g170820 = ( Tinting_MutiMask121_g170820 * Tinting_TexMask385_g170820 * Tinting_LumaMask153_g170820 * Tinting_VertMask309_g170820 * Tinting_NoiseMask213_g170820 * Custom_Mask345_g170820 );
					float temp_output_7_0_g170842 = _TintingBlendRemap.x;
					float temp_output_9_0_g170842 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g170820 * Tinting_GlobalValue285_g170820 ) - temp_output_7_0_g170842 );
					half Tinting_Mask242_g170820 = ( saturate( ( ( temp_output_9_0_g170842 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
					float3 lerpResult90_g170820 = lerp( Visual_Albedo139_g170820 , ( lerpResult368_g170820 * staticSwitch1_g170844 * Tinting_GlobalColor290_g170820 * (_TintingColor).rgb ) , Tinting_Mask242_g170820);
					#ifdef TVE_TINTING
					float3 staticSwitch286_g170820 = lerpResult90_g170820;
					#else
					float3 staticSwitch286_g170820 = Visual_Albedo139_g170820;
					#endif
					half3 Final_Albedo97_g170820 = staticSwitch286_g170820;
					float3 In_Albedo3_g170840 = Final_Albedo97_g170820;
					float3 In_AlbedoRaw3_g170840 = Out_AlbedoRaw4_g170824;
					float2 In_NormalTS3_g170840 = Out_NormalTS4_g170824;
					float3 In_NormalWS3_g170840 = Out_NormalWS4_g170824;
					float4 In_Shader3_g170840 = Out_Shader4_g170824;
					float4 In_Emissive3_g170840 = Out_Emissive4_g170824;
					float In_Grayscale3_g170840 = temp_output_200_12_g170820;
					float In_Luminosity3_g170840 = temp_output_200_15_g170820;
					float In_MultiMask3_g170840 = temp_output_200_11_g170820;
					float In_AlphaClip3_g170840 = Out_AlphaClip4_g170824;
					float In_AlphaFade3_g170840 = Out_AlphaFade4_g170824;
					float3 In_Translucency3_g170840 = Out_Translucency4_g170824;
					float In_Transmission3_g170840 = Out_Transmission4_g170824;
					float In_Thickness3_g170840 = Out_Thickness4_g170824;
					float In_Diffusion3_g170840 = Out_Diffusion4_g170824;
					float In_Depth3_g170840 = Out_Depth4_g170824;
					{
					Data3_g170840.Dummy = In_Dummy3_g170840;
					Data3_g170840.Albedo = In_Albedo3_g170840;
					Data3_g170840.AlbedoRaw = In_AlbedoRaw3_g170840;
					Data3_g170840.NormalTS = In_NormalTS3_g170840;
					Data3_g170840.NormalWS = In_NormalWS3_g170840;
					Data3_g170840.Shader = In_Shader3_g170840;
					Data3_g170840.Emissive= In_Emissive3_g170840;
					Data3_g170840.MultiMask = In_MultiMask3_g170840;
					Data3_g170840.Grayscale = In_Grayscale3_g170840;
					Data3_g170840.Luminosity = In_Luminosity3_g170840;
					Data3_g170840.AlphaClip = In_AlphaClip3_g170840;
					Data3_g170840.AlphaFade = In_AlphaFade3_g170840;
					Data3_g170840.Translucency = In_Translucency3_g170840;
					Data3_g170840.Transmission = In_Transmission3_g170840;
					Data3_g170840.Thickness = In_Thickness3_g170840;
					Data3_g170840.Diffusion = In_Diffusion3_g170840;
					Data3_g170840.Depth = In_Depth3_g170840;
					}
					TVEVisualData Data4_g170847 = Data3_g170840;
					float Out_Dummy4_g170847 = 0;
					float3 Out_Albedo4_g170847 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170847 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170847 = float2( 0,0 );
					float3 Out_NormalWS4_g170847 = float3( 0,0,0 );
					float4 Out_Shader4_g170847 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170847 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170847 = 0;
					float Out_Grayscale4_g170847 = 0;
					float Out_Luminosity4_g170847 = 0;
					float Out_AlphaClip4_g170847 = 0;
					float Out_AlphaFade4_g170847 = 0;
					float3 Out_Translucency4_g170847 = float3( 0,0,0 );
					float Out_Transmission4_g170847 = 0;
					float Out_Thickness4_g170847 = 0;
					float Out_Diffusion4_g170847 = 0;
					float Out_Depth4_g170847 = 0;
					{
					Out_Dummy4_g170847 = Data4_g170847.Dummy;
					Out_Albedo4_g170847 = Data4_g170847.Albedo;
					Out_AlbedoRaw4_g170847 = Data4_g170847.AlbedoRaw;
					Out_NormalTS4_g170847 = Data4_g170847.NormalTS;
					Out_NormalWS4_g170847 = Data4_g170847.NormalWS;
					Out_Shader4_g170847 = Data4_g170847.Shader;
					Out_Emissive4_g170847= Data4_g170847.Emissive;
					Out_MultiMask4_g170847 = Data4_g170847.MultiMask;
					Out_Grayscale4_g170847 = Data4_g170847.Grayscale;
					Out_Luminosity4_g170847= Data4_g170847.Luminosity;
					Out_AlphaClip4_g170847 = Data4_g170847.AlphaClip;
					Out_AlphaFade4_g170847 = Data4_g170847.AlphaFade;
					Out_Translucency4_g170847 = Data4_g170847.Translucency;
					Out_Transmission4_g170847 = Data4_g170847.Transmission;
					Out_Thickness4_g170847 = Data4_g170847.Thickness;
					Out_Diffusion4_g170847 = Data4_g170847.Diffusion;
					Out_Depth4_g170847= Data4_g170847.Depth;
					}
					half3 Visual_Albedo292_g170845 = Out_Albedo4_g170847;
					float temp_output_280_12_g170845 = Out_Grayscale4_g170847;
					half Visual_Grayscale308_g170845 = temp_output_280_12_g170845;
					float3 temp_cast_34 = (Visual_Grayscale308_g170845).xxx;
					TVEGlobalData Data15_g170846 = Data204_g170496;
					float Out_Dummy15_g170846 = 0;
					float4 Out_CoatDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170846 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170846 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170846 = Data15_g170846.Dummy;
					Out_CoatDataRT15_g170846 = Data15_g170846.CoatDataRT;
					Out_PaintDataRT15_g170846 = Data15_g170846.PaintDataRT;
					Out_GlowDataRT15_g170846= Data15_g170846.GlowDataRT;
					Out_AtmoDataRT15_g170846= Data15_g170846.AtmoDataRT;
					Out_FadeDataRT15_g170846= Data15_g170846.FadeDataRT;
					Out_FormDataRT15_g170846 = Data15_g170846.FormDataRT;
					Out_FlowDataRT15_g170846 = Data15_g170846.FlowDataRT;
					}
					half4 Global_AtmoParams314_g170845 = Out_AtmoDataRT15_g170846;
					float temp_output_6_0_g170864 = (Global_AtmoParams314_g170845).x;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170864 = ( temp_output_6_0_g170864 + _DrynessElementMode );
					#else
					float staticSwitch14_g170864 = temp_output_6_0_g170864;
					#endif
					#ifdef TVE_DRYNESS_ELEMENT
					float staticSwitch351_g170845 = staticSwitch14_g170864;
					#else
					float staticSwitch351_g170845 = TVE_AtmoParams.x;
					#endif
					float lerpResult505_g170845 = lerp( 1.0 , ( staticSwitch351_g170845 * TVE_IsEnabled ) , _DrynessGlobalValue);
					half Dryness_GlobalValue352_g170845 = lerpResult505_g170845;
					float3 lerpResult485_g170845 = lerp( Visual_Albedo292_g170845 , temp_cast_34 , ( Dryness_GlobalValue352_g170845 * _DrynessGrayValue ));
					#ifdef UNITY_COLORSPACE_GAMMA
					float staticSwitch1_g170868 = 2.0;
					#else
					float staticSwitch1_g170868 = 4.594794;
					#endif
					half Dryness_TexMask478_g170845 = 1.0;
					float temp_output_280_11_g170845 = Out_MultiMask4_g170847;
					half Visual_MultiMask310_g170845 = temp_output_280_11_g170845;
					float lerpResult283_g170845 = lerp( 1.0 , Visual_MultiMask310_g170845 , _DrynessMultiValue);
					half Dryness_MultiMask302_g170845 = lerpResult283_g170845;
					float temp_output_280_15_g170845 = Out_Luminosity4_g170847;
					half Visual_Luminosity309_g170845 = temp_output_280_15_g170845;
					float clampResult17_g170857 = clamp( Visual_Luminosity309_g170845 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170861 = _DrynessLumaRemap.x;
					float temp_output_9_0_g170861 = ( clampResult17_g170857 - temp_output_7_0_g170861 );
					float lerpResult295_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170861 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
					half Dryness_LumaMask301_g170845 = lerpResult295_g170845;
					TVEModelData Data15_g170851 = Data16_g170483;
					float Out_Dummy15_g170851 = 0;
					float3 Out_PositionWS15_g170851 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170851 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170851 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170851 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170851 = float3( 0,0,0 );
					float4 Out_VertexData15_g170851 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170851 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170851 = Data15_g170851.Dummy;
					Out_PositionWS15_g170851 = Data15_g170851.PositionWS;
					Out_PositionWO15_g170851 = Data15_g170851.PositionWO;
					Out_PivotWS15_g170851 = Data15_g170851.PivotWS;
					Out_PivotWO15_g170851 = Data15_g170851.PivotWO;
					Out_NormalWS15_g170851 = Data15_g170851.NormalWS;
					Out_ViewDirWS15_g170851 = Data15_g170851.ViewDirWS;
					Out_VertexData15_g170851 = Data15_g170851.VertexData;
					Out_BoundsData15_g170851 = Data15_g170851.BoundsData;
					}
					half4 Model_VertexMasks386_g170845 = Out_VertexData15_g170851;
					float4 break375_g170845 = Model_VertexMasks386_g170845;
					float4 break33_g170854 = _dryness_vert_mode;
					float temp_output_30_0_g170854 = ( break375_g170845.x * break33_g170854.x );
					float temp_output_29_0_g170854 = ( break375_g170845.y * break33_g170854.y );
					float temp_output_31_0_g170854 = ( break375_g170845.z * break33_g170854.z );
					float temp_output_28_0_g170854 = ( temp_output_30_0_g170854 + temp_output_29_0_g170854 + temp_output_31_0_g170854 + ( break375_g170845.w * break33_g170854.w ) );
					float clampResult17_g170855 = clamp( temp_output_28_0_g170854 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170862 = _DrynessMeshRemap.x;
					float temp_output_9_0_g170862 = ( clampResult17_g170855 - temp_output_7_0_g170862 );
					float lerpResult452_g170845 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170862 * _DrynessMeshRemap.z ) + 0.0001 ) ) , _DrynessMeshValue);
					float temp_output_6_0_g170858 = lerpResult452_g170845;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170858 = ( temp_output_6_0_g170858 + _DrynessMeshMode );
					#else
					float staticSwitch14_g170858 = temp_output_6_0_g170858;
					#endif
					half Dryness_VertMask378_g170845 = staticSwitch14_g170858;
					half Dryness_MaskNoise291_g170845 = 1.0;
					half Custom_Mask411_g170845 = 1.0;
					float temp_output_7_0_g170866 = _DrynessBlendRemap.x;
					float temp_output_9_0_g170866 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g170845 * Dryness_MultiMask302_g170845 * Dryness_LumaMask301_g170845 * Dryness_VertMask378_g170845 * Dryness_MaskNoise291_g170845 * Dryness_GlobalValue352_g170845 * Custom_Mask411_g170845 ) - temp_output_7_0_g170866 );
					half Dryness_Mask329_g170845 = saturate( ( ( temp_output_9_0_g170866 * _DrynessBlendRemap.z ) + 0.0001 ) );
					float3 lerpResult336_g170845 = lerp( Visual_Albedo292_g170845 , ( lerpResult485_g170845 * staticSwitch1_g170868 * (_DrynessColor).rgb ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float3 staticSwitch356_g170845 = lerpResult336_g170845;
					#else
					float3 staticSwitch356_g170845 = Visual_Albedo292_g170845;
					#endif
					half3 Final_Albedo331_g170845 = staticSwitch356_g170845;
					float3 In_Albedo3_g170848 = Final_Albedo331_g170845;
					float3 In_AlbedoRaw3_g170848 = Out_AlbedoRaw4_g170847;
					float2 In_NormalTS3_g170848 = Out_NormalTS4_g170847;
					float3 In_NormalWS3_g170848 = Out_NormalWS4_g170847;
					half4 Visual_Shader415_g170845 = Out_Shader4_g170847;
					float4 break438_g170845 = Visual_Shader415_g170845;
					float4 appendResult439_g170845 = (float4(break438_g170845.x , break438_g170845.y , break438_g170845.z , ( break438_g170845.w * _DrynessSmoothnessValue )));
					float4 lerpResult427_g170845 = lerp( Visual_Shader415_g170845 , appendResult439_g170845 , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float4 staticSwitch426_g170845 = lerpResult427_g170845;
					#else
					float4 staticSwitch426_g170845 = Visual_Shader415_g170845;
					#endif
					half4 Final_Shader433_g170845 = staticSwitch426_g170845;
					float4 In_Shader3_g170848 = Final_Shader433_g170845;
					float4 In_Emissive3_g170848 = Out_Emissive4_g170847;
					float In_Grayscale3_g170848 = temp_output_280_12_g170845;
					float In_Luminosity3_g170848 = temp_output_280_15_g170845;
					float In_MultiMask3_g170848 = temp_output_280_11_g170845;
					float In_AlphaClip3_g170848 = Out_AlphaClip4_g170847;
					float In_AlphaFade3_g170848 = Out_AlphaFade4_g170847;
					float3 In_Translucency3_g170848 = Out_Translucency4_g170847;
					half Visual_Transmission416_g170845 = Out_Transmission4_g170847;
					float lerpResult421_g170845 = lerp( Visual_Transmission416_g170845 , ( Visual_Transmission416_g170845 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g170845);
					#ifdef TVE_DRYNESS
					float staticSwitch418_g170845 = lerpResult421_g170845;
					#else
					float staticSwitch418_g170845 = Visual_Transmission416_g170845;
					#endif
					half Final_Transmission425_g170845 = staticSwitch418_g170845;
					float In_Transmission3_g170848 = Final_Transmission425_g170845;
					float In_Thickness3_g170848 = Out_Thickness4_g170847;
					float In_Diffusion3_g170848 = Out_Diffusion4_g170847;
					float In_Depth3_g170848 = Out_Depth4_g170847;
					{
					Data3_g170848.Dummy = In_Dummy3_g170848;
					Data3_g170848.Albedo = In_Albedo3_g170848;
					Data3_g170848.AlbedoRaw = In_AlbedoRaw3_g170848;
					Data3_g170848.NormalTS = In_NormalTS3_g170848;
					Data3_g170848.NormalWS = In_NormalWS3_g170848;
					Data3_g170848.Shader = In_Shader3_g170848;
					Data3_g170848.Emissive= In_Emissive3_g170848;
					Data3_g170848.MultiMask = In_MultiMask3_g170848;
					Data3_g170848.Grayscale = In_Grayscale3_g170848;
					Data3_g170848.Luminosity = In_Luminosity3_g170848;
					Data3_g170848.AlphaClip = In_AlphaClip3_g170848;
					Data3_g170848.AlphaFade = In_AlphaFade3_g170848;
					Data3_g170848.Translucency = In_Translucency3_g170848;
					Data3_g170848.Transmission = In_Transmission3_g170848;
					Data3_g170848.Thickness = In_Thickness3_g170848;
					Data3_g170848.Diffusion = In_Diffusion3_g170848;
					Data3_g170848.Depth = In_Depth3_g170848;
					}
					TVEVisualData Data4_g170870 = Data3_g170848;
					float Out_Dummy4_g170870 = 0;
					float3 Out_Albedo4_g170870 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170870 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170870 = float2( 0,0 );
					float3 Out_NormalWS4_g170870 = float3( 0,0,0 );
					float4 Out_Shader4_g170870 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170870 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170870 = 0;
					float Out_Grayscale4_g170870 = 0;
					float Out_Luminosity4_g170870 = 0;
					float Out_AlphaClip4_g170870 = 0;
					float Out_AlphaFade4_g170870 = 0;
					float3 Out_Translucency4_g170870 = float3( 0,0,0 );
					float Out_Transmission4_g170870 = 0;
					float Out_Thickness4_g170870 = 0;
					float Out_Diffusion4_g170870 = 0;
					float Out_Depth4_g170870 = 0;
					{
					Out_Dummy4_g170870 = Data4_g170870.Dummy;
					Out_Albedo4_g170870 = Data4_g170870.Albedo;
					Out_AlbedoRaw4_g170870 = Data4_g170870.AlbedoRaw;
					Out_NormalTS4_g170870 = Data4_g170870.NormalTS;
					Out_NormalWS4_g170870 = Data4_g170870.NormalWS;
					Out_Shader4_g170870 = Data4_g170870.Shader;
					Out_Emissive4_g170870= Data4_g170870.Emissive;
					Out_MultiMask4_g170870 = Data4_g170870.MultiMask;
					Out_Grayscale4_g170870 = Data4_g170870.Grayscale;
					Out_Luminosity4_g170870= Data4_g170870.Luminosity;
					Out_AlphaClip4_g170870 = Data4_g170870.AlphaClip;
					Out_AlphaFade4_g170870 = Data4_g170870.AlphaFade;
					Out_Translucency4_g170870 = Data4_g170870.Translucency;
					Out_Transmission4_g170870 = Data4_g170870.Transmission;
					Out_Thickness4_g170870 = Data4_g170870.Thickness;
					Out_Diffusion4_g170870 = Data4_g170870.Diffusion;
					Out_Depth4_g170870= Data4_g170870.Depth;
					}
					half3 Visual_Albedo127_g170869 = Out_Albedo4_g170870;
					float4 vertexToFrag24_g170819 = IN.ase_texcoord8;
					half4 Interp_Data1269 = vertexToFrag24_g170819;
					float clampResult208_g170869 = clamp( (Interp_Data1269).w , 0.0 , 0.09 );
					#ifdef TVE_MOTION
					float3 staticSwitch214_g170869 = ( Visual_Albedo127_g170869 + ( ( Visual_Albedo127_g170869 * Visual_Albedo127_g170869 * 200.0 * _motion_highlight_color ) * clampResult208_g170869 ) );
					#else
					float3 staticSwitch214_g170869 = Visual_Albedo127_g170869;
					#endif
					half3 Final_Albedo160_g170869 = staticSwitch214_g170869;
					float3 In_Albedo3_g170871 = Final_Albedo160_g170869;
					float3 In_AlbedoRaw3_g170871 = Out_AlbedoRaw4_g170870;
					float2 In_NormalTS3_g170871 = Out_NormalTS4_g170870;
					float3 In_NormalWS3_g170871 = Out_NormalWS4_g170870;
					float4 In_Shader3_g170871 = Out_Shader4_g170870;
					float4 In_Emissive3_g170871 = Out_Emissive4_g170870;
					float In_Grayscale3_g170871 = Out_Grayscale4_g170870;
					float In_Luminosity3_g170871 = Out_Luminosity4_g170870;
					float In_MultiMask3_g170871 = Out_MultiMask4_g170870;
					float In_AlphaClip3_g170871 = Out_AlphaClip4_g170870;
					float In_AlphaFade3_g170871 = Out_AlphaFade4_g170870;
					float3 In_Translucency3_g170871 = Out_Translucency4_g170870;
					float In_Transmission3_g170871 = Out_Transmission4_g170870;
					float In_Thickness3_g170871 = Out_Thickness4_g170870;
					float In_Diffusion3_g170871 = Out_Diffusion4_g170870;
					float In_Depth3_g170871 = Out_Depth4_g170870;
					{
					Data3_g170871.Dummy = In_Dummy3_g170871;
					Data3_g170871.Albedo = In_Albedo3_g170871;
					Data3_g170871.AlbedoRaw = In_AlbedoRaw3_g170871;
					Data3_g170871.NormalTS = In_NormalTS3_g170871;
					Data3_g170871.NormalWS = In_NormalWS3_g170871;
					Data3_g170871.Shader = In_Shader3_g170871;
					Data3_g170871.Emissive= In_Emissive3_g170871;
					Data3_g170871.MultiMask = In_MultiMask3_g170871;
					Data3_g170871.Grayscale = In_Grayscale3_g170871;
					Data3_g170871.Luminosity = In_Luminosity3_g170871;
					Data3_g170871.AlphaClip = In_AlphaClip3_g170871;
					Data3_g170871.AlphaFade = In_AlphaFade3_g170871;
					Data3_g170871.Translucency = In_Translucency3_g170871;
					Data3_g170871.Transmission = In_Transmission3_g170871;
					Data3_g170871.Thickness = In_Thickness3_g170871;
					Data3_g170871.Diffusion = In_Diffusion3_g170871;
					Data3_g170871.Depth = In_Depth3_g170871;
					}
					TVEVisualData Data4_g170873 = Data3_g170871;
					float Out_Dummy4_g170873 = 0;
					float3 Out_Albedo4_g170873 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170873 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170873 = float2( 0,0 );
					float3 Out_NormalWS4_g170873 = float3( 0,0,0 );
					float4 Out_Shader4_g170873 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170873 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170873 = 0;
					float Out_Grayscale4_g170873 = 0;
					float Out_Luminosity4_g170873 = 0;
					float Out_AlphaClip4_g170873 = 0;
					float Out_AlphaFade4_g170873 = 0;
					float3 Out_Translucency4_g170873 = float3( 0,0,0 );
					float Out_Transmission4_g170873 = 0;
					float Out_Thickness4_g170873 = 0;
					float Out_Diffusion4_g170873 = 0;
					float Out_Depth4_g170873 = 0;
					{
					Out_Dummy4_g170873 = Data4_g170873.Dummy;
					Out_Albedo4_g170873 = Data4_g170873.Albedo;
					Out_AlbedoRaw4_g170873 = Data4_g170873.AlbedoRaw;
					Out_NormalTS4_g170873 = Data4_g170873.NormalTS;
					Out_NormalWS4_g170873 = Data4_g170873.NormalWS;
					Out_Shader4_g170873 = Data4_g170873.Shader;
					Out_Emissive4_g170873= Data4_g170873.Emissive;
					Out_MultiMask4_g170873 = Data4_g170873.MultiMask;
					Out_Grayscale4_g170873 = Data4_g170873.Grayscale;
					Out_Luminosity4_g170873= Data4_g170873.Luminosity;
					Out_AlphaClip4_g170873 = Data4_g170873.AlphaClip;
					Out_AlphaFade4_g170873 = Data4_g170873.AlphaFade;
					Out_Translucency4_g170873 = Data4_g170873.Translucency;
					Out_Transmission4_g170873 = Data4_g170873.Transmission;
					Out_Thickness4_g170873 = Data4_g170873.Thickness;
					Out_Diffusion4_g170873 = Data4_g170873.Diffusion;
					Out_Depth4_g170873= Data4_g170873.Depth;
					}
					half3 Visual_Albedo127_g170872 = Out_Albedo4_g170873;
					float3 temp_output_622_0_g170872 = (_OverlayColor).rgb;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170876) = _OverlayAlbedoTex;
					float localFilterTexture19_g170887 = ( 0.0 );
					SamplerState SS19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerDefault19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerPoint19_g170887 = sampler_Point_Repeat;
					SamplerState SamplerLow19_g170887 = sampler_Linear_Repeat;
					SamplerState SamplerMedium19_g170887 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh19_g170887 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS19_g170887 = SamplerDefault19_g170887;
					#if defined (TVE_FILTER_DEFAULT)
					    SS19_g170887 = SamplerDefault19_g170887;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS19_g170887 = SamplerPoint19_g170887;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS19_g170887 = SamplerLow19_g170887;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS19_g170887 = SamplerMedium19_g170887;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS19_g170887 = SamplerHigh19_g170887;
					#endif
					}
					SamplerState Sampler238_g170876 = SS19_g170887;
					float4 temp_output_6_0_g170877 = _overlay_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170877 = ( temp_output_6_0_g170877 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
					#else
					float4 staticSwitch14_g170877 = temp_output_6_0_g170877;
					#endif
					half4 Overlay_Coords639_g170872 = staticSwitch14_g170877;
					float4 temp_output_37_0_g170876 = Overlay_Coords639_g170872;
					half4 Coords238_g170876 = temp_output_37_0_g170876;
					TVEModelData Data15_g170889 = Data16_g170483;
					float Out_Dummy15_g170889 = 0;
					float3 Out_PositionWS15_g170889 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170889 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170889 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170889 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170889 = float3( 0,0,0 );
					float4 Out_VertexData15_g170889 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170889 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170889 = Data15_g170889.Dummy;
					Out_PositionWS15_g170889 = Data15_g170889.PositionWS;
					Out_PositionWO15_g170889 = Data15_g170889.PositionWO;
					Out_PivotWS15_g170889 = Data15_g170889.PivotWS;
					Out_PivotWO15_g170889 = Data15_g170889.PivotWO;
					Out_NormalWS15_g170889 = Data15_g170889.NormalWS;
					Out_ViewDirWS15_g170889 = Data15_g170889.ViewDirWS;
					Out_VertexData15_g170889 = Data15_g170889.VertexData;
					Out_BoundsData15_g170889 = Data15_g170889.BoundsData;
					}
					half3 Model_PositionWO602_g170872 = Out_PositionWO15_g170889;
					float3 temp_output_279_0_g170876 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170876 = temp_output_279_0_g170876;
					half4 localSamplePlanar2D238_g170876 = SamplePlanar2D( Texture238_g170876 , Sampler238_g170876 , Coords238_g170876 , WorldPosition238_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler246_g170876 = SS19_g170887;
					half4 Coords246_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition246_g170876 = temp_output_279_0_g170876;
					half3 Model_NormalWS712_g170872 = Out_NormalWS15_g170889;
					float3 temp_output_280_0_g170876 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170876 = temp_output_280_0_g170876;
					half4 localSamplePlanar3D246_g170876 = SamplePlanar3D( Texture246_g170876 , Sampler246_g170876 , Coords246_g170876 , WorldPosition246_g170876 , WorldNormal246_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler234_g170876 = SS19_g170887;
					float4 Coords234_g170876 = temp_output_37_0_g170876;
					float3 WorldPosition234_g170876 = temp_output_279_0_g170876;
					float4 localSampleStochastic2D234_g170876 = SampleStochastic2D( Texture234_g170876 , Sampler234_g170876 , Coords234_g170876 , WorldPosition234_g170876 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170876) = _OverlayAlbedoTex;
					SamplerState Sampler263_g170876 = SS19_g170887;
					half4 Coords263_g170876 = temp_output_37_0_g170876;
					half3 WorldPosition263_g170876 = temp_output_279_0_g170876;
					half3 WorldNormal263_g170876 = temp_output_280_0_g170876;
					half4 localSampleStochastic3D263_g170876 = SampleStochastic3D( Texture263_g170876 , Sampler263_g170876 , Coords263_g170876 , WorldPosition263_g170876 , WorldNormal263_g170876 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch676_g170872 = localSamplePlanar3D246_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch676_g170872 = localSampleStochastic2D234_g170876;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch676_g170872 = localSampleStochastic3D263_g170876;
					#else
					float4 staticSwitch676_g170872 = localSamplePlanar2D238_g170876;
					#endif
					half3 Overlay_Albedo526_g170872 = (staticSwitch676_g170872).xyz;
					#ifdef TVE_OVERLAY_TEX
					float3 staticSwitch578_g170872 = ( temp_output_622_0_g170872 * Overlay_Albedo526_g170872 );
					#else
					float3 staticSwitch578_g170872 = temp_output_622_0_g170872;
					#endif
					float3 temp_output_6_0_g170890 = staticSwitch578_g170872;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170890 = ( temp_output_6_0_g170890 + _OverlayTextureMode );
					#else
					float3 staticSwitch14_g170890 = temp_output_6_0_g170890;
					#endif
					float3 temp_cast_35 = (0.0).xxx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170880) = _OverlayGlitterTexRT;
					SamplerState Sampler246_g170880 = sampler_Linear_Repeat;
					float4 appendResult863_g170872 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170880 = appendResult863_g170872;
					half4 Coords246_g170880 = temp_output_37_0_g170880;
					float3 temp_output_279_0_g170880 = Model_PositionWO602_g170872;
					half3 WorldPosition246_g170880 = temp_output_279_0_g170880;
					float3 temp_output_280_0_g170880 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170880 = temp_output_280_0_g170880;
					half4 localSamplePlanar3D246_g170880 = SamplePlanar3D( Texture246_g170880 , Sampler246_g170880 , Coords246_g170880 , WorldPosition246_g170880 , WorldNormal246_g170880 );
					half Overlay_GlitterTex854_g170872 = (localSamplePlanar3D246_g170880).x;
					half3 Model_PositionWS879_g170872 = Out_PositionWS15_g170889;
					#ifdef TVE_OVERLAY_GLITTER
					float3 staticSwitch868_g170872 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g170872 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g170872 ) / _OverlayGlitterDistValue ) ) ) );
					#else
					float3 staticSwitch868_g170872 = temp_cast_35;
					#endif
					half3 Overlay_GlitterColor865_g170872 = staticSwitch868_g170872;
					half Overlay_TexMask908_g170872 = 1.0;
					float3 temp_output_739_21_g170872 = Out_NormalWS4_g170873;
					half3 Visual_NormalWS749_g170872 = temp_output_739_21_g170872;
					float clampResult17_g170896 = clamp( saturate( (Visual_NormalWS749_g170872).y ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170900 = _OverlayProjRemap.x;
					float temp_output_9_0_g170900 = ( clampResult17_g170896 - temp_output_7_0_g170900 );
					float lerpResult842_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170900 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
					half Overlay_MaskProj457_g170872 = lerpResult842_g170872;
					float temp_output_739_15_g170872 = Out_Luminosity4_g170873;
					half Visual_Luminosity654_g170872 = temp_output_739_15_g170872;
					float clampResult17_g170904 = clamp( Visual_Luminosity654_g170872 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170905 = _OverlayLumaRemap.x;
					float temp_output_9_0_g170905 = ( clampResult17_g170904 - temp_output_7_0_g170905 );
					float lerpResult587_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170905 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
					half Overlay_MaskLuma438_g170872 = lerpResult587_g170872;
					half4 Model_VertexMasks791_g170872 = Out_VertexData15_g170889;
					float4 break792_g170872 = Model_VertexMasks791_g170872;
					float4 break33_g170891 = _overlay_vert_mode;
					float temp_output_30_0_g170891 = ( break792_g170872.x * break33_g170891.x );
					float temp_output_29_0_g170891 = ( break792_g170872.y * break33_g170891.y );
					float temp_output_31_0_g170891 = ( break792_g170872.z * break33_g170891.z );
					float temp_output_28_0_g170891 = ( temp_output_30_0_g170891 + temp_output_29_0_g170891 + temp_output_31_0_g170891 + ( break792_g170872.w * break33_g170891.w ) );
					float clampResult17_g170892 = clamp( temp_output_28_0_g170891 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170901 = _OverlayMeshRemap.x;
					float temp_output_9_0_g170901 = ( clampResult17_g170892 - temp_output_7_0_g170901 );
					float lerpResult881_g170872 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170901 * _OverlayMeshRemap.z ) + 0.0001 ) ) , _OverlayMeshValue);
					float temp_output_6_0_g170897 = lerpResult881_g170872;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170897 = ( temp_output_6_0_g170897 + _OverlayMeshMode );
					#else
					float staticSwitch14_g170897 = temp_output_6_0_g170897;
					#endif
					half Overlay_VertMask801_g170872 = staticSwitch14_g170897;
					half Overlay_MaskNoise427_g170872 = 1.0;
					TVEGlobalData Data15_g170874 = Data204_g170496;
					float Out_Dummy15_g170874 = 0;
					float4 Out_CoatDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170874 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170874 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170874 = Data15_g170874.Dummy;
					Out_CoatDataRT15_g170874 = Data15_g170874.CoatDataRT;
					Out_PaintDataRT15_g170874 = Data15_g170874.PaintDataRT;
					Out_GlowDataRT15_g170874= Data15_g170874.GlowDataRT;
					Out_AtmoDataRT15_g170874= Data15_g170874.AtmoDataRT;
					Out_FadeDataRT15_g170874= Data15_g170874.FadeDataRT;
					Out_FormDataRT15_g170874 = Data15_g170874.FormDataRT;
					Out_FlowDataRT15_g170874 = Data15_g170874.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170872 = Out_AtmoDataRT15_g170874;
					float temp_output_6_0_g170906 = (Global_AtmoParams516_g170872).z;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170906 = ( temp_output_6_0_g170906 + _OverlayElementMode );
					#else
					float staticSwitch14_g170906 = temp_output_6_0_g170906;
					#endif
					#ifdef TVE_OVERLAY_ELEMENT
					float staticSwitch705_g170872 = staticSwitch14_g170906;
					#else
					float staticSwitch705_g170872 = TVE_AtmoParams.z;
					#endif
					float lerpResult937_g170872 = lerp( 1.0 , ( staticSwitch705_g170872 * TVE_IsEnabled ) , _OverlayGlobalValue);
					half Overlay_MaskGlobal429_g170872 = lerpResult937_g170872;
					half Custom_Mask646_g170872 = 1.0;
					float temp_output_7_0_g170903 = _OverlayBlendRemap.x;
					float temp_output_9_0_g170903 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g170872 * Overlay_MaskProj457_g170872 * Overlay_MaskLuma438_g170872 * Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 * Custom_Mask646_g170872 ) - temp_output_7_0_g170903 );
					half Overlay_Mask494_g170872 = saturate( ( ( temp_output_9_0_g170903 / ( _OverlayBlendRemap.y - temp_output_7_0_g170903 ) ) + 0.0001 ) );
					float3 lerpResult467_g170872 = lerp( Visual_Albedo127_g170872 , ( staticSwitch14_g170890 + Overlay_GlitterColor865_g170872 ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float3 staticSwitch577_g170872 = lerpResult467_g170872;
					#else
					float3 staticSwitch577_g170872 = Visual_Albedo127_g170872;
					#endif
					half3 Final_Albedo493_g170872 = staticSwitch577_g170872;
					float3 In_Albedo3_g170875 = Final_Albedo493_g170872;
					float3 In_AlbedoRaw3_g170875 = Out_AlbedoRaw4_g170873;
					half2 Visual_NormalTS535_g170872 = Out_NormalTS4_g170873;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170878) = _OverlayNormalTex;
					float localFilterTexture29_g170888 = ( 0.0 );
					SamplerState SS29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerDefault29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerPoint29_g170888 = sampler_Point_Repeat;
					SamplerState SamplerLow29_g170888 = sampler_Linear_Repeat;
					SamplerState SamplerMedium29_g170888 = sampler_Linear_Repeat_Aniso8;
					SamplerState SamplerHigh29_g170888 = sampler_Linear_Repeat_Aniso8;
					{
					//SamplerState SS29_g170888 = SamplerDefault29_g170888;
					#if defined (TVE_FILTER_DEFAULT)
					    SS29_g170888 = SamplerDefault29_g170888;
					#endif
					#if defined (TVE_FILTER_POINT)
					    SS29_g170888 = SamplerPoint29_g170888;
					#endif
					#if defined (TVE_FILTER_LOW)
					    SS29_g170888 = SamplerLow29_g170888;
					#endif
					#if defined (TVE_FILTER_MEDIUM)
					    SS29_g170888 = SamplerMedium29_g170888;
					#endif
					#if defined (TVE_FILTER_HIGH)
					    SS29_g170888 = SamplerHigh29_g170888;
					#endif
					}
					SamplerState Sampler238_g170878 = SS29_g170888;
					float4 temp_output_37_0_g170878 = Overlay_Coords639_g170872;
					half4 Coords238_g170878 = temp_output_37_0_g170878;
					float3 temp_output_279_0_g170878 = Model_PositionWO602_g170872;
					half3 WorldPosition238_g170878 = temp_output_279_0_g170878;
					half4 localSamplePlanar2D238_g170878 = SamplePlanar2D( Texture238_g170878 , Sampler238_g170878 , Coords238_g170878 , WorldPosition238_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170878) = _OverlayNormalTex;
					SamplerState Sampler246_g170878 = SS29_g170888;
					half4 Coords246_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition246_g170878 = temp_output_279_0_g170878;
					float3 temp_output_280_0_g170878 = Model_NormalWS712_g170872;
					half3 WorldNormal246_g170878 = temp_output_280_0_g170878;
					half4 localSamplePlanar3D246_g170878 = SamplePlanar3D( Texture246_g170878 , Sampler246_g170878 , Coords246_g170878 , WorldPosition246_g170878 , WorldNormal246_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170878) = _OverlayNormalTex;
					SamplerState Sampler234_g170878 = SS29_g170888;
					float4 Coords234_g170878 = temp_output_37_0_g170878;
					float3 WorldPosition234_g170878 = temp_output_279_0_g170878;
					float4 localSampleStochastic2D234_g170878 = SampleStochastic2D( Texture234_g170878 , Sampler234_g170878 , Coords234_g170878 , WorldPosition234_g170878 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170878) = _OverlayNormalTex;
					SamplerState Sampler263_g170878 = SS29_g170888;
					half4 Coords263_g170878 = temp_output_37_0_g170878;
					half3 WorldPosition263_g170878 = temp_output_279_0_g170878;
					half3 WorldNormal263_g170878 = temp_output_280_0_g170878;
					half4 localSampleStochastic3D263_g170878 = SampleStochastic3D( Texture263_g170878 , Sampler263_g170878 , Coords263_g170878 , WorldPosition263_g170878 , WorldNormal263_g170878 );
					#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
					float4 staticSwitch686_g170872 = localSamplePlanar3D246_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
					float4 staticSwitch686_g170872 = localSampleStochastic2D234_g170878;
					#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
					float4 staticSwitch686_g170872 = localSampleStochastic3D263_g170878;
					#else
					float4 staticSwitch686_g170872 = localSamplePlanar2D238_g170878;
					#endif
					half4 Normal_Packed45_g170881 = staticSwitch686_g170872;
					float2 appendResult58_g170881 = (float2(( (Normal_Packed45_g170881).x * (Normal_Packed45_g170881).w ) , (Normal_Packed45_g170881).y));
					half2 Normal_Default50_g170881 = appendResult58_g170881;
					half2 Normal_ASTC41_g170881 = (Normal_Packed45_g170881).xy;
					#ifdef UNITY_ASTC_NORMALMAP_ENCODING
					float2 staticSwitch38_g170881 = Normal_ASTC41_g170881;
					#else
					float2 staticSwitch38_g170881 = Normal_Default50_g170881;
					#endif
					half2 Normal_NO_DTX544_g170881 = (Normal_Packed45_g170881).wy;
					#ifdef UNITY_NO_DXT5nm
					float2 staticSwitch37_g170881 = Normal_NO_DTX544_g170881;
					#else
					float2 staticSwitch37_g170881 = staticSwitch38_g170881;
					#endif
					float2 temp_output_623_0_g170872 = (staticSwitch37_g170881*2.0 + -1.0);
					half2 Overlay_Normal528_g170872 = temp_output_623_0_g170872;
					#ifdef TVE_OVERLAY_TEX
					float2 staticSwitch579_g170872 = Overlay_Normal528_g170872;
					#else
					float2 staticSwitch579_g170872 = Visual_NormalTS535_g170872;
					#endif
					float2 lerpResult551_g170872 = lerp( Visual_NormalTS535_g170872 , ( staticSwitch579_g170872 * _OverlayNormalValue ) , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float2 staticSwitch583_g170872 = lerpResult551_g170872;
					#else
					float2 staticSwitch583_g170872 = Visual_NormalTS535_g170872;
					#endif
					half2 Final_NormalTS499_g170872 = staticSwitch583_g170872;
					float2 In_NormalTS3_g170875 = Final_NormalTS499_g170872;
					float3 In_NormalWS3_g170875 = temp_output_739_21_g170872;
					half4 Visual_Masks536_g170872 = Out_Shader4_g170873;
					float4 appendResult585_g170872 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
					float4 lerpResult584_g170872 = lerp( Visual_Masks536_g170872 , appendResult585_g170872 , Overlay_Mask494_g170872);
					#ifdef TVE_OVERLAY
					float4 staticSwitch586_g170872 = lerpResult584_g170872;
					#else
					float4 staticSwitch586_g170872 = Visual_Masks536_g170872;
					#endif
					half4 Final_Masks482_g170872 = staticSwitch586_g170872;
					float4 In_Shader3_g170875 = Final_Masks482_g170872;
					float4 In_Emissive3_g170875 = Out_Emissive4_g170873;
					float temp_output_739_12_g170872 = Out_Grayscale4_g170873;
					float In_Grayscale3_g170875 = temp_output_739_12_g170872;
					float In_Luminosity3_g170875 = temp_output_739_15_g170872;
					float In_MultiMask3_g170875 = Out_MultiMask4_g170873;
					float In_AlphaClip3_g170875 = Out_AlphaClip4_g170873;
					float In_AlphaFade3_g170875 = Out_AlphaFade4_g170873;
					float3 In_Translucency3_g170875 = Out_Translucency4_g170873;
					half Visual_Transmission699_g170872 = Out_Transmission4_g170873;
					float lerpResult746_g170872 = lerp( Visual_Transmission699_g170872 , ( Visual_Transmission699_g170872 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170872 * Overlay_MaskNoise427_g170872 * Overlay_MaskGlobal429_g170872 ));
					#ifdef TVE_OVERLAY
					float staticSwitch703_g170872 = lerpResult746_g170872;
					#else
					float staticSwitch703_g170872 = Visual_Transmission699_g170872;
					#endif
					half Final_Transmission702_g170872 = staticSwitch703_g170872;
					float In_Transmission3_g170875 = Final_Transmission702_g170872;
					float In_Thickness3_g170875 = Out_Thickness4_g170873;
					float In_Diffusion3_g170875 = Out_Diffusion4_g170873;
					float In_Depth3_g170875 = Out_Depth4_g170873;
					{
					Data3_g170875.Dummy = In_Dummy3_g170875;
					Data3_g170875.Albedo = In_Albedo3_g170875;
					Data3_g170875.AlbedoRaw = In_AlbedoRaw3_g170875;
					Data3_g170875.NormalTS = In_NormalTS3_g170875;
					Data3_g170875.NormalWS = In_NormalWS3_g170875;
					Data3_g170875.Shader = In_Shader3_g170875;
					Data3_g170875.Emissive= In_Emissive3_g170875;
					Data3_g170875.MultiMask = In_MultiMask3_g170875;
					Data3_g170875.Grayscale = In_Grayscale3_g170875;
					Data3_g170875.Luminosity = In_Luminosity3_g170875;
					Data3_g170875.AlphaClip = In_AlphaClip3_g170875;
					Data3_g170875.AlphaFade = In_AlphaFade3_g170875;
					Data3_g170875.Translucency = In_Translucency3_g170875;
					Data3_g170875.Transmission = In_Transmission3_g170875;
					Data3_g170875.Thickness = In_Thickness3_g170875;
					Data3_g170875.Diffusion = In_Diffusion3_g170875;
					Data3_g170875.Depth = In_Depth3_g170875;
					}
					TVEVisualData Data4_g170910 = Data3_g170875;
					float Out_Dummy4_g170910 = 0;
					float3 Out_Albedo4_g170910 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170910 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170910 = float2( 0,0 );
					float3 Out_NormalWS4_g170910 = float3( 0,0,0 );
					float4 Out_Shader4_g170910 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170910 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170910 = 0;
					float Out_Grayscale4_g170910 = 0;
					float Out_Luminosity4_g170910 = 0;
					float Out_AlphaClip4_g170910 = 0;
					float Out_AlphaFade4_g170910 = 0;
					float3 Out_Translucency4_g170910 = float3( 0,0,0 );
					float Out_Transmission4_g170910 = 0;
					float Out_Thickness4_g170910 = 0;
					float Out_Diffusion4_g170910 = 0;
					float Out_Depth4_g170910 = 0;
					{
					Out_Dummy4_g170910 = Data4_g170910.Dummy;
					Out_Albedo4_g170910 = Data4_g170910.Albedo;
					Out_AlbedoRaw4_g170910 = Data4_g170910.AlbedoRaw;
					Out_NormalTS4_g170910 = Data4_g170910.NormalTS;
					Out_NormalWS4_g170910 = Data4_g170910.NormalWS;
					Out_Shader4_g170910 = Data4_g170910.Shader;
					Out_Emissive4_g170910= Data4_g170910.Emissive;
					Out_MultiMask4_g170910 = Data4_g170910.MultiMask;
					Out_Grayscale4_g170910 = Data4_g170910.Grayscale;
					Out_Luminosity4_g170910= Data4_g170910.Luminosity;
					Out_AlphaClip4_g170910 = Data4_g170910.AlphaClip;
					Out_AlphaFade4_g170910 = Data4_g170910.AlphaFade;
					Out_Translucency4_g170910 = Data4_g170910.Translucency;
					Out_Transmission4_g170910 = Data4_g170910.Transmission;
					Out_Thickness4_g170910 = Data4_g170910.Thickness;
					Out_Diffusion4_g170910 = Data4_g170910.Diffusion;
					Out_Depth4_g170910= Data4_g170910.Depth;
					}
					half3 Visual_Albedo127_g170909 = Out_Albedo4_g170910;
					TVEGlobalData Data15_g170915 = Data204_g170496;
					float Out_Dummy15_g170915 = 0;
					float4 Out_CoatDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170915 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170915 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170915 = Data15_g170915.Dummy;
					Out_CoatDataRT15_g170915 = Data15_g170915.CoatDataRT;
					Out_PaintDataRT15_g170915 = Data15_g170915.PaintDataRT;
					Out_GlowDataRT15_g170915= Data15_g170915.GlowDataRT;
					Out_AtmoDataRT15_g170915= Data15_g170915.AtmoDataRT;
					Out_FadeDataRT15_g170915= Data15_g170915.FadeDataRT;
					Out_FormDataRT15_g170915 = Data15_g170915.FormDataRT;
					Out_FlowDataRT15_g170915 = Data15_g170915.FlowDataRT;
					}
					half4 Global_AtmoParams516_g170909 = Out_AtmoDataRT15_g170915;
					float4 temp_output_6_0_g170936 = Global_AtmoParams516_g170909;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170936 = ( temp_output_6_0_g170936 + _WetnessElementMode );
					#else
					float4 staticSwitch14_g170936 = temp_output_6_0_g170936;
					#endif
					#ifdef TVE_WETNESS_ELEMENT
					float4 staticSwitch663_g170909 = staticSwitch14_g170936;
					#else
					float4 staticSwitch663_g170909 = TVE_AtmoParams;
					#endif
					float2 lerpResult1121_g170909 = lerp( float2( 1,1 ) , (( staticSwitch663_g170909 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
					float2 break1123_g170909 = lerpResult1121_g170909;
					half Global_Wetness429_g170909 = break1123_g170909.x;
					half Wetness_Value1042_g170909 = ( _WetnessIntensityValue * Global_Wetness429_g170909 );
					TVEModelData Data15_g170921 = Data16_g170483;
					float Out_Dummy15_g170921 = 0;
					float3 Out_PositionWS15_g170921 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170921 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170921 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170921 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170921 = float3( 0,0,0 );
					float4 Out_VertexData15_g170921 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170921 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170921 = Data15_g170921.Dummy;
					Out_PositionWS15_g170921 = Data15_g170921.PositionWS;
					Out_PositionWO15_g170921 = Data15_g170921.PositionWO;
					Out_PivotWS15_g170921 = Data15_g170921.PivotWS;
					Out_PivotWO15_g170921 = Data15_g170921.PivotWO;
					Out_NormalWS15_g170921 = Data15_g170921.NormalWS;
					Out_ViewDirWS15_g170921 = Data15_g170921.ViewDirWS;
					Out_VertexData15_g170921 = Data15_g170921.VertexData;
					Out_BoundsData15_g170921 = Data15_g170921.BoundsData;
					}
					half4 Model_VertexData1030_g170909 = Out_VertexData15_g170921;
					float4 break1019_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170924 = _wetness_vert_mode;
					float temp_output_30_0_g170924 = ( break1019_g170909.x * break33_g170924.x );
					float temp_output_29_0_g170924 = ( break1019_g170909.y * break33_g170924.y );
					float temp_output_31_0_g170924 = ( break1019_g170909.z * break33_g170924.z );
					float temp_output_28_0_g170924 = ( temp_output_30_0_g170924 + temp_output_29_0_g170924 + temp_output_31_0_g170924 + ( break1019_g170909.w * break33_g170924.w ) );
					float clampResult17_g170923 = clamp( temp_output_28_0_g170924 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170932 = _WetnessMeshRemap.x;
					float temp_output_9_0_g170932 = ( clampResult17_g170923 - temp_output_7_0_g170932 );
					float lerpResult1026_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170932 * _WetnessMeshRemap.z ) + 0.0001 ) ) , _WetnessMeshValue);
					float temp_output_6_0_g170925 = lerpResult1026_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170925 = ( temp_output_6_0_g170925 + _WetnessMeshMode );
					#else
					float staticSwitch14_g170925 = temp_output_6_0_g170925;
					#endif
					float temp_output_1025_0_g170909 = staticSwitch14_g170925;
					half Wetness_VertMask1024_g170909 = temp_output_1025_0_g170909;
					float temp_output_1043_0_g170909 = ( Wetness_Value1042_g170909 * Wetness_VertMask1024_g170909 );
					half Wetness_Mask866_g170909 = temp_output_1043_0_g170909;
					float4 break1083_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170927 = _wetness_water_vert_mode;
					float temp_output_30_0_g170927 = ( break1083_g170909.x * break33_g170927.x );
					float temp_output_29_0_g170927 = ( break1083_g170909.y * break33_g170927.y );
					float temp_output_31_0_g170927 = ( break1083_g170909.z * break33_g170927.z );
					float temp_output_28_0_g170927 = ( temp_output_30_0_g170927 + temp_output_29_0_g170927 + temp_output_31_0_g170927 + ( break1083_g170909.w * break33_g170927.w ) );
					float clampResult17_g170926 = clamp( temp_output_28_0_g170927 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170933 = _WetnessWaterMeshRemap.x;
					float temp_output_9_0_g170933 = ( clampResult17_g170926 - temp_output_7_0_g170933 );
					float lerpResult1089_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170933 * _WetnessWaterMeshRemap.z ) + 0.0001 ) ) , _WetnessWaterMeshValue);
					float temp_output_6_0_g170928 = lerpResult1089_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170928 = ( temp_output_6_0_g170928 + _WetnessWaterMeshMode );
					#else
					float staticSwitch14_g170928 = temp_output_6_0_g170928;
					#endif
					float temp_output_1091_0_g170909 = staticSwitch14_g170928;
					half Water_VertMask1094_g170909 = temp_output_1091_0_g170909;
					half4 Visual_Masks536_g170909 = Out_Shader4_g170910;
					float lerpResult1013_g170909 = lerp( 1.0 , (Visual_Masks536_g170909).z , _WetnessWaterBaseValue);
					half Water_HeightMask782_g170909 = lerpResult1013_g170909;
					float clampResult17_g170922 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g170909 * Water_VertMask1094_g170909 ) - Water_HeightMask782_g170909 ) , 0.0001 , 0.9999 );
					float temp_output_7_0_g170935 = _WetnessWaterBlendRemap.x;
					float temp_output_9_0_g170935 = ( clampResult17_g170922 - temp_output_7_0_g170935 );
					half3 Model_NormalWS798_g170909 = Out_NormalWS15_g170921;
					float temp_output_786_0_g170909 = saturate( (Model_NormalWS798_g170909).y );
					half Wetness_ProjMask790_g170909 = temp_output_786_0_g170909;
					half Water_Mask760_g170909 = ( saturate( ( ( temp_output_9_0_g170935 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g170909 );
					float3 lerpResult918_g170909 = lerp( Visual_Albedo127_g170909 , ( Visual_Albedo127_g170909 * (_WetnessWaterColor).rgb ) , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float3 staticSwitch946_g170909 = lerpResult918_g170909;
					#else
					float3 staticSwitch946_g170909 = Visual_Albedo127_g170909;
					#endif
					float3 lerpResult768_g170909 = lerp( staticSwitch946_g170909 , ( staticSwitch946_g170909 * staticSwitch946_g170909 ) , _WetnessContrastValue);
					float3 lerpResult651_g170909 = lerp( Visual_Albedo127_g170909 , lerpResult768_g170909 , Wetness_Mask866_g170909);
					#ifdef TVE_WETNESS
					float3 staticSwitch577_g170909 = lerpResult651_g170909;
					#else
					float3 staticSwitch577_g170909 = Visual_Albedo127_g170909;
					#endif
					half3 Final_Albedo493_g170909 = staticSwitch577_g170909;
					float3 In_Albedo3_g170911 = Final_Albedo493_g170909;
					float3 In_AlbedoRaw3_g170911 = Out_AlbedoRaw4_g170910;
					half2 Visual_Normal535_g170909 = Out_NormalTS4_g170910;
					float lerpResult877_g170909 = lerp( 1.0 , 0.0 , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch957_g170909 = ( Visual_Normal535_g170909 * lerpResult877_g170909 );
					#else
					float2 staticSwitch957_g170909 = Visual_Normal535_g170909;
					#endif
					float2 temp_cast_36 = (0.0).xx;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170919) = _WetnessDropsTexRT;
					SamplerState Sampler238_g170919 = sampler_Linear_Repeat_Aniso8;
					float4 appendResult924_g170909 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
					float4 temp_output_37_0_g170919 = appendResult924_g170909;
					half4 Coords238_g170919 = temp_output_37_0_g170919;
					half3 Model_PositionWO602_g170909 = Out_PositionWO15_g170921;
					float3 temp_output_279_0_g170919 = Model_PositionWO602_g170909;
					half3 WorldPosition238_g170919 = temp_output_279_0_g170919;
					half4 localSamplePlanar2D238_g170919 = SamplePlanar2D( Texture238_g170919 , Sampler238_g170919 , Coords238_g170919 , WorldPosition238_g170919 );
					float4 temp_output_1010_0_g170909 = localSamplePlanar2D238_g170919;
					half2 Rain_DropsNormal919_g170909 = (temp_output_1010_0_g170909).zw;
					float2 temp_output_903_0_g170909 = (Rain_DropsNormal919_g170909*2.0 + -1.0);
					half2 Rain_RingsNormal713_g170909 = (temp_output_1010_0_g170909).xy;
					float2 lerpResult904_g170909 = lerp( temp_output_903_0_g170909 , (Rain_RingsNormal713_g170909*2.0 + -1.0) , ( Water_Mask760_g170909 * Water_Mask760_g170909 ));
					#ifdef TVE_WETNESS_WATER
					float2 staticSwitch960_g170909 = lerpResult904_g170909;
					#else
					float2 staticSwitch960_g170909 = temp_output_903_0_g170909;
					#endif
					half2 Rain_Drops1002_g170909 = ( staticSwitch960_g170909 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
					half3 Model_PositionWS823_g170909 = Out_PositionWS15_g170921;
					half Global_Rain955_g170909 = break1123_g170909.y;
					half Rain_Value1067_g170909 = Global_Rain955_g170909;
					float4 break1097_g170909 = Model_VertexData1030_g170909;
					float4 break33_g170930 = _wetness_drops_vert_mode;
					float temp_output_30_0_g170930 = ( break1097_g170909.x * break33_g170930.x );
					float temp_output_29_0_g170930 = ( break1097_g170909.y * break33_g170930.y );
					float temp_output_31_0_g170930 = ( break1097_g170909.z * break33_g170930.z );
					float temp_output_28_0_g170930 = ( temp_output_30_0_g170930 + temp_output_29_0_g170930 + temp_output_31_0_g170930 + ( break1097_g170909.w * break33_g170930.w ) );
					float clampResult17_g170929 = clamp( temp_output_28_0_g170930 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170934 = _WetnessDropsMeshRemap.x;
					float temp_output_9_0_g170934 = ( clampResult17_g170929 - temp_output_7_0_g170934 );
					float lerpResult1100_g170909 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170934 * _WetnessDropsMeshRemap.z ) + 0.0001 ) ) , _WetnessDropsMeshValue);
					float temp_output_6_0_g170931 = lerpResult1100_g170909;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170931 = ( temp_output_6_0_g170931 + _WetnessDropsMeshMode );
					#else
					float staticSwitch14_g170931 = temp_output_6_0_g170931;
					#endif
					float temp_output_1101_0_g170909 = staticSwitch14_g170931;
					half Rain_VertMask1108_g170909 = temp_output_1101_0_g170909;
					half Rain_Mask999_g170909 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g170909 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g170909 * Rain_VertMask1108_g170909 );
					half2 Normal_Planar45_g170918 = ( Rain_Drops1002_g170909 * Rain_Mask999_g170909 * Wetness_ProjMask790_g170909 );
					float2 break71_g170918 = Normal_Planar45_g170918;
					float3 appendResult72_g170918 = (float3(break71_g170918.x , 0.0 , break71_g170918.y));
					half2 Wetness_Normal526_g170909 = (mul( ase_worldToTangent, appendResult72_g170918 )).xy;
					#ifdef TVE_WETNESS_DROPS
					float2 staticSwitch583_g170909 = Wetness_Normal526_g170909;
					#else
					float2 staticSwitch583_g170909 = temp_cast_36;
					#endif
					#ifdef TVE_WETNESS
					float2 staticSwitch774_g170909 = ( staticSwitch957_g170909 + staticSwitch583_g170909 );
					#else
					float2 staticSwitch774_g170909 = Visual_Normal535_g170909;
					#endif
					half2 Final_Normal499_g170909 = staticSwitch774_g170909;
					float2 In_NormalTS3_g170911 = Final_Normal499_g170909;
					float3 In_NormalWS3_g170911 = Out_NormalWS4_g170910;
					float4 break658_g170909 = Visual_Masks536_g170909;
					float temp_output_935_0_g170909 = ( Wetness_Mask866_g170909 * _WetnessSmoothnessValue );
					float lerpResult941_g170909 = lerp( temp_output_935_0_g170909 , 2.0 , Water_Mask760_g170909);
					#ifdef TVE_WETNESS_WATER
					float staticSwitch959_g170909 = lerpResult941_g170909;
					#else
					float staticSwitch959_g170909 = temp_output_935_0_g170909;
					#endif
					float4 appendResult661_g170909 = (float4(break658_g170909.x , break658_g170909.y , break658_g170909.z , saturate( ( break658_g170909.w + staticSwitch959_g170909 ) )));
					#ifdef TVE_WETNESS
					float4 staticSwitch586_g170909 = appendResult661_g170909;
					#else
					float4 staticSwitch586_g170909 = Visual_Masks536_g170909;
					#endif
					half4 Final_Masks482_g170909 = staticSwitch586_g170909;
					float4 In_Shader3_g170911 = Final_Masks482_g170909;
					float4 In_Emissive3_g170911 = Out_Emissive4_g170910;
					float In_Grayscale3_g170911 = Out_Grayscale4_g170910;
					float In_Luminosity3_g170911 = Out_Luminosity4_g170910;
					float In_MultiMask3_g170911 = Out_MultiMask4_g170910;
					float In_AlphaClip3_g170911 = Out_AlphaClip4_g170910;
					float In_AlphaFade3_g170911 = Out_AlphaFade4_g170910;
					float3 In_Translucency3_g170911 = Out_Translucency4_g170910;
					float In_Transmission3_g170911 = Out_Transmission4_g170910;
					float In_Thickness3_g170911 = Out_Thickness4_g170910;
					float In_Diffusion3_g170911 = Out_Diffusion4_g170910;
					float In_Depth3_g170911 = Out_Depth4_g170910;
					{
					Data3_g170911.Dummy = In_Dummy3_g170911;
					Data3_g170911.Albedo = In_Albedo3_g170911;
					Data3_g170911.AlbedoRaw = In_AlbedoRaw3_g170911;
					Data3_g170911.NormalTS = In_NormalTS3_g170911;
					Data3_g170911.NormalWS = In_NormalWS3_g170911;
					Data3_g170911.Shader = In_Shader3_g170911;
					Data3_g170911.Emissive= In_Emissive3_g170911;
					Data3_g170911.MultiMask = In_MultiMask3_g170911;
					Data3_g170911.Grayscale = In_Grayscale3_g170911;
					Data3_g170911.Luminosity = In_Luminosity3_g170911;
					Data3_g170911.AlphaClip = In_AlphaClip3_g170911;
					Data3_g170911.AlphaFade = In_AlphaFade3_g170911;
					Data3_g170911.Translucency = In_Translucency3_g170911;
					Data3_g170911.Transmission = In_Transmission3_g170911;
					Data3_g170911.Thickness = In_Thickness3_g170911;
					Data3_g170911.Diffusion = In_Diffusion3_g170911;
					Data3_g170911.Depth = In_Depth3_g170911;
					}
					TVEVisualData Data4_g170941 = Data3_g170911;
					float Out_Dummy4_g170941 = 0;
					float3 Out_Albedo4_g170941 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170941 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170941 = float2( 0,0 );
					float3 Out_NormalWS4_g170941 = float3( 0,0,0 );
					float4 Out_Shader4_g170941 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170941 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170941 = 0;
					float Out_Grayscale4_g170941 = 0;
					float Out_Luminosity4_g170941 = 0;
					float Out_AlphaClip4_g170941 = 0;
					float Out_AlphaFade4_g170941 = 0;
					float3 Out_Translucency4_g170941 = float3( 0,0,0 );
					float Out_Transmission4_g170941 = 0;
					float Out_Thickness4_g170941 = 0;
					float Out_Diffusion4_g170941 = 0;
					float Out_Depth4_g170941 = 0;
					{
					Out_Dummy4_g170941 = Data4_g170941.Dummy;
					Out_Albedo4_g170941 = Data4_g170941.Albedo;
					Out_AlbedoRaw4_g170941 = Data4_g170941.AlbedoRaw;
					Out_NormalTS4_g170941 = Data4_g170941.NormalTS;
					Out_NormalWS4_g170941 = Data4_g170941.NormalWS;
					Out_Shader4_g170941 = Data4_g170941.Shader;
					Out_Emissive4_g170941= Data4_g170941.Emissive;
					Out_MultiMask4_g170941 = Data4_g170941.MultiMask;
					Out_Grayscale4_g170941 = Data4_g170941.Grayscale;
					Out_Luminosity4_g170941= Data4_g170941.Luminosity;
					Out_AlphaClip4_g170941 = Data4_g170941.AlphaClip;
					Out_AlphaFade4_g170941 = Data4_g170941.AlphaFade;
					Out_Translucency4_g170941 = Data4_g170941.Translucency;
					Out_Transmission4_g170941 = Data4_g170941.Transmission;
					Out_Thickness4_g170941 = Data4_g170941.Thickness;
					Out_Diffusion4_g170941 = Data4_g170941.Diffusion;
					Out_Depth4_g170941= Data4_g170941.Depth;
					}
					float3 In_Albedo3_g170939 = Out_Albedo4_g170941;
					float3 In_AlbedoRaw3_g170939 = Out_AlbedoRaw4_g170941;
					float2 In_NormalTS3_g170939 = Out_NormalTS4_g170941;
					float3 In_NormalWS3_g170939 = Out_NormalWS4_g170941;
					float4 In_Shader3_g170939 = Out_Shader4_g170941;
					float4 In_Emissive3_g170939 = Out_Emissive4_g170941;
					float In_Grayscale3_g170939 = Out_Grayscale4_g170941;
					float In_Luminosity3_g170939 = Out_Luminosity4_g170941;
					float temp_output_836_11_g170938 = Out_MultiMask4_g170941;
					float In_MultiMask3_g170939 = temp_output_836_11_g170938;
					half Visual_AlphaClip667_g170938 = Out_AlphaClip4_g170941;
					TVEGlobalData Data15_g170940 = Data204_g170496;
					float Out_Dummy15_g170940 = 0;
					float4 Out_CoatDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170940 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170940 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170940 = Data15_g170940.Dummy;
					Out_CoatDataRT15_g170940 = Data15_g170940.CoatDataRT;
					Out_PaintDataRT15_g170940 = Data15_g170940.PaintDataRT;
					Out_GlowDataRT15_g170940= Data15_g170940.GlowDataRT;
					Out_AtmoDataRT15_g170940= Data15_g170940.AtmoDataRT;
					Out_FadeDataRT15_g170940= Data15_g170940.FadeDataRT;
					Out_FormDataRT15_g170940 = Data15_g170940.FormDataRT;
					Out_FlowDataRT15_g170940 = Data15_g170940.FlowDataRT;
					}
					half4 Global_FadeParams516_g170938 = Out_FadeDataRT15_g170940;
					float temp_output_6_0_g170947 = saturate( (Global_FadeParams516_g170938).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g170947 = ( temp_output_6_0_g170947 + _CutoutElementMode );
					#else
					float staticSwitch14_g170947 = temp_output_6_0_g170947;
					#endif
					#ifdef TVE_CUTOUT_ELEMENT
					float staticSwitch663_g170938 = staticSwitch14_g170947;
					#else
					float staticSwitch663_g170938 = TVE_FadeParams.w;
					#endif
					float lerpResult843_g170938 = lerp( 1.0 , ( staticSwitch663_g170938 * TVE_IsEnabled ) , _CutoutGlobalValue);
					half Local_GlobalMask429_g170938 = lerpResult843_g170938;
					float lerpResult811_g170938 = lerp( 1.0 , Visual_AlphaClip667_g170938 , _CutoutAlphaValue);
					half Local_AlphaMask814_g170938 = lerpResult811_g170938;
					TVEModelData Data15_g170942 = Data16_g170483;
					float Out_Dummy15_g170942 = 0;
					float3 Out_PositionWS15_g170942 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170942 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170942 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170942 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170942 = float3( 0,0,0 );
					float4 Out_VertexData15_g170942 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170942 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170942 = Data15_g170942.Dummy;
					Out_PositionWS15_g170942 = Data15_g170942.PositionWS;
					Out_PositionWO15_g170942 = Data15_g170942.PositionWO;
					Out_PivotWS15_g170942 = Data15_g170942.PivotWS;
					Out_PivotWO15_g170942 = Data15_g170942.PivotWO;
					Out_NormalWS15_g170942 = Data15_g170942.NormalWS;
					Out_ViewDirWS15_g170942 = Data15_g170942.ViewDirWS;
					Out_VertexData15_g170942 = Data15_g170942.VertexData;
					Out_BoundsData15_g170942 = Data15_g170942.BoundsData;
					}
					half3 Model_PositionWO602_g170938 = Out_PositionWO15_g170942;
					float lerpResult673_g170938 = lerp( 1.0 , SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Model_PositionWO602_g170938 * ( _CutoutNoiseTillingValue * 0.01 ) ) ).r , _CutoutNoiseValue);
					half Local_NoiseMask678_g170938 = lerpResult673_g170938;
					half4 Model_VertexMasks752_g170938 = Out_VertexData15_g170942;
					float4 break755_g170938 = Model_VertexMasks752_g170938;
					float4 break33_g170943 = _cutout_vert_mode;
					float temp_output_30_0_g170943 = ( break755_g170938.x * break33_g170943.x );
					float temp_output_29_0_g170943 = ( break755_g170938.y * break33_g170943.y );
					float temp_output_31_0_g170943 = ( break755_g170938.z * break33_g170943.z );
					float temp_output_28_0_g170943 = ( temp_output_30_0_g170943 + temp_output_29_0_g170943 + temp_output_31_0_g170943 + ( break755_g170938.w * break33_g170943.w ) );
					float clampResult17_g170944 = clamp( temp_output_28_0_g170943 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170946 = _CutoutMeshRemap.x;
					float temp_output_9_0_g170946 = ( clampResult17_g170944 - temp_output_7_0_g170946 );
					float lerpResult820_g170938 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170946 * _CutoutMeshRemap.z ) + 0.0001 ) ) , _CutoutMeshValue);
					float temp_output_6_0_g170945 = lerpResult820_g170938;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170945 = ( temp_output_6_0_g170945 + _CutoutMeshMode );
					#else
					float staticSwitch14_g170945 = temp_output_6_0_g170945;
					#endif
					float temp_output_801_0_g170938 = staticSwitch14_g170945;
					half Local_VertMask766_g170938 = temp_output_801_0_g170938;
					half Visual_MultiMask671_g170938 = temp_output_836_11_g170938;
					float lerpResult683_g170938 = lerp( 1.0 , Visual_MultiMask671_g170938 , _CutoutMultiValue);
					half Local_MultiMask685_g170938 = lerpResult683_g170938;
					float lerpResult728_g170938 = lerp( Visual_AlphaClip667_g170938 , min( Visual_AlphaClip667_g170938 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g170938 ) - ( Local_AlphaMask814_g170938 * Local_NoiseMask678_g170938 * Local_VertMask766_g170938 ) ) ) ) , Local_MultiMask685_g170938);
					half Local_AlphaClip784_g170938 = lerpResult728_g170938;
					#ifdef TVE_CUTOUT
					float staticSwitch577_g170938 = Local_AlphaClip784_g170938;
					#else
					float staticSwitch577_g170938 = Visual_AlphaClip667_g170938;
					#endif
					half Final_AlphaClip795_g170938 = staticSwitch577_g170938;
					float In_AlphaClip3_g170939 = Final_AlphaClip795_g170938;
					float In_AlphaFade3_g170939 = Out_AlphaFade4_g170941;
					float3 In_Translucency3_g170939 = Out_Translucency4_g170941;
					float In_Transmission3_g170939 = Out_Transmission4_g170941;
					float In_Thickness3_g170939 = Out_Thickness4_g170941;
					float In_Diffusion3_g170939 = Out_Diffusion4_g170941;
					float In_Depth3_g170939 = Out_Depth4_g170941;
					{
					Data3_g170939.Dummy = In_Dummy3_g170939;
					Data3_g170939.Albedo = In_Albedo3_g170939;
					Data3_g170939.AlbedoRaw = In_AlbedoRaw3_g170939;
					Data3_g170939.NormalTS = In_NormalTS3_g170939;
					Data3_g170939.NormalWS = In_NormalWS3_g170939;
					Data3_g170939.Shader = In_Shader3_g170939;
					Data3_g170939.Emissive= In_Emissive3_g170939;
					Data3_g170939.MultiMask = In_MultiMask3_g170939;
					Data3_g170939.Grayscale = In_Grayscale3_g170939;
					Data3_g170939.Luminosity = In_Luminosity3_g170939;
					Data3_g170939.AlphaClip = In_AlphaClip3_g170939;
					Data3_g170939.AlphaFade = In_AlphaFade3_g170939;
					Data3_g170939.Translucency = In_Translucency3_g170939;
					Data3_g170939.Transmission = In_Transmission3_g170939;
					Data3_g170939.Thickness = In_Thickness3_g170939;
					Data3_g170939.Diffusion = In_Diffusion3_g170939;
					Data3_g170939.Depth = In_Depth3_g170939;
					}
					TVEVisualData Data4_g170957 = Data3_g170939;
					float Out_Dummy4_g170957 = 0;
					float3 Out_Albedo4_g170957 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170957 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170957 = float2( 0,0 );
					float3 Out_NormalWS4_g170957 = float3( 0,0,0 );
					float4 Out_Shader4_g170957 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170957 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170957 = 0;
					float Out_Grayscale4_g170957 = 0;
					float Out_Luminosity4_g170957 = 0;
					float Out_AlphaClip4_g170957 = 0;
					float Out_AlphaFade4_g170957 = 0;
					float3 Out_Translucency4_g170957 = float3( 0,0,0 );
					float Out_Transmission4_g170957 = 0;
					float Out_Thickness4_g170957 = 0;
					float Out_Diffusion4_g170957 = 0;
					float Out_Depth4_g170957 = 0;
					{
					Out_Dummy4_g170957 = Data4_g170957.Dummy;
					Out_Albedo4_g170957 = Data4_g170957.Albedo;
					Out_AlbedoRaw4_g170957 = Data4_g170957.AlbedoRaw;
					Out_NormalTS4_g170957 = Data4_g170957.NormalTS;
					Out_NormalWS4_g170957 = Data4_g170957.NormalWS;
					Out_Shader4_g170957 = Data4_g170957.Shader;
					Out_Emissive4_g170957= Data4_g170957.Emissive;
					Out_MultiMask4_g170957 = Data4_g170957.MultiMask;
					Out_Grayscale4_g170957 = Data4_g170957.Grayscale;
					Out_Luminosity4_g170957= Data4_g170957.Luminosity;
					Out_AlphaClip4_g170957 = Data4_g170957.AlphaClip;
					Out_AlphaFade4_g170957 = Data4_g170957.AlphaFade;
					Out_Translucency4_g170957 = Data4_g170957.Translucency;
					Out_Transmission4_g170957 = Data4_g170957.Transmission;
					Out_Thickness4_g170957 = Data4_g170957.Thickness;
					Out_Diffusion4_g170957 = Data4_g170957.Diffusion;
					Out_Depth4_g170957= Data4_g170957.Depth;
					}
					float3 In_Albedo3_g170958 = Out_Albedo4_g170957;
					float3 In_AlbedoRaw3_g170958 = Out_AlbedoRaw4_g170957;
					float2 In_NormalTS3_g170958 = Out_NormalTS4_g170957;
					float3 In_NormalWS3_g170958 = Out_NormalWS4_g170957;
					float4 In_Shader3_g170958 = Out_Shader4_g170957;
					float4 In_Emissive3_g170958 = Out_Emissive4_g170957;
					float In_Grayscale3_g170958 = Out_Grayscale4_g170957;
					float In_Luminosity3_g170958 = Out_Luminosity4_g170957;
					float temp_output_821_11_g170955 = Out_MultiMask4_g170957;
					float In_MultiMask3_g170958 = temp_output_821_11_g170955;
					half Visual_AlphaClip754_g170955 = Out_AlphaClip4_g170957;
					half Dither_Constant768_g170955 = _DitherConstantValue;
					float3 ase_positionWS = IN.ase_texcoord9.xyz;
					half Dither_BiasProximity881_g170955 = TVE_DitherParams.x;
					half Dither_BiasEnabled883_g170955 = TVE_DitherParams.w;
					float lerpResult884_g170955 = lerp( 1.0 , Dither_BiasProximity881_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170960 = _DitherProximityMaxValue;
					float temp_output_9_0_g170960 = ( ( distance( ase_positionWS , _WorldSpaceCameraPos ) * lerpResult884_g170955 ) - temp_output_7_0_g170960 );
					half Dither_Proximity767_g170955 = ( saturate( ( ( temp_output_9_0_g170960 / ( _DitherProximityMinValue - temp_output_7_0_g170960 ) ) + 0.0001 ) ) * _DitherProximityValue );
					TVEModelData Data15_g170959 = Data16_g170483;
					float Out_Dummy15_g170959 = 0;
					float3 Out_PositionWS15_g170959 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170959 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170959 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170959 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170959 = float3( 0,0,0 );
					float4 Out_VertexData15_g170959 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170959 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170959 = Data15_g170959.Dummy;
					Out_PositionWS15_g170959 = Data15_g170959.PositionWS;
					Out_PositionWO15_g170959 = Data15_g170959.PositionWO;
					Out_PivotWS15_g170959 = Data15_g170959.PivotWS;
					Out_PivotWO15_g170959 = Data15_g170959.PivotWO;
					Out_NormalWS15_g170959 = Data15_g170959.NormalWS;
					Out_ViewDirWS15_g170959 = Data15_g170959.ViewDirWS;
					Out_VertexData15_g170959 = Data15_g170959.VertexData;
					Out_BoundsData15_g170959 = Data15_g170959.BoundsData;
					}
					half3 Model_PositionWS776_g170955 = Out_PositionWS15_g170959;
					half Dither_BiasDistance882_g170955 = TVE_DitherParams.z;
					float lerpResult888_g170955 = lerp( 1.0 , Dither_BiasDistance882_g170955 , Dither_BiasEnabled883_g170955);
					float temp_output_7_0_g170961 = _DitherDistanceMinValue;
					float temp_output_9_0_g170961 = ( ( distance( Model_PositionWS776_g170955 , _WorldSpaceCameraPos ) * lerpResult888_g170955 ) - temp_output_7_0_g170961 );
					half Dither_Distance856_g170955 = ( saturate( ( ( temp_output_9_0_g170961 / ( _DitherDistanceMaxValue - temp_output_7_0_g170961 ) ) + 0.0001 ) ) * _DitherDistanceValue );
					half3 Model_ViewDirWS845_g170955 = Out_ViewDirWS15_g170959;
					float3 normalizeResult792_g170955 = normalize( cross( ddy( ase_positionWS ) , ddx( ase_positionWS ) ) );
					float dotResult778_g170955 = dot( Model_ViewDirWS845_g170955 , normalizeResult792_g170955 );
					half Dither_Glancing784_g170955 = ( saturate( ( ( 1.0 - abs( dotResult778_g170955 ) ) * _DitherGlancingAngleValue ) ) * _DitherGlancingValue );
					half Dither_Value429_g170955 = max( max( max( Dither_Constant768_g170955 , Dither_Proximity767_g170955 ) , Dither_Distance856_g170955 ) , Dither_Glancing784_g170955 );
					half3 Model_PositionWO602_g170955 = Out_PositionWO15_g170959;
					half3 Dither_PositionWO895_g170955 = ( Model_PositionWO602_g170955 * 20.0 );
					half Local_MaskNoise678_g170955 = SAMPLE_TEXTURE3D( _NoiseTex3D, sampler_Linear_Repeat, ( Dither_PositionWO895_g170955 * ( _DitherNoiseTillingValue * 0.01 ) ) ).r;
					half Visual_MultiMask671_g170955 = temp_output_821_11_g170955;
					float lerpResult683_g170955 = lerp( 1.0 , Visual_MultiMask671_g170955 , _DitherMultiValue);
					half Local_MaskMulti685_g170955 = lerpResult683_g170955;
					half Custom_Mask826_g170955 = 1.0;
					float lerpResult728_g170955 = lerp( Visual_AlphaClip754_g170955 , min( Visual_AlphaClip754_g170955 , ( -0.001 - ( Dither_Value429_g170955 - Local_MaskNoise678_g170955 ) ) ) , ( Local_MaskMulti685_g170955 * Custom_Mask826_g170955 ));
					half Local_AlphaClip834_g170955 = lerpResult728_g170955;
					#ifdef TVE_DITHER
					float staticSwitch577_g170955 = Local_AlphaClip834_g170955;
					#else
					float staticSwitch577_g170955 = Visual_AlphaClip754_g170955;
					#endif
					half Final_AlphaClip493_g170955 = staticSwitch577_g170955;
					float In_AlphaClip3_g170958 = Final_AlphaClip493_g170955;
					float In_AlphaFade3_g170958 = Out_AlphaFade4_g170957;
					float3 In_Translucency3_g170958 = Out_Translucency4_g170957;
					float In_Transmission3_g170958 = Out_Transmission4_g170957;
					float In_Thickness3_g170958 = Out_Thickness4_g170957;
					float In_Diffusion3_g170958 = Out_Diffusion4_g170957;
					float In_Depth3_g170958 = Out_Depth4_g170957;
					{
					Data3_g170958.Dummy = In_Dummy3_g170958;
					Data3_g170958.Albedo = In_Albedo3_g170958;
					Data3_g170958.AlbedoRaw = In_AlbedoRaw3_g170958;
					Data3_g170958.NormalTS = In_NormalTS3_g170958;
					Data3_g170958.NormalWS = In_NormalWS3_g170958;
					Data3_g170958.Shader = In_Shader3_g170958;
					Data3_g170958.Emissive= In_Emissive3_g170958;
					Data3_g170958.MultiMask = In_MultiMask3_g170958;
					Data3_g170958.Grayscale = In_Grayscale3_g170958;
					Data3_g170958.Luminosity = In_Luminosity3_g170958;
					Data3_g170958.AlphaClip = In_AlphaClip3_g170958;
					Data3_g170958.AlphaFade = In_AlphaFade3_g170958;
					Data3_g170958.Translucency = In_Translucency3_g170958;
					Data3_g170958.Transmission = In_Transmission3_g170958;
					Data3_g170958.Thickness = In_Thickness3_g170958;
					Data3_g170958.Diffusion = In_Diffusion3_g170958;
					Data3_g170958.Depth = In_Depth3_g170958;
					}
					TVEVisualData Data4_g170984 = Data3_g170958;
					float Out_Dummy4_g170984 = 0;
					float3 Out_Albedo4_g170984 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g170984 = float3( 0,0,0 );
					float2 Out_NormalTS4_g170984 = float2( 0,0 );
					float3 Out_NormalWS4_g170984 = float3( 0,0,0 );
					float4 Out_Shader4_g170984 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g170984 = float4( 0,0,0,0 );
					float Out_MultiMask4_g170984 = 0;
					float Out_Grayscale4_g170984 = 0;
					float Out_Luminosity4_g170984 = 0;
					float Out_AlphaClip4_g170984 = 0;
					float Out_AlphaFade4_g170984 = 0;
					float3 Out_Translucency4_g170984 = float3( 0,0,0 );
					float Out_Transmission4_g170984 = 0;
					float Out_Thickness4_g170984 = 0;
					float Out_Diffusion4_g170984 = 0;
					float Out_Depth4_g170984 = 0;
					{
					Out_Dummy4_g170984 = Data4_g170984.Dummy;
					Out_Albedo4_g170984 = Data4_g170984.Albedo;
					Out_AlbedoRaw4_g170984 = Data4_g170984.AlbedoRaw;
					Out_NormalTS4_g170984 = Data4_g170984.NormalTS;
					Out_NormalWS4_g170984 = Data4_g170984.NormalWS;
					Out_Shader4_g170984 = Data4_g170984.Shader;
					Out_Emissive4_g170984= Data4_g170984.Emissive;
					Out_MultiMask4_g170984 = Data4_g170984.MultiMask;
					Out_Grayscale4_g170984 = Data4_g170984.Grayscale;
					Out_Luminosity4_g170984= Data4_g170984.Luminosity;
					Out_AlphaClip4_g170984 = Data4_g170984.AlphaClip;
					Out_AlphaFade4_g170984 = Data4_g170984.AlphaFade;
					Out_Translucency4_g170984 = Data4_g170984.Translucency;
					Out_Transmission4_g170984 = Data4_g170984.Transmission;
					Out_Thickness4_g170984 = Data4_g170984.Thickness;
					Out_Diffusion4_g170984 = Data4_g170984.Diffusion;
					Out_Depth4_g170984= Data4_g170984.Depth;
					}
					float3 temp_output_297_0_g170980 = Out_Albedo4_g170984;
					float3 In_Albedo3_g170995 = temp_output_297_0_g170980;
					float3 temp_output_297_23_g170980 = Out_AlbedoRaw4_g170984;
					float3 In_AlbedoRaw3_g170995 = temp_output_297_23_g170980;
					float2 In_NormalTS3_g170995 = Out_NormalTS4_g170984;
					float3 In_NormalWS3_g170995 = Out_NormalWS4_g170984;
					float4 In_Shader3_g170995 = Out_Shader4_g170984;
					float4 temp_cast_37 = (0.0).xxxx;
					half4 Visual_Emissive255_g170980 = Out_Emissive4_g170984;
					TVEModelData Data15_g170985 = Data16_g170483;
					float Out_Dummy15_g170985 = 0;
					float3 Out_PositionWS15_g170985 = float3( 0,0,0 );
					float3 Out_PositionWO15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWS15_g170985 = float3( 0,0,0 );
					float3 Out_PivotWO15_g170985 = float3( 0,0,0 );
					float3 Out_NormalWS15_g170985 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g170985 = float3( 0,0,0 );
					float4 Out_VertexData15_g170985 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g170985 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170985 = Data15_g170985.Dummy;
					Out_PositionWS15_g170985 = Data15_g170985.PositionWS;
					Out_PositionWO15_g170985 = Data15_g170985.PositionWO;
					Out_PivotWS15_g170985 = Data15_g170985.PivotWS;
					Out_PivotWO15_g170985 = Data15_g170985.PivotWO;
					Out_NormalWS15_g170985 = Data15_g170985.NormalWS;
					Out_ViewDirWS15_g170985 = Data15_g170985.ViewDirWS;
					Out_VertexData15_g170985 = Data15_g170985.VertexData;
					Out_BoundsData15_g170985 = Data15_g170985.BoundsData;
					}
					half4 Model_VertexMasks216_g170980 = Out_VertexData15_g170985;
					float4 break251_g170980 = Model_VertexMasks216_g170980;
					float4 break33_g170990 = _emissive_vert_mode;
					float temp_output_30_0_g170990 = ( break251_g170980.x * break33_g170990.x );
					float temp_output_29_0_g170990 = ( break251_g170980.y * break33_g170990.y );
					float temp_output_31_0_g170990 = ( break251_g170980.z * break33_g170990.z );
					float temp_output_28_0_g170990 = ( temp_output_30_0_g170990 + temp_output_29_0_g170990 + temp_output_31_0_g170990 + ( break251_g170980.w * break33_g170990.w ) );
					float clampResult17_g170989 = clamp( temp_output_28_0_g170990 , 0.0001 , 0.9999 );
					float temp_output_7_0_g170993 = _EmissiveMeshRemap.x;
					float temp_output_9_0_g170993 = ( clampResult17_g170989 - temp_output_7_0_g170993 );
					float lerpResult303_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170993 * _EmissiveMeshRemap.z ) + 0.0001 ) ) , _EmissiveMeshValue);
					float temp_output_6_0_g170992 = lerpResult303_g170980;
					#ifdef TVE_DUMMY
					float staticSwitch14_g170992 = ( temp_output_6_0_g170992 + _EmissiveMeshMode );
					#else
					float staticSwitch14_g170992 = temp_output_6_0_g170992;
					#endif
					half Emissive_MeshMask221_g170980 = staticSwitch14_g170992;
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170982) = _EmissiveMaskTex;
					SamplerState Sampler276_g170982 = sampler_Linear_Repeat;
					float4 temp_output_6_0_g170983 = _emissive_coord_value;
					#ifdef TVE_DUMMY
					float4 staticSwitch14_g170983 = ( temp_output_6_0_g170983 + ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) );
					#else
					float4 staticSwitch14_g170983 = temp_output_6_0_g170983;
					#endif
					half4 Emissive_Coords167_g170980 = staticSwitch14_g170983;
					float4 temp_output_37_0_g170982 = Emissive_Coords167_g170980;
					half4 Coords276_g170982 = temp_output_37_0_g170982;
					half2 TexCoord276_g170982 = IN.ase_texcoord1.xy;
					half4 localSampleMain276_g170982 = SampleMain( Texture276_g170982 , Sampler276_g170982 , Coords276_g170982 , TexCoord276_g170982 );
					UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170982) = _EmissiveMaskTex;
					SamplerState Sampler275_g170982 = sampler_Linear_Repeat;
					half4 Coords275_g170982 = temp_output_37_0_g170982;
					half2 TexCoord275_g170982 = IN.ase_texcoord2.xy;
					half4 localSampleExtra275_g170982 = SampleExtra( Texture275_g170982 , Sampler275_g170982 , Coords275_g170982 , TexCoord275_g170982 );
					#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
					float4 staticSwitch176_g170980 = localSampleExtra275_g170982;
					#else
					float4 staticSwitch176_g170980 = localSampleMain276_g170982;
					#endif
					half4 Emissive_MaskTex201_g170980 = staticSwitch176_g170980;
					float clampResult17_g170991 = clamp( (Emissive_MaskTex201_g170980).x , 0.0001 , 0.9999 );
					float temp_output_7_0_g170994 = _EmissiveMaskRemap.x;
					float temp_output_9_0_g170994 = ( clampResult17_g170991 - temp_output_7_0_g170994 );
					float lerpResult302_g170980 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g170994 * _EmissiveMaskRemap.z ) + 0.0001 ) ) , _EmissiveMaskValue);
					half Emissive_Mask103_g170980 = lerpResult302_g170980;
					float temp_output_279_0_g170980 = ( Emissive_MeshMask221_g170980 * Emissive_Mask103_g170980 );
					float3 appendResult293_g170980 = (float3(temp_output_279_0_g170980 , temp_output_279_0_g170980 , temp_output_279_0_g170980));
					half3 Local_EmissiveColor278_g170980 = appendResult293_g170980;
					float3 temp_output_316_0_g170980 = (TVE_GlowParams).xyz;
					TVEGlobalData Data15_g170981 = Data204_g170496;
					float Out_Dummy15_g170981 = 0;
					float4 Out_CoatDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g170981 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g170981 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g170981 = Data15_g170981.Dummy;
					Out_CoatDataRT15_g170981 = Data15_g170981.CoatDataRT;
					Out_PaintDataRT15_g170981 = Data15_g170981.PaintDataRT;
					Out_GlowDataRT15_g170981= Data15_g170981.GlowDataRT;
					Out_AtmoDataRT15_g170981= Data15_g170981.AtmoDataRT;
					Out_FadeDataRT15_g170981= Data15_g170981.FadeDataRT;
					Out_FormDataRT15_g170981 = Data15_g170981.FormDataRT;
					Out_FlowDataRT15_g170981 = Data15_g170981.FlowDataRT;
					}
					half4 Global_GlowParams179_g170980 = Out_GlowDataRT15_g170981;
					float3 temp_output_6_0_g170987 = (Global_GlowParams179_g170980).xyz;
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g170987 = ( temp_output_6_0_g170987 + _EmissiveElementMode );
					#else
					float3 staticSwitch14_g170987 = temp_output_6_0_g170987;
					#endif
					#ifdef TVE_EMISSIVE_ELEMENT
					float3 staticSwitch228_g170980 = staticSwitch14_g170987;
					#else
					float3 staticSwitch228_g170980 = temp_output_316_0_g170980;
					#endif
					float3 lerpResult299_g170980 = lerp( float3( 1,1,1 ) , staticSwitch228_g170980 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
					half3 Emissive_GlobalMask248_g170980 = lerpResult299_g170980;
					half3 Visual_AlbedoRaw306_g170980 = temp_output_297_23_g170980;
					float3 lerpResult307_g170980 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g170980 , _EmissiveColorMode);
					half3 Local_EmissiveValue88_g170980 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170980 * lerpResult307_g170980 );
					half3 Emissive_Blend260_g170980 = ( ( (Visual_Emissive255_g170980).xyz * Local_EmissiveColor278_g170980 ) * Local_EmissiveValue88_g170980 );
					float3 temp_output_3_0_g170986 = Emissive_Blend260_g170980;
					float temp_output_15_0_g170986 = _emissive_power_value;
					float3 temp_output_23_0_g170986 = ( temp_output_3_0_g170986 * temp_output_15_0_g170986 );
					half Local_EmissiveMask294_g170980 = temp_output_279_0_g170980;
					float4 appendResult295_g170980 = (float4(temp_output_23_0_g170986 , Local_EmissiveMask294_g170980));
					#ifdef TVE_EMISSIVE
					float4 staticSwitch129_g170980 = appendResult295_g170980;
					#else
					float4 staticSwitch129_g170980 = temp_cast_37;
					#endif
					half4 Final_Emissive184_g170980 = staticSwitch129_g170980;
					float4 In_Emissive3_g170995 = Final_Emissive184_g170980;
					float In_Grayscale3_g170995 = Out_Grayscale4_g170984;
					float In_Luminosity3_g170995 = Out_Luminosity4_g170984;
					float temp_output_297_11_g170980 = Out_MultiMask4_g170984;
					float In_MultiMask3_g170995 = temp_output_297_11_g170980;
					float In_AlphaClip3_g170995 = Out_AlphaClip4_g170984;
					float In_AlphaFade3_g170995 = Out_AlphaFade4_g170984;
					float3 In_Translucency3_g170995 = Out_Translucency4_g170984;
					float In_Transmission3_g170995 = Out_Transmission4_g170984;
					float In_Thickness3_g170995 = Out_Thickness4_g170984;
					float In_Diffusion3_g170995 = Out_Diffusion4_g170984;
					float In_Depth3_g170995 = Out_Depth4_g170984;
					{
					Data3_g170995.Dummy = In_Dummy3_g170995;
					Data3_g170995.Albedo = In_Albedo3_g170995;
					Data3_g170995.AlbedoRaw = In_AlbedoRaw3_g170995;
					Data3_g170995.NormalTS = In_NormalTS3_g170995;
					Data3_g170995.NormalWS = In_NormalWS3_g170995;
					Data3_g170995.Shader = In_Shader3_g170995;
					Data3_g170995.Emissive= In_Emissive3_g170995;
					Data3_g170995.MultiMask = In_MultiMask3_g170995;
					Data3_g170995.Grayscale = In_Grayscale3_g170995;
					Data3_g170995.Luminosity = In_Luminosity3_g170995;
					Data3_g170995.AlphaClip = In_AlphaClip3_g170995;
					Data3_g170995.AlphaFade = In_AlphaFade3_g170995;
					Data3_g170995.Translucency = In_Translucency3_g170995;
					Data3_g170995.Transmission = In_Transmission3_g170995;
					Data3_g170995.Thickness = In_Thickness3_g170995;
					Data3_g170995.Diffusion = In_Diffusion3_g170995;
					Data3_g170995.Depth = In_Depth3_g170995;
					}
					TVEVisualData Data4_g171014 = Data3_g170995;
					float Out_Dummy4_g171014 = 0;
					float3 Out_Albedo4_g171014 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171014 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171014 = float2( 0,0 );
					float3 Out_NormalWS4_g171014 = float3( 0,0,0 );
					float4 Out_Shader4_g171014 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171014 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171014 = 0;
					float Out_Grayscale4_g171014 = 0;
					float Out_Luminosity4_g171014 = 0;
					float Out_AlphaClip4_g171014 = 0;
					float Out_AlphaFade4_g171014 = 0;
					float3 Out_Translucency4_g171014 = float3( 0,0,0 );
					float Out_Transmission4_g171014 = 0;
					float Out_Thickness4_g171014 = 0;
					float Out_Diffusion4_g171014 = 0;
					float Out_Depth4_g171014 = 0;
					{
					Out_Dummy4_g171014 = Data4_g171014.Dummy;
					Out_Albedo4_g171014 = Data4_g171014.Albedo;
					Out_AlbedoRaw4_g171014 = Data4_g171014.AlbedoRaw;
					Out_NormalTS4_g171014 = Data4_g171014.NormalTS;
					Out_NormalWS4_g171014 = Data4_g171014.NormalWS;
					Out_Shader4_g171014 = Data4_g171014.Shader;
					Out_Emissive4_g171014= Data4_g171014.Emissive;
					Out_MultiMask4_g171014 = Data4_g171014.MultiMask;
					Out_Grayscale4_g171014 = Data4_g171014.Grayscale;
					Out_Luminosity4_g171014= Data4_g171014.Luminosity;
					Out_AlphaClip4_g171014 = Data4_g171014.AlphaClip;
					Out_AlphaFade4_g171014 = Data4_g171014.AlphaFade;
					Out_Translucency4_g171014 = Data4_g171014.Translucency;
					Out_Transmission4_g171014 = Data4_g171014.Transmission;
					Out_Thickness4_g171014 = Data4_g171014.Thickness;
					Out_Diffusion4_g171014 = Data4_g171014.Diffusion;
					Out_Depth4_g171014= Data4_g171014.Depth;
					}
					half3 Visual_Albedo199_g171013 = Out_Albedo4_g171014;
					float3 temp_cast_38 = (0.0).xxx;
					half3 Subsurface_Color264_g171013 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g171013 );
					half Visual_Transmission138_g171013 = Out_Transmission4_g171014;
					half Subsurface_Value268_g171013 = _SubsurfaceIntensityValue;
					TVEGlobalData Data15_g171016 = Data204_g170496;
					float Out_Dummy15_g171016 = 0;
					float4 Out_CoatDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_PaintDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_GlowDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_AtmoDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FadeDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FormDataRT15_g171016 = float4( 0,0,0,0 );
					float4 Out_FlowDataRT15_g171016 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171016 = Data15_g171016.Dummy;
					Out_CoatDataRT15_g171016 = Data15_g171016.CoatDataRT;
					Out_PaintDataRT15_g171016 = Data15_g171016.PaintDataRT;
					Out_GlowDataRT15_g171016= Data15_g171016.GlowDataRT;
					Out_AtmoDataRT15_g171016= Data15_g171016.AtmoDataRT;
					Out_FadeDataRT15_g171016= Data15_g171016.FadeDataRT;
					Out_FormDataRT15_g171016 = Data15_g171016.FormDataRT;
					Out_FlowDataRT15_g171016 = Data15_g171016.FlowDataRT;
					}
					half4 Global_GlowParams373_g171013 = Out_GlowDataRT15_g171016;
					float temp_output_6_0_g171019 = saturate( (Global_GlowParams373_g171013).w );
					#ifdef TVE_DUMMY
					float staticSwitch14_g171019 = ( temp_output_6_0_g171019 + _SubsurfaceElementMode );
					#else
					float staticSwitch14_g171019 = temp_output_6_0_g171019;
					#endif
					#ifdef TVE_SUBSURFACE_ELEMENT
					float staticSwitch367_g171013 = staticSwitch14_g171019;
					#else
					float staticSwitch367_g171013 = TVE_GlowParams.w;
					#endif
					float lerpResult403_g171013 = lerp( 1.0 , staticSwitch367_g171013 , ( _SubsurfaceGlobalValue * TVE_IsEnabled ));
					half Subsurface_GlobalMask369_g171013 = lerpResult403_g171013;
					float temp_output_301_11_g171013 = Out_MultiMask4_g171014;
					half Visual_MultiMask292_g171013 = temp_output_301_11_g171013;
					float lerpResult293_g171013 = lerp( 1.0 , Visual_MultiMask292_g171013 , _SubsurfaceMultiValue);
					half Subsurface_MultiMask296_g171013 = lerpResult293_g171013;
					half Custom_Mask363_g171013 = 1.0;
					#ifdef TVE_SUBSURFACE
					float staticSwitch345_g171013 = ( Visual_Transmission138_g171013 * Subsurface_Value268_g171013 * Subsurface_GlobalMask369_g171013 * Subsurface_MultiMask296_g171013 * Custom_Mask363_g171013 );
					#else
					float staticSwitch345_g171013 = 0.0;
					#endif
					half Final_Transmission269_g171013 = staticSwitch345_g171013;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch348_g171013 = ( Subsurface_Color264_g171013 * Final_Transmission269_g171013 * 10.0 );
					#else
					float3 staticSwitch348_g171013 = temp_cast_38;
					#endif
					half3 Final_Translucency254_g171013 = staticSwitch348_g171013;
					TVEModelData Data15_g171017 = Data16_g170483;
					float Out_Dummy15_g171017 = 0;
					float3 Out_PositionWS15_g171017 = float3( 0,0,0 );
					float3 Out_PositionWO15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWS15_g171017 = float3( 0,0,0 );
					float3 Out_PivotWO15_g171017 = float3( 0,0,0 );
					float3 Out_NormalWS15_g171017 = float3( 0,0,0 );
					float3 Out_ViewDirWS15_g171017 = float3( 0,0,0 );
					float4 Out_VertexData15_g171017 = float4( 0,0,0,0 );
					float4 Out_BoundsData15_g171017 = float4( 0,0,0,0 );
					{
					Out_Dummy15_g171017 = Data15_g171017.Dummy;
					Out_PositionWS15_g171017 = Data15_g171017.PositionWS;
					Out_PositionWO15_g171017 = Data15_g171017.PositionWO;
					Out_PivotWS15_g171017 = Data15_g171017.PivotWS;
					Out_PivotWO15_g171017 = Data15_g171017.PivotWO;
					Out_NormalWS15_g171017 = Data15_g171017.NormalWS;
					Out_ViewDirWS15_g171017 = Data15_g171017.ViewDirWS;
					Out_VertexData15_g171017 = Data15_g171017.VertexData;
					Out_BoundsData15_g171017 = Data15_g171017.BoundsData;
					}
					half3 Model_ViewDirWS392_g171013 = Out_ViewDirWS15_g171017;
					float dotResult324_g171013 = dot( -TVE_MainLightDirection , Model_ViewDirWS392_g171013 );
					float saferPower323_g171013 = abs( saturate( dotResult324_g171013 ) );
					#ifdef UNITY_PASS_FORWARDADD
					float staticSwitch330_g171013 = 0.0;
					#else
					float staticSwitch330_g171013 = ( pow( saferPower323_g171013 , _SubsurfaceAngleValue ) * _SubsurfaceScatteringValue );
					#endif
					half Mask_Subsurface_View320_g171013 = staticSwitch330_g171013;
					float3 temp_output_6_0_g171018 = ( Final_Translucency254_g171013 * Mask_Subsurface_View320_g171013 );
					#ifdef TVE_DUMMY
					float3 staticSwitch14_g171018 = ( temp_output_6_0_g171018 + _SubsurfaceAproxInfo );
					#else
					float3 staticSwitch14_g171018 = temp_output_6_0_g171018;
					#endif
					half3 Subsurface_Approximation333_g171013 = staticSwitch14_g171018;
					#ifdef TVE_SUBSURFACE
					float3 staticSwitch353_g171013 = ( Visual_Albedo199_g171013 + Subsurface_Approximation333_g171013 );
					#else
					float3 staticSwitch353_g171013 = Visual_Albedo199_g171013;
					#endif
					half3 Final_Albedo312_g171013 = staticSwitch353_g171013;
					float3 In_Albedo3_g171015 = Final_Albedo312_g171013;
					float3 In_AlbedoRaw3_g171015 = Out_AlbedoRaw4_g171014;
					float2 In_NormalTS3_g171015 = Out_NormalTS4_g171014;
					float3 In_NormalWS3_g171015 = Out_NormalWS4_g171014;
					float4 In_Shader3_g171015 = Out_Shader4_g171014;
					float4 In_Emissive3_g171015 = Out_Emissive4_g171014;
					float In_Grayscale3_g171015 = Out_Grayscale4_g171014;
					float In_Luminosity3_g171015 = Out_Luminosity4_g171014;
					float In_MultiMask3_g171015 = temp_output_301_11_g171013;
					float In_AlphaClip3_g171015 = Out_AlphaClip4_g171014;
					float In_AlphaFade3_g171015 = Out_AlphaFade4_g171014;
					float3 In_Translucency3_g171015 = Final_Translucency254_g171013;
					float In_Transmission3_g171015 = Final_Transmission269_g171013;
					#ifdef TVE_SUBSURFACE
					float staticSwitch351_g171013 = 0.0;
					#else
					float staticSwitch351_g171013 = 1.0;
					#endif
					half Final_Thickness275_g171013 = staticSwitch351_g171013;
					float In_Thickness3_g171015 = Final_Thickness275_g171013;
					float Final_Diffusion340_g171013 = _SubsurfaceDiffusion;
					float In_Diffusion3_g171015 = Final_Diffusion340_g171013;
					float In_Depth3_g171015 = Out_Depth4_g171014;
					{
					Data3_g171015.Dummy = In_Dummy3_g171015;
					Data3_g171015.Albedo = In_Albedo3_g171015;
					Data3_g171015.AlbedoRaw = In_AlbedoRaw3_g171015;
					Data3_g171015.NormalTS = In_NormalTS3_g171015;
					Data3_g171015.NormalWS = In_NormalWS3_g171015;
					Data3_g171015.Shader = In_Shader3_g171015;
					Data3_g171015.Emissive= In_Emissive3_g171015;
					Data3_g171015.MultiMask = In_MultiMask3_g171015;
					Data3_g171015.Grayscale = In_Grayscale3_g171015;
					Data3_g171015.Luminosity = In_Luminosity3_g171015;
					Data3_g171015.AlphaClip = In_AlphaClip3_g171015;
					Data3_g171015.AlphaFade = In_AlphaFade3_g171015;
					Data3_g171015.Translucency = In_Translucency3_g171015;
					Data3_g171015.Transmission = In_Transmission3_g171015;
					Data3_g171015.Thickness = In_Thickness3_g171015;
					Data3_g171015.Diffusion = In_Diffusion3_g171015;
					Data3_g171015.Depth = In_Depth3_g171015;
					}
					TVEVisualData Data4_g171040 = Data3_g171015;
					float Out_Dummy4_g171040 = 0;
					float3 Out_Albedo4_g171040 = float3( 0,0,0 );
					float3 Out_AlbedoRaw4_g171040 = float3( 0,0,0 );
					float2 Out_NormalTS4_g171040 = float2( 0,0 );
					float3 Out_NormalWS4_g171040 = float3( 0,0,0 );
					float4 Out_Shader4_g171040 = float4( 0,0,0,0 );
					float4 Out_Emissive4_g171040 = float4( 0,0,0,0 );
					float Out_MultiMask4_g171040 = 0;
					float Out_Grayscale4_g171040 = 0;
					float Out_Luminosity4_g171040 = 0;
					float Out_AlphaClip4_g171040 = 0;
					float Out_AlphaFade4_g171040 = 0;
					float3 Out_Translucency4_g171040 = float3( 0,0,0 );
					float Out_Transmission4_g171040 = 0;
					float Out_Thickness4_g171040 = 0;
					float Out_Diffusion4_g171040 = 0;
					float Out_Depth4_g171040 = 0;
					{
					Out_Dummy4_g171040 = Data4_g171040.Dummy;
					Out_Albedo4_g171040 = Data4_g171040.Albedo;
					Out_AlbedoRaw4_g171040 = Data4_g171040.AlbedoRaw;
					Out_NormalTS4_g171040 = Data4_g171040.NormalTS;
					Out_NormalWS4_g171040 = Data4_g171040.NormalWS;
					Out_Shader4_g171040 = Data4_g171040.Shader;
					Out_Emissive4_g171040= Data4_g171040.Emissive;
					Out_MultiMask4_g171040 = Data4_g171040.MultiMask;
					Out_Grayscale4_g171040 = Data4_g171040.Grayscale;
					Out_Luminosity4_g171040= Data4_g171040.Luminosity;
					Out_AlphaClip4_g171040 = Data4_g171040.AlphaClip;
					Out_AlphaFade4_g171040 = Data4_g171040.AlphaFade;
					Out_Translucency4_g171040 = Data4_g171040.Translucency;
					Out_Transmission4_g171040 = Data4_g171040.Transmission;
					Out_Thickness4_g171040 = Data4_g171040.Thickness;
					Out_Diffusion4_g171040 = Data4_g171040.Diffusion;
					Out_Depth4_g171040= Data4_g171040.Depth;
					}
					float temp_output_3_0_g171045 = Out_AlphaClip4_g171040;
					float Alpha20_g171045 = temp_output_3_0_g171045;
					float temp_output_15_0_g171045 = 0.0;
					float Treshold20_g171045 = temp_output_15_0_g171045;
					{
					#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
					clip(Alpha20_g171045 - Treshold20_g171045);
					#endif
					}
					

					o.Alpha = saturate( ( Alpha20_g171045 * Out_AlphaFade4_g171040 ) );

					#if defined( ASE_DEPTH_WRITE_ON )
						float DeviceDepth = IN.pos.z;
					#endif

					#ifdef _ALPHATEST_SHADOW_ON
						if (unity_LightShadowBias.z != 0.0)
							clip(o.Alpha - AlphaClipThresholdShadow);
						#ifdef _ALPHATEST_ON
						else
							clip(o.Alpha - AlphaClipThreshold);
						#endif
					#else
						#ifdef _ALPHATEST_ON
							clip(o.Alpha - AlphaClipThreshold);
						#endif
					#endif

					#if defined( CAN_SKIP_VPOS )
					float2 vpos = IN.pos;
					#endif

					#ifdef UNITY_STANDARD_USE_DITHER_MASK
						half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
						clip(alphaRef - 0.01);
					#endif

					#if defined( ASE_DEPTH_WRITE_ON )
						outputDepth = DeviceDepth;
					#endif

					SHADOW_CASTER_FRAGMENT(IN)
				}
			ENDCG
		}
		
	}
	CustomEditor "TheVisualEngine.MaterialGUI"
	
	Fallback Off
}
/*ASEBEGIN
Version=19802
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1285;-14592,-256;Inherit;False;Block Model;46;;170478;7ad7765e793a6714babedee0033c36e9;14,240,1,290,1,291,1,289,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1209;-14272,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1210;-13824,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1265;-14272,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1211;-13568,-256;Inherit;False;Block Global;58;;170496;212e17d4006dc88449d56ce0340cb5ff;17,315,1,311,1,317,1,388,1,321,1,398,1,404,1,337,1,282,1,396,1,283,1,285,1,276,1,349,1,402,1,385,1,308,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1217;-12800,-256;Inherit;False;1265;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1213;-8576,-256;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1212;-13248,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1279;-12544,-256;Inherit;False;Block Pivots Sub;-1;;170579;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1214;-8320,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1215;-8320,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1280;-12160,-256;Inherit;False;Block Perspective;501;;170582;df5d9c54e8e4098459ebd6b9eabbd8ca;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1289;-8320,-256;Inherit;False;Block Main;102;;170617;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1225;-12160,-128;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1218;-7936,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1219;-7936,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1220;-7936,-256;Inherit;False;Block Layer;126;;170638;5f6a6b9e0b5515744bf8e48a9ccead1b;13,986,1,709,1,726,1,748,1,1070,1,1066,1,1048,1,1045,1,1053,1,1035,1,1055,1,1051,1,1008,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1228;-11776,-256;Inherit;False;Block Size Fade;507;;170679;467c36a7402d0274b9ad844bbc95de33;3,228,1,225,1,233,0;3;146;OBJECT;0,0,0,0;False;186;OBJECT;0,0,0,0;False;231;FLOAT;1;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1290;-11776,-128;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1222;-7552,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1287;-7552,-256;Inherit;False;Block Detail;178;;170687;a5b52fdec7b855a4fba859a90e837892;13,990,1,709,1,726,1,748,1,1073,1,1083,1,1062,1,1057,1,1067,1,1048,1,1069,1,1065,1,1013,0;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1288;-11392,-256;Inherit;False;Block Motion;517;;170727;d9ac7ad4f0387004fb72c16019bf8392;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1903
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1226;-7168,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1227;-7168,-256;Inherit;False;Block Occlusion;227;;170788;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1263;-10944,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1229;-6784,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1230;-6784,-256;Inherit;False;Block Gradient;239;;170798;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1274;-9472,-256;Inherit;False;1263;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1231;-6400,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1232;-6400,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1233;-6400,-256;Inherit;False;Block Variation;252;;170808;f25afe21028a28a4e8dee6f6da7bc1a5;1,253,0;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1282;-9216,-256;Inherit;False;Block Interp;-1;;170819;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1234;-6016,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1235;-6016,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1236;-6016,-256;Inherit;False;Block Tinting;265;;170820;9f39e156ea8d89e4997ea2a1e194137e;10,352,1,416,1,414,1,407,1,400,0,334,1,336,1,339,1,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1269;-8896,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1237;-5632,-256;Inherit;False;Block Dryness;295;;170845;f05795de23f951c45bb73c8b4321e4b7;10,398,1,510,0,507,1,504,1,482,0,400,1,403,1,405,1,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1264;-5632,-128;Inherit;False;1269;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1238;-5248,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1239;-5248,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1284;-5248,-256;Inherit;False;Block Highlight;0;;170869;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1241;-4864,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1242;-4864,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1243;-4864,-256;Inherit;False;Block Overlay;328;;170872;8ae9c8285a7817844a51243251284d21;11,813,1,821,1,819,1,942,1,940,1,944,0,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1244;-4480,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1245;-4480,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1246;-4480,-256;Inherit;False;Block Wetness;376;;170909;52c5a1f52507fc44e926833b126e7855;10,850,1,1124,1,1120,1,1075,1,945,1,930,1,857,1,1092,1,851,1,1107,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1247;-4096,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1248;-4096,-256;Inherit;False;Block Cutout;418;;170938;866b4a5fe67e7f34085520e1bb5be2b7;8,775,1,846,1,840,1,777,1,815,1,853,0,779,1,817,1;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1251;-3712,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1252;-3712,-256;Inherit;False;Block Dithering;438;;170955;c7e02d28445e979479d493926695e6f3;6,843,1,859,1,844,1,827,1,879,0,825,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;824;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1250;-3712,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1249;-11008,-256;Inherit;False;Block Transform;-1;;170970;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1255;-3328,-256;Inherit;False;Block Emissive;457;;170980;64497f287b9096b43b688b52b4a0bf20;6,282,0,273,1,319,1,312,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1254;-3328,-64;Inherit;False;1212;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1267;-3328,-128;Inherit;False;1209;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1253;-10624,-256;Inherit;False;Block Normal;564;;170996;87f7defafe56dbf4b954caf5efc3f5ca;6,1722,1,1724,1,1713,0,1693,1,1700,0,1638,0;2;146;OBJECT;0,0,0,0;False;1631;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1257;-2944,-256;Inherit;False;Block Subsurface;481;;171013;d738d295ada6b1f409db6776b5efe789;5,315,1,413,1,411,1,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1283;-10240,-256;Inherit;False;Block Pivots Add;-1;;171021;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1258;-2624,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1266;-9920,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1259;-1920,-256;Inherit;False;1258;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1260;-1920,-192;Inherit;False;1266;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1171;-1920,-512;Half;False;Property;_render_cull;_render_cull;586;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1172;-1728,-512;Half;False;Property;_render_src;_render_src;587;1;[HideInInspector];Create;True;0;0;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1173;-1536,-512;Half;False;Property;_render_dst;_render_dst;588;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1174;-1344,-512;Half;False;Property;_render_zw;_render_zw;589;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1175;-640,-512;Inherit;False;Base Compile;-1;;171024;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1176;-1152,-512;Half;False;Property;_render_coverage;_render_coverage;590;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1177;-1920,-640;Half;False;Property;_IsGeneralShader;_IsGeneralShader;591;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1178;-1696,-640;Half;False;Property;_IsSimpleShader;_IsSimpleShader;592;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1291;-1664,-256;Inherit;False;Block Render;2;;171035;a46c8f81ec84cc34b8c5bbba7c174e1d;0;3;17;OBJECT;;False;19;OBJECT;;False;125;FLOAT;0;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1180;-1152,-256;Float;False;False;-1;2;AmplifyShaderEditor.MaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;5;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1182;-1152,-256;Float;False;False;-1;2;AmplifyShaderEditor.MaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1183;-1152,-256;Float;False;False;-1;2;AmplifyShaderEditor.MaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1184;-1152,-256;Float;False;False;-1;2;AmplifyShaderEditor.MaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1185;-1152,-256;Float;False;False;-1;2;AmplifyShaderEditor.MaterialInspector;0;18;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1181;-1120,-256;Float;False;True;-1;2;TheVisualEngine.MaterialGUI;0;14;BOXOPHOBIC/The Visual Engine/Geometry/General Simple Lit;28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;17;True;True;1;0;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;2;638507966350037256;Surface;0;0;  Blend;0;0;  Dither Shadows;1;0;Two Sided;0;638507966389794542;Deferred Pass;0;638541444818398171;Normal Space,InvertActionOnDeselection;0;0;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;0;0;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Write Depth;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638507966500833844;0;6;False;True;True;False;True;True;False;;True;0
WireConnection;1209;0;1285;314
WireConnection;1265;0;1285;128
WireConnection;1211;206;1210;0
WireConnection;1212;0;1211;151
WireConnection;1279;146;1217;0
WireConnection;1280;146;1279;128
WireConnection;1289;225;1213;0
WireConnection;1220;585;1289;106
WireConnection;1220;633;1214;0
WireConnection;1220;974;1215;0
WireConnection;1228;146;1280;128
WireConnection;1228;186;1225;0
WireConnection;1287;585;1220;552
WireConnection;1287;633;1218;0
WireConnection;1287;971;1219;0
WireConnection;1288;146;1228;128
WireConnection;1288;212;1290;0
WireConnection;1227;144;1287;552
WireConnection;1227;204;1222;0
WireConnection;1263;0;1288;1903
WireConnection;1230;144;1227;116
WireConnection;1230;222;1226;0
WireConnection;1233;144;1230;116
WireConnection;1233;222;1229;0
WireConnection;1282;22;1274;0
WireConnection;1236;198;1233;116
WireConnection;1236;223;1232;0
WireConnection;1236;207;1231;0
WireConnection;1269;0;1282;0
WireConnection;1237;279;1236;204
WireConnection;1237;297;1235;0
WireConnection;1237;281;1234;0
WireConnection;1284;144;1237;346
WireConnection;1284;212;1264;0
WireConnection;1243;572;1284;116
WireConnection;1243;596;1238;0
WireConnection;1243;600;1239;0
WireConnection;1246;572;1243;566
WireConnection;1246;596;1242;0
WireConnection;1246;600;1241;0
WireConnection;1248;572;1246;566
WireConnection;1248;596;1245;0
WireConnection;1248;600;1244;0
WireConnection;1252;572;1248;566
WireConnection;1252;596;1247;0
WireConnection;1249;146;1288;128
WireConnection;1255;146;1252;566
WireConnection;1255;148;1250;0
WireConnection;1255;178;1251;0
WireConnection;1253;146;1249;128
WireConnection;1257;146;1255;183
WireConnection;1257;385;1267;0
WireConnection;1257;371;1254;0
WireConnection;1283;146;1253;128
WireConnection;1258;0;1257;183
WireConnection;1266;0;1283;128
WireConnection;1291;17;1259;0
WireConnection;1291;19;1260;0
WireConnection;1181;0;1291;21
WireConnection;1181;1;1291;22
WireConnection;1181;20;1291;108
WireConnection;1181;21;1291;109
WireConnection;1181;2;1291;34
WireConnection;1181;7;1291;28
WireConnection;1181;15;1291;30
WireConnection;1181;16;1291;32
WireConnection;1181;17;1291;33
ASEEND*/
//CHKSM=7B98EE5ABC9F00A91C1BBFF33CA0CB73C7512DE2
