// Made with Amplify Shader Editor v1.9.8.2
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Landscape/Terrain Standard Lit"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector] _IsVersion( "_IsVersion", Float ) = 2070
		[HideInInspector] _IsTVEShader( "_IsTVEShader", Float ) = 1
		[HideInInspector] _IsShared( "_IsShared", Float ) = 0
		[HideInInspector] _IsIdentifier( "_IsIdentifier", Float ) = 0
		[HideInInspector] _IsCollected( "_IsCollected", Float ) = 0
		[HideInInspector] _IsConverted( "_IsConverted", Float ) = 0
		[HideInInspector] _IsCustomShader( "_IsCustomShader", Float ) = 0
		[StyledCategory(Render Settings, true, 0, 10)] _RenderCategory( "[ Render Category ]", Float ) = 1
		[Enum(Off,0,On,1)] _RenderSSR( "Render SSR", Float ) = 0
		[Enum(Off,0,On,1)] _RenderDecals( "Render Decals", Float ) = 0
		[Enum(Off,0,On,1)] _RenderSpecular( "Render Specular", Float ) = 1
		[Enum(Off,0,On,1)] _RenderShadow( "Render Shadows", Float ) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)] _RenderFilter( "Render Filtering", Float ) = 0
		[Enum(Off,0,On,1)] _RenderClip( "Render Clipping", Float ) = 0
		[StyledSpace(10)] _RenderEnd( "[ Render End ]", Float ) = 1
		[HideInInspector] _NoiseTex3D( "Noise Mask 3D", 3D ) = "white" {}
		[StyledCategory(Global Settings, true, 0, 10)] _GlobalCategory( "[ Global Category ]", Float ) = 1
		[StyledEnum(Paint Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalPaintLayerValue( "Global Paint Layer", Float ) = 0
		[StyledEnum(Atmo Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalAtmoLayerValue( "Global Atmo Layer", Float ) = 0
		[StyledEnum(Fade Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFadeLayerValue( "Global Fade Layer", Float ) = 0
		[StyledEnum(Glow Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalGlowLayerValue( "Global Glow Layer", Float ) = 0
		[StyledEnum(Form Layers, Default 0 Layer_1 1 Layer_2 2 Layer_3 3 Layer_4 4 Layer_5 5 Layer_6 6 Layer_7 7 Layer_8 8, 0, 0)] _GlobalFormLayerValue( "Global Form Layer", Float ) = 0
		[StyledSpace(10)] _GlobalEnd( "[ Global End ]", Float ) = 1
		[StyledCategory(Terrain Settings, true, 0, 10)] _CategoryTerrain( "[Category Terrain ]", Float ) = 1
		[HideInInspector] _TerrainSize( "Terrain Size", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainPosition( "Terrain Position", Vector ) = ( 0, 0, 0, 0 )
		[Enum(4 Layers,4,8 Layers,8,12 Layers,12,16 Layers,16)] _TerrainLayersMode( "Terrain Layers", Float ) = 4
		[Enum(Default,0,Packed,1)] _TerrainTextureMode( "Terrain Maps", Float ) = 0
		[HDR] _TerrainColor( "Terrain Color", Color ) = ( 1, 1, 1, 1 )
		_TerrainNormalValue( "Terrain Normal", Range( -8, 8 ) ) = 1
		_TerrainMetallicValue( "Terrain Metallic", Range( 0, 1 ) ) = 1
		_TerrainOcclusionValue( "Terrain Occlusion", Range( 0, 1 ) ) = 1
		_TerrainSmoothnessValue( "Terrain Smoothness", Range( 0, 1 ) ) = 1
		_TerrainHeightBlendValue( "Terrain Height Blend", Range( 0, 1 ) ) = 1
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)][Space(10)] _TerrainSampleMode1( "Terrain 01 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode2( "Terrain 02 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode3( "Terrain 03 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode4( "Terrain 04 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode5( "Terrain 05 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode6( "Terrain 06 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode7( "Terrain 07 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode8( "Terrain 08 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode9( "Terrain 09 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode10( "Terrain 10 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode11( "Terrain 11 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode12( "Terrain 12 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode13( "Terrain 13 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode14( "Terrain 14 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode15( "Terrain 15 Sampling", Float ) = 0
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochasitc Triplanar,3)] _TerrainSampleMode16( "Terrain 16 Sampling", Float ) = 0
		[HideInInspector] _TerrainHolesTex( "Terrain Holes", 2D ) = "white" {}
		[HideInInspector] _TerrainControlTex1( "Terrain Control 01", 2D ) = "black" {}
		[HideInInspector] _TerrainControlTex2( "Terrain Control 02", 2D ) = "black" {}
		[HideInInspector] _TerrainControlTex3( "Terrain Control 03", 2D ) = "black" {}
		[HideInInspector] _TerrainControlTex4( "Terrain Control 04", 2D ) = "black" {}
		[HideInInspector] _TerrainColor1( "Terrain Color 01", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor2( "Terrain Color 02", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor3( "Terrain Color 03", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor4( "Terrain Color 04", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor5( "Terrain Color 05", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor6( "Terrain Color 06", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor7( "Terrain Color 07", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor8( "Terrain Color 08", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor9( "Terrain Color 09", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor10( "Terrain Color 10", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor11( "Terrain Color 11", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor12( "Terrain Color 12", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor13( "Terrain Color 13", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor14( "Terrain Color 14", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor15( "Terrain Color 15", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainColor16( "Terrain Color 16", Color ) = ( 1, 1, 1, 1 )
		[HideInInspector] _TerrainAlbedoTex1( "Terrain Albedo 01", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex2( "Terrain Albedo 02", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex3( "Terrain Albedo 03", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex4( "Terrain Albedo 04", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex5( "Terrain Albedo 05", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex6( "Terrain Albedo 06", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex7( "Terrain Albedo 07", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex8( "Terrain Albedo 08", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex9( "Terrain Albedo 09", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex10( "Terrain Albedo 10", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex11( "Terrain Albedo 11", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex12( "Terrain Albedo 12", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex13( "Terrain Albedo 13", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex14( "Terrain Albedo 14", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex15( "Terrain Albedo 15", 2D ) = "white" {}
		[HideInInspector] _TerrainAlbedoTex16( "Terrain Albedo 16", 2D ) = "white" {}
		[HideInInspector] _TerrainNormalTex1( "Terrain Normal 01", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex2( "Terrain Normal 02", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex3( "Terrain Normal 03", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex4( "Terrain Normal 04", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex5( "Terrain Normal 05", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex6( "Terrain Normal 06", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex7( "Terrain Normal 07", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex8( "Terrain Normal 08", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex13( "Terrain Normal 13", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex9( "Terrain Normal 09", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex10( "Terrain Normal 10", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex11( "Terrain Normal 11", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex12( "Terrain Normal 12", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex14( "Terrain Normal 14", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex15( "Terrain Normal 15", 2D ) = "gray" {}
		[HideInInspector] _TerrainNormalTex16( "Terrain Normal 16", 2D ) = "gray" {}
		[HideInInspector] _TerrainShaderTex1( "Terrain Shader 01", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex2( "Terrain Shader 02", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex3( "Terrain Shader 03", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex4( "Terrain Shader 04", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex5( "Terrain Shader 05", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex6( "Terrain Shader 06", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex7( "Terrain Shader 07", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex8( "Terrain Shader 08", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex9( "Terrain Shader 09", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex10( "Terrain Shader 10", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex11( "Terrain Shader 11", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex12( "Terrain Shader 12", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex13( "Terrain Shader 13", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex14( "Terrain Shader 14", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex15( "Terrain Shader 15", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderTex16( "Terrain Shader 16", 2D ) = "white" {}
		[HideInInspector] _TerrainShaderMin1( "Shader Min 01", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp1( "Shader Rcp 01", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin2( "Shader Min 02", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp2( "Shader Rcp 02", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin3( "Shader Min 03", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp3( "Shader Rcp 03", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin4( "Shader Min 04", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp4( "Shader Rcp 04", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin5( "Shader Min 05", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp5( "Shader Rcp 05", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin6( "Shader Min 06", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp6( "Shader Rcp 06", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin7( "Shader Min 07", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp7( "Shader Rcp 07", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin8( "Shader Min 08", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp8( "Shader Rcp 08", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin9( "Shader Min 09", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp9( "Shader Rcp 09", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin10( "Shader Min 10", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp10( "Shader Rcp 10", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin11( "Shader Min 11", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp11( "Shader Rcp 11", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin12( "Shader Min 12", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp12( "Shader Rcp 12", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin13( "Shader Min 13", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp13( "Shader Rcp 13", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin14( "Shader Min 14", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp14( "Shader Rcp 14", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin15( "Shader Min 15", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp15( "Shader Rcp 15", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderMin16( "Shader Min 16", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainShaderRcp16( "Shader Rcp 16", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams1( "Terrain Params 01", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams2( "Terrain Params 02", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams3( "Terrain Params 03", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams4( "Terrain Params 04", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams5( "Terrain Params 05", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams6( "Terrain Params 06", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams7( "Terrain Params 07", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams8( "Terrain Params 08", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams9( "Terrain Params 09", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams10( "Terrain Params 10", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams11( "Terrain Params 11", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams12( "Terrain Params 12", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams13( "Terrain Params 13", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams14( "Terrain Params 14", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams15( "Terrain Params 15", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainParams16( "Terrain Params 16", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainCoord1( "Terrain Coords 01", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord2( "Terrain Coords 02", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord3( "Terrain Coords 03", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord5( "Terrain Coords 05", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord4( "Terrain Coords 04", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord6( "Terrain Coords 06", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord7( "Terrain Coords 07", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord8( "Terrain Coords 08", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord9( "Terrain Coords 09", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord10( "Terrain Coords 10", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord11( "Terrain Coords 11", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord12( "Terrain Coords 12", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord13( "Terrain Coords 13", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord14( "Terrain Coords 14", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord15( "Terrain Coords 15", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainCoord16( "Terrain Coords 16", Vector ) = ( 1, 1, 0, 0 )
		[HideInInspector] _TerrainSpecular1( "Terrain Specular 01", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular2( "Terrain Specular 02", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular3( "Terrain Specular 03", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular4( "Terrain Specular 04", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular5( "Terrain Specular 05", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular6( "Terrain Specular 06", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular7( "Terrain Specular 07", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular8( "Terrain Specular 08", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular9( "Terrain Specular 09", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular10( "Terrain Specular 10", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular11( "Terrain Specular 11", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular12( "Terrain Specular 12", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular13( "Terrain Specular 13", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular14( "Terrain Specular 14", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular15( "Terrain Specular 15", Color ) = ( 0, 0, 0, 0 )
		[HideInInspector] _TerrainSpecular16( "Terrain Specular 16", Color ) = ( 0, 0, 0, 0 )
		[StyledSpace(10)] _EndTerrain( "[End Terrain ]", Float ) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)] _TintingCategory( "[ Tinting Category ]", Float ) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)] _TintingBakeInfo( "Tinting Baking Info", Float ) = 0
		_TintingIntensityValue( "Tinting Intensity", Range( 0, 1 ) ) = 0
		_TintingGrayValue( "Tinting Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _TintingColor( "Tinting Color", Color ) = ( 1, 1, 1, 1 )
		[StyledSpace(10)] _TintingSpace( "[ Tinting Space ]", Float ) = 1
		_TintingGlobalValue( "Tinting Paint Mask", Range( 0, 1 ) ) = 1
		_TintingMultiValue( "Tinting Multi Mask", Range( 0, 1 ) ) = 1
		_TintingLumaValue( "Tinting Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _TintingLumaRemap( "Tinting Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _TintingBlendRemap( "Tinting Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _TintingElementMode( "Use Paint Elements", Float ) = 0
		[StyledSpace(10)] _TintingEnd( "[ Tinting End]", Float ) = 1
		[StyledCategory(Dryness Settings, true, 0, 10)] _DrynessCategory( "[ Dryness Category ]", Float ) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)] _DrynessBakeInfo( "Dryness Baking Info", Float ) = 0
		_DrynessIntensityValue( "Dryness Intensity", Range( 0, 1 ) ) = 0
		_DrynessGrayValue( "Dryness Gray", Range( 0, 1 ) ) = 1
		[HDR][Gamma] _DrynessColor( "Dryness Color", Color ) = ( 1, 0.7083712, 0.495283, 1 )
		_DrynessSubsurfaceValue( "Dryness Subsurface", Range( 0, 1 ) ) = 0.5
		_DrynessSmoothnessValue( "Dryness Smoothness", Range( 0, 1 ) ) = 0.5
		[StyledSpace(10)] _DrynessSpace( "[ Dryness Space ]", Float ) = 1
		_DrynessGlobalValue( "Dryness Atmo Mask", Range( 0, 1 ) ) = 1
		_DrynessMultiValue( "Dryness Multi Mask", Range( 0, 1 ) ) = 1
		_DrynessLumaValue( "Dryness Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _DrynessLumaRemap( "Dryness Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _DrynessBlendRemap( "Dryness Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _DrynessElementMode( "Use Atmo Elements", Float ) = 0
		[StyledSpace(10)] _DrynessEnd( "[ Dryness End ]", Float ) = 1
		[StyledCategory(Overlay Settings, true, 0, 10)] _OverlayCategory( "[ Overlay Category ]", Float ) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)] _OverlayBakeInfo( "Overlay Baking Info", Float ) = 0
		_OverlayIntensityValue( "Overlay Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,On,1)] _OverlayTextureMode( "Overlay Maps", Float ) = 0
		[Space(10)][StyledTextureSingleLine] _OverlayAlbedoTex( "Overlay Albedo", 2D ) = "white" {}
		[StyledTextureSingleLine] _OverlayNormalTex( "Overlay Normal", 2D ) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)] _OverlaySampleMode( "Overlay Sampling", Float ) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)] _OverlayCoordMode( "Overlay UV Mode", Float ) = 0
		[StyledVector(9)] _OverlayCoordValue( "Overlay UV Value", Vector ) = ( 1, 1, 0, 0 )
		[HDR] _OverlayColor( "Overlay Color", Color ) = ( 0.2815503, 0.4009458, 0.5377358, 1 )
		_OverlayNormalValue( "Overlay Normal", Range( -8, 8 ) ) = 1
		_OverlaySubsurfaceValue( "Overlay Subsurface", Range( 0, 1 ) ) = 0.5
		_OverlaySmoothnessValue( "Overlay Smoothness", Range( 0, 1 ) ) = 0.5
		[Space(10)][StyledTextureSingleLine] _OverlayGlitterTexRT( "Overlay Glitter RT", 2D ) = "black" {}
		[Space(10)] _OverlayGlitterIntensityValue( "Overlay Glitter Intensity", Range( 0, 1 ) ) = 0
		[HDR] _OverlayGlitterColor( "Overlay Glitter Color", Color ) = ( 0.7215686, 1.913725, 2.996078, 1 )
		_OverlayGlitterTillingValue( "Overlay Glitter Tilling", Range( 0, 8 ) ) = 4
		_OverlayGlitterDistValue( "Overlay Glitter Limit", Range( 0, 200 ) ) = 100
		[StyledSpace(10)] _OverlaySpace( "[ Overlay Space ]", Float ) = 1
		_OverlayGlobalValue( "Overlay Atmo Mask", Range( 0, 1 ) ) = 1
		_OverlayLumaValue( "Overlay Luma Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _OverlayLumaRemap( "Overlay Luma Mask", Vector ) = ( 0, 1, 0, 0 )
		_OverlayProjValue( "Overlay ProjY Mask", Range( 0, 1 ) ) = 0.5
		[StyledRemapSlider] _OverlayProjRemap( "Overlay ProjY Mask", Vector ) = ( 0, 1, 0, 0 )
		[StyledRemapSlider] _OverlayBlendRemap( "Overlay Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledToggle] _OverlayElementMode( "Use Atmo Elements", Float ) = 0
		[HideInInspector] _overlay_coord_value( "_overlay_coord_value", Vector ) = ( 1, 1, 0, 0 )
		[StyledSpace(10)] _OverlayEnd( "[ Overlay End ]", Float ) = 1
		[StyledCategory(Wetness Settings, true, 0, 10)] _WetnessCategory( "[ Wetness Category ]", Float ) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)] _WetnessBakeInfo( "Wetness Baking Info", Float ) = 0
		_WetnessIntensityValue( "Wetness Intensity", Range( 0, 1 ) ) = 0
		_WetnessContrastValue( "Wetness Contrast", Range( 0, 1 ) ) = 0.2
		_WetnessSmoothnessValue( "Wetness Smoothness", Range( 0, 1 ) ) = 0.8
		[Space(10)] _WetnessGlobalValue( "Wetness Atmo Mask", Range( 0, 1 ) ) = 1
		[Space(10)] _WetnessWaterIntensityValue( "Wetness Water Intensity", Range( 0, 1 ) ) = 0
		[HDR] _WetnessWaterColor( "Wetness Water Color", Color ) = ( 0.5420078, 0.7924528, 0.6068289, 1 )
		_WetnessWaterBaseValue( "Wetness Water Base Mask", Range( 0, 1 ) ) = 1
		[StyledRemapSlider] _WetnessWaterBlendRemap( "Wetness Water Blend Mask", Vector ) = ( 0.1, 0.2, 0, 0 )
		[Space(10)][StyledTextureSingleLine] _WetnessDropsTexRT( "Wetness Drops RT", 2D ) = "white" {}
		[Space(10)] _WetnessDropsIntensityValue( "Wetness Drops Intensity", Range( 0, 1 ) ) = 1
		_WetnessDropsNormalValue( "Wetness Drops Normal", Range( -8, 8 ) ) = 1
		_WetnessDropsTillingValue( "Wetness Drops Tilling", Range( 0, 8 ) ) = 0.25
		_WetnessDropsDistValue( "Wetness Drops Limit", Range( 0, 200 ) ) = 50
		[Space(10)][StyledToggle] _WetnessElementMode( "Use Atmo Elements", Float ) = 0
		[StyledSpace(10)] _WetnessEnd( "[ Wetness End ]", Float ) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)] _CutoutCategory( "[ Cutout Category ]", Float ) = 1
		[StyledMessage(Info, The current settings are pre baked to the impostor., 0, 10)] _CutoutBakeInfo( "Cutout Baking Info", Float ) = 0
		_CutoutIntensityValue( "Cutout Intensity", Range( 0, 1 ) ) = 0
		[Enum(Off,0,Affect Shadow Pass,1)] _CutoutShadowMode( "Cutout Shadow", Float ) = 1
		[StyledSpace(10)] _CutoutSpace( "[ Cutout Space ]", Float ) = 1
		_CutoutGlobalValue( "Cutout Fade Mask", Range( 0, 1 ) ) = 1
		[Space(10)][StyledToggle] _CutoutElementMode( "Use Fade Elements", Float ) = 0
		[StyledSpace(10)] _CutoutEnd( "[ Cutout End ]", Float ) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)] _EmissiveCategory( "[ Emissive Category ]", Float ) = 1
		_EmissiveIntensityValue( "Emissive Intensity", Range( 0, 1 ) ) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)] _EmissiveFlagMode( "Emissive GI Mode", Float ) = 0
		[Enum(Constant,0,Multiply With Base Albedo,1)] _EmissiveColorMode( "Emissive Color", Float ) = 0
		[HDR] _EmissiveColor( "Emissive Color", Color ) = ( 1, 1, 1, 1 )
		[Enum(Nits,0,EV100,1)] _EmissivePowerMode( "Emissive Value", Float ) = 0
		_EmissivePowerValue( "Emissive Value", Float ) = 1
		_EmissiveExposureValue( "Emissive Weight", Range( 0, 1 ) ) = 0.5
		[Space(10)] _EmissiveGlobalValue( "Emissive Glow Mask", Range( 0, 1 ) ) = 1
		[Space(10)][StyledToggle] _EmissiveElementMode( "Use Glow Elements", Float ) = 0
		[StyledSpace(10)] _EmissiveEnd( "[ Emissive End ]", Float ) = 1
		[HideInInspector] _emissive_power_value( "_emissive_power_value", Float ) = 1
		[StyledCategory(Conform Settings, true, 0, 10)] _ConformCategory( "[ Conform Category ]", Float ) = 1
		[StyledMessage(Info, The Conform feature require elements to work. Use Form Surface or Form Height elements to modify the terrain height. Please note__ the height effect is only visual and it does not affect the terrain collision height., 0, 10)] _ConformInfo( "# Conform Info", Float ) = 0
		_ConformHeightValue( "Conform Height", Range( 0, 1 ) ) = 0
		[Enum(Additive,0,Replace,1)] _ConformHeightMode( "Conform Height Mode", Float ) = 1
		[StyledSpace(10)] _ConformEnd( "[ Conform End ]", Float ) = 1
		[HideInInspector] _object_phase_mode( "_object_phase_mode", Vector ) = ( 0, 0, 0, 0 )
		[HideInInspector] _IsTerrainShader( "_IsTerrainShader", Float ) = 1
		[HideInInspector] _IsStandardShader( "_IsStandardShader", Float ) = 1

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		//[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _DstBlend2("__dst2", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][ToggleUI] _PerPixelSorting("_PerPixelSorting", Float) = 0.0
		[HideInInspector][Enum(UnityEngine.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" "TerrainCompatible"="True" }

		AlphaToMask Off

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
            #define _ENERGY_CONSERVING_SPECULAR 1
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #define ASE_FRAGMENT_NORMAL 0
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _MATERIAL_FEATURE_SPECULAR_COLOR 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_VERSION 19802
            #define ASE_SRP_VERSION 170004
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ RENDERING_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.ase_texcoord.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord5.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord6 = inputMesh.ase_texcoord;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord5.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (PositionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = PositionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				half3 Input_Normal9199_g128458 = NormalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (PositionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				half3 Input_Albedo24_g128730 = Out_Albedo4_g128731;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g128730 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g128730 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g128730 = staticSwitch22_g128730;
				float4 break24_g128727 = Out_Shader4_g128731;
				half Metallic95_g128727 = break24_g128727.x;
				half Input_Metallic25_g128730 = Metallic95_g128727;
				half OneMinusReflectivity31_g128730 = ( (ColorSpaceDielectricSpec23_g128730).w - ( (ColorSpaceDielectricSpec23_g128730).w * Input_Metallic25_g128730 ) );
				
				float3 appendResult23_g128727 = (float3(Out_NormalTS4_g128731 , 1.0));
				
				float3 lerpResult28_g128730 = lerp( (ColorSpaceDielectricSpec23_g128730).xyz , Input_Albedo24_g128730 , Input_Metallic25_g128730);
				half Render_Specualr110_g128727 = _RenderSpecular;
				
				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g128730 * OneMinusReflectivity31_g128730 );
				surfaceDescription.Normal = appendResult23_g128727;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g128730 * Render_Specualr110_g128727 );
				#endif

				surfaceDescription.Smoothness = break24_g128727.w;
				surfaceDescription.Occlusion = break24_g128727.y;
				surfaceDescription.Emission = (Out_Emissive4_g128731).xyz;
				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );

				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.uv0.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);

				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord2.xyz = ase_positionWS;
				output.ase_texcoord3.xyz = ase_normalWS;
				float3 ase_tangentWS = TransformObjectToWorldDir( inputMesh.tangentOS.xyz );
				output.ase_texcoord4.xyz = ase_tangentWS;
				float ase_tangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_bitangentWS = cross( ase_normalWS, ase_tangentWS ) * ase_tangentSign;
				output.ase_texcoord5.xyz = ase_bitangentWS;
				output.ase_texcoord6.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord7 = inputMesh.uv0;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord2.w = 0;
				output.ase_texcoord3.w = 0;
				output.ase_texcoord4.w = 0;
				output.ase_texcoord5.w = 0;
				output.ase_texcoord6.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;

				output.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					output.VizUV.xy = vizUV;
					output.LightCoord = lightCoord;
				#endif

				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half isFrontFace = input.isFrontFace;

				float3 V = float3(1.0, 1.0, 1.0);

				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float3 ase_positionWS = packedInput.ase_texcoord2.xyz;
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (ase_positionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = ase_positionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				float3 ase_normalWS = packedInput.ase_texcoord3.xyz;
				half3 Input_Normal9199_g128458 = ase_normalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3 ase_tangentWS = packedInput.ase_texcoord4.xyz;
				float3 ase_bitangentWS = packedInput.ase_texcoord5.xyz;
				float3x3 ase_worldToTangent = float3x3( ase_tangentWS, ase_bitangentWS, ase_normalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( ase_tangentWS.x, ase_bitangentWS.x, ase_normalWS.x );
				float3 tanToWorld1 = float3( ase_tangentWS.y, ase_bitangentWS.y, ase_normalWS.y );
				float3 tanToWorld2 = float3( ase_tangentWS.z, ase_bitangentWS.z, ase_normalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (ase_positionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				half3 Input_Albedo24_g128730 = Out_Albedo4_g128731;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g128730 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g128730 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g128730 = staticSwitch22_g128730;
				float4 break24_g128727 = Out_Shader4_g128731;
				half Metallic95_g128727 = break24_g128727.x;
				half Input_Metallic25_g128730 = Metallic95_g128727;
				half OneMinusReflectivity31_g128730 = ( (ColorSpaceDielectricSpec23_g128730).w - ( (ColorSpaceDielectricSpec23_g128730).w * Input_Metallic25_g128730 ) );
				
				float3 appendResult23_g128727 = (float3(Out_NormalTS4_g128731 , 1.0));
				
				float3 lerpResult28_g128730 = lerp( (ColorSpaceDielectricSpec23_g128730).xyz , Input_Albedo24_g128730 , Input_Metallic25_g128730);
				half Render_Specualr110_g128727 = _RenderSpecular;
				
				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g128730 * OneMinusReflectivity31_g128730 );
				surfaceDescription.Normal = appendResult23_g128727;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g128730 * Render_Specualr110_g128727 );
				#endif

				surfaceDescription.Smoothness = break24_g128727.w;
				surfaceDescription.Occlusion = break24_g128727.y;
				surfaceDescription.Emission = (Out_Emissive4_g128731).xyz;
				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord4 : TEXCOORD4;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.ase_texcoord.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = float3(0.0f, 0.0f, 1.0f);

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord3.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord4 = inputMesh.ase_texcoord;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (PositionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = PositionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				half3 Input_Normal9199_g128458 = NormalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (PositionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;

				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
					float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
					outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					#endif
					decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
				#endif
			}
			ENDHLSL
		}

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord4 : TEXCOORD4;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.ase_texcoord.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = float3(0.0f, 0.0f, 1.0f);

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord3.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord4 = inputMesh.ase_texcoord;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];

				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (PositionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = PositionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				half3 Input_Normal9199_g128458 = NormalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (PositionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;

				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile_fragment _ WRITE_DECAL_BUFFER WRITE_RENDERING_LAYER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord4 : TEXCOORD4;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.ase_texcoord.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord3.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord4 = inputMesh.ase_texcoord;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (PositionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = PositionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				half3 Input_Normal9199_g128458 = NormalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (PositionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				float3 appendResult23_g128727 = (float3(Out_NormalTS4_g128731 , 1.0));
				
				float4 break24_g128727 = Out_Shader4_g128731;
				
				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;

				surfaceDescription.Normal = appendResult23_g128727;
				surfaceDescription.Smoothness = break24_g128727.w;
				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    					depthColor = packedInput.positionCS.z;
    					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
    				DecalPrepassData decalPrepassData;
                    #ifdef _DISABLE_DECALS
				    ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
                    #else
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
                    #endif
    				decalPrepassData.renderingLayerMask = GetMeshRenderingLayerMask();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif
				#endif // SCENESELECTIONPASS
			}

			ENDHLSL
		}

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha
			Blend 2 One [_DstBlend2]
			Blend 3 One [_DstBlend2]
			Blend 4 One OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile_fragment PUNCTUAL_SHADOW_LOW PUNCTUAL_SHADOW_MEDIUM PUNCTUAL_SHADOW_HIGH
            #pragma multi_compile_fragment DIRECTIONAL_SHADOW_LOW DIRECTIONAL_SHADOW_MEDIUM DIRECTIONAL_SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment _ PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
            #pragma multi_compile _ USE_LEGACY_LIGHTMAPS

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.ase_texcoord.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;
				surfaceData.thickness = 0.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

				#ifdef _MATERIAL_FEATURE_COLORED_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_COLORED_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
					float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
					float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normal = surfaceDescription.Normal;

				#ifdef DECAL_NORMAL_BLENDING
					#ifndef SURFACE_GRADIENT
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						normal = SurfaceGradientFromPerturbedNormal(TransformWorldToObjectNormal(fragInputs.tangentToWorld[2]), normal);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						normal = SurfaceGradientFromPerturbedNormal(fragInputs.tangentToWorld[2], normal);
					#else
						normal = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normal, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
					#endif
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normal);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif

					GetNormalWS_SG(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
				#else
					#if ( ASE_FRAGMENT_NORMAL == 1 )
						GetNormalWS_SrcOS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#elif ( ASE_FRAGMENT_NORMAL == 2 )
						GetNormalWS_SrcWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#else
						GetNormalWS(fragInputs, normal, surfaceData.normalWS, doubleSidedConstants);
					#endif

					#if HAVE_DECALS
					if (_EnableDecals)
					{
						DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, surfaceDescription.Alpha);
						ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
						ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
					}
					#endif
				#endif

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
					#if !defined(SHADER_STAGE_RAY_TRACING)
					if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
					{
						#ifdef FRAG_INPUTS_USE_TEXCOORD0
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG(posInput.positionSS, fragInputs.texCoord0);
						#else
							surfaceData.baseColor = GET_TEXTURE_STREAMING_DEBUG_NO_UV(posInput.positionSS);
						#endif
						surfaceData.metallic = 0;
					}
					#endif
					ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS output )
			{
				_TimeParameters.xyz = timeParameters;
				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord7.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord8 = inputMesh.ase_texcoord;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS output = (PackedVaryingsMeshToPS)0;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, output);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : inputMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = inputMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(inputMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				output.uv1 = inputMesh.uv1;
				output.uv2 = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					output.vpassPositionCS = float3(VPASSpositionCS.xyw);
					output.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #if defined(_TRANSPARENT_REFRACTIVE_SORT) || defined(_ENABLE_FOG_ON_TRANSPARENT)
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Water/Shaders/UnderWaterUtilities.hlsl"
            #endif

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
                    #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        #define BEFORE_REFRACTION_TARGET SV_Target3
                        #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target4
                #endif
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #ifdef _TRANSPARENT_REFRACTIVE_SORT
                     #define BEFORE_REFRACTION_TARGET SV_Target2
                     #define BEFORE_REFRACTION_ALPHA_TARGET SV_Target3
                #endif
            #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
						, out float4 outColor:SV_Target0
					#ifdef UNITY_VIRTUAL_TEXTURING
						, out float4 outVTFeedback : SV_Target1
					#endif
					#ifdef OUTPUT_SPLIT_LIGHTING
						, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
						, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
					#elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
						, out float4 outMotionVec : MOTION_VECTOR_TARGET
						#ifdef _TRANSPARENT_REFRACTIVE_SORT
							, out float4 outBeforeRefractionColor : BEFORE_REFRACTION_TARGET
							, out float4 outBeforeRefractionAlpha : BEFORE_REFRACTION_ALPHA_TARGET
						#endif
					#endif
					#if defined( ASE_DEPTH_WRITE_ON )
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
					 )
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half IsFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];
				float4 ClipPos = TransformWorldToHClip( PositionRWS );
				float4 ScreenPos = ComputeScreenPos( ClipPos, _ProjectionParams.x );

				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (PositionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = PositionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				half3 Input_Normal9199_g128458 = NormalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (PositionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord7.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				half3 Input_Albedo24_g128730 = Out_Albedo4_g128731;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g128730 = half4( 0.2209163, 0.2209163, 0.2209163, 0.7790837 );
				#else
				float4 staticSwitch22_g128730 = half4( 0.04, 0.04, 0.04, 0.96 );
				#endif
				half4 ColorSpaceDielectricSpec23_g128730 = staticSwitch22_g128730;
				float4 break24_g128727 = Out_Shader4_g128731;
				half Metallic95_g128727 = break24_g128727.x;
				half Input_Metallic25_g128730 = Metallic95_g128727;
				half OneMinusReflectivity31_g128730 = ( (ColorSpaceDielectricSpec23_g128730).w - ( (ColorSpaceDielectricSpec23_g128730).w * Input_Metallic25_g128730 ) );
				
				float3 appendResult23_g128727 = (float3(Out_NormalTS4_g128731 , 1.0));
				
				float3 lerpResult28_g128730 = lerp( (ColorSpaceDielectricSpec23_g128730).xyz , Input_Albedo24_g128730 , Input_Metallic25_g128730);
				half Render_Specualr110_g128727 = _RenderSpecular;
				
				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;

				surfaceDescription.BaseColor = ( Input_Albedo24_g128730 * OneMinusReflectivity31_g128730 );
				surfaceDescription.Normal = appendResult23_g128727;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = ( lerpResult28_g128730 * Render_Specualr110_g128727 );
				#endif

				surfaceDescription.Smoothness = break24_g128727.w;
				surfaceDescription.Occlusion = break24_g128727.y;
				surfaceDescription.Emission = (Out_Emissive4_g128731).xyz;
				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = 1;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = 1;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#if defined( ASE_CHANGES_WORLD_POS )
					posInput.positionWS = PositionRWS;
					#if defined( _WRITE_TRANSPARENT_MOTION_VECTOR )
						float3 positionOS = mul( GetWorldToObjectMatrix(),  float4( PositionRWS, 1.0 ) ).xyz;
						float3 previousPositionRWS = mul( GetPrevObjectToWorldMatrix(),  float4( positionOS, 1.0 ) ).xyz;
						packedInput.vpassPositionCS = mul( UNITY_MATRIX_UNJITTERED_VP, float4( PositionRWS, 1.0 ) ).xyw;
						packedInput.vpassPreviousPositionCS = mul( UNITY_MATRIX_PREV_VP, float4( previousPositionRWS, 1.0 ) ).xyw;
					#endif
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);

						#ifdef _ENABLE_FOG_ON_TRANSPARENT
                        outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                        #endif

                        #ifdef _TRANSPARENT_REFRACTIVE_SORT
                        ComputeRefractionSplitColor(posInput, outColor, outBeforeRefractionColor, outBeforeRefractionAlpha);
                        #endif
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
				outVTFeedback.rgb *= outVTFeedback.a; // premuliplied alpha
                #endif

			}
			ENDHLSL
		}

		UsePass "Hidden/Nature/Terrain/Utilities/PICKING"
	UsePass "Hidden/Nature/Terrain/Utilities/SELECTION"

		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#define _ENERGY_CONSERVING_SPECULAR 1
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#define ASE_FRAGMENT_NORMAL 0
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _MATERIAL_FEATURE_SPECULAR_COLOR 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_VERSION 19802
			#define ASE_SRP_VERSION 170004
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            CBUFFER_START( UnityPerMaterial )
			half4 _TerrainCoord16;
			half4 _TerrainShaderRcp10;
			half4 _TerrainCoord11;
			half4 _TerrainShaderMin11;
			half4 _TerrainShaderRcp11;
			half4 _TerrainCoord12;
			half4 _TerrainShaderMin12;
			half4 _TerrainShaderRcp12;
			half4 _TerrainShaderMin10;
			half4 _TerrainCoord13;
			half4 _TerrainShaderRcp13;
			half4 _TerrainCoord14;
			half4 _TerrainShaderMin14;
			half4 _TerrainShaderRcp14;
			half4 _TerrainCoord15;
			half4 _TerrainShaderMin15;
			half4 _TerrainShaderRcp15;
			half4 _TerrainShaderMin13;
			half4 _TerrainCoord10;
			half4 _TerrainShaderRcp9;
			half4 _TerrainShaderMin9;
			half4 _TerrainShaderRcp3;
			half4 _TerrainCoord4;
			half4 _TerrainShaderMin4;
			half4 _TerrainShaderRcp4;
			half4 _TerrainCoord5;
			half4 _TerrainShaderMin5;
			half4 _TerrainShaderRcp5;
			half4 _TerrainCoord6;
			half4 _TerrainShaderMin6;
			half4 _TerrainShaderRcp6;
			half4 _TerrainCoord7;
			half4 _TerrainShaderMin7;
			half4 _TerrainShaderRcp7;
			half4 _TerrainCoord8;
			half4 _TerrainShaderMin8;
			half4 _TerrainShaderRcp8;
			half4 _TerrainCoord9;
			half4 _TerrainSpecular9;
			half4 _TerrainShaderMin16;
			half4 _TerrainShaderRcp16;
			half4 _TerrainSpecular8;
			half4 _TerrainParams5;
			half4 _TerrainParams6;
			half4 _TerrainParams7;
			half4 _TerrainParams8;
			half4 _TerrainParams9;
			half4 _TerrainParams10;
			half4 _TerrainParams11;
			half4 _TerrainParams12;
			half4 _TerrainParams13;
			half4 _TerrainParams14;
			half4 _TerrainParams15;
			half4 _TerrainParams16;
			half4 _TerrainSpecular7;
			half4 _TerrainSpecular6;
			half4 _TerrainSpecular5;
			half4 _TerrainSpecular4;
			half4 _TerrainSpecular1;
			half4 _TerrainParams4;
			half4 _TerrainShaderMin3;
			half4 _TerrainParams3;
			half4 _TerrainParams1;
			half4 _TerrainColor1;
			half4 _TerrainColor2;
			half4 _TerrainColor3;
			half4 _TerrainColor4;
			half4 _TerrainColor5;
			half4 _TerrainColor6;
			half4 _TerrainColor7;
			half4 _TerrainColor8;
			half4 _TerrainColor9;
			half4 _TerrainColor10;
			half4 _TerrainColor11;
			half4 _TerrainColor12;
			half4 _TerrainColor13;
			half4 _TerrainColor14;
			half4 _TerrainColor15;
			half4 _TerrainColor16;
			half4 _TerrainColor;
			half4 _TerrainParams2;
			half4 _TerrainSpecular2;
			half4 _TerrainCoord3;
			half4 _TerrainShaderMin2;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessBlendRemap;
			half4 _OverlayColor;
			half4 _overlay_coord_value;
			half4 _OverlayCoordValue;
			half4 _TerrainShaderRcp2;
			half4 _OverlayGlitterColor;
			half4 _object_phase_mode;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _OverlayBlendRemap;
			half4 _WetnessWaterColor;
			half4 _WetnessWaterBlendRemap;
			half4 _EmissiveColor;
			half4 _TintingBlendRemap;
			half4 _TintingLumaRemap;
			half4 _TerrainSpecular3;
			half4 _TerrainSpecular11;
			half4 _TerrainCoord1;
			half4 _TerrainShaderMin1;
			float4 _TintingColor;
			float4 _TerrainControlTex1_TexelSize;
			half4 _TerrainSpecular13;
			half4 _TerrainSize;
			half4 _TerrainSpecular14;
			half4 _TerrainCoord2;
			half4 _TerrainSpecular12;
			half4 _TerrainSpecular16;
			half4 _TerrainShaderRcp1;
			half4 _TerrainSpecular15;
			half4 _TerrainPosition;
			half4 _TerrainSpecular10;
			half _WetnessContrastValue;
			half _WetnessWaterBaseValue;
			half _WetnessElementMode;
			half _WetnessIntensityValue;
			half _WetnessWaterIntensityValue;
			half _WetnessGlobalValue;
			half _TintingIntensityValue;
			half _WetnessDropsIntensityValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsDistValue;
			half _WetnessSmoothnessValue;
			half _EmissiveIntensityValue;
			half _EmissiveElementMode;
			half _EmissiveGlobalValue;
			half _EmissiveColorMode;
			float _emissive_power_value;
			half _EmissiveExposureValue;
			half _CutoutIntensityValue;
			half _CutoutElementMode;
			half _CutoutGlobalValue;
			half _WetnessDropsTillingValue;
			half _OverlaySubsurfaceValue;
			half _OverlayLumaValue;
			half _OverlayNormalValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _TintingLumaValue;
			half _TintingGlobalValue;
			half _DrynessElementMode;
			half _DrynessGlobalValue;
			half _DrynessGrayValue;
			half _TintingElementMode;
			half _DrynessIntensityValue;
			half _DrynessMultiValue;
			half _OverlaySmoothnessValue;
			half _DrynessLumaValue;
			half _DrynessSubsurfaceValue;
			half _OverlaySampleMode;
			half _OverlayCoordMode;
			half _OverlayGlitterIntensityValue;
			half _OverlayGlitterTillingValue;
			half _OverlayGlitterDistValue;
			half _OverlayIntensityValue;
			half _OverlayProjValue;
			half _OverlayElementMode;
			half _OverlayGlobalValue;
			half _DrynessSmoothnessValue;
			half _OverlayTextureMode;
			half _TerrainLayersMode;
			half _TerrainOcclusionValue;
			half _RenderEnd;
			half _IsTVEShader;
			half _IsCustomShader;
			half _IsShared;
			half _IsCollected;
			half _IsConverted;
			half _IsIdentifier;
			half _RenderDecals;
			half _RenderSSR;
			half _RenderClip;
			half _IsVersion;
			half _RenderShadow;
			half _RenderFilter;
			half _ConformCategory;
			half _ConformEnd;
			half _RenderCategory;
			half _IsStandardShader;
			half _IsTerrainShader;
			half _TerrainTextureMode;
			half _TerrainSampleMode1;
			half _TerrainSampleMode2;
			half _TerrainSampleMode3;
			half _TerrainSampleMode4;
			half _TerrainSampleMode5;
			half _TerrainSampleMode6;
			half _TerrainSampleMode7;
			half _ConformInfo;
			half _TerrainSampleMode8;
			half _TerrainSampleMode10;
			half _TerrainSampleMode11;
			half _TerrainSampleMode12;
			half _TerrainSampleMode13;
			half _TerrainSampleMode14;
			half _TerrainSampleMode15;
			half _TerrainSampleMode16;
			half _TerrainSampleMode9;
			half _GlobalCategory;
			half _GlobalEnd;
			half _GlobalPaintLayerValue;
			half _OverlaySpace;
			half _OverlayBakeInfo;
			half _DrynessCategory;
			half _DrynessEnd;
			half _DrynessSpace;
			half _DrynessBakeInfo;
			half _TintingCategory;
			half _OverlayEnd;
			half _TintingEnd;
			half _TintingBakeInfo;
			half _CategoryTerrain;
			half _EndTerrain;
			half _CutoutShadowMode;
			half _TerrainHeightBlendValue;
			half _TerrainNormalValue;
			half _TerrainMetallicValue;
			half _TintingSpace;
			half _TerrainSmoothnessValue;
			half _OverlayCategory;
			half _WetnessEnd;
			half _GlobalGlowLayerValue;
			half _GlobalAtmoLayerValue;
			half _GlobalFadeLayerValue;
			half _GlobalFormLayerValue;
			half _ConformHeightMode;
			half _ConformHeightValue;
			half _CutoutCategory;
			half _WetnessBakeInfo;
			half _CutoutEnd;
			half _CutoutBakeInfo;
			half _EmissiveCategory;
			half _EmissiveEnd;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveFlagMode;
			half _WetnessCategory;
			half _CutoutSpace;
			half _RenderSpecular;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _DstBlend2;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			UNITY_TEXTURE_STREAMING_DEBUG_VARS;
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			half4 TVE_TimeParams;
			half4 TVE_CoatParams;
			float TVE_PaintLayers[10];
			TEXTURE2D_ARRAY(TVE_PaintBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_PaintNearTex);
			half4 TVE_RenderNearCoords;
			SAMPLER(sampler_Linear_Repeat);
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_PaintParams;
			float TVE_GlowLayers[10];
			TEXTURE2D_ARRAY(TVE_GlowBaseTex);
			TEXTURE2D_ARRAY(TVE_GlowNearTex);
			half4 TVE_GlowParams;
			float TVE_AtmoLayers[10];
			TEXTURE2D_ARRAY(TVE_AtmoBaseTex);
			TEXTURE2D_ARRAY(TVE_AtmoNearTex);
			half4 TVE_AtmoParams;
			float TVE_FadeLayers[10];
			TEXTURE2D_ARRAY(TVE_FadeBaseTex);
			TEXTURE2D_ARRAY(TVE_FadeNearTex);
			half4 TVE_FadeParams;
			float TVE_FormLayers[10];
			TEXTURE2D_ARRAY(TVE_FormBaseTex);
			TEXTURE2D_ARRAY(TVE_FormNearTex);
			half4 TVE_FormParams;
			half4 TVE_FlowParams;
			half TVE_IsEnabled;
			TEXTURE2D(_TerrainControlTex1);
			TEXTURE2D(_TerrainControlTex2);
			TEXTURE2D(_TerrainControlTex3);
			TEXTURE2D(_TerrainControlTex4);
			TEXTURE2D(_TerrainShaderTex1);
			SAMPLER(sampler_Point_Repeat);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			TEXTURE2D(_TerrainShaderTex2);
			TEXTURE2D(_TerrainShaderTex3);
			TEXTURE2D(_TerrainShaderTex4);
			TEXTURE2D(_TerrainShaderTex5);
			TEXTURE2D(_TerrainShaderTex6);
			TEXTURE2D(_TerrainShaderTex7);
			TEXTURE2D(_TerrainShaderTex8);
			TEXTURE2D(_TerrainShaderTex9);
			TEXTURE2D(_TerrainShaderTex10);
			TEXTURE2D(_TerrainShaderTex11);
			TEXTURE2D(_TerrainShaderTex12);
			TEXTURE2D(_TerrainShaderTex13);
			TEXTURE2D(_TerrainShaderTex14);
			TEXTURE2D(_TerrainShaderTex15);
			TEXTURE2D(_TerrainShaderTex16);
			TEXTURE2D(_TerrainAlbedoTex1);
			TEXTURE2D(_TerrainAlbedoTex2);
			TEXTURE2D(_TerrainAlbedoTex3);
			TEXTURE2D(_TerrainAlbedoTex4);
			TEXTURE2D(_TerrainAlbedoTex5);
			TEXTURE2D(_TerrainAlbedoTex6);
			TEXTURE2D(_TerrainAlbedoTex7);
			TEXTURE2D(_TerrainAlbedoTex8);
			TEXTURE2D(_TerrainAlbedoTex9);
			TEXTURE2D(_TerrainAlbedoTex10);
			TEXTURE2D(_TerrainAlbedoTex11);
			TEXTURE2D(_TerrainAlbedoTex12);
			TEXTURE2D(_TerrainAlbedoTex13);
			TEXTURE2D(_TerrainAlbedoTex14);
			TEXTURE2D(_TerrainAlbedoTex15);
			TEXTURE2D(_TerrainAlbedoTex16);
			TEXTURE2D(_TerrainNormalTex1);
			TEXTURE2D(_TerrainNormalTex2);
			TEXTURE2D(_TerrainNormalTex3);
			TEXTURE2D(_TerrainNormalTex4);
			TEXTURE2D(_TerrainNormalTex5);
			TEXTURE2D(_TerrainNormalTex6);
			TEXTURE2D(_TerrainNormalTex7);
			TEXTURE2D(_TerrainNormalTex8);
			TEXTURE2D(_TerrainNormalTex9);
			TEXTURE2D(_TerrainNormalTex10);
			TEXTURE2D(_TerrainNormalTex11);
			TEXTURE2D(_TerrainNormalTex12);
			TEXTURE2D(_TerrainNormalTex13);
			TEXTURE2D(_TerrainNormalTex14);
			TEXTURE2D(_TerrainNormalTex15);
			TEXTURE2D(_TerrainNormalTex16);
			TEXTURE2D(_TerrainHolesTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayGlitterTexRT);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_WetnessDropsTexRT);
			#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
				TEXTURE2D(_TerrainHeightmapTexture);//ASE Terrain Instancing
				TEXTURE2D( _TerrainNormalmapTexture);//ASE Terrain Instancing
				SAMPLER(sampler_TerrainNormalmapTexture);//ASE Terrain Instancing
			#endif//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_START( Terrain )//ASE Terrain Instancing
				UNITY_DEFINE_INSTANCED_PROP( float4, _TerrainPatchInstanceData )//ASE Terrain Instancing
			UNITY_INSTANCING_BUFFER_END( Terrain)//ASE Terrain Instancing
			CBUFFER_START( UnityTerrain)//ASE Terrain Instancing
				#ifdef UNITY_INSTANCING_ENABLED//ASE Terrain Instancing
					float4 _TerrainHeightmapRecipSize;//ASE Terrain Instancing
					float4 _TerrainHeightmapScale;//ASE Terrain Instancing
				#endif//ASE Terrain Instancing
			CBUFFER_END//ASE Terrain Instancing


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_POSITION
			#define ASE_NEEDS_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#define ASE_NEEDS_TEXTURE_COORDINATES0
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_CONFORM
			#pragma shader_feature_local_fragment TVE_WETNESS
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_DRYNESS
			#pragma shader_feature_local_fragment TVE_TINTING
			#pragma shader_feature_local_fragment TVE_TERRAIN_04 TVE_TERRAIN_08 TVE_TERRAIN_12 TVE_TERRAIN_16
			#pragma shader_feature_local_fragment TVE_TERRAIN_BLEND
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_01_PLANAR_2D TVE_TERRAIN_SAMPLE_01_PLANAR_3D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_02_PLANAR_2D TVE_TERRAIN_SAMPLE_02_PLANAR_3D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_03_PLANAR_2D TVE_TERRAIN_SAMPLE_03_PLANAR_3D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_04_PLANAR_2D TVE_TERRAIN_SAMPLE_04_PLANAR_3D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_05_PLANAR_2D TVE_TERRAIN_SAMPLE_05_PLANAR_3D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_06_PLANAR_2D TVE_TERRAIN_SAMPLE_06_PLANAR_3D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_07_PLANAR_2D TVE_TERRAIN_SAMPLE_07_PLANAR_3D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_08_PLANAR_2D TVE_TERRAIN_SAMPLE_08_PLANAR_3D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_09_PLANAR_2D TVE_TERRAIN_SAMPLE_09_PLANAR_3D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_10_PLANAR_2D TVE_TERRAIN_SAMPLE_10_PLANAR_3D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_11_PLANAR_2D TVE_TERRAIN_SAMPLE_11_PLANAR_3D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_12_PLANAR_2D TVE_TERRAIN_SAMPLE_12_PLANAR_3D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_13_PLANAR_2D TVE_TERRAIN_SAMPLE_13_PLANAR_3D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_14_PLANAR_2D TVE_TERRAIN_SAMPLE_14_PLANAR_3D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_15_PLANAR_2D TVE_TERRAIN_SAMPLE_15_PLANAR_3D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_SAMPLE_16_PLANAR_2D TVE_TERRAIN_SAMPLE_16_PLANAR_3D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_TERRAIN_PACKED
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_TINTING_ELEMENT
			#pragma shader_feature_local_fragment TVE_DRYNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_GLITTER
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_WATER
			#pragma shader_feature_local_fragment TVE_WETNESS_ELEMENT
			#pragma shader_feature_local_fragment TVE_WETNESS_DROPS
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_CUTOUT
			#pragma shader_feature_local_fragment TVE_CUTOUT_SHADOW
			#pragma shader_feature_local_fragment TVE_CUTOUT_ELEMENT
			#pragma multi_compile_instancing
			#pragma instancing_options assumeuniformscaling nomatrices nolightprobe nolightmap
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half3 AlbedoRaw;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
				float Depth;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 PhaseData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatDataRT;
				half4 PaintDataRT;
				half4 GlowDataRT;
				half4 AtmoDataRT;
				half4 FadeDataRT;
				half4 FormDataRT;
				half4 FlowDataRT;
			};      
			        
			struct TVEMasksData
			{        
				half4 Mask0;
				half4 Mask1;
				half4 Mask2;
				half4 Mask3;
			};        
			#define TVE_TERRAIN_SHADER
			//#pragma editor_sync_compilation
			#ifndef ASE_NEEDS_TEXTURE_COORDINATES2 //Needed for ASE 1.9.8.1
				#define ASE_NEEDS_TEXTURE_COORDINATES2
			#endif


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord4 : TEXCOORD4;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float4 mod289( float4 x )
			{
				return x - floor(x * 0.00346020761) * 289.0;
			}
			
			float4 perm( float4 x )
			{
				    return mod289((x * 34.0 + 1.0) * x);
			}
			
			float SimpleNoise3D( float3 p )
			{
				    // Compute integer and fractional parts.
				    float3 i = floor(p);
				    float3 f = p - i;
				    // Cubic interpolation (smoothstep)
				    f = f * f * (3.0 - 2.0 * f);
				    // Build 4-component vectors using swizzling.
				    // a = (i.x, i.x+1, i.y, i.y+1)
				    float4 a = float4(i.x, i.x, i.y, i.y) + float4(0.0, 1.0, 0.0, 1.0);
				    // Permutations along the x and y axes.
				    float4 k1 = perm(a.xyxy);
				    float4 k2 = perm(k1.xyxy + a.zzww);
				    // Incorporate the z component.
				    float4 c  = k2 + float4(i.z, i.z, i.z, i.z);
				    float4 k3 = perm(c);
				    float4 k4 = perm(c + 1.0);
				    // Map results to the [0,1] range.
				    float4 o1 = frac(k3 * 0.0243902439);
				    float4 o2 = frac(k4 * 0.0243902439);
				    // Interpolate along z, then x, then y.
				    float4 o3 = lerp(o1, o2, f.z);           // f.z blends between layers.
				    float2 o4 = lerp(o3.xz, o3.yw, f.x);       // f.x blends between pairs.
				    return lerp(o4.x, o4.y, f.y); 
			}
			
			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			
			half ShadowPassCheck36_g128713( half True, half False )
			{
				half result;
				#if defined(SHADERPASS) && (SHADERPASS  == SHADERPASS_SHADOWS)
					result = True;
				#else
					result = False;
				#endif
				return result;
			}
			
			AttributesMesh ApplyMeshModification( AttributesMesh inputMesh )
			{
			#ifdef UNITY_INSTANCING_ENABLED
				float2 patchVertex = inputMesh.positionOS.xy;
				float4 instanceData = UNITY_ACCESS_INSTANCED_PROP( Terrain, _TerrainPatchInstanceData );
				float2 sampleCoords = ( patchVertex.xy + instanceData.xy ) * instanceData.z;
				float height = UnpackHeightmap( _TerrainHeightmapTexture.Load( int3( sampleCoords, 0 ) ) );
				inputMesh.positionOS.xz = sampleCoords* _TerrainHeightmapScale.xz;
				inputMesh.positionOS.y = height* _TerrainHeightmapScale.y;
				#ifdef ENABLE_TERRAIN_PERPIXEL_NORMAL
					inputMesh.normalOS = float3(0, 1, 0);
				#else
					inputMesh.normalOS = _TerrainNormalmapTexture.Load(int3(sampleCoords, 0)).rgb* 2 - 1;
				#endif
				inputMesh.ase_texcoord.xy = sampleCoords* _TerrainHeightmapRecipSize.zw;
			#endif
				return inputMesh;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

                #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    surfaceDescription.Alpha = 1.0f;
                }
                #endif

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS output;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, output);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( output );

				inputMesh = ApplyMeshModification(inputMesh);
				TVEModelData Data16_g128721 = (TVEModelData)0;
				half Dummy181_g128719 = ( _ConformCategory + _ConformEnd + _ConformInfo );
				float In_Dummy16_g128721 = Dummy181_g128719;
				TVEModelData Data16_g117798 = (TVEModelData)0;
				half Dummy207_g117794 = 0.0;
				float In_Dummy16_g117798 = Dummy207_g117794;
				half3 PositionOS131_g117794 = inputMesh.positionOS;
				float3 In_PositionOS16_g117798 = PositionOS131_g117794;
				float3 ase_positionWS = GetAbsolutePositionWS( TransformObjectToWorld( ( inputMesh.positionOS ).xyz ) );
				float3 vertexToFrag73_g117794 = ase_positionWS;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117798 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117798 = PositionWO132_g117794;
				float3 In_PositionRawOS16_g117798 = PositionOS131_g117794;
				float3 In_PositionAddOS16_g117798 = float3( 0,0,0 );
				float3 _Vector0 = float3(0,0,0);
				half3 PivotOS149_g117794 = _Vector0;
				float3 In_PivotOS16_g117798 = PivotOS149_g117794;
				float3 In_PivotWS16_g117798 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117798 = PivotWO133_g117794;
				half3 NormalOS134_g117794 = inputMesh.normalOS;
				float3 In_NormalOS16_g117798 = NormalOS134_g117794;
				float3 ase_normalWS = TransformObjectToWorldNormal( inputMesh.normalOS );
				float3 normalizedWorldNormal = normalize( ase_normalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117798 = Normal_WS95_g117794;
				float3 In_NormalRawOS16_g117798 = NormalOS134_g117794;
				float3 objToWorldDir298_g117794 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0.0 ) ).xyz );
				half3 Normal_RawWS136_g117794 = objToWorldDir298_g117794;
				float3 In_NormalRawWS16_g117798 = Normal_RawWS136_g117794;
				half4 TangentlOS153_g117794 = inputMesh.tangentOS;
				float4 In_TangentOS16_g117798 = TangentlOS153_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117798 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = inputMesh.ase_color;
				float4 In_VertexData16_g117798 = VertexMasks171_g117794;
				float mulTime113_g128352 = _TimeParameters.x * 0.52;
				float lerpResult128_g128352 = lerp( mulTime113_g128352 , ( ( mulTime113_g128352 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float3 break319_g117794 = PivotWO133_g117794;
				half Pivot_Position322_g117794 = ( break319_g117794.x + break319_g117794.z );
				float mulTime113_g128351 = _TimeParameters.x * 0.27;
				float lerpResult128_g128351 = lerp( mulTime113_g128351 , ( ( mulTime113_g128351 * TVE_TimeParams.x ) + TVE_TimeParams.y ) , TVE_TimeParams.w);
				float4 break33_g128354 = _object_phase_mode;
				float temp_output_30_0_g128354 = ( inputMesh.ase_color.r * break33_g128354.x );
				float temp_output_29_0_g128354 = ( inputMesh.ase_color.g * break33_g128354.y );
				float temp_output_31_0_g128354 = ( inputMesh.ase_color.b * break33_g128354.z );
				float temp_output_28_0_g128354 = ( temp_output_30_0_g128354 + temp_output_29_0_g128354 + temp_output_31_0_g128354 + ( inputMesh.ase_color.a * break33_g128354.w ) );
				float temp_output_315_0_g117794 = (frac( ( temp_output_28_0_g128354 + Pivot_Position322_g117794 ) )*2.0 + -1.0);
				float4 appendResult177_g117794 = (float4(sin( ( lerpResult128_g128352 + Pivot_Position322_g117794 ) ) , sin( ( lerpResult128_g128351 + Pivot_Position322_g117794 ) ) , temp_output_315_0_g117794 , 1.0));
				half4 MotionMasks176_g117794 = appendResult177_g117794;
				float4 In_PhaseData16_g117798 = MotionMasks176_g117794;
				half4 BoundsData254_g117794 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g117798 = BoundsData254_g117794;
				float4 In_RotationData16_g117798 = float4( 0,0,0,0 );
				{
				Data16_g117798.Dummy = In_Dummy16_g117798;
				Data16_g117798.PositionOS = In_PositionOS16_g117798;
				Data16_g117798.PositionWS = In_PositionWS16_g117798;
				Data16_g117798.PositionWO = In_PositionWO16_g117798;
				Data16_g117798.PositionRawOS = In_PositionRawOS16_g117798;
				Data16_g117798.PositionAddOS = In_PositionAddOS16_g117798;
				Data16_g117798.PivotOS = In_PivotOS16_g117798;
				Data16_g117798.PivotWS = In_PivotWS16_g117798;
				Data16_g117798.PivotWO = In_PivotWO16_g117798;
				Data16_g117798.NormalOS = In_NormalOS16_g117798;
				Data16_g117798.NormalWS = In_NormalWS16_g117798;
				Data16_g117798.NormalRawOS = In_NormalRawOS16_g117798;
				Data16_g117798.NormalRawWS = In_NormalRawWS16_g117798;
				Data16_g117798.TangentOS = In_TangentOS16_g117798;
				Data16_g117798.ViewDirWS = In_ViewDirWS16_g117798;
				Data16_g117798.VertexData = In_VertexData16_g117798;
				Data16_g117798.PhaseData = In_PhaseData16_g117798;
				Data16_g117798.BoundsData = In_BoundsData16_g117798;
				Data16_g117798.RotationData = In_RotationData16_g117798;
				}
				TVEModelData Data15_g128720 = Data16_g117798;
				float Out_Dummy15_g128720 = 0;
				float3 Out_PositionOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128720 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128720 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128720 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128720 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128720 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128720 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128720 = float3( 0,0,0 );
				float4 Out_VertexData15_g128720 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128720 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128720 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128720 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128720 = Data15_g128720.Dummy;
				Out_PositionOS15_g128720 = Data15_g128720.PositionOS;
				Out_PositionWS15_g128720 = Data15_g128720.PositionWS;
				Out_PositionWO15_g128720 = Data15_g128720.PositionWO;
				Out_PositionRawOS15_g128720 = Data15_g128720.PositionRawOS;
				Out_PositionAddOS15_g128720 = Data15_g128720.PositionAddOS;
				Out_PivotOS15_g128720 = Data15_g128720.PivotOS;
				Out_PivotWS15_g128720 = Data15_g128720.PivotWS;
				Out_PivotWO15_g128720 = Data15_g128720.PivotWO;
				Out_NormalOS15_g128720 = Data15_g128720.NormalOS;
				Out_NormalWS15_g128720 = Data15_g128720.NormalWS;
				Out_NormalRawOS15_g128720 = Data15_g128720.NormalRawOS;
				Out_NormalRawWS15_g128720 = Data15_g128720.NormalRawWS;
				Out_TangentOS15_g128720 = Data15_g128720.TangentOS;
				Out_ViewDirWS15_g128720 = Data15_g128720.ViewDirWS;
				Out_VertexData15_g128720 = Data15_g128720.VertexData;
				Out_PhaseData15_g128720 = Data15_g128720.PhaseData;
				Out_BoundsData15_g128720 = Data15_g128720.BoundsData;
				Out_RotationData15_g128720 = Data15_g128720.RotationData;
				}
				half3 Input_PositionOS147_g128719 = Out_PositionOS15_g128720;
				float3 break592_g128719 = Input_PositionOS147_g128719;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128724 = Data204_g128376;
				float Out_Dummy15_g128724 = 0;
				float4 Out_CoatDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128724 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128724 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128724 = Data15_g128724.Dummy;
				Out_CoatDataRT15_g128724 = Data15_g128724.CoatDataRT;
				Out_PaintDataRT15_g128724 = Data15_g128724.PaintDataRT;
				Out_GlowDataRT15_g128724= Data15_g128724.GlowDataRT;
				Out_AtmoDataRT15_g128724= Data15_g128724.AtmoDataRT;
				Out_FadeDataRT15_g128724= Data15_g128724.FadeDataRT;
				Out_FormDataRT15_g128724 = Data15_g128724.FormDataRT;
				Out_FlowDataRT15_g128724 = Data15_g128724.FlowDataRT;
				}
				half4 Input_FormParams214_g128719 = Out_FormDataRT15_g128724;
				float temp_output_642_0_g128719 = ( (Input_FormParams214_g128719).z + (TVE_WorldOrigin).y );
				float3 temp_output_481_19_g128719 = Out_PivotWO15_g128720;
				half3 Model_PivotWO602_g128719 = temp_output_481_19_g128719;
				float lerpResult594_g128719 = lerp( ( break592_g128719.y + temp_output_642_0_g128719 ) , ( temp_output_642_0_g128719 - (Model_PivotWO602_g128719).y ) , _ConformHeightMode);
				float lerpResult604_g128719 = lerp( break592_g128719.y , lerpResult594_g128719 , ( _ConformHeightValue * TVE_IsEnabled ));
				float3 appendResult593_g128719 = (float3(break592_g128719.x , lerpResult604_g128719 , break592_g128719.z));
				#ifdef TVE_CONFORM
				float3 staticSwitch575_g128719 = appendResult593_g128719;
				#else
				float3 staticSwitch575_g128719 = Input_PositionOS147_g128719;
				#endif
				half3 Final_PositionOS580_g128719 = staticSwitch575_g128719;
				float3 In_PositionOS16_g128721 = Final_PositionOS580_g128719;
				float3 In_PositionWS16_g128721 = Out_PositionWS15_g128720;
				float3 In_PositionWO16_g128721 = Out_PositionWO15_g128720;
				float3 In_PositionRawOS16_g128721 = Out_PositionRawOS15_g128720;
				float3 In_PositionAddOS16_g128721 = Out_PositionAddOS15_g128720;
				float3 In_PivotOS16_g128721 = Out_PivotOS15_g128720;
				float3 In_PivotWS16_g128721 = Out_PivotWS15_g128720;
				float3 In_PivotWO16_g128721 = temp_output_481_19_g128719;
				float3 temp_output_481_20_g128719 = Out_NormalOS15_g128720;
				float3 In_NormalOS16_g128721 = temp_output_481_20_g128719;
				float3 In_NormalWS16_g128721 = Out_NormalWS15_g128720;
				float3 In_NormalRawOS16_g128721 = Out_NormalRawOS15_g128720;
				float3 In_NormalRawWS16_g128721 = Out_NormalRawWS15_g128720;
				float4 In_TangentOS16_g128721 = Out_TangentOS15_g128720;
				float3 In_ViewDirWS16_g128721 = Out_ViewDirWS15_g128720;
				float4 In_VertexData16_g128721 = Out_VertexData15_g128720;
				float4 In_PhaseData16_g128721 = Out_PhaseData15_g128720;
				float4 In_BoundsData16_g128721 = Out_BoundsData15_g128720;
				float4 In_RotationData16_g128721 = Out_RotationData15_g128720;
				{
				Data16_g128721.Dummy = In_Dummy16_g128721;
				Data16_g128721.PositionOS = In_PositionOS16_g128721;
				Data16_g128721.PositionWS = In_PositionWS16_g128721;
				Data16_g128721.PositionWO = In_PositionWO16_g128721;
				Data16_g128721.PositionRawOS = In_PositionRawOS16_g128721;
				Data16_g128721.PositionAddOS = In_PositionAddOS16_g128721;
				Data16_g128721.PivotOS = In_PivotOS16_g128721;
				Data16_g128721.PivotWS = In_PivotWS16_g128721;
				Data16_g128721.PivotWO = In_PivotWO16_g128721;
				Data16_g128721.NormalOS = In_NormalOS16_g128721;
				Data16_g128721.NormalWS = In_NormalWS16_g128721;
				Data16_g128721.NormalRawOS = In_NormalRawOS16_g128721;
				Data16_g128721.NormalRawWS = In_NormalRawWS16_g128721;
				Data16_g128721.TangentOS = In_TangentOS16_g128721;
				Data16_g128721.ViewDirWS = In_ViewDirWS16_g128721;
				Data16_g128721.VertexData = In_VertexData16_g128721;
				Data16_g128721.PhaseData = In_PhaseData16_g128721;
				Data16_g128721.BoundsData = In_BoundsData16_g128721;
				Data16_g128721.RotationData = In_RotationData16_g128721;
				}
				TVEModelData Data15_g128729 = Data16_g128721;
				float Out_Dummy15_g128729 = 0;
				float3 Out_PositionOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128729 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotOS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128729 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128729 = float3( 0,0,0 );
				float3 Out_NormalOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g128729 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g128729 = float3( 0,0,0 );
				float4 Out_TangentOS15_g128729 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g128729 = float3( 0,0,0 );
				float4 Out_VertexData15_g128729 = float4( 0,0,0,0 );
				float4 Out_PhaseData15_g128729 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128729 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g128729 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128729 = Data15_g128729.Dummy;
				Out_PositionOS15_g128729 = Data15_g128729.PositionOS;
				Out_PositionWS15_g128729 = Data15_g128729.PositionWS;
				Out_PositionWO15_g128729 = Data15_g128729.PositionWO;
				Out_PositionRawOS15_g128729 = Data15_g128729.PositionRawOS;
				Out_PositionAddOS15_g128729 = Data15_g128729.PositionAddOS;
				Out_PivotOS15_g128729 = Data15_g128729.PivotOS;
				Out_PivotWS15_g128729 = Data15_g128729.PivotWS;
				Out_PivotWO15_g128729 = Data15_g128729.PivotWO;
				Out_NormalOS15_g128729 = Data15_g128729.NormalOS;
				Out_NormalWS15_g128729 = Data15_g128729.NormalWS;
				Out_NormalRawOS15_g128729 = Data15_g128729.NormalRawOS;
				Out_NormalRawWS15_g128729 = Data15_g128729.NormalRawWS;
				Out_TangentOS15_g128729 = Data15_g128729.TangentOS;
				Out_ViewDirWS15_g128729 = Data15_g128729.ViewDirWS;
				Out_VertexData15_g128729 = Data15_g128729.VertexData;
				Out_PhaseData15_g128729 = Data15_g128729.PhaseData;
				Out_BoundsData15_g128729 = Data15_g128729.BoundsData;
				Out_RotationData15_g128729 = Data15_g128729.RotationData;
				}
				float3 temp_output_31_0_g128727 = Out_PositionOS15_g128729;
				
				float3 temp_output_31_20_g128727 = Out_NormalOS15_g128729;
				
				float4 appendResult120_g128727 = (float4(cross( temp_output_31_20_g128727 , float3( 0, 0, 1 ) ) , -1.0));
				float4 temp_output_6_0_g128740 = appendResult120_g128727;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128740 = ( temp_output_6_0_g128740 + 0.0 );
				#else
				float4 staticSwitch14_g128740 = temp_output_6_0_g128740;
				#endif
				
				output.ase_texcoord3.xyz = vertexToFrag73_g117794;
				
				output.ase_color = inputMesh.ase_color;
				output.ase_texcoord4 = inputMesh.ase_texcoord;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				output.ase_texcoord3.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = temp_output_31_0_g128727;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = temp_output_31_20_g128727;
				inputMesh.tangentOS = staticSwitch14_g128740;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				output.positionCS = TransformWorldToHClip(positionRWS);
				output.positionRWS = positionRWS;
				output.normalWS = normalWS;
				output.tangentWS = tangentWS;
				return output;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if (defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)) || defined(WRITE_RENDERING_LAYER)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif
						#if defined( ASE_DEPTH_WRITE_ON )
							, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						 )
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				UNITY_SETUP_INSTANCE_ID(packedInput);

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.positionSS = packedInput.positionCS;
				input.positionRWS = packedInput.positionRWS;
				input.tangentToWorld = BuildTangentToWorld(packedInput.tangentWS, packedInput.normalWS);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
					input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
					#if defined(ASE_NEED_CULLFACE)
						input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
					#endif
				#endif

				half isFrontFace = input.isFrontFace;
				float3 PositionRWS = posInput.positionWS;
				float3 PositionWS = GetAbsolutePositionWS( posInput.positionWS );
				float3 V = GetWorldSpaceNormalizeViewDir( packedInput.positionRWS );
				float3 NormalWS = packedInput.normalWS;
				float4 TangentWS = packedInput.tangentWS;
				float3 BitangentWS = input.tangentToWorld[ 1 ];

				float localCustomAlphaClip21_g128733 = ( 0.0 );
				float localBreakData4_g128731 = ( 0.0 );
				float localCompData3_g128703 = ( 0.0 );
				TVEVisualData Data3_g128703 = (TVEVisualData)0;
				half Dummy594_g128702 = ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutBakeInfo );
				float In_Dummy3_g128703 = Dummy594_g128702;
				float localBreakData4_g128705 = ( 0.0 );
				float localCompData3_g128701 = ( 0.0 );
				TVEVisualData Data3_g128701 = (TVEVisualData)0;
				half Dummy145_g128686 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveFlagMode );
				float In_Dummy3_g128701 = Dummy145_g128686;
				float localBreakData4_g128690 = ( 0.0 );
				float localCompData3_g128659 = ( 0.0 );
				TVEVisualData Data3_g128659 = (TVEVisualData)0;
				half Dummy594_g128657 = ( _WetnessCategory + _WetnessEnd + _WetnessBakeInfo );
				float In_Dummy3_g128659 = Dummy594_g128657;
				float localBreakData4_g128658 = ( 0.0 );
				float localCompData3_g128623 = ( 0.0 );
				TVEVisualData Data3_g128623 = (TVEVisualData)0;
				half Dummy594_g128620 = ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayBakeInfo );
				float In_Dummy3_g128623 = Dummy594_g128620;
				float localBreakData4_g128621 = ( 0.0 );
				float localCompData3_g128599 = ( 0.0 );
				TVEVisualData Data3_g128599 = (TVEVisualData)0;
				half Dummy205_g128596 = ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessBakeInfo );
				float In_Dummy3_g128599 = Dummy205_g128596;
				float localBreakData4_g128598 = ( 0.0 );
				float localCompData3_g128591 = ( 0.0 );
				TVEVisualData Data3_g128591 = (TVEVisualData)0;
				half Dummy205_g128571 = ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeInfo );
				float In_Dummy3_g128591 = Dummy205_g128571;
				float localBreakData4_g128575 = ( 0.0 );
				float localCompData3_g128570 = ( 0.0 );
				TVEVisualData Data3_g128570 = (TVEVisualData)0;
				half Dummy9163_g128457 = ( _CategoryTerrain + _EndTerrain );
				float In_Dummy3_g128570 = Dummy9163_g128457;
				float localHeightBasedBlending7362_g128458 = ( 0.0 );
				float4 appendResult9125_g128458 = (float4(_TerrainPosition.x , _TerrainPosition.z , _TerrainSize.x , _TerrainSize.z));
				float4 temp_output_35_0_g128550 = appendResult9125_g128458;
				float2 InputScale48_g128550 = (temp_output_35_0_g128550).zw;
				half2 FinalScale53_g128550 = ( 1.0 / InputScale48_g128550 );
				float2 InputPosition52_g128550 = (temp_output_35_0_g128550).xy;
				half2 FinalPosition58_g128550 = -( FinalScale53_g128550 * InputPosition52_g128550 );
				float2 temp_output_65_0_g128550 = ( ( (PositionWS).xz * FinalScale53_g128550 ) + FinalPosition58_g128550 );
				float4 temp_output_70_0_g128550 = _TerrainControlTex1_TexelSize;
				float2 InputTexelSize68_g128550 = (temp_output_70_0_g128550).zw;
				float2 temp_cast_0 = (1.0).xx;
				float2 InputTexelRecip69_g128550 = (temp_output_70_0_g128550).xy;
				float2 Terrain_Control_UV7873_g128458 = ( ( ( temp_output_65_0_g128550 / ( 1.0 / ( InputTexelSize68_g128550 - temp_cast_0 ) ) ) + 0.5 ) * InputTexelRecip69_g128550 );
				half4 Terrain_Control_047365_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex1, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_047362_g128458 = Terrain_Control_047365_g128458;
				half4 Terrain_Control_087366_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex2, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_087362_g128458 = Terrain_Control_087366_g128458;
				half4 Terrain_Control_127712_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex3, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_127362_g128458 = Terrain_Control_127712_g128458;
				half4 Terrain_Control_167711_g128458 = SAMPLE_TEXTURE2D( _TerrainControlTex4, sampler_Linear_Clamp, Terrain_Control_UV7873_g128458 );
				float4 control_167362_g128458 = Terrain_Control_167711_g128458;
				TEXTURE2D(Texture238_g128487) = _TerrainShaderTex1;
				float localFilterTexture30_g128548 = ( 0.0 );
				SamplerState SS30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerDefault30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g128548 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g128548 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g128548 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS30_g128548 = SamplerDefault30_g128548;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g128548 = SamplerDefault30_g128548;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g128548 = SamplerPoint30_g128548;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g128548 = SamplerLow30_g128548;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g128548 = SamplerMedium30_g128548;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g128548 = SamplerHigh30_g128548;
				#endif
				}
				SamplerState Sampler238_g128487 = SS30_g128548;
				half4 Input_Terrain_Coords_016785_g128458 = _TerrainCoord1;
				float4 temp_output_37_0_g128487 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128487 = temp_output_37_0_g128487;
				half3 Input_Position9197_g128458 = PositionWS;
				float3 temp_output_279_0_g128487 = Input_Position9197_g128458;
				half3 WorldPosition238_g128487 = temp_output_279_0_g128487;
				half4 localSamplePlanar2D238_g128487 = SamplePlanar2D( Texture238_g128487 , Sampler238_g128487 , Coords238_g128487 , WorldPosition238_g128487 );
				TEXTURE2D(Texture246_g128487) = _TerrainShaderTex1;
				SamplerState Sampler246_g128487 = SS30_g128548;
				half4 Coords246_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition246_g128487 = temp_output_279_0_g128487;
				half3 Input_Normal9199_g128458 = NormalWS;
				float3 temp_output_280_0_g128487 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128487 = temp_output_280_0_g128487;
				half4 localSamplePlanar3D246_g128487 = SamplePlanar3D( Texture246_g128487 , Sampler246_g128487 , Coords246_g128487 , WorldPosition246_g128487 , WorldNormal246_g128487 );
				TEXTURE2D(Texture234_g128487) = _TerrainShaderTex1;
				SamplerState Sampler234_g128487 = SS30_g128548;
				float4 Coords234_g128487 = temp_output_37_0_g128487;
				float3 WorldPosition234_g128487 = temp_output_279_0_g128487;
				float4 localSampleStochastic2D234_g128487 = SampleStochastic2D( Texture234_g128487 , Sampler234_g128487 , Coords234_g128487 , WorldPosition234_g128487 );
				TEXTURE2D(Texture263_g128487) = _TerrainShaderTex1;
				SamplerState Sampler263_g128487 = SS30_g128548;
				half4 Coords263_g128487 = temp_output_37_0_g128487;
				half3 WorldPosition263_g128487 = temp_output_279_0_g128487;
				half3 WorldNormal263_g128487 = temp_output_280_0_g128487;
				half4 localSampleStochastic3D263_g128487 = SampleStochastic3D( Texture263_g128487 , Sampler263_g128487 , Coords263_g128487 , WorldPosition263_g128487 , WorldNormal263_g128487 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8639_g128458 = localSamplePlanar3D246_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8639_g128458 = localSampleStochastic2D234_g128487;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8639_g128458 = localSampleStochastic3D263_g128487;
				#else
				float4 staticSwitch8639_g128458 = localSamplePlanar2D238_g128487;
				#endif
				float4 temp_output_7_0_g128552 = _TerrainShaderMin1;
				float4 temp_output_9_0_g128552 = ( staticSwitch8639_g128458 - temp_output_7_0_g128552 );
				float4 temp_output_6970_0_g128458 = saturate( ( ( temp_output_9_0_g128552 * _TerrainShaderRcp1 ) + 0.0001 ) );
				half4 Masks_015_g128463 = temp_output_6970_0_g128458;
				TEXTURE2D(Texture238_g128491) = _TerrainShaderTex2;
				SamplerState Sampler238_g128491 = SS30_g128548;
				half4 Input_Terrain_Coords_026787_g128458 = _TerrainCoord2;
				float4 temp_output_37_0_g128491 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128491 = temp_output_37_0_g128491;
				float3 temp_output_279_0_g128491 = Input_Position9197_g128458;
				half3 WorldPosition238_g128491 = temp_output_279_0_g128491;
				half4 localSamplePlanar2D238_g128491 = SamplePlanar2D( Texture238_g128491 , Sampler238_g128491 , Coords238_g128491 , WorldPosition238_g128491 );
				TEXTURE2D(Texture246_g128491) = _TerrainShaderTex2;
				SamplerState Sampler246_g128491 = SS30_g128548;
				half4 Coords246_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition246_g128491 = temp_output_279_0_g128491;
				float3 temp_output_280_0_g128491 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128491 = temp_output_280_0_g128491;
				half4 localSamplePlanar3D246_g128491 = SamplePlanar3D( Texture246_g128491 , Sampler246_g128491 , Coords246_g128491 , WorldPosition246_g128491 , WorldNormal246_g128491 );
				TEXTURE2D(Texture234_g128491) = _TerrainShaderTex2;
				SamplerState Sampler234_g128491 = SS30_g128548;
				float4 Coords234_g128491 = temp_output_37_0_g128491;
				float3 WorldPosition234_g128491 = temp_output_279_0_g128491;
				float4 localSampleStochastic2D234_g128491 = SampleStochastic2D( Texture234_g128491 , Sampler234_g128491 , Coords234_g128491 , WorldPosition234_g128491 );
				TEXTURE2D(Texture263_g128491) = _TerrainShaderTex2;
				SamplerState Sampler263_g128491 = SS30_g128548;
				half4 Coords263_g128491 = temp_output_37_0_g128491;
				half3 WorldPosition263_g128491 = temp_output_279_0_g128491;
				half3 WorldNormal263_g128491 = temp_output_280_0_g128491;
				half4 localSampleStochastic3D263_g128491 = SampleStochastic3D( Texture263_g128491 , Sampler263_g128491 , Coords263_g128491 , WorldPosition263_g128491 , WorldNormal263_g128491 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8640_g128458 = localSamplePlanar3D246_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8640_g128458 = localSampleStochastic2D234_g128491;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8640_g128458 = localSampleStochastic3D263_g128491;
				#else
				float4 staticSwitch8640_g128458 = localSamplePlanar2D238_g128491;
				#endif
				float4 temp_output_7_0_g128553 = _TerrainShaderMin2;
				float4 temp_output_9_0_g128553 = ( staticSwitch8640_g128458 - temp_output_7_0_g128553 );
				float4 temp_output_6977_0_g128458 = saturate( ( ( temp_output_9_0_g128553 * _TerrainShaderRcp2 ) + 0.0001 ) );
				half4 Masks_0210_g128463 = temp_output_6977_0_g128458;
				TEXTURE2D(Texture238_g128496) = _TerrainShaderTex3;
				SamplerState Sampler238_g128496 = SS30_g128548;
				half4 Input_Terrain_Coords_036789_g128458 = _TerrainCoord3;
				float4 temp_output_37_0_g128496 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128496 = temp_output_37_0_g128496;
				float3 temp_output_279_0_g128496 = Input_Position9197_g128458;
				half3 WorldPosition238_g128496 = temp_output_279_0_g128496;
				half4 localSamplePlanar2D238_g128496 = SamplePlanar2D( Texture238_g128496 , Sampler238_g128496 , Coords238_g128496 , WorldPosition238_g128496 );
				TEXTURE2D(Texture246_g128496) = _TerrainShaderTex3;
				SamplerState Sampler246_g128496 = SS30_g128548;
				half4 Coords246_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition246_g128496 = temp_output_279_0_g128496;
				float3 temp_output_280_0_g128496 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128496 = temp_output_280_0_g128496;
				half4 localSamplePlanar3D246_g128496 = SamplePlanar3D( Texture246_g128496 , Sampler246_g128496 , Coords246_g128496 , WorldPosition246_g128496 , WorldNormal246_g128496 );
				TEXTURE2D(Texture234_g128496) = _TerrainShaderTex3;
				SamplerState Sampler234_g128496 = SS30_g128548;
				float4 Coords234_g128496 = temp_output_37_0_g128496;
				float3 WorldPosition234_g128496 = temp_output_279_0_g128496;
				float4 localSampleStochastic2D234_g128496 = SampleStochastic2D( Texture234_g128496 , Sampler234_g128496 , Coords234_g128496 , WorldPosition234_g128496 );
				TEXTURE2D(Texture263_g128496) = _TerrainShaderTex3;
				SamplerState Sampler263_g128496 = SS30_g128548;
				half4 Coords263_g128496 = temp_output_37_0_g128496;
				half3 WorldPosition263_g128496 = temp_output_279_0_g128496;
				half3 WorldNormal263_g128496 = temp_output_280_0_g128496;
				half4 localSampleStochastic3D263_g128496 = SampleStochastic3D( Texture263_g128496 , Sampler263_g128496 , Coords263_g128496 , WorldPosition263_g128496 , WorldNormal263_g128496 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8641_g128458 = localSamplePlanar3D246_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8641_g128458 = localSampleStochastic2D234_g128496;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8641_g128458 = localSampleStochastic3D263_g128496;
				#else
				float4 staticSwitch8641_g128458 = localSamplePlanar2D238_g128496;
				#endif
				float4 temp_output_7_0_g128554 = _TerrainShaderMin3;
				float4 temp_output_9_0_g128554 = ( staticSwitch8641_g128458 - temp_output_7_0_g128554 );
				float4 temp_output_6978_0_g128458 = saturate( ( ( temp_output_9_0_g128554 * _TerrainShaderRcp3 ) + 0.0001 ) );
				half4 Masks_0312_g128463 = temp_output_6978_0_g128458;
				TEXTURE2D(Texture238_g128497) = _TerrainShaderTex4;
				SamplerState Sampler238_g128497 = SS30_g128548;
				half4 Input_Terrain_Coords_046791_g128458 = _TerrainCoord4;
				float4 temp_output_37_0_g128497 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128497 = temp_output_37_0_g128497;
				float3 temp_output_279_0_g128497 = Input_Position9197_g128458;
				half3 WorldPosition238_g128497 = temp_output_279_0_g128497;
				half4 localSamplePlanar2D238_g128497 = SamplePlanar2D( Texture238_g128497 , Sampler238_g128497 , Coords238_g128497 , WorldPosition238_g128497 );
				TEXTURE2D(Texture246_g128497) = _TerrainShaderTex4;
				SamplerState Sampler246_g128497 = SS30_g128548;
				half4 Coords246_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition246_g128497 = temp_output_279_0_g128497;
				float3 temp_output_280_0_g128497 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128497 = temp_output_280_0_g128497;
				half4 localSamplePlanar3D246_g128497 = SamplePlanar3D( Texture246_g128497 , Sampler246_g128497 , Coords246_g128497 , WorldPosition246_g128497 , WorldNormal246_g128497 );
				TEXTURE2D(Texture234_g128497) = _TerrainShaderTex4;
				SamplerState Sampler234_g128497 = SS30_g128548;
				float4 Coords234_g128497 = temp_output_37_0_g128497;
				float3 WorldPosition234_g128497 = temp_output_279_0_g128497;
				float4 localSampleStochastic2D234_g128497 = SampleStochastic2D( Texture234_g128497 , Sampler234_g128497 , Coords234_g128497 , WorldPosition234_g128497 );
				TEXTURE2D(Texture263_g128497) = _TerrainShaderTex4;
				SamplerState Sampler263_g128497 = SS30_g128548;
				half4 Coords263_g128497 = temp_output_37_0_g128497;
				half3 WorldPosition263_g128497 = temp_output_279_0_g128497;
				half3 WorldNormal263_g128497 = temp_output_280_0_g128497;
				half4 localSampleStochastic3D263_g128497 = SampleStochastic3D( Texture263_g128497 , Sampler263_g128497 , Coords263_g128497 , WorldPosition263_g128497 , WorldNormal263_g128497 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8642_g128458 = localSamplePlanar3D246_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8642_g128458 = localSampleStochastic2D234_g128497;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8642_g128458 = localSampleStochastic3D263_g128497;
				#else
				float4 staticSwitch8642_g128458 = localSamplePlanar2D238_g128497;
				#endif
				float4 temp_output_7_0_g128555 = _TerrainShaderMin4;
				float4 temp_output_9_0_g128555 = ( staticSwitch8642_g128458 - temp_output_7_0_g128555 );
				float4 temp_output_6983_0_g128458 = saturate( ( ( temp_output_9_0_g128555 * _TerrainShaderRcp4 ) + 0.0001 ) );
				half4 Masks_0414_g128463 = temp_output_6983_0_g128458;
				float4 appendResult29_g128463 = (float4((Masks_015_g128463).z , (Masks_0210_g128463).z , (Masks_0312_g128463).z , (Masks_0414_g128463).z));
				half4 Control31_g128463 = Terrain_Control_047365_g128458;
				half4 Terrain_Height_047210_g128458 = ( appendResult29_g128463 * Control31_g128463 );
				float4 heights_047362_g128458 = Terrain_Height_047210_g128458;
				TEXTURE2D(Texture238_g128500) = _TerrainShaderTex5;
				SamplerState Sampler238_g128500 = SS30_g128548;
				half4 Input_Terrain_Coords_058750_g128458 = _TerrainCoord5;
				float4 temp_output_37_0_g128500 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128500 = temp_output_37_0_g128500;
				float3 temp_output_279_0_g128500 = Input_Position9197_g128458;
				half3 WorldPosition238_g128500 = temp_output_279_0_g128500;
				half4 localSamplePlanar2D238_g128500 = SamplePlanar2D( Texture238_g128500 , Sampler238_g128500 , Coords238_g128500 , WorldPosition238_g128500 );
				TEXTURE2D(Texture246_g128500) = _TerrainShaderTex5;
				SamplerState Sampler246_g128500 = SS30_g128548;
				half4 Coords246_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition246_g128500 = temp_output_279_0_g128500;
				float3 temp_output_280_0_g128500 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128500 = temp_output_280_0_g128500;
				half4 localSamplePlanar3D246_g128500 = SamplePlanar3D( Texture246_g128500 , Sampler246_g128500 , Coords246_g128500 , WorldPosition246_g128500 , WorldNormal246_g128500 );
				TEXTURE2D(Texture234_g128500) = _TerrainShaderTex5;
				SamplerState Sampler234_g128500 = SS30_g128548;
				float4 Coords234_g128500 = temp_output_37_0_g128500;
				float3 WorldPosition234_g128500 = temp_output_279_0_g128500;
				float4 localSampleStochastic2D234_g128500 = SampleStochastic2D( Texture234_g128500 , Sampler234_g128500 , Coords234_g128500 , WorldPosition234_g128500 );
				TEXTURE2D(Texture263_g128500) = _TerrainShaderTex5;
				SamplerState Sampler263_g128500 = SS30_g128548;
				half4 Coords263_g128500 = temp_output_37_0_g128500;
				half3 WorldPosition263_g128500 = temp_output_279_0_g128500;
				half3 WorldNormal263_g128500 = temp_output_280_0_g128500;
				half4 localSampleStochastic3D263_g128500 = SampleStochastic3D( Texture263_g128500 , Sampler263_g128500 , Coords263_g128500 , WorldPosition263_g128500 , WorldNormal263_g128500 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8710_g128458 = localSamplePlanar3D246_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8710_g128458 = localSampleStochastic2D234_g128500;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8710_g128458 = localSampleStochastic3D263_g128500;
				#else
				float4 staticSwitch8710_g128458 = localSamplePlanar2D238_g128500;
				#endif
				float4 temp_output_7_0_g128556 = _TerrainShaderMin5;
				float4 temp_output_9_0_g128556 = ( staticSwitch8710_g128458 - temp_output_7_0_g128556 );
				float4 temp_output_8714_0_g128458 = saturate( ( ( temp_output_9_0_g128556 * _TerrainShaderRcp5 ) + 0.0001 ) );
				half4 Masks_015_g128471 = temp_output_8714_0_g128458;
				TEXTURE2D(Texture238_g128531) = _TerrainShaderTex6;
				SamplerState Sampler238_g128531 = SS30_g128548;
				half4 Input_Terrain_Coords_068751_g128458 = _TerrainCoord6;
				float4 temp_output_37_0_g128531 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128531 = temp_output_37_0_g128531;
				float3 temp_output_279_0_g128531 = Input_Position9197_g128458;
				half3 WorldPosition238_g128531 = temp_output_279_0_g128531;
				half4 localSamplePlanar2D238_g128531 = SamplePlanar2D( Texture238_g128531 , Sampler238_g128531 , Coords238_g128531 , WorldPosition238_g128531 );
				TEXTURE2D(Texture246_g128531) = _TerrainShaderTex6;
				SamplerState Sampler246_g128531 = SS30_g128548;
				half4 Coords246_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition246_g128531 = temp_output_279_0_g128531;
				float3 temp_output_280_0_g128531 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128531 = temp_output_280_0_g128531;
				half4 localSamplePlanar3D246_g128531 = SamplePlanar3D( Texture246_g128531 , Sampler246_g128531 , Coords246_g128531 , WorldPosition246_g128531 , WorldNormal246_g128531 );
				TEXTURE2D(Texture234_g128531) = _TerrainShaderTex6;
				SamplerState Sampler234_g128531 = SS30_g128548;
				float4 Coords234_g128531 = temp_output_37_0_g128531;
				float3 WorldPosition234_g128531 = temp_output_279_0_g128531;
				float4 localSampleStochastic2D234_g128531 = SampleStochastic2D( Texture234_g128531 , Sampler234_g128531 , Coords234_g128531 , WorldPosition234_g128531 );
				TEXTURE2D(Texture263_g128531) = _TerrainShaderTex6;
				SamplerState Sampler263_g128531 = SS30_g128548;
				half4 Coords263_g128531 = temp_output_37_0_g128531;
				half3 WorldPosition263_g128531 = temp_output_279_0_g128531;
				half3 WorldNormal263_g128531 = temp_output_280_0_g128531;
				half4 localSampleStochastic3D263_g128531 = SampleStochastic3D( Texture263_g128531 , Sampler263_g128531 , Coords263_g128531 , WorldPosition263_g128531 , WorldNormal263_g128531 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8711_g128458 = localSamplePlanar3D246_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8711_g128458 = localSampleStochastic2D234_g128531;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8711_g128458 = localSampleStochastic3D263_g128531;
				#else
				float4 staticSwitch8711_g128458 = localSamplePlanar2D238_g128531;
				#endif
				float4 temp_output_7_0_g128557 = _TerrainShaderMin6;
				float4 temp_output_9_0_g128557 = ( staticSwitch8711_g128458 - temp_output_7_0_g128557 );
				float4 temp_output_8721_0_g128458 = saturate( ( ( temp_output_9_0_g128557 * _TerrainShaderRcp6 ) + 0.0001 ) );
				half4 Masks_0210_g128471 = temp_output_8721_0_g128458;
				TEXTURE2D(Texture238_g128532) = _TerrainShaderTex7;
				SamplerState Sampler238_g128532 = SS30_g128548;
				half4 Input_Terrain_Coords_078752_g128458 = _TerrainCoord7;
				float4 temp_output_37_0_g128532 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128532 = temp_output_37_0_g128532;
				float3 temp_output_279_0_g128532 = Input_Position9197_g128458;
				half3 WorldPosition238_g128532 = temp_output_279_0_g128532;
				half4 localSamplePlanar2D238_g128532 = SamplePlanar2D( Texture238_g128532 , Sampler238_g128532 , Coords238_g128532 , WorldPosition238_g128532 );
				TEXTURE2D(Texture246_g128532) = _TerrainShaderTex7;
				SamplerState Sampler246_g128532 = SS30_g128548;
				half4 Coords246_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition246_g128532 = temp_output_279_0_g128532;
				float3 temp_output_280_0_g128532 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128532 = temp_output_280_0_g128532;
				half4 localSamplePlanar3D246_g128532 = SamplePlanar3D( Texture246_g128532 , Sampler246_g128532 , Coords246_g128532 , WorldPosition246_g128532 , WorldNormal246_g128532 );
				TEXTURE2D(Texture234_g128532) = _TerrainShaderTex7;
				SamplerState Sampler234_g128532 = SS30_g128548;
				float4 Coords234_g128532 = temp_output_37_0_g128532;
				float3 WorldPosition234_g128532 = temp_output_279_0_g128532;
				float4 localSampleStochastic2D234_g128532 = SampleStochastic2D( Texture234_g128532 , Sampler234_g128532 , Coords234_g128532 , WorldPosition234_g128532 );
				TEXTURE2D(Texture263_g128532) = _TerrainShaderTex7;
				SamplerState Sampler263_g128532 = SS30_g128548;
				half4 Coords263_g128532 = temp_output_37_0_g128532;
				half3 WorldPosition263_g128532 = temp_output_279_0_g128532;
				half3 WorldNormal263_g128532 = temp_output_280_0_g128532;
				half4 localSampleStochastic3D263_g128532 = SampleStochastic3D( Texture263_g128532 , Sampler263_g128532 , Coords263_g128532 , WorldPosition263_g128532 , WorldNormal263_g128532 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8712_g128458 = localSamplePlanar3D246_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8712_g128458 = localSampleStochastic2D234_g128532;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8712_g128458 = localSampleStochastic3D263_g128532;
				#else
				float4 staticSwitch8712_g128458 = localSamplePlanar2D238_g128532;
				#endif
				float4 temp_output_7_0_g128558 = _TerrainShaderMin7;
				float4 temp_output_9_0_g128558 = ( staticSwitch8712_g128458 - temp_output_7_0_g128558 );
				float4 temp_output_8724_0_g128458 = saturate( ( ( temp_output_9_0_g128558 * _TerrainShaderRcp7 ) + 0.0001 ) );
				half4 Masks_0312_g128471 = temp_output_8724_0_g128458;
				TEXTURE2D(Texture238_g128533) = _TerrainShaderTex8;
				SamplerState Sampler238_g128533 = SS30_g128548;
				half4 Input_Terrain_Coords_088749_g128458 = _TerrainCoord8;
				float4 temp_output_37_0_g128533 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128533 = temp_output_37_0_g128533;
				float3 temp_output_279_0_g128533 = Input_Position9197_g128458;
				half3 WorldPosition238_g128533 = temp_output_279_0_g128533;
				half4 localSamplePlanar2D238_g128533 = SamplePlanar2D( Texture238_g128533 , Sampler238_g128533 , Coords238_g128533 , WorldPosition238_g128533 );
				TEXTURE2D(Texture246_g128533) = _TerrainShaderTex8;
				SamplerState Sampler246_g128533 = SS30_g128548;
				half4 Coords246_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition246_g128533 = temp_output_279_0_g128533;
				float3 temp_output_280_0_g128533 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128533 = temp_output_280_0_g128533;
				half4 localSamplePlanar3D246_g128533 = SamplePlanar3D( Texture246_g128533 , Sampler246_g128533 , Coords246_g128533 , WorldPosition246_g128533 , WorldNormal246_g128533 );
				TEXTURE2D(Texture234_g128533) = _TerrainShaderTex8;
				SamplerState Sampler234_g128533 = SS30_g128548;
				float4 Coords234_g128533 = temp_output_37_0_g128533;
				float3 WorldPosition234_g128533 = temp_output_279_0_g128533;
				float4 localSampleStochastic2D234_g128533 = SampleStochastic2D( Texture234_g128533 , Sampler234_g128533 , Coords234_g128533 , WorldPosition234_g128533 );
				TEXTURE2D(Texture263_g128533) = _TerrainShaderTex8;
				SamplerState Sampler263_g128533 = SS30_g128548;
				half4 Coords263_g128533 = temp_output_37_0_g128533;
				half3 WorldPosition263_g128533 = temp_output_279_0_g128533;
				half3 WorldNormal263_g128533 = temp_output_280_0_g128533;
				half4 localSampleStochastic3D263_g128533 = SampleStochastic3D( Texture263_g128533 , Sampler263_g128533 , Coords263_g128533 , WorldPosition263_g128533 , WorldNormal263_g128533 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8713_g128458 = localSamplePlanar3D246_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8713_g128458 = localSampleStochastic2D234_g128533;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8713_g128458 = localSampleStochastic3D263_g128533;
				#else
				float4 staticSwitch8713_g128458 = localSamplePlanar2D238_g128533;
				#endif
				float4 temp_output_7_0_g128559 = _TerrainShaderMin8;
				float4 temp_output_9_0_g128559 = ( staticSwitch8713_g128458 - temp_output_7_0_g128559 );
				float4 temp_output_8727_0_g128458 = saturate( ( ( temp_output_9_0_g128559 * _TerrainShaderRcp8 ) + 0.0001 ) );
				half4 Masks_0414_g128471 = temp_output_8727_0_g128458;
				float4 appendResult29_g128471 = (float4((Masks_015_g128471).z , (Masks_0210_g128471).z , (Masks_0312_g128471).z , (Masks_0414_g128471).z));
				half4 Control31_g128471 = Terrain_Control_087366_g128458;
				half4 Terrain_Height_088731_g128458 = ( appendResult29_g128471 * Control31_g128471 );
				float4 heights_087362_g128458 = Terrain_Height_088731_g128458;
				TEXTURE2D(Texture238_g128503) = _TerrainShaderTex9;
				SamplerState Sampler238_g128503 = SS30_g128548;
				half4 Input_Terrain_Coords_098833_g128458 = _TerrainCoord9;
				float4 temp_output_37_0_g128503 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128503 = temp_output_37_0_g128503;
				float3 temp_output_279_0_g128503 = Input_Position9197_g128458;
				half3 WorldPosition238_g128503 = temp_output_279_0_g128503;
				half4 localSamplePlanar2D238_g128503 = SamplePlanar2D( Texture238_g128503 , Sampler238_g128503 , Coords238_g128503 , WorldPosition238_g128503 );
				TEXTURE2D(Texture246_g128503) = _TerrainShaderTex9;
				SamplerState Sampler246_g128503 = SS30_g128548;
				half4 Coords246_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition246_g128503 = temp_output_279_0_g128503;
				float3 temp_output_280_0_g128503 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128503 = temp_output_280_0_g128503;
				half4 localSamplePlanar3D246_g128503 = SamplePlanar3D( Texture246_g128503 , Sampler246_g128503 , Coords246_g128503 , WorldPosition246_g128503 , WorldNormal246_g128503 );
				TEXTURE2D(Texture234_g128503) = _TerrainShaderTex9;
				SamplerState Sampler234_g128503 = SS30_g128548;
				float4 Coords234_g128503 = temp_output_37_0_g128503;
				float3 WorldPosition234_g128503 = temp_output_279_0_g128503;
				float4 localSampleStochastic2D234_g128503 = SampleStochastic2D( Texture234_g128503 , Sampler234_g128503 , Coords234_g128503 , WorldPosition234_g128503 );
				TEXTURE2D(Texture263_g128503) = _TerrainShaderTex9;
				SamplerState Sampler263_g128503 = SS30_g128548;
				half4 Coords263_g128503 = temp_output_37_0_g128503;
				half3 WorldPosition263_g128503 = temp_output_279_0_g128503;
				half3 WorldNormal263_g128503 = temp_output_280_0_g128503;
				half4 localSampleStochastic3D263_g128503 = SampleStochastic3D( Texture263_g128503 , Sampler263_g128503 , Coords263_g128503 , WorldPosition263_g128503 , WorldNormal263_g128503 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8878_g128458 = localSamplePlanar3D246_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8878_g128458 = localSampleStochastic2D234_g128503;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8878_g128458 = localSampleStochastic3D263_g128503;
				#else
				float4 staticSwitch8878_g128458 = localSamplePlanar2D238_g128503;
				#endif
				float4 temp_output_7_0_g128560 = _TerrainShaderMin9;
				float4 temp_output_9_0_g128560 = ( staticSwitch8878_g128458 - temp_output_7_0_g128560 );
				float4 temp_output_8815_0_g128458 = saturate( ( ( temp_output_9_0_g128560 * _TerrainShaderRcp9 ) + 0.0001 ) );
				half4 Masks_015_g128477 = temp_output_8815_0_g128458;
				TEXTURE2D(Texture238_g128513) = _TerrainShaderTex10;
				SamplerState Sampler238_g128513 = SS30_g128548;
				half4 Input_Terrain_Coords_108834_g128458 = _TerrainCoord10;
				float4 temp_output_37_0_g128513 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128513 = temp_output_37_0_g128513;
				float3 temp_output_279_0_g128513 = Input_Position9197_g128458;
				half3 WorldPosition238_g128513 = temp_output_279_0_g128513;
				half4 localSamplePlanar2D238_g128513 = SamplePlanar2D( Texture238_g128513 , Sampler238_g128513 , Coords238_g128513 , WorldPosition238_g128513 );
				TEXTURE2D(Texture246_g128513) = _TerrainShaderTex10;
				SamplerState Sampler246_g128513 = SS30_g128548;
				half4 Coords246_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition246_g128513 = temp_output_279_0_g128513;
				float3 temp_output_280_0_g128513 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128513 = temp_output_280_0_g128513;
				half4 localSamplePlanar3D246_g128513 = SamplePlanar3D( Texture246_g128513 , Sampler246_g128513 , Coords246_g128513 , WorldPosition246_g128513 , WorldNormal246_g128513 );
				TEXTURE2D(Texture234_g128513) = _TerrainShaderTex10;
				SamplerState Sampler234_g128513 = SS30_g128548;
				float4 Coords234_g128513 = temp_output_37_0_g128513;
				float3 WorldPosition234_g128513 = temp_output_279_0_g128513;
				float4 localSampleStochastic2D234_g128513 = SampleStochastic2D( Texture234_g128513 , Sampler234_g128513 , Coords234_g128513 , WorldPosition234_g128513 );
				TEXTURE2D(Texture263_g128513) = _TerrainShaderTex10;
				SamplerState Sampler263_g128513 = SS30_g128548;
				half4 Coords263_g128513 = temp_output_37_0_g128513;
				half3 WorldPosition263_g128513 = temp_output_279_0_g128513;
				half3 WorldNormal263_g128513 = temp_output_280_0_g128513;
				half4 localSampleStochastic3D263_g128513 = SampleStochastic3D( Texture263_g128513 , Sampler263_g128513 , Coords263_g128513 , WorldPosition263_g128513 , WorldNormal263_g128513 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8860_g128458 = localSamplePlanar3D246_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8860_g128458 = localSampleStochastic2D234_g128513;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8860_g128458 = localSampleStochastic3D263_g128513;
				#else
				float4 staticSwitch8860_g128458 = localSamplePlanar2D238_g128513;
				#endif
				float4 temp_output_7_0_g128561 = _TerrainShaderMin10;
				float4 temp_output_9_0_g128561 = ( staticSwitch8860_g128458 - temp_output_7_0_g128561 );
				float4 temp_output_8818_0_g128458 = saturate( ( ( temp_output_9_0_g128561 * _TerrainShaderRcp10 ) + 0.0001 ) );
				half4 Masks_0210_g128477 = temp_output_8818_0_g128458;
				TEXTURE2D(Texture238_g128514) = _TerrainShaderTex11;
				SamplerState Sampler238_g128514 = SS30_g128548;
				half4 Input_Terrain_Coords_118835_g128458 = _TerrainCoord11;
				float4 temp_output_37_0_g128514 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128514 = temp_output_37_0_g128514;
				float3 temp_output_279_0_g128514 = Input_Position9197_g128458;
				half3 WorldPosition238_g128514 = temp_output_279_0_g128514;
				half4 localSamplePlanar2D238_g128514 = SamplePlanar2D( Texture238_g128514 , Sampler238_g128514 , Coords238_g128514 , WorldPosition238_g128514 );
				TEXTURE2D(Texture246_g128514) = _TerrainShaderTex11;
				SamplerState Sampler246_g128514 = SS30_g128548;
				half4 Coords246_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition246_g128514 = temp_output_279_0_g128514;
				float3 temp_output_280_0_g128514 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128514 = temp_output_280_0_g128514;
				half4 localSamplePlanar3D246_g128514 = SamplePlanar3D( Texture246_g128514 , Sampler246_g128514 , Coords246_g128514 , WorldPosition246_g128514 , WorldNormal246_g128514 );
				TEXTURE2D(Texture234_g128514) = _TerrainShaderTex11;
				SamplerState Sampler234_g128514 = SS30_g128548;
				float4 Coords234_g128514 = temp_output_37_0_g128514;
				float3 WorldPosition234_g128514 = temp_output_279_0_g128514;
				float4 localSampleStochastic2D234_g128514 = SampleStochastic2D( Texture234_g128514 , Sampler234_g128514 , Coords234_g128514 , WorldPosition234_g128514 );
				TEXTURE2D(Texture263_g128514) = _TerrainShaderTex11;
				SamplerState Sampler263_g128514 = SS30_g128548;
				half4 Coords263_g128514 = temp_output_37_0_g128514;
				half3 WorldPosition263_g128514 = temp_output_279_0_g128514;
				half3 WorldNormal263_g128514 = temp_output_280_0_g128514;
				half4 localSampleStochastic3D263_g128514 = SampleStochastic3D( Texture263_g128514 , Sampler263_g128514 , Coords263_g128514 , WorldPosition263_g128514 , WorldNormal263_g128514 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8861_g128458 = localSamplePlanar3D246_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8861_g128458 = localSampleStochastic2D234_g128514;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8861_g128458 = localSampleStochastic3D263_g128514;
				#else
				float4 staticSwitch8861_g128458 = localSamplePlanar2D238_g128514;
				#endif
				float4 temp_output_7_0_g128562 = _TerrainShaderMin11;
				float4 temp_output_9_0_g128562 = ( staticSwitch8861_g128458 - temp_output_7_0_g128562 );
				float4 temp_output_8819_0_g128458 = saturate( ( ( temp_output_9_0_g128562 * _TerrainShaderRcp11 ) + 0.0001 ) );
				half4 Masks_0312_g128477 = temp_output_8819_0_g128458;
				TEXTURE2D(Texture238_g128515) = _TerrainShaderTex12;
				SamplerState Sampler238_g128515 = SS30_g128548;
				half4 Input_Terrain_Coords_128836_g128458 = _TerrainCoord12;
				float4 temp_output_37_0_g128515 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128515 = temp_output_37_0_g128515;
				float3 temp_output_279_0_g128515 = Input_Position9197_g128458;
				half3 WorldPosition238_g128515 = temp_output_279_0_g128515;
				half4 localSamplePlanar2D238_g128515 = SamplePlanar2D( Texture238_g128515 , Sampler238_g128515 , Coords238_g128515 , WorldPosition238_g128515 );
				TEXTURE2D(Texture246_g128515) = _TerrainShaderTex12;
				SamplerState Sampler246_g128515 = SS30_g128548;
				half4 Coords246_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition246_g128515 = temp_output_279_0_g128515;
				float3 temp_output_280_0_g128515 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128515 = temp_output_280_0_g128515;
				half4 localSamplePlanar3D246_g128515 = SamplePlanar3D( Texture246_g128515 , Sampler246_g128515 , Coords246_g128515 , WorldPosition246_g128515 , WorldNormal246_g128515 );
				TEXTURE2D(Texture234_g128515) = _TerrainShaderTex12;
				SamplerState Sampler234_g128515 = SS30_g128548;
				float4 Coords234_g128515 = temp_output_37_0_g128515;
				float3 WorldPosition234_g128515 = temp_output_279_0_g128515;
				float4 localSampleStochastic2D234_g128515 = SampleStochastic2D( Texture234_g128515 , Sampler234_g128515 , Coords234_g128515 , WorldPosition234_g128515 );
				TEXTURE2D(Texture263_g128515) = _TerrainShaderTex12;
				SamplerState Sampler263_g128515 = SS30_g128548;
				half4 Coords263_g128515 = temp_output_37_0_g128515;
				half3 WorldPosition263_g128515 = temp_output_279_0_g128515;
				half3 WorldNormal263_g128515 = temp_output_280_0_g128515;
				half4 localSampleStochastic3D263_g128515 = SampleStochastic3D( Texture263_g128515 , Sampler263_g128515 , Coords263_g128515 , WorldPosition263_g128515 , WorldNormal263_g128515 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8879_g128458 = localSamplePlanar3D246_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8879_g128458 = localSampleStochastic2D234_g128515;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8879_g128458 = localSampleStochastic3D263_g128515;
				#else
				float4 staticSwitch8879_g128458 = localSamplePlanar2D238_g128515;
				#endif
				float4 temp_output_7_0_g128563 = _TerrainShaderMin12;
				float4 temp_output_9_0_g128563 = ( staticSwitch8879_g128458 - temp_output_7_0_g128563 );
				float4 temp_output_8820_0_g128458 = saturate( ( ( temp_output_9_0_g128563 * _TerrainShaderRcp12 ) + 0.0001 ) );
				half4 Masks_0414_g128477 = temp_output_8820_0_g128458;
				float4 appendResult29_g128477 = (float4((Masks_015_g128477).z , (Masks_0210_g128477).z , (Masks_0312_g128477).z , (Masks_0414_g128477).z));
				half4 Control31_g128477 = Terrain_Control_127712_g128458;
				half4 Terrain_Height_128870_g128458 = ( appendResult29_g128477 * Control31_g128477 );
				float4 heights_127362_g128458 = Terrain_Height_128870_g128458;
				TEXTURE2D(Texture238_g128511) = _TerrainShaderTex13;
				SamplerState Sampler238_g128511 = SS30_g128548;
				half4 Input_Terrain_Coords_138960_g128458 = _TerrainCoord13;
				float4 temp_output_37_0_g128511 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128511 = temp_output_37_0_g128511;
				float3 temp_output_279_0_g128511 = Input_Position9197_g128458;
				half3 WorldPosition238_g128511 = temp_output_279_0_g128511;
				half4 localSamplePlanar2D238_g128511 = SamplePlanar2D( Texture238_g128511 , Sampler238_g128511 , Coords238_g128511 , WorldPosition238_g128511 );
				TEXTURE2D(Texture246_g128511) = _TerrainShaderTex13;
				SamplerState Sampler246_g128511 = SS30_g128548;
				half4 Coords246_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition246_g128511 = temp_output_279_0_g128511;
				float3 temp_output_280_0_g128511 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128511 = temp_output_280_0_g128511;
				half4 localSamplePlanar3D246_g128511 = SamplePlanar3D( Texture246_g128511 , Sampler246_g128511 , Coords246_g128511 , WorldPosition246_g128511 , WorldNormal246_g128511 );
				TEXTURE2D(Texture234_g128511) = _TerrainShaderTex13;
				SamplerState Sampler234_g128511 = SS30_g128548;
				float4 Coords234_g128511 = temp_output_37_0_g128511;
				float3 WorldPosition234_g128511 = temp_output_279_0_g128511;
				float4 localSampleStochastic2D234_g128511 = SampleStochastic2D( Texture234_g128511 , Sampler234_g128511 , Coords234_g128511 , WorldPosition234_g128511 );
				TEXTURE2D(Texture263_g128511) = _TerrainShaderTex13;
				SamplerState Sampler263_g128511 = SS30_g128548;
				half4 Coords263_g128511 = temp_output_37_0_g128511;
				half3 WorldPosition263_g128511 = temp_output_279_0_g128511;
				half3 WorldNormal263_g128511 = temp_output_280_0_g128511;
				half4 localSampleStochastic3D263_g128511 = SampleStochastic3D( Texture263_g128511 , Sampler263_g128511 , Coords263_g128511 , WorldPosition263_g128511 , WorldNormal263_g128511 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch9000_g128458 = localSamplePlanar3D246_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch9000_g128458 = localSampleStochastic2D234_g128511;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch9000_g128458 = localSampleStochastic3D263_g128511;
				#else
				float4 staticSwitch9000_g128458 = localSamplePlanar2D238_g128511;
				#endif
				float4 temp_output_7_0_g128564 = _TerrainShaderMin13;
				float4 temp_output_9_0_g128564 = ( staticSwitch9000_g128458 - temp_output_7_0_g128564 );
				float4 temp_output_8931_0_g128458 = saturate( ( ( temp_output_9_0_g128564 * _TerrainShaderRcp13 ) + 0.0001 ) );
				half4 Masks_015_g128483 = temp_output_8931_0_g128458;
				TEXTURE2D(Texture238_g128522) = _TerrainShaderTex14;
				SamplerState Sampler238_g128522 = SS30_g128548;
				half4 Input_Terrain_Coords_148961_g128458 = _TerrainCoord14;
				float4 temp_output_37_0_g128522 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128522 = temp_output_37_0_g128522;
				float3 temp_output_279_0_g128522 = Input_Position9197_g128458;
				half3 WorldPosition238_g128522 = temp_output_279_0_g128522;
				half4 localSamplePlanar2D238_g128522 = SamplePlanar2D( Texture238_g128522 , Sampler238_g128522 , Coords238_g128522 , WorldPosition238_g128522 );
				TEXTURE2D(Texture246_g128522) = _TerrainShaderTex14;
				SamplerState Sampler246_g128522 = SS30_g128548;
				half4 Coords246_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition246_g128522 = temp_output_279_0_g128522;
				float3 temp_output_280_0_g128522 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128522 = temp_output_280_0_g128522;
				half4 localSamplePlanar3D246_g128522 = SamplePlanar3D( Texture246_g128522 , Sampler246_g128522 , Coords246_g128522 , WorldPosition246_g128522 , WorldNormal246_g128522 );
				TEXTURE2D(Texture234_g128522) = _TerrainShaderTex14;
				SamplerState Sampler234_g128522 = SS30_g128548;
				float4 Coords234_g128522 = temp_output_37_0_g128522;
				float3 WorldPosition234_g128522 = temp_output_279_0_g128522;
				float4 localSampleStochastic2D234_g128522 = SampleStochastic2D( Texture234_g128522 , Sampler234_g128522 , Coords234_g128522 , WorldPosition234_g128522 );
				TEXTURE2D(Texture263_g128522) = _TerrainShaderTex14;
				SamplerState Sampler263_g128522 = SS30_g128548;
				half4 Coords263_g128522 = temp_output_37_0_g128522;
				half3 WorldPosition263_g128522 = temp_output_279_0_g128522;
				half3 WorldNormal263_g128522 = temp_output_280_0_g128522;
				half4 localSampleStochastic3D263_g128522 = SampleStochastic3D( Texture263_g128522 , Sampler263_g128522 , Coords263_g128522 , WorldPosition263_g128522 , WorldNormal263_g128522 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch9001_g128458 = localSamplePlanar3D246_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch9001_g128458 = localSampleStochastic2D234_g128522;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch9001_g128458 = localSampleStochastic3D263_g128522;
				#else
				float4 staticSwitch9001_g128458 = localSamplePlanar2D238_g128522;
				#endif
				float4 temp_output_7_0_g128565 = _TerrainShaderMin14;
				float4 temp_output_9_0_g128565 = ( staticSwitch9001_g128458 - temp_output_7_0_g128565 );
				float4 temp_output_8934_0_g128458 = saturate( ( ( temp_output_9_0_g128565 * _TerrainShaderRcp14 ) + 0.0001 ) );
				half4 Masks_0210_g128483 = temp_output_8934_0_g128458;
				TEXTURE2D(Texture238_g128523) = _TerrainShaderTex15;
				SamplerState Sampler238_g128523 = SS30_g128548;
				half4 Input_Terrain_Coords_158962_g128458 = _TerrainCoord15;
				float4 temp_output_37_0_g128523 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128523 = temp_output_37_0_g128523;
				float3 temp_output_279_0_g128523 = Input_Position9197_g128458;
				half3 WorldPosition238_g128523 = temp_output_279_0_g128523;
				half4 localSamplePlanar2D238_g128523 = SamplePlanar2D( Texture238_g128523 , Sampler238_g128523 , Coords238_g128523 , WorldPosition238_g128523 );
				TEXTURE2D(Texture246_g128523) = _TerrainShaderTex15;
				SamplerState Sampler246_g128523 = SS30_g128548;
				half4 Coords246_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition246_g128523 = temp_output_279_0_g128523;
				float3 temp_output_280_0_g128523 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128523 = temp_output_280_0_g128523;
				half4 localSamplePlanar3D246_g128523 = SamplePlanar3D( Texture246_g128523 , Sampler246_g128523 , Coords246_g128523 , WorldPosition246_g128523 , WorldNormal246_g128523 );
				TEXTURE2D(Texture234_g128523) = _TerrainShaderTex15;
				SamplerState Sampler234_g128523 = SS30_g128548;
				float4 Coords234_g128523 = temp_output_37_0_g128523;
				float3 WorldPosition234_g128523 = temp_output_279_0_g128523;
				float4 localSampleStochastic2D234_g128523 = SampleStochastic2D( Texture234_g128523 , Sampler234_g128523 , Coords234_g128523 , WorldPosition234_g128523 );
				TEXTURE2D(Texture263_g128523) = _TerrainShaderTex15;
				SamplerState Sampler263_g128523 = SS30_g128548;
				half4 Coords263_g128523 = temp_output_37_0_g128523;
				half3 WorldPosition263_g128523 = temp_output_279_0_g128523;
				half3 WorldNormal263_g128523 = temp_output_280_0_g128523;
				half4 localSampleStochastic3D263_g128523 = SampleStochastic3D( Texture263_g128523 , Sampler263_g128523 , Coords263_g128523 , WorldPosition263_g128523 , WorldNormal263_g128523 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch9002_g128458 = localSamplePlanar3D246_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch9002_g128458 = localSampleStochastic2D234_g128523;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch9002_g128458 = localSampleStochastic3D263_g128523;
				#else
				float4 staticSwitch9002_g128458 = localSamplePlanar2D238_g128523;
				#endif
				float4 temp_output_7_0_g128566 = _TerrainShaderMin15;
				float4 temp_output_9_0_g128566 = ( staticSwitch9002_g128458 - temp_output_7_0_g128566 );
				float4 temp_output_8935_0_g128458 = saturate( ( ( temp_output_9_0_g128566 * _TerrainShaderRcp15 ) + 0.0001 ) );
				half4 Masks_0312_g128483 = temp_output_8935_0_g128458;
				TEXTURE2D(Texture238_g128524) = _TerrainShaderTex16;
				SamplerState Sampler238_g128524 = SS30_g128548;
				half4 Input_Terrain_Coords_168959_g128458 = _TerrainCoord16;
				float4 temp_output_37_0_g128524 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128524 = temp_output_37_0_g128524;
				float3 temp_output_279_0_g128524 = Input_Position9197_g128458;
				half3 WorldPosition238_g128524 = temp_output_279_0_g128524;
				half4 localSamplePlanar2D238_g128524 = SamplePlanar2D( Texture238_g128524 , Sampler238_g128524 , Coords238_g128524 , WorldPosition238_g128524 );
				TEXTURE2D(Texture246_g128524) = _TerrainShaderTex16;
				SamplerState Sampler246_g128524 = SS30_g128548;
				half4 Coords246_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition246_g128524 = temp_output_279_0_g128524;
				float3 temp_output_280_0_g128524 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128524 = temp_output_280_0_g128524;
				half4 localSamplePlanar3D246_g128524 = SamplePlanar3D( Texture246_g128524 , Sampler246_g128524 , Coords246_g128524 , WorldPosition246_g128524 , WorldNormal246_g128524 );
				TEXTURE2D(Texture234_g128524) = _TerrainShaderTex16;
				SamplerState Sampler234_g128524 = SS30_g128548;
				float4 Coords234_g128524 = temp_output_37_0_g128524;
				float3 WorldPosition234_g128524 = temp_output_279_0_g128524;
				float4 localSampleStochastic2D234_g128524 = SampleStochastic2D( Texture234_g128524 , Sampler234_g128524 , Coords234_g128524 , WorldPosition234_g128524 );
				TEXTURE2D(Texture263_g128524) = _TerrainShaderTex16;
				SamplerState Sampler263_g128524 = SS30_g128548;
				half4 Coords263_g128524 = temp_output_37_0_g128524;
				half3 WorldPosition263_g128524 = temp_output_279_0_g128524;
				half3 WorldNormal263_g128524 = temp_output_280_0_g128524;
				half4 localSampleStochastic3D263_g128524 = SampleStochastic3D( Texture263_g128524 , Sampler263_g128524 , Coords263_g128524 , WorldPosition263_g128524 , WorldNormal263_g128524 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch9003_g128458 = localSamplePlanar3D246_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch9003_g128458 = localSampleStochastic2D234_g128524;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch9003_g128458 = localSampleStochastic3D263_g128524;
				#else
				float4 staticSwitch9003_g128458 = localSamplePlanar2D238_g128524;
				#endif
				float4 temp_output_7_0_g128567 = _TerrainShaderMin16;
				float4 temp_output_9_0_g128567 = ( staticSwitch9003_g128458 - temp_output_7_0_g128567 );
				float4 temp_output_8936_0_g128458 = saturate( ( ( temp_output_9_0_g128567 * _TerrainShaderRcp16 ) + 0.0001 ) );
				half4 Masks_0414_g128483 = temp_output_8936_0_g128458;
				float4 appendResult29_g128483 = (float4((Masks_015_g128483).z , (Masks_0210_g128483).z , (Masks_0312_g128483).z , (Masks_0414_g128483).z));
				half4 Control31_g128483 = Terrain_Control_167711_g128458;
				half4 Terrain_Height_169015_g128458 = ( appendResult29_g128483 * Control31_g128483 );
				float4 heights_167362_g128458 = Terrain_Height_169015_g128458;
				float heightTransition7362_g128458 = ( 1.0 - _TerrainHeightBlendValue );
				float4 weights_047362_g128458 = float4( 0,0,0,0 );
				float4 weights_087362_g128458 = float4( 0,0,0,0 );
				float4 weights_127362_g128458 = float4( 0,0,0,0 );
				float4 weights_167362_g128458 = float4( 0,0,0,0 );
				{
				//Modified version of the HDRP terrain height based blending
				float maxHeight = 0;
				float4 weightedHeights_04 = float4( 0,0,0,0 );
				float4 weightedHeights_08 = float4( 0,0,0,0 );
				float4 weightedHeights_12 = float4( 0,0,0,0 );
				float4 weightedHeights_16 = float4( 0,0,0,0 );
				maxHeight = heights_047362_g128458.x;
				maxHeight = max(maxHeight, heights_047362_g128458.y);
				maxHeight = max(maxHeight, heights_047362_g128458.z);
				maxHeight = max(maxHeight, heights_047362_g128458.w);
				#ifdef TVE_TERRAIN_08
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_12
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				#endif
				#ifdef TVE_TERRAIN_16
				maxHeight = max(maxHeight, heights_087362_g128458.x);
				maxHeight = max(maxHeight, heights_087362_g128458.y);
				maxHeight = max(maxHeight, heights_087362_g128458.z);
				maxHeight = max(maxHeight, heights_087362_g128458.w);
				maxHeight = max(maxHeight, heights_127362_g128458.x);
				maxHeight = max(maxHeight, heights_127362_g128458.y);
				maxHeight = max(maxHeight, heights_127362_g128458.z);
				maxHeight = max(maxHeight, heights_127362_g128458.w);
				maxHeight = max(maxHeight, heights_167362_g128458.x);
				maxHeight = max(maxHeight, heights_167362_g128458.y);
				maxHeight = max(maxHeight, heights_167362_g128458.z);
				maxHeight = max(maxHeight, heights_167362_g128458.w);
				#endif
				float transition = max(heightTransition7362_g128458, 0.01);
				weightedHeights_04 = float4 ( heights_047362_g128458.x, heights_047362_g128458.y, heights_047362_g128458.z, heights_047362_g128458.w );
				weightedHeights_04 = weightedHeights_04 - maxHeight.xxxx;
				weightedHeights_04 = (max(0, weightedHeights_04 + transition) + 1e-6) * control_047362_g128458;
				#ifdef TVE_TERRAIN_08
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				#endif
				#ifdef TVE_TERRAIN_12
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				#endif
				#ifdef TVE_TERRAIN_16
				weightedHeights_08 = float4 ( heights_087362_g128458.x, heights_087362_g128458.y, heights_087362_g128458.z, heights_087362_g128458.w );
				weightedHeights_08 = weightedHeights_08 - maxHeight.xxxx;
				weightedHeights_08 = (max(0, weightedHeights_08 + transition) + 1e-6) * control_087362_g128458;
				weightedHeights_12 = float4 ( heights_127362_g128458.x, heights_127362_g128458.y, heights_127362_g128458.z, heights_127362_g128458.w );
				weightedHeights_12 = weightedHeights_12 - maxHeight.xxxx;
				weightedHeights_12 = (max(0, weightedHeights_12 + transition) + 1e-6) * control_127362_g128458;
				weightedHeights_16 = float4 ( heights_167362_g128458.x, heights_167362_g128458.y, heights_167362_g128458.z, heights_167362_g128458.w );
				weightedHeights_16 = weightedHeights_16 - maxHeight.xxxx;
				weightedHeights_16 = (max(0, weightedHeights_16 + transition) + 1e-6) * control_167362_g128458;
				#endif
				float sumHeight_04 = weightedHeights_04.x + weightedHeights_04.y + weightedHeights_04.z + weightedHeights_04.w;
				float sumHeight_08 = weightedHeights_08.x + weightedHeights_08.y + weightedHeights_08.z + weightedHeights_08.w;
				float sumHeight_12 = weightedHeights_12.x + weightedHeights_12.y + weightedHeights_12.z + weightedHeights_12.w;
				float sumHeight_16 = weightedHeights_16.x + weightedHeights_16.y + weightedHeights_16.z + weightedHeights_16.w;
				float sumHeight = sumHeight_04 + sumHeight_08 + sumHeight_12 + sumHeight_16;
				weights_047362_g128458 = weightedHeights_04 / sumHeight.xxxx;
				#ifdef TVE_TERRAIN_08
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_12
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				#endif
				#ifdef TVE_TERRAIN_16
				weights_087362_g128458 = weightedHeights_08 / sumHeight.xxxx;
				weights_127362_g128458 = weightedHeights_12 / sumHeight.xxxx;
				weights_167362_g128458 = weightedHeights_16 / sumHeight.xxxx;
				#endif
				}
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8792_g128458 = weights_047362_g128458;
				#else
				float4 staticSwitch8792_g128458 = control_047362_g128458;
				#endif
				half4 Terrain_Weights_046781_g128458 = staticSwitch8792_g128458;
				half4 Weights52_g128462 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128488) = _TerrainAlbedoTex1;
				float localFilterTexture19_g128545 = ( 0.0 );
				SamplerState SS19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128545 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128545 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128545 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128545 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128545 = SamplerDefault19_g128545;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128545 = SamplerDefault19_g128545;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128545 = SamplerPoint19_g128545;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128545 = SamplerLow19_g128545;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128545 = SamplerMedium19_g128545;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128545 = SamplerHigh19_g128545;
				#endif
				}
				SamplerState Sampler238_g128488 = SS19_g128545;
				float4 temp_output_37_0_g128488 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128488 = temp_output_37_0_g128488;
				float3 temp_output_279_0_g128488 = Input_Position9197_g128458;
				half3 WorldPosition238_g128488 = temp_output_279_0_g128488;
				half4 localSamplePlanar2D238_g128488 = SamplePlanar2D( Texture238_g128488 , Sampler238_g128488 , Coords238_g128488 , WorldPosition238_g128488 );
				TEXTURE2D(Texture246_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler246_g128488 = SS19_g128545;
				half4 Coords246_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition246_g128488 = temp_output_279_0_g128488;
				float3 temp_output_280_0_g128488 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128488 = temp_output_280_0_g128488;
				half4 localSamplePlanar3D246_g128488 = SamplePlanar3D( Texture246_g128488 , Sampler246_g128488 , Coords246_g128488 , WorldPosition246_g128488 , WorldNormal246_g128488 );
				TEXTURE2D(Texture234_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler234_g128488 = SS19_g128545;
				float4 Coords234_g128488 = temp_output_37_0_g128488;
				float3 WorldPosition234_g128488 = temp_output_279_0_g128488;
				float4 localSampleStochastic2D234_g128488 = SampleStochastic2D( Texture234_g128488 , Sampler234_g128488 , Coords234_g128488 , WorldPosition234_g128488 );
				TEXTURE2D(Texture263_g128488) = _TerrainAlbedoTex1;
				SamplerState Sampler263_g128488 = SS19_g128545;
				half4 Coords263_g128488 = temp_output_37_0_g128488;
				half3 WorldPosition263_g128488 = temp_output_279_0_g128488;
				half3 WorldNormal263_g128488 = temp_output_280_0_g128488;
				half4 localSampleStochastic3D263_g128488 = SampleStochastic3D( Texture263_g128488 , Sampler263_g128488 , Coords263_g128488 , WorldPosition263_g128488 , WorldNormal263_g128488 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8614_g128458 = localSamplePlanar3D246_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8614_g128458 = localSampleStochastic2D234_g128488;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8614_g128458 = localSampleStochastic3D263_g128488;
				#else
				float4 staticSwitch8614_g128458 = localSamplePlanar2D238_g128488;
				#endif
				half4 Layer133_g128462 = staticSwitch8614_g128458;
				TEXTURE2D(Texture238_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler238_g128489 = SS19_g128545;
				float4 temp_output_37_0_g128489 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128489 = temp_output_37_0_g128489;
				float3 temp_output_279_0_g128489 = Input_Position9197_g128458;
				half3 WorldPosition238_g128489 = temp_output_279_0_g128489;
				half4 localSamplePlanar2D238_g128489 = SamplePlanar2D( Texture238_g128489 , Sampler238_g128489 , Coords238_g128489 , WorldPosition238_g128489 );
				TEXTURE2D(Texture246_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler246_g128489 = SS19_g128545;
				half4 Coords246_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition246_g128489 = temp_output_279_0_g128489;
				float3 temp_output_280_0_g128489 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128489 = temp_output_280_0_g128489;
				half4 localSamplePlanar3D246_g128489 = SamplePlanar3D( Texture246_g128489 , Sampler246_g128489 , Coords246_g128489 , WorldPosition246_g128489 , WorldNormal246_g128489 );
				TEXTURE2D(Texture234_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler234_g128489 = SS19_g128545;
				float4 Coords234_g128489 = temp_output_37_0_g128489;
				float3 WorldPosition234_g128489 = temp_output_279_0_g128489;
				float4 localSampleStochastic2D234_g128489 = SampleStochastic2D( Texture234_g128489 , Sampler234_g128489 , Coords234_g128489 , WorldPosition234_g128489 );
				TEXTURE2D(Texture263_g128489) = _TerrainAlbedoTex2;
				SamplerState Sampler263_g128489 = SS19_g128545;
				half4 Coords263_g128489 = temp_output_37_0_g128489;
				half3 WorldPosition263_g128489 = temp_output_279_0_g128489;
				half3 WorldNormal263_g128489 = temp_output_280_0_g128489;
				half4 localSampleStochastic3D263_g128489 = SampleStochastic3D( Texture263_g128489 , Sampler263_g128489 , Coords263_g128489 , WorldPosition263_g128489 , WorldNormal263_g128489 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8629_g128458 = localSamplePlanar3D246_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8629_g128458 = localSampleStochastic2D234_g128489;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8629_g128458 = localSampleStochastic3D263_g128489;
				#else
				float4 staticSwitch8629_g128458 = localSamplePlanar2D238_g128489;
				#endif
				half4 Layer237_g128462 = staticSwitch8629_g128458;
				TEXTURE2D(Texture238_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler238_g128492 = SS19_g128545;
				float4 temp_output_37_0_g128492 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128492 = temp_output_37_0_g128492;
				float3 temp_output_279_0_g128492 = Input_Position9197_g128458;
				half3 WorldPosition238_g128492 = temp_output_279_0_g128492;
				half4 localSamplePlanar2D238_g128492 = SamplePlanar2D( Texture238_g128492 , Sampler238_g128492 , Coords238_g128492 , WorldPosition238_g128492 );
				TEXTURE2D(Texture246_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler246_g128492 = SS19_g128545;
				half4 Coords246_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition246_g128492 = temp_output_279_0_g128492;
				float3 temp_output_280_0_g128492 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128492 = temp_output_280_0_g128492;
				half4 localSamplePlanar3D246_g128492 = SamplePlanar3D( Texture246_g128492 , Sampler246_g128492 , Coords246_g128492 , WorldPosition246_g128492 , WorldNormal246_g128492 );
				TEXTURE2D(Texture234_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler234_g128492 = SS19_g128545;
				float4 Coords234_g128492 = temp_output_37_0_g128492;
				float3 WorldPosition234_g128492 = temp_output_279_0_g128492;
				float4 localSampleStochastic2D234_g128492 = SampleStochastic2D( Texture234_g128492 , Sampler234_g128492 , Coords234_g128492 , WorldPosition234_g128492 );
				TEXTURE2D(Texture263_g128492) = _TerrainAlbedoTex3;
				SamplerState Sampler263_g128492 = SS19_g128545;
				half4 Coords263_g128492 = temp_output_37_0_g128492;
				half3 WorldPosition263_g128492 = temp_output_279_0_g128492;
				half3 WorldNormal263_g128492 = temp_output_280_0_g128492;
				half4 localSampleStochastic3D263_g128492 = SampleStochastic3D( Texture263_g128492 , Sampler263_g128492 , Coords263_g128492 , WorldPosition263_g128492 , WorldNormal263_g128492 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8630_g128458 = localSamplePlanar3D246_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8630_g128458 = localSampleStochastic2D234_g128492;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8630_g128458 = localSampleStochastic3D263_g128492;
				#else
				float4 staticSwitch8630_g128458 = localSamplePlanar2D238_g128492;
				#endif
				half4 Layer338_g128462 = staticSwitch8630_g128458;
				TEXTURE2D(Texture238_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler238_g128494 = SS19_g128545;
				float4 temp_output_37_0_g128494 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128494 = temp_output_37_0_g128494;
				float3 temp_output_279_0_g128494 = Input_Position9197_g128458;
				half3 WorldPosition238_g128494 = temp_output_279_0_g128494;
				half4 localSamplePlanar2D238_g128494 = SamplePlanar2D( Texture238_g128494 , Sampler238_g128494 , Coords238_g128494 , WorldPosition238_g128494 );
				TEXTURE2D(Texture246_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler246_g128494 = SS19_g128545;
				half4 Coords246_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition246_g128494 = temp_output_279_0_g128494;
				float3 temp_output_280_0_g128494 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128494 = temp_output_280_0_g128494;
				half4 localSamplePlanar3D246_g128494 = SamplePlanar3D( Texture246_g128494 , Sampler246_g128494 , Coords246_g128494 , WorldPosition246_g128494 , WorldNormal246_g128494 );
				TEXTURE2D(Texture234_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler234_g128494 = SS19_g128545;
				float4 Coords234_g128494 = temp_output_37_0_g128494;
				float3 WorldPosition234_g128494 = temp_output_279_0_g128494;
				float4 localSampleStochastic2D234_g128494 = SampleStochastic2D( Texture234_g128494 , Sampler234_g128494 , Coords234_g128494 , WorldPosition234_g128494 );
				TEXTURE2D(Texture263_g128494) = _TerrainAlbedoTex4;
				SamplerState Sampler263_g128494 = SS19_g128545;
				half4 Coords263_g128494 = temp_output_37_0_g128494;
				half3 WorldPosition263_g128494 = temp_output_279_0_g128494;
				half3 WorldNormal263_g128494 = temp_output_280_0_g128494;
				half4 localSampleStochastic3D263_g128494 = SampleStochastic3D( Texture263_g128494 , Sampler263_g128494 , Coords263_g128494 , WorldPosition263_g128494 , WorldNormal263_g128494 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8631_g128458 = localSamplePlanar3D246_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8631_g128458 = localSampleStochastic2D234_g128494;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8631_g128458 = localSampleStochastic3D263_g128494;
				#else
				float4 staticSwitch8631_g128458 = localSamplePlanar2D238_g128494;
				#endif
				half4 Layer439_g128462 = staticSwitch8631_g128458;
				float4 weightedBlendVar31_g128462 = Weights52_g128462;
				float4 weightedBlend31_g128462 = ( weightedBlendVar31_g128462.x*Layer133_g128462 + weightedBlendVar31_g128462.y*Layer237_g128462 + weightedBlendVar31_g128462.z*Layer338_g128462 + weightedBlendVar31_g128462.w*Layer439_g128462 );
				half4 Terrain_AAAA_047200_g128458 = weightedBlend31_g128462;
				half4 Layer_045_g128465 = Terrain_AAAA_047200_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8793_g128458 = weights_087362_g128458;
				#else
				float4 staticSwitch8793_g128458 = control_087362_g128458;
				#endif
				half4 Terrain_Weights_087340_g128458 = staticSwitch8793_g128458;
				half4 Weights52_g128469 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler238_g128498 = SS19_g128545;
				float4 temp_output_37_0_g128498 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128498 = temp_output_37_0_g128498;
				float3 temp_output_279_0_g128498 = Input_Position9197_g128458;
				half3 WorldPosition238_g128498 = temp_output_279_0_g128498;
				half4 localSamplePlanar2D238_g128498 = SamplePlanar2D( Texture238_g128498 , Sampler238_g128498 , Coords238_g128498 , WorldPosition238_g128498 );
				TEXTURE2D(Texture246_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler246_g128498 = SS19_g128545;
				half4 Coords246_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition246_g128498 = temp_output_279_0_g128498;
				float3 temp_output_280_0_g128498 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128498 = temp_output_280_0_g128498;
				half4 localSamplePlanar3D246_g128498 = SamplePlanar3D( Texture246_g128498 , Sampler246_g128498 , Coords246_g128498 , WorldPosition246_g128498 , WorldNormal246_g128498 );
				TEXTURE2D(Texture234_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler234_g128498 = SS19_g128545;
				float4 Coords234_g128498 = temp_output_37_0_g128498;
				float3 WorldPosition234_g128498 = temp_output_279_0_g128498;
				float4 localSampleStochastic2D234_g128498 = SampleStochastic2D( Texture234_g128498 , Sampler234_g128498 , Coords234_g128498 , WorldPosition234_g128498 );
				TEXTURE2D(Texture263_g128498) = _TerrainAlbedoTex5;
				SamplerState Sampler263_g128498 = SS19_g128545;
				half4 Coords263_g128498 = temp_output_37_0_g128498;
				half3 WorldPosition263_g128498 = temp_output_279_0_g128498;
				half3 WorldNormal263_g128498 = temp_output_280_0_g128498;
				half4 localSampleStochastic3D263_g128498 = SampleStochastic3D( Texture263_g128498 , Sampler263_g128498 , Coords263_g128498 , WorldPosition263_g128498 , WorldNormal263_g128498 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8690_g128458 = localSamplePlanar3D246_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8690_g128458 = localSampleStochastic2D234_g128498;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8690_g128458 = localSampleStochastic3D263_g128498;
				#else
				float4 staticSwitch8690_g128458 = localSamplePlanar2D238_g128498;
				#endif
				half4 Layer133_g128469 = staticSwitch8690_g128458;
				TEXTURE2D(Texture238_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler238_g128525 = SS19_g128545;
				float4 temp_output_37_0_g128525 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128525 = temp_output_37_0_g128525;
				float3 temp_output_279_0_g128525 = Input_Position9197_g128458;
				half3 WorldPosition238_g128525 = temp_output_279_0_g128525;
				half4 localSamplePlanar2D238_g128525 = SamplePlanar2D( Texture238_g128525 , Sampler238_g128525 , Coords238_g128525 , WorldPosition238_g128525 );
				TEXTURE2D(Texture246_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler246_g128525 = SS19_g128545;
				half4 Coords246_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition246_g128525 = temp_output_279_0_g128525;
				float3 temp_output_280_0_g128525 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128525 = temp_output_280_0_g128525;
				half4 localSamplePlanar3D246_g128525 = SamplePlanar3D( Texture246_g128525 , Sampler246_g128525 , Coords246_g128525 , WorldPosition246_g128525 , WorldNormal246_g128525 );
				TEXTURE2D(Texture234_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler234_g128525 = SS19_g128545;
				float4 Coords234_g128525 = temp_output_37_0_g128525;
				float3 WorldPosition234_g128525 = temp_output_279_0_g128525;
				float4 localSampleStochastic2D234_g128525 = SampleStochastic2D( Texture234_g128525 , Sampler234_g128525 , Coords234_g128525 , WorldPosition234_g128525 );
				TEXTURE2D(Texture263_g128525) = _TerrainAlbedoTex6;
				SamplerState Sampler263_g128525 = SS19_g128545;
				half4 Coords263_g128525 = temp_output_37_0_g128525;
				half3 WorldPosition263_g128525 = temp_output_279_0_g128525;
				half3 WorldNormal263_g128525 = temp_output_280_0_g128525;
				half4 localSampleStochastic3D263_g128525 = SampleStochastic3D( Texture263_g128525 , Sampler263_g128525 , Coords263_g128525 , WorldPosition263_g128525 , WorldNormal263_g128525 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8691_g128458 = localSamplePlanar3D246_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8691_g128458 = localSampleStochastic2D234_g128525;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8691_g128458 = localSampleStochastic3D263_g128525;
				#else
				float4 staticSwitch8691_g128458 = localSamplePlanar2D238_g128525;
				#endif
				half4 Layer237_g128469 = staticSwitch8691_g128458;
				TEXTURE2D(Texture238_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler238_g128526 = SS19_g128545;
				float4 temp_output_37_0_g128526 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128526 = temp_output_37_0_g128526;
				float3 temp_output_279_0_g128526 = Input_Position9197_g128458;
				half3 WorldPosition238_g128526 = temp_output_279_0_g128526;
				half4 localSamplePlanar2D238_g128526 = SamplePlanar2D( Texture238_g128526 , Sampler238_g128526 , Coords238_g128526 , WorldPosition238_g128526 );
				TEXTURE2D(Texture246_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler246_g128526 = SS19_g128545;
				half4 Coords246_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition246_g128526 = temp_output_279_0_g128526;
				float3 temp_output_280_0_g128526 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128526 = temp_output_280_0_g128526;
				half4 localSamplePlanar3D246_g128526 = SamplePlanar3D( Texture246_g128526 , Sampler246_g128526 , Coords246_g128526 , WorldPosition246_g128526 , WorldNormal246_g128526 );
				TEXTURE2D(Texture234_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler234_g128526 = SS19_g128545;
				float4 Coords234_g128526 = temp_output_37_0_g128526;
				float3 WorldPosition234_g128526 = temp_output_279_0_g128526;
				float4 localSampleStochastic2D234_g128526 = SampleStochastic2D( Texture234_g128526 , Sampler234_g128526 , Coords234_g128526 , WorldPosition234_g128526 );
				TEXTURE2D(Texture263_g128526) = _TerrainAlbedoTex7;
				SamplerState Sampler263_g128526 = SS19_g128545;
				half4 Coords263_g128526 = temp_output_37_0_g128526;
				half3 WorldPosition263_g128526 = temp_output_279_0_g128526;
				half3 WorldNormal263_g128526 = temp_output_280_0_g128526;
				half4 localSampleStochastic3D263_g128526 = SampleStochastic3D( Texture263_g128526 , Sampler263_g128526 , Coords263_g128526 , WorldPosition263_g128526 , WorldNormal263_g128526 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8692_g128458 = localSamplePlanar3D246_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8692_g128458 = localSampleStochastic2D234_g128526;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8692_g128458 = localSampleStochastic3D263_g128526;
				#else
				float4 staticSwitch8692_g128458 = localSamplePlanar2D238_g128526;
				#endif
				half4 Layer338_g128469 = staticSwitch8692_g128458;
				TEXTURE2D(Texture238_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler238_g128527 = SS19_g128545;
				float4 temp_output_37_0_g128527 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128527 = temp_output_37_0_g128527;
				float3 temp_output_279_0_g128527 = Input_Position9197_g128458;
				half3 WorldPosition238_g128527 = temp_output_279_0_g128527;
				half4 localSamplePlanar2D238_g128527 = SamplePlanar2D( Texture238_g128527 , Sampler238_g128527 , Coords238_g128527 , WorldPosition238_g128527 );
				TEXTURE2D(Texture246_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler246_g128527 = SS19_g128545;
				half4 Coords246_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition246_g128527 = temp_output_279_0_g128527;
				float3 temp_output_280_0_g128527 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128527 = temp_output_280_0_g128527;
				half4 localSamplePlanar3D246_g128527 = SamplePlanar3D( Texture246_g128527 , Sampler246_g128527 , Coords246_g128527 , WorldPosition246_g128527 , WorldNormal246_g128527 );
				TEXTURE2D(Texture234_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler234_g128527 = SS19_g128545;
				float4 Coords234_g128527 = temp_output_37_0_g128527;
				float3 WorldPosition234_g128527 = temp_output_279_0_g128527;
				float4 localSampleStochastic2D234_g128527 = SampleStochastic2D( Texture234_g128527 , Sampler234_g128527 , Coords234_g128527 , WorldPosition234_g128527 );
				TEXTURE2D(Texture263_g128527) = _TerrainAlbedoTex8;
				SamplerState Sampler263_g128527 = SS19_g128545;
				half4 Coords263_g128527 = temp_output_37_0_g128527;
				half3 WorldPosition263_g128527 = temp_output_279_0_g128527;
				half3 WorldNormal263_g128527 = temp_output_280_0_g128527;
				half4 localSampleStochastic3D263_g128527 = SampleStochastic3D( Texture263_g128527 , Sampler263_g128527 , Coords263_g128527 , WorldPosition263_g128527 , WorldNormal263_g128527 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8693_g128458 = localSamplePlanar3D246_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8693_g128458 = localSampleStochastic2D234_g128527;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8693_g128458 = localSampleStochastic3D263_g128527;
				#else
				float4 staticSwitch8693_g128458 = localSamplePlanar2D238_g128527;
				#endif
				half4 Layer439_g128469 = staticSwitch8693_g128458;
				float4 weightedBlendVar31_g128469 = Weights52_g128469;
				float4 weightedBlend31_g128469 = ( weightedBlendVar31_g128469.x*Layer133_g128469 + weightedBlendVar31_g128469.y*Layer237_g128469 + weightedBlendVar31_g128469.z*Layer338_g128469 + weightedBlendVar31_g128469.w*Layer439_g128469 );
				half4 Terrain_AAAA_088665_g128458 = weightedBlend31_g128469;
				half4 Layer_0810_g128465 = Terrain_AAAA_088665_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8794_g128458 = weights_127362_g128458;
				#else
				float4 staticSwitch8794_g128458 = control_127362_g128458;
				#endif
				half4 Terrain_Weights_127710_g128458 = staticSwitch8794_g128458;
				half4 Weights52_g128475 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler238_g128501 = SS19_g128545;
				float4 temp_output_37_0_g128501 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128501 = temp_output_37_0_g128501;
				float3 temp_output_279_0_g128501 = Input_Position9197_g128458;
				half3 WorldPosition238_g128501 = temp_output_279_0_g128501;
				half4 localSamplePlanar2D238_g128501 = SamplePlanar2D( Texture238_g128501 , Sampler238_g128501 , Coords238_g128501 , WorldPosition238_g128501 );
				TEXTURE2D(Texture246_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler246_g128501 = SS19_g128545;
				half4 Coords246_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition246_g128501 = temp_output_279_0_g128501;
				float3 temp_output_280_0_g128501 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128501 = temp_output_280_0_g128501;
				half4 localSamplePlanar3D246_g128501 = SamplePlanar3D( Texture246_g128501 , Sampler246_g128501 , Coords246_g128501 , WorldPosition246_g128501 , WorldNormal246_g128501 );
				TEXTURE2D(Texture234_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler234_g128501 = SS19_g128545;
				float4 Coords234_g128501 = temp_output_37_0_g128501;
				float3 WorldPosition234_g128501 = temp_output_279_0_g128501;
				float4 localSampleStochastic2D234_g128501 = SampleStochastic2D( Texture234_g128501 , Sampler234_g128501 , Coords234_g128501 , WorldPosition234_g128501 );
				TEXTURE2D(Texture263_g128501) = _TerrainAlbedoTex9;
				SamplerState Sampler263_g128501 = SS19_g128545;
				half4 Coords263_g128501 = temp_output_37_0_g128501;
				half3 WorldPosition263_g128501 = temp_output_279_0_g128501;
				half3 WorldNormal263_g128501 = temp_output_280_0_g128501;
				half4 localSampleStochastic3D263_g128501 = SampleStochastic3D( Texture263_g128501 , Sampler263_g128501 , Coords263_g128501 , WorldPosition263_g128501 , WorldNormal263_g128501 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8872_g128458 = localSamplePlanar3D246_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8872_g128458 = localSampleStochastic2D234_g128501;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8872_g128458 = localSampleStochastic3D263_g128501;
				#else
				float4 staticSwitch8872_g128458 = localSamplePlanar2D238_g128501;
				#endif
				half4 Layer133_g128475 = staticSwitch8872_g128458;
				TEXTURE2D(Texture238_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler238_g128504 = SS19_g128545;
				float4 temp_output_37_0_g128504 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128504 = temp_output_37_0_g128504;
				float3 temp_output_279_0_g128504 = Input_Position9197_g128458;
				half3 WorldPosition238_g128504 = temp_output_279_0_g128504;
				half4 localSamplePlanar2D238_g128504 = SamplePlanar2D( Texture238_g128504 , Sampler238_g128504 , Coords238_g128504 , WorldPosition238_g128504 );
				TEXTURE2D(Texture246_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler246_g128504 = SS19_g128545;
				half4 Coords246_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition246_g128504 = temp_output_279_0_g128504;
				float3 temp_output_280_0_g128504 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128504 = temp_output_280_0_g128504;
				half4 localSamplePlanar3D246_g128504 = SamplePlanar3D( Texture246_g128504 , Sampler246_g128504 , Coords246_g128504 , WorldPosition246_g128504 , WorldNormal246_g128504 );
				TEXTURE2D(Texture234_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler234_g128504 = SS19_g128545;
				float4 Coords234_g128504 = temp_output_37_0_g128504;
				float3 WorldPosition234_g128504 = temp_output_279_0_g128504;
				float4 localSampleStochastic2D234_g128504 = SampleStochastic2D( Texture234_g128504 , Sampler234_g128504 , Coords234_g128504 , WorldPosition234_g128504 );
				TEXTURE2D(Texture263_g128504) = _TerrainAlbedoTex10;
				SamplerState Sampler263_g128504 = SS19_g128545;
				half4 Coords263_g128504 = temp_output_37_0_g128504;
				half3 WorldPosition263_g128504 = temp_output_279_0_g128504;
				half3 WorldNormal263_g128504 = temp_output_280_0_g128504;
				half4 localSampleStochastic3D263_g128504 = SampleStochastic3D( Texture263_g128504 , Sampler263_g128504 , Coords263_g128504 , WorldPosition263_g128504 , WorldNormal263_g128504 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8873_g128458 = localSamplePlanar3D246_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8873_g128458 = localSampleStochastic2D234_g128504;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8873_g128458 = localSampleStochastic3D263_g128504;
				#else
				float4 staticSwitch8873_g128458 = localSamplePlanar2D238_g128504;
				#endif
				half4 Layer237_g128475 = staticSwitch8873_g128458;
				TEXTURE2D(Texture238_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler238_g128505 = SS19_g128545;
				float4 temp_output_37_0_g128505 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128505 = temp_output_37_0_g128505;
				float3 temp_output_279_0_g128505 = Input_Position9197_g128458;
				half3 WorldPosition238_g128505 = temp_output_279_0_g128505;
				half4 localSamplePlanar2D238_g128505 = SamplePlanar2D( Texture238_g128505 , Sampler238_g128505 , Coords238_g128505 , WorldPosition238_g128505 );
				TEXTURE2D(Texture246_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler246_g128505 = SS19_g128545;
				half4 Coords246_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition246_g128505 = temp_output_279_0_g128505;
				float3 temp_output_280_0_g128505 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128505 = temp_output_280_0_g128505;
				half4 localSamplePlanar3D246_g128505 = SamplePlanar3D( Texture246_g128505 , Sampler246_g128505 , Coords246_g128505 , WorldPosition246_g128505 , WorldNormal246_g128505 );
				TEXTURE2D(Texture234_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler234_g128505 = SS19_g128545;
				float4 Coords234_g128505 = temp_output_37_0_g128505;
				float3 WorldPosition234_g128505 = temp_output_279_0_g128505;
				float4 localSampleStochastic2D234_g128505 = SampleStochastic2D( Texture234_g128505 , Sampler234_g128505 , Coords234_g128505 , WorldPosition234_g128505 );
				TEXTURE2D(Texture263_g128505) = _TerrainAlbedoTex11;
				SamplerState Sampler263_g128505 = SS19_g128545;
				half4 Coords263_g128505 = temp_output_37_0_g128505;
				half3 WorldPosition263_g128505 = temp_output_279_0_g128505;
				half3 WorldNormal263_g128505 = temp_output_280_0_g128505;
				half4 localSampleStochastic3D263_g128505 = SampleStochastic3D( Texture263_g128505 , Sampler263_g128505 , Coords263_g128505 , WorldPosition263_g128505 , WorldNormal263_g128505 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8874_g128458 = localSamplePlanar3D246_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8874_g128458 = localSampleStochastic2D234_g128505;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8874_g128458 = localSampleStochastic3D263_g128505;
				#else
				float4 staticSwitch8874_g128458 = localSamplePlanar2D238_g128505;
				#endif
				half4 Layer338_g128475 = staticSwitch8874_g128458;
				TEXTURE2D(Texture238_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler238_g128506 = SS19_g128545;
				float4 temp_output_37_0_g128506 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128506 = temp_output_37_0_g128506;
				float3 temp_output_279_0_g128506 = Input_Position9197_g128458;
				half3 WorldPosition238_g128506 = temp_output_279_0_g128506;
				half4 localSamplePlanar2D238_g128506 = SamplePlanar2D( Texture238_g128506 , Sampler238_g128506 , Coords238_g128506 , WorldPosition238_g128506 );
				TEXTURE2D(Texture246_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler246_g128506 = SS19_g128545;
				half4 Coords246_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition246_g128506 = temp_output_279_0_g128506;
				float3 temp_output_280_0_g128506 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128506 = temp_output_280_0_g128506;
				half4 localSamplePlanar3D246_g128506 = SamplePlanar3D( Texture246_g128506 , Sampler246_g128506 , Coords246_g128506 , WorldPosition246_g128506 , WorldNormal246_g128506 );
				TEXTURE2D(Texture234_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler234_g128506 = SS19_g128545;
				float4 Coords234_g128506 = temp_output_37_0_g128506;
				float3 WorldPosition234_g128506 = temp_output_279_0_g128506;
				float4 localSampleStochastic2D234_g128506 = SampleStochastic2D( Texture234_g128506 , Sampler234_g128506 , Coords234_g128506 , WorldPosition234_g128506 );
				TEXTURE2D(Texture263_g128506) = _TerrainAlbedoTex12;
				SamplerState Sampler263_g128506 = SS19_g128545;
				half4 Coords263_g128506 = temp_output_37_0_g128506;
				half3 WorldPosition263_g128506 = temp_output_279_0_g128506;
				half3 WorldNormal263_g128506 = temp_output_280_0_g128506;
				half4 localSampleStochastic3D263_g128506 = SampleStochastic3D( Texture263_g128506 , Sampler263_g128506 , Coords263_g128506 , WorldPosition263_g128506 , WorldNormal263_g128506 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8875_g128458 = localSamplePlanar3D246_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8875_g128458 = localSampleStochastic2D234_g128506;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8875_g128458 = localSampleStochastic3D263_g128506;
				#else
				float4 staticSwitch8875_g128458 = localSamplePlanar2D238_g128506;
				#endif
				half4 Layer439_g128475 = staticSwitch8875_g128458;
				float4 weightedBlendVar31_g128475 = Weights52_g128475;
				float4 weightedBlend31_g128475 = ( weightedBlendVar31_g128475.x*Layer133_g128475 + weightedBlendVar31_g128475.y*Layer237_g128475 + weightedBlendVar31_g128475.z*Layer338_g128475 + weightedBlendVar31_g128475.w*Layer439_g128475 );
				half4 Terrain_AAAA_128851_g128458 = weightedBlend31_g128475;
				half4 Layer_1243_g128465 = Terrain_AAAA_128851_g128458;
				#ifdef TVE_TERRAIN_BLEND
				float4 staticSwitch8795_g128458 = weights_167362_g128458;
				#else
				float4 staticSwitch8795_g128458 = control_167362_g128458;
				#endif
				half4 Terrain_Weights_167709_g128458 = staticSwitch8795_g128458;
				half4 Weights52_g128481 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler238_g128510 = SS19_g128545;
				float4 temp_output_37_0_g128510 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128510 = temp_output_37_0_g128510;
				float3 temp_output_279_0_g128510 = Input_Position9197_g128458;
				half3 WorldPosition238_g128510 = temp_output_279_0_g128510;
				half4 localSamplePlanar2D238_g128510 = SamplePlanar2D( Texture238_g128510 , Sampler238_g128510 , Coords238_g128510 , WorldPosition238_g128510 );
				TEXTURE2D(Texture246_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler246_g128510 = SS19_g128545;
				half4 Coords246_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition246_g128510 = temp_output_279_0_g128510;
				float3 temp_output_280_0_g128510 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128510 = temp_output_280_0_g128510;
				half4 localSamplePlanar3D246_g128510 = SamplePlanar3D( Texture246_g128510 , Sampler246_g128510 , Coords246_g128510 , WorldPosition246_g128510 , WorldNormal246_g128510 );
				TEXTURE2D(Texture234_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler234_g128510 = SS19_g128545;
				float4 Coords234_g128510 = temp_output_37_0_g128510;
				float3 WorldPosition234_g128510 = temp_output_279_0_g128510;
				float4 localSampleStochastic2D234_g128510 = SampleStochastic2D( Texture234_g128510 , Sampler234_g128510 , Coords234_g128510 , WorldPosition234_g128510 );
				TEXTURE2D(Texture263_g128510) = _TerrainAlbedoTex13;
				SamplerState Sampler263_g128510 = SS19_g128545;
				half4 Coords263_g128510 = temp_output_37_0_g128510;
				half3 WorldPosition263_g128510 = temp_output_279_0_g128510;
				half3 WorldNormal263_g128510 = temp_output_280_0_g128510;
				half4 localSampleStochastic3D263_g128510 = SampleStochastic3D( Texture263_g128510 , Sampler263_g128510 , Coords263_g128510 , WorldPosition263_g128510 , WorldNormal263_g128510 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8972_g128458 = localSamplePlanar3D246_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8972_g128458 = localSampleStochastic2D234_g128510;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8972_g128458 = localSampleStochastic3D263_g128510;
				#else
				float4 staticSwitch8972_g128458 = localSamplePlanar2D238_g128510;
				#endif
				half4 Layer133_g128481 = staticSwitch8972_g128458;
				TEXTURE2D(Texture238_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler238_g128516 = SS19_g128545;
				float4 temp_output_37_0_g128516 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128516 = temp_output_37_0_g128516;
				float3 temp_output_279_0_g128516 = Input_Position9197_g128458;
				half3 WorldPosition238_g128516 = temp_output_279_0_g128516;
				half4 localSamplePlanar2D238_g128516 = SamplePlanar2D( Texture238_g128516 , Sampler238_g128516 , Coords238_g128516 , WorldPosition238_g128516 );
				TEXTURE2D(Texture246_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler246_g128516 = SS19_g128545;
				half4 Coords246_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition246_g128516 = temp_output_279_0_g128516;
				float3 temp_output_280_0_g128516 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128516 = temp_output_280_0_g128516;
				half4 localSamplePlanar3D246_g128516 = SamplePlanar3D( Texture246_g128516 , Sampler246_g128516 , Coords246_g128516 , WorldPosition246_g128516 , WorldNormal246_g128516 );
				TEXTURE2D(Texture234_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler234_g128516 = SS19_g128545;
				float4 Coords234_g128516 = temp_output_37_0_g128516;
				float3 WorldPosition234_g128516 = temp_output_279_0_g128516;
				float4 localSampleStochastic2D234_g128516 = SampleStochastic2D( Texture234_g128516 , Sampler234_g128516 , Coords234_g128516 , WorldPosition234_g128516 );
				TEXTURE2D(Texture263_g128516) = _TerrainAlbedoTex14;
				SamplerState Sampler263_g128516 = SS19_g128545;
				half4 Coords263_g128516 = temp_output_37_0_g128516;
				half3 WorldPosition263_g128516 = temp_output_279_0_g128516;
				half3 WorldNormal263_g128516 = temp_output_280_0_g128516;
				half4 localSampleStochastic3D263_g128516 = SampleStochastic3D( Texture263_g128516 , Sampler263_g128516 , Coords263_g128516 , WorldPosition263_g128516 , WorldNormal263_g128516 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8973_g128458 = localSamplePlanar3D246_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8973_g128458 = localSampleStochastic2D234_g128516;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8973_g128458 = localSampleStochastic3D263_g128516;
				#else
				float4 staticSwitch8973_g128458 = localSamplePlanar2D238_g128516;
				#endif
				half4 Layer237_g128481 = staticSwitch8973_g128458;
				TEXTURE2D(Texture238_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler238_g128517 = SS19_g128545;
				float4 temp_output_37_0_g128517 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128517 = temp_output_37_0_g128517;
				float3 temp_output_279_0_g128517 = Input_Position9197_g128458;
				half3 WorldPosition238_g128517 = temp_output_279_0_g128517;
				half4 localSamplePlanar2D238_g128517 = SamplePlanar2D( Texture238_g128517 , Sampler238_g128517 , Coords238_g128517 , WorldPosition238_g128517 );
				TEXTURE2D(Texture246_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler246_g128517 = SS19_g128545;
				half4 Coords246_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition246_g128517 = temp_output_279_0_g128517;
				float3 temp_output_280_0_g128517 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128517 = temp_output_280_0_g128517;
				half4 localSamplePlanar3D246_g128517 = SamplePlanar3D( Texture246_g128517 , Sampler246_g128517 , Coords246_g128517 , WorldPosition246_g128517 , WorldNormal246_g128517 );
				TEXTURE2D(Texture234_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler234_g128517 = SS19_g128545;
				float4 Coords234_g128517 = temp_output_37_0_g128517;
				float3 WorldPosition234_g128517 = temp_output_279_0_g128517;
				float4 localSampleStochastic2D234_g128517 = SampleStochastic2D( Texture234_g128517 , Sampler234_g128517 , Coords234_g128517 , WorldPosition234_g128517 );
				TEXTURE2D(Texture263_g128517) = _TerrainAlbedoTex15;
				SamplerState Sampler263_g128517 = SS19_g128545;
				half4 Coords263_g128517 = temp_output_37_0_g128517;
				half3 WorldPosition263_g128517 = temp_output_279_0_g128517;
				half3 WorldNormal263_g128517 = temp_output_280_0_g128517;
				half4 localSampleStochastic3D263_g128517 = SampleStochastic3D( Texture263_g128517 , Sampler263_g128517 , Coords263_g128517 , WorldPosition263_g128517 , WorldNormal263_g128517 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8974_g128458 = localSamplePlanar3D246_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8974_g128458 = localSampleStochastic2D234_g128517;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8974_g128458 = localSampleStochastic3D263_g128517;
				#else
				float4 staticSwitch8974_g128458 = localSamplePlanar2D238_g128517;
				#endif
				half4 Layer338_g128481 = staticSwitch8974_g128458;
				TEXTURE2D(Texture238_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler238_g128518 = SS19_g128545;
				float4 temp_output_37_0_g128518 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128518 = temp_output_37_0_g128518;
				float3 temp_output_279_0_g128518 = Input_Position9197_g128458;
				half3 WorldPosition238_g128518 = temp_output_279_0_g128518;
				half4 localSamplePlanar2D238_g128518 = SamplePlanar2D( Texture238_g128518 , Sampler238_g128518 , Coords238_g128518 , WorldPosition238_g128518 );
				TEXTURE2D(Texture246_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler246_g128518 = SS19_g128545;
				half4 Coords246_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition246_g128518 = temp_output_279_0_g128518;
				float3 temp_output_280_0_g128518 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128518 = temp_output_280_0_g128518;
				half4 localSamplePlanar3D246_g128518 = SamplePlanar3D( Texture246_g128518 , Sampler246_g128518 , Coords246_g128518 , WorldPosition246_g128518 , WorldNormal246_g128518 );
				TEXTURE2D(Texture234_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler234_g128518 = SS19_g128545;
				float4 Coords234_g128518 = temp_output_37_0_g128518;
				float3 WorldPosition234_g128518 = temp_output_279_0_g128518;
				float4 localSampleStochastic2D234_g128518 = SampleStochastic2D( Texture234_g128518 , Sampler234_g128518 , Coords234_g128518 , WorldPosition234_g128518 );
				TEXTURE2D(Texture263_g128518) = _TerrainAlbedoTex16;
				SamplerState Sampler263_g128518 = SS19_g128545;
				half4 Coords263_g128518 = temp_output_37_0_g128518;
				half3 WorldPosition263_g128518 = temp_output_279_0_g128518;
				half3 WorldNormal263_g128518 = temp_output_280_0_g128518;
				half4 localSampleStochastic3D263_g128518 = SampleStochastic3D( Texture263_g128518 , Sampler263_g128518 , Coords263_g128518 , WorldPosition263_g128518 , WorldNormal263_g128518 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8975_g128458 = localSamplePlanar3D246_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8975_g128458 = localSampleStochastic2D234_g128518;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8975_g128458 = localSampleStochastic3D263_g128518;
				#else
				float4 staticSwitch8975_g128458 = localSamplePlanar2D238_g128518;
				#endif
				half4 Layer439_g128481 = staticSwitch8975_g128458;
				float4 weightedBlendVar31_g128481 = Weights52_g128481;
				float4 weightedBlend31_g128481 = ( weightedBlendVar31_g128481.x*Layer133_g128481 + weightedBlendVar31_g128481.y*Layer237_g128481 + weightedBlendVar31_g128481.z*Layer338_g128481 + weightedBlendVar31_g128481.w*Layer439_g128481 );
				half4 Terrain_AAAA_168986_g128458 = weightedBlend31_g128481;
				half4 Layer_1644_g128465 = Terrain_AAAA_168986_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128465 = ( Layer_045_g128465 + Layer_0810_g128465 + Layer_1243_g128465 + Layer_1644_g128465 );
				#else
				float4 staticSwitch40_g128465 = Layer_045_g128465;
				#endif
				half4 Blend_Albedo7468_g128458 = staticSwitch40_g128465;
				half4 Weights52_g128536 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128536 = _TerrainColor1;
				half4 Layer237_g128536 = _TerrainColor2;
				half4 Layer338_g128536 = _TerrainColor3;
				half4 Layer439_g128536 = _TerrainColor4;
				float4 weightedBlendVar31_g128536 = Weights52_g128536;
				float4 weightedBlend31_g128536 = ( weightedBlendVar31_g128536.x*Layer133_g128536 + weightedBlendVar31_g128536.y*Layer237_g128536 + weightedBlendVar31_g128536.z*Layer338_g128536 + weightedBlendVar31_g128536.w*Layer439_g128536 );
				half4 Terrain_Color_049349_g128458 = weightedBlend31_g128536;
				half4 Layer_045_g128541 = Terrain_Color_049349_g128458;
				half4 Weights52_g128537 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128537 = _TerrainColor5;
				half4 Layer237_g128537 = _TerrainColor6;
				half4 Layer338_g128537 = _TerrainColor7;
				half4 Layer439_g128537 = _TerrainColor8;
				float4 weightedBlendVar31_g128537 = Weights52_g128537;
				float4 weightedBlend31_g128537 = ( weightedBlendVar31_g128537.x*Layer133_g128537 + weightedBlendVar31_g128537.y*Layer237_g128537 + weightedBlendVar31_g128537.z*Layer338_g128537 + weightedBlendVar31_g128537.w*Layer439_g128537 );
				half4 Terrain_Color_089361_g128458 = weightedBlend31_g128537;
				half4 Layer_0810_g128541 = Terrain_Color_089361_g128458;
				half4 Weights52_g128538 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128538 = _TerrainColor9;
				half4 Layer237_g128538 = _TerrainColor10;
				half4 Layer338_g128538 = _TerrainColor11;
				half4 Layer439_g128538 = _TerrainColor12;
				float4 weightedBlendVar31_g128538 = Weights52_g128538;
				float4 weightedBlend31_g128538 = ( weightedBlendVar31_g128538.x*Layer133_g128538 + weightedBlendVar31_g128538.y*Layer237_g128538 + weightedBlendVar31_g128538.z*Layer338_g128538 + weightedBlendVar31_g128538.w*Layer439_g128538 );
				half4 Terrain_Color_129373_g128458 = weightedBlend31_g128538;
				half4 Layer_1243_g128541 = Terrain_Color_129373_g128458;
				half4 Weights52_g128539 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128539 = _TerrainColor13;
				half4 Layer237_g128539 = _TerrainColor14;
				half4 Layer338_g128539 = _TerrainColor15;
				half4 Layer439_g128539 = _TerrainColor16;
				float4 weightedBlendVar31_g128539 = Weights52_g128539;
				float4 weightedBlend31_g128539 = ( weightedBlendVar31_g128539.x*Layer133_g128539 + weightedBlendVar31_g128539.y*Layer237_g128539 + weightedBlendVar31_g128539.z*Layer338_g128539 + weightedBlendVar31_g128539.w*Layer439_g128539 );
				half4 Terrain_Color_169381_g128458 = weightedBlend31_g128539;
				half4 Layer_1644_g128541 = Terrain_Color_169381_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128541 = ( Layer_045_g128541 + Layer_0810_g128541 + Layer_1243_g128541 + Layer_1644_g128541 );
				#else
				float4 staticSwitch40_g128541 = Layer_045_g128541;
				#endif
				half4 Blend_TerrainColor9387_g128458 = staticSwitch40_g128541;
				half3 Final_Albedo9144_g128458 = ( (Blend_Albedo7468_g128458).xyz * (Blend_TerrainColor9387_g128458).rgb * (_TerrainColor).rgb );
				half3 Local_Albedo9199_g128457 = Final_Albedo9144_g128458;
				float3 In_Albedo3_g128570 = Local_Albedo9199_g128457;
				float3 In_AlbedoRaw3_g128570 = Local_Albedo9199_g128457;
				float3x3 ase_worldToTangent = float3x3( TangentWS.xyz, BitangentWS, NormalWS );
				half4 Weights52_g128459 = Terrain_Weights_046781_g128458;
				TEXTURE2D(Texture238_g128534) = _TerrainNormalTex1;
				float localFilterTexture29_g128549 = ( 0.0 );
				SamplerState SS29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128549 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128549 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128549 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128549 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128549 = SamplerDefault29_g128549;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128549 = SamplerDefault29_g128549;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128549 = SamplerPoint29_g128549;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128549 = SamplerLow29_g128549;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128549 = SamplerMedium29_g128549;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128549 = SamplerHigh29_g128549;
				#endif
				}
				SamplerState Sampler238_g128534 = SS29_g128549;
				float4 temp_output_37_0_g128534 = Input_Terrain_Coords_016785_g128458;
				half4 Coords238_g128534 = temp_output_37_0_g128534;
				float3 temp_output_279_0_g128534 = Input_Position9197_g128458;
				half3 WorldPosition238_g128534 = temp_output_279_0_g128534;
				half4 localSamplePlanar2D238_g128534 = SamplePlanar2D( Texture238_g128534 , Sampler238_g128534 , Coords238_g128534 , WorldPosition238_g128534 );
				TEXTURE2D(Texture246_g128534) = _TerrainNormalTex1;
				SamplerState Sampler246_g128534 = SS29_g128549;
				half4 Coords246_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition246_g128534 = temp_output_279_0_g128534;
				float3 temp_output_280_0_g128534 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128534 = temp_output_280_0_g128534;
				half4 localSamplePlanar3D246_g128534 = SamplePlanar3D( Texture246_g128534 , Sampler246_g128534 , Coords246_g128534 , WorldPosition246_g128534 , WorldNormal246_g128534 );
				TEXTURE2D(Texture234_g128534) = _TerrainNormalTex1;
				SamplerState Sampler234_g128534 = SS29_g128549;
				float4 Coords234_g128534 = temp_output_37_0_g128534;
				float3 WorldPosition234_g128534 = temp_output_279_0_g128534;
				float4 localSampleStochastic2D234_g128534 = SampleStochastic2D( Texture234_g128534 , Sampler234_g128534 , Coords234_g128534 , WorldPosition234_g128534 );
				TEXTURE2D(Texture263_g128534) = _TerrainNormalTex1;
				SamplerState Sampler263_g128534 = SS29_g128549;
				half4 Coords263_g128534 = temp_output_37_0_g128534;
				half3 WorldPosition263_g128534 = temp_output_279_0_g128534;
				half3 WorldNormal263_g128534 = temp_output_280_0_g128534;
				half4 localSampleStochastic3D263_g128534 = SampleStochastic3D( Texture263_g128534 , Sampler263_g128534 , Coords263_g128534 , WorldPosition263_g128534 , WorldNormal263_g128534 );
				#if defined( TVE_TERRAIN_SAMPLE_01_PLANAR_2D )
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_PLANAR_3D )
				float4 staticSwitch8635_g128458 = localSamplePlanar3D246_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_2D )
				float4 staticSwitch8635_g128458 = localSampleStochastic2D234_g128534;
				#elif defined( TVE_TERRAIN_SAMPLE_01_STOCHASTIC_3D )
				float4 staticSwitch8635_g128458 = localSampleStochastic3D263_g128534;
				#else
				float4 staticSwitch8635_g128458 = localSamplePlanar2D238_g128534;
				#endif
				half4 Layer133_g128459 = staticSwitch8635_g128458;
				TEXTURE2D(Texture238_g128490) = _TerrainNormalTex2;
				SamplerState Sampler238_g128490 = SS29_g128549;
				float4 temp_output_37_0_g128490 = Input_Terrain_Coords_026787_g128458;
				half4 Coords238_g128490 = temp_output_37_0_g128490;
				float3 temp_output_279_0_g128490 = Input_Position9197_g128458;
				half3 WorldPosition238_g128490 = temp_output_279_0_g128490;
				half4 localSamplePlanar2D238_g128490 = SamplePlanar2D( Texture238_g128490 , Sampler238_g128490 , Coords238_g128490 , WorldPosition238_g128490 );
				TEXTURE2D(Texture246_g128490) = _TerrainNormalTex2;
				SamplerState Sampler246_g128490 = SS29_g128549;
				half4 Coords246_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition246_g128490 = temp_output_279_0_g128490;
				float3 temp_output_280_0_g128490 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128490 = temp_output_280_0_g128490;
				half4 localSamplePlanar3D246_g128490 = SamplePlanar3D( Texture246_g128490 , Sampler246_g128490 , Coords246_g128490 , WorldPosition246_g128490 , WorldNormal246_g128490 );
				TEXTURE2D(Texture234_g128490) = _TerrainNormalTex2;
				SamplerState Sampler234_g128490 = SS29_g128549;
				float4 Coords234_g128490 = temp_output_37_0_g128490;
				float3 WorldPosition234_g128490 = temp_output_279_0_g128490;
				float4 localSampleStochastic2D234_g128490 = SampleStochastic2D( Texture234_g128490 , Sampler234_g128490 , Coords234_g128490 , WorldPosition234_g128490 );
				TEXTURE2D(Texture263_g128490) = _TerrainNormalTex2;
				SamplerState Sampler263_g128490 = SS29_g128549;
				half4 Coords263_g128490 = temp_output_37_0_g128490;
				half3 WorldPosition263_g128490 = temp_output_279_0_g128490;
				half3 WorldNormal263_g128490 = temp_output_280_0_g128490;
				half4 localSampleStochastic3D263_g128490 = SampleStochastic3D( Texture263_g128490 , Sampler263_g128490 , Coords263_g128490 , WorldPosition263_g128490 , WorldNormal263_g128490 );
				#if defined( TVE_TERRAIN_SAMPLE_02_PLANAR_2D )
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_PLANAR_3D )
				float4 staticSwitch8636_g128458 = localSamplePlanar3D246_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_2D )
				float4 staticSwitch8636_g128458 = localSampleStochastic2D234_g128490;
				#elif defined( TVE_TERRAIN_SAMPLE_02_STOCHASTIC_3D )
				float4 staticSwitch8636_g128458 = localSampleStochastic3D263_g128490;
				#else
				float4 staticSwitch8636_g128458 = localSamplePlanar2D238_g128490;
				#endif
				half4 Layer237_g128459 = staticSwitch8636_g128458;
				TEXTURE2D(Texture238_g128493) = _TerrainNormalTex3;
				SamplerState Sampler238_g128493 = SS29_g128549;
				float4 temp_output_37_0_g128493 = Input_Terrain_Coords_036789_g128458;
				half4 Coords238_g128493 = temp_output_37_0_g128493;
				float3 temp_output_279_0_g128493 = Input_Position9197_g128458;
				half3 WorldPosition238_g128493 = temp_output_279_0_g128493;
				half4 localSamplePlanar2D238_g128493 = SamplePlanar2D( Texture238_g128493 , Sampler238_g128493 , Coords238_g128493 , WorldPosition238_g128493 );
				TEXTURE2D(Texture246_g128493) = _TerrainNormalTex3;
				SamplerState Sampler246_g128493 = SS29_g128549;
				half4 Coords246_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition246_g128493 = temp_output_279_0_g128493;
				float3 temp_output_280_0_g128493 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128493 = temp_output_280_0_g128493;
				half4 localSamplePlanar3D246_g128493 = SamplePlanar3D( Texture246_g128493 , Sampler246_g128493 , Coords246_g128493 , WorldPosition246_g128493 , WorldNormal246_g128493 );
				TEXTURE2D(Texture234_g128493) = _TerrainNormalTex3;
				SamplerState Sampler234_g128493 = SS29_g128549;
				float4 Coords234_g128493 = temp_output_37_0_g128493;
				float3 WorldPosition234_g128493 = temp_output_279_0_g128493;
				float4 localSampleStochastic2D234_g128493 = SampleStochastic2D( Texture234_g128493 , Sampler234_g128493 , Coords234_g128493 , WorldPosition234_g128493 );
				TEXTURE2D(Texture263_g128493) = _TerrainNormalTex3;
				SamplerState Sampler263_g128493 = SS29_g128549;
				half4 Coords263_g128493 = temp_output_37_0_g128493;
				half3 WorldPosition263_g128493 = temp_output_279_0_g128493;
				half3 WorldNormal263_g128493 = temp_output_280_0_g128493;
				half4 localSampleStochastic3D263_g128493 = SampleStochastic3D( Texture263_g128493 , Sampler263_g128493 , Coords263_g128493 , WorldPosition263_g128493 , WorldNormal263_g128493 );
				#if defined( TVE_TERRAIN_SAMPLE_03_PLANAR_2D )
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_PLANAR_3D )
				float4 staticSwitch8637_g128458 = localSamplePlanar3D246_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_2D )
				float4 staticSwitch8637_g128458 = localSampleStochastic2D234_g128493;
				#elif defined( TVE_TERRAIN_SAMPLE_03_STOCHASTIC_3D )
				float4 staticSwitch8637_g128458 = localSampleStochastic3D263_g128493;
				#else
				float4 staticSwitch8637_g128458 = localSamplePlanar2D238_g128493;
				#endif
				half4 Layer338_g128459 = staticSwitch8637_g128458;
				TEXTURE2D(Texture238_g128495) = _TerrainNormalTex4;
				SamplerState Sampler238_g128495 = SS29_g128549;
				float4 temp_output_37_0_g128495 = Input_Terrain_Coords_046791_g128458;
				half4 Coords238_g128495 = temp_output_37_0_g128495;
				float3 temp_output_279_0_g128495 = Input_Position9197_g128458;
				half3 WorldPosition238_g128495 = temp_output_279_0_g128495;
				half4 localSamplePlanar2D238_g128495 = SamplePlanar2D( Texture238_g128495 , Sampler238_g128495 , Coords238_g128495 , WorldPosition238_g128495 );
				TEXTURE2D(Texture246_g128495) = _TerrainNormalTex4;
				SamplerState Sampler246_g128495 = SS29_g128549;
				half4 Coords246_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition246_g128495 = temp_output_279_0_g128495;
				float3 temp_output_280_0_g128495 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128495 = temp_output_280_0_g128495;
				half4 localSamplePlanar3D246_g128495 = SamplePlanar3D( Texture246_g128495 , Sampler246_g128495 , Coords246_g128495 , WorldPosition246_g128495 , WorldNormal246_g128495 );
				TEXTURE2D(Texture234_g128495) = _TerrainNormalTex4;
				SamplerState Sampler234_g128495 = SS29_g128549;
				float4 Coords234_g128495 = temp_output_37_0_g128495;
				float3 WorldPosition234_g128495 = temp_output_279_0_g128495;
				float4 localSampleStochastic2D234_g128495 = SampleStochastic2D( Texture234_g128495 , Sampler234_g128495 , Coords234_g128495 , WorldPosition234_g128495 );
				TEXTURE2D(Texture263_g128495) = _TerrainNormalTex4;
				SamplerState Sampler263_g128495 = SS29_g128549;
				half4 Coords263_g128495 = temp_output_37_0_g128495;
				half3 WorldPosition263_g128495 = temp_output_279_0_g128495;
				half3 WorldNormal263_g128495 = temp_output_280_0_g128495;
				half4 localSampleStochastic3D263_g128495 = SampleStochastic3D( Texture263_g128495 , Sampler263_g128495 , Coords263_g128495 , WorldPosition263_g128495 , WorldNormal263_g128495 );
				#if defined( TVE_TERRAIN_SAMPLE_04_PLANAR_2D )
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_PLANAR_3D )
				float4 staticSwitch8638_g128458 = localSamplePlanar3D246_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_2D )
				float4 staticSwitch8638_g128458 = localSampleStochastic2D234_g128495;
				#elif defined( TVE_TERRAIN_SAMPLE_04_STOCHASTIC_3D )
				float4 staticSwitch8638_g128458 = localSampleStochastic3D263_g128495;
				#else
				float4 staticSwitch8638_g128458 = localSamplePlanar2D238_g128495;
				#endif
				half4 Layer439_g128459 = staticSwitch8638_g128458;
				float4 weightedBlendVar31_g128459 = Weights52_g128459;
				float4 weightedBlend31_g128459 = ( weightedBlendVar31_g128459.x*Layer133_g128459 + weightedBlendVar31_g128459.y*Layer237_g128459 + weightedBlendVar31_g128459.z*Layer338_g128459 + weightedBlendVar31_g128459.w*Layer439_g128459 );
				half4 Terrain_B_047202_g128458 = weightedBlend31_g128459;
				half4 Layer_045_g128464 = Terrain_B_047202_g128458;
				half4 Weights52_g128470 = Terrain_Weights_087340_g128458;
				TEXTURE2D(Texture238_g128499) = _TerrainNormalTex5;
				SamplerState Sampler238_g128499 = SS29_g128549;
				float4 temp_output_37_0_g128499 = Input_Terrain_Coords_058750_g128458;
				half4 Coords238_g128499 = temp_output_37_0_g128499;
				float3 temp_output_279_0_g128499 = Input_Position9197_g128458;
				half3 WorldPosition238_g128499 = temp_output_279_0_g128499;
				half4 localSamplePlanar2D238_g128499 = SamplePlanar2D( Texture238_g128499 , Sampler238_g128499 , Coords238_g128499 , WorldPosition238_g128499 );
				TEXTURE2D(Texture246_g128499) = _TerrainNormalTex5;
				SamplerState Sampler246_g128499 = SS29_g128549;
				half4 Coords246_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition246_g128499 = temp_output_279_0_g128499;
				float3 temp_output_280_0_g128499 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128499 = temp_output_280_0_g128499;
				half4 localSamplePlanar3D246_g128499 = SamplePlanar3D( Texture246_g128499 , Sampler246_g128499 , Coords246_g128499 , WorldPosition246_g128499 , WorldNormal246_g128499 );
				TEXTURE2D(Texture234_g128499) = _TerrainNormalTex5;
				SamplerState Sampler234_g128499 = SS29_g128549;
				float4 Coords234_g128499 = temp_output_37_0_g128499;
				float3 WorldPosition234_g128499 = temp_output_279_0_g128499;
				float4 localSampleStochastic2D234_g128499 = SampleStochastic2D( Texture234_g128499 , Sampler234_g128499 , Coords234_g128499 , WorldPosition234_g128499 );
				TEXTURE2D(Texture263_g128499) = _TerrainNormalTex5;
				SamplerState Sampler263_g128499 = SS29_g128549;
				half4 Coords263_g128499 = temp_output_37_0_g128499;
				half3 WorldPosition263_g128499 = temp_output_279_0_g128499;
				half3 WorldNormal263_g128499 = temp_output_280_0_g128499;
				half4 localSampleStochastic3D263_g128499 = SampleStochastic3D( Texture263_g128499 , Sampler263_g128499 , Coords263_g128499 , WorldPosition263_g128499 , WorldNormal263_g128499 );
				#if defined( TVE_TERRAIN_SAMPLE_05_PLANAR_2D )
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_PLANAR_3D )
				float4 staticSwitch8686_g128458 = localSamplePlanar3D246_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_2D )
				float4 staticSwitch8686_g128458 = localSampleStochastic2D234_g128499;
				#elif defined( TVE_TERRAIN_SAMPLE_05_STOCHASTIC_3D )
				float4 staticSwitch8686_g128458 = localSampleStochastic3D263_g128499;
				#else
				float4 staticSwitch8686_g128458 = localSamplePlanar2D238_g128499;
				#endif
				half4 Layer133_g128470 = staticSwitch8686_g128458;
				TEXTURE2D(Texture238_g128528) = _TerrainNormalTex6;
				SamplerState Sampler238_g128528 = SS29_g128549;
				float4 temp_output_37_0_g128528 = Input_Terrain_Coords_068751_g128458;
				half4 Coords238_g128528 = temp_output_37_0_g128528;
				float3 temp_output_279_0_g128528 = Input_Position9197_g128458;
				half3 WorldPosition238_g128528 = temp_output_279_0_g128528;
				half4 localSamplePlanar2D238_g128528 = SamplePlanar2D( Texture238_g128528 , Sampler238_g128528 , Coords238_g128528 , WorldPosition238_g128528 );
				TEXTURE2D(Texture246_g128528) = _TerrainNormalTex6;
				SamplerState Sampler246_g128528 = SS29_g128549;
				half4 Coords246_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition246_g128528 = temp_output_279_0_g128528;
				float3 temp_output_280_0_g128528 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128528 = temp_output_280_0_g128528;
				half4 localSamplePlanar3D246_g128528 = SamplePlanar3D( Texture246_g128528 , Sampler246_g128528 , Coords246_g128528 , WorldPosition246_g128528 , WorldNormal246_g128528 );
				TEXTURE2D(Texture234_g128528) = _TerrainNormalTex6;
				SamplerState Sampler234_g128528 = SS29_g128549;
				float4 Coords234_g128528 = temp_output_37_0_g128528;
				float3 WorldPosition234_g128528 = temp_output_279_0_g128528;
				float4 localSampleStochastic2D234_g128528 = SampleStochastic2D( Texture234_g128528 , Sampler234_g128528 , Coords234_g128528 , WorldPosition234_g128528 );
				TEXTURE2D(Texture263_g128528) = _TerrainNormalTex6;
				SamplerState Sampler263_g128528 = SS29_g128549;
				half4 Coords263_g128528 = temp_output_37_0_g128528;
				half3 WorldPosition263_g128528 = temp_output_279_0_g128528;
				half3 WorldNormal263_g128528 = temp_output_280_0_g128528;
				half4 localSampleStochastic3D263_g128528 = SampleStochastic3D( Texture263_g128528 , Sampler263_g128528 , Coords263_g128528 , WorldPosition263_g128528 , WorldNormal263_g128528 );
				#if defined( TVE_TERRAIN_SAMPLE_06_PLANAR_2D )
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_PLANAR_3D )
				float4 staticSwitch8687_g128458 = localSamplePlanar3D246_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_2D )
				float4 staticSwitch8687_g128458 = localSampleStochastic2D234_g128528;
				#elif defined( TVE_TERRAIN_SAMPLE_06_STOCHASTIC_3D )
				float4 staticSwitch8687_g128458 = localSampleStochastic3D263_g128528;
				#else
				float4 staticSwitch8687_g128458 = localSamplePlanar2D238_g128528;
				#endif
				half4 Layer237_g128470 = staticSwitch8687_g128458;
				TEXTURE2D(Texture238_g128529) = _TerrainNormalTex7;
				SamplerState Sampler238_g128529 = SS29_g128549;
				float4 temp_output_37_0_g128529 = Input_Terrain_Coords_078752_g128458;
				half4 Coords238_g128529 = temp_output_37_0_g128529;
				float3 temp_output_279_0_g128529 = Input_Position9197_g128458;
				half3 WorldPosition238_g128529 = temp_output_279_0_g128529;
				half4 localSamplePlanar2D238_g128529 = SamplePlanar2D( Texture238_g128529 , Sampler238_g128529 , Coords238_g128529 , WorldPosition238_g128529 );
				TEXTURE2D(Texture246_g128529) = _TerrainNormalTex7;
				SamplerState Sampler246_g128529 = SS29_g128549;
				half4 Coords246_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition246_g128529 = temp_output_279_0_g128529;
				float3 temp_output_280_0_g128529 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128529 = temp_output_280_0_g128529;
				half4 localSamplePlanar3D246_g128529 = SamplePlanar3D( Texture246_g128529 , Sampler246_g128529 , Coords246_g128529 , WorldPosition246_g128529 , WorldNormal246_g128529 );
				TEXTURE2D(Texture234_g128529) = _TerrainNormalTex7;
				SamplerState Sampler234_g128529 = SS29_g128549;
				float4 Coords234_g128529 = temp_output_37_0_g128529;
				float3 WorldPosition234_g128529 = temp_output_279_0_g128529;
				float4 localSampleStochastic2D234_g128529 = SampleStochastic2D( Texture234_g128529 , Sampler234_g128529 , Coords234_g128529 , WorldPosition234_g128529 );
				TEXTURE2D(Texture263_g128529) = _TerrainNormalTex7;
				SamplerState Sampler263_g128529 = SS29_g128549;
				half4 Coords263_g128529 = temp_output_37_0_g128529;
				half3 WorldPosition263_g128529 = temp_output_279_0_g128529;
				half3 WorldNormal263_g128529 = temp_output_280_0_g128529;
				half4 localSampleStochastic3D263_g128529 = SampleStochastic3D( Texture263_g128529 , Sampler263_g128529 , Coords263_g128529 , WorldPosition263_g128529 , WorldNormal263_g128529 );
				#if defined( TVE_TERRAIN_SAMPLE_07_PLANAR_2D )
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_PLANAR_3D )
				float4 staticSwitch8688_g128458 = localSamplePlanar3D246_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_2D )
				float4 staticSwitch8688_g128458 = localSampleStochastic2D234_g128529;
				#elif defined( TVE_TERRAIN_SAMPLE_07_STOCHASTIC_3D )
				float4 staticSwitch8688_g128458 = localSampleStochastic3D263_g128529;
				#else
				float4 staticSwitch8688_g128458 = localSamplePlanar2D238_g128529;
				#endif
				half4 Layer338_g128470 = staticSwitch8688_g128458;
				TEXTURE2D(Texture238_g128530) = _TerrainNormalTex8;
				SamplerState Sampler238_g128530 = SS29_g128549;
				float4 temp_output_37_0_g128530 = Input_Terrain_Coords_088749_g128458;
				half4 Coords238_g128530 = temp_output_37_0_g128530;
				float3 temp_output_279_0_g128530 = Input_Position9197_g128458;
				half3 WorldPosition238_g128530 = temp_output_279_0_g128530;
				half4 localSamplePlanar2D238_g128530 = SamplePlanar2D( Texture238_g128530 , Sampler238_g128530 , Coords238_g128530 , WorldPosition238_g128530 );
				TEXTURE2D(Texture246_g128530) = _TerrainNormalTex8;
				SamplerState Sampler246_g128530 = SS29_g128549;
				half4 Coords246_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition246_g128530 = temp_output_279_0_g128530;
				float3 temp_output_280_0_g128530 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128530 = temp_output_280_0_g128530;
				half4 localSamplePlanar3D246_g128530 = SamplePlanar3D( Texture246_g128530 , Sampler246_g128530 , Coords246_g128530 , WorldPosition246_g128530 , WorldNormal246_g128530 );
				TEXTURE2D(Texture234_g128530) = _TerrainNormalTex8;
				SamplerState Sampler234_g128530 = SS29_g128549;
				float4 Coords234_g128530 = temp_output_37_0_g128530;
				float3 WorldPosition234_g128530 = temp_output_279_0_g128530;
				float4 localSampleStochastic2D234_g128530 = SampleStochastic2D( Texture234_g128530 , Sampler234_g128530 , Coords234_g128530 , WorldPosition234_g128530 );
				TEXTURE2D(Texture263_g128530) = _TerrainNormalTex8;
				SamplerState Sampler263_g128530 = SS29_g128549;
				half4 Coords263_g128530 = temp_output_37_0_g128530;
				half3 WorldPosition263_g128530 = temp_output_279_0_g128530;
				half3 WorldNormal263_g128530 = temp_output_280_0_g128530;
				half4 localSampleStochastic3D263_g128530 = SampleStochastic3D( Texture263_g128530 , Sampler263_g128530 , Coords263_g128530 , WorldPosition263_g128530 , WorldNormal263_g128530 );
				#if defined( TVE_TERRAIN_SAMPLE_08_PLANAR_2D )
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_PLANAR_3D )
				float4 staticSwitch8689_g128458 = localSamplePlanar3D246_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_2D )
				float4 staticSwitch8689_g128458 = localSampleStochastic2D234_g128530;
				#elif defined( TVE_TERRAIN_SAMPLE_08_STOCHASTIC_3D )
				float4 staticSwitch8689_g128458 = localSampleStochastic3D263_g128530;
				#else
				float4 staticSwitch8689_g128458 = localSamplePlanar2D238_g128530;
				#endif
				half4 Layer439_g128470 = staticSwitch8689_g128458;
				float4 weightedBlendVar31_g128470 = Weights52_g128470;
				float4 weightedBlend31_g128470 = ( weightedBlendVar31_g128470.x*Layer133_g128470 + weightedBlendVar31_g128470.y*Layer237_g128470 + weightedBlendVar31_g128470.z*Layer338_g128470 + weightedBlendVar31_g128470.w*Layer439_g128470 );
				half4 Terrain_B_088684_g128458 = weightedBlend31_g128470;
				half4 Layer_0810_g128464 = Terrain_B_088684_g128458;
				half4 Weights52_g128476 = Terrain_Weights_127710_g128458;
				TEXTURE2D(Texture238_g128502) = _TerrainNormalTex9;
				SamplerState Sampler238_g128502 = SS29_g128549;
				float4 temp_output_37_0_g128502 = Input_Terrain_Coords_098833_g128458;
				half4 Coords238_g128502 = temp_output_37_0_g128502;
				float3 temp_output_279_0_g128502 = Input_Position9197_g128458;
				half3 WorldPosition238_g128502 = temp_output_279_0_g128502;
				half4 localSamplePlanar2D238_g128502 = SamplePlanar2D( Texture238_g128502 , Sampler238_g128502 , Coords238_g128502 , WorldPosition238_g128502 );
				TEXTURE2D(Texture246_g128502) = _TerrainNormalTex9;
				SamplerState Sampler246_g128502 = SS29_g128549;
				half4 Coords246_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition246_g128502 = temp_output_279_0_g128502;
				float3 temp_output_280_0_g128502 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128502 = temp_output_280_0_g128502;
				half4 localSamplePlanar3D246_g128502 = SamplePlanar3D( Texture246_g128502 , Sampler246_g128502 , Coords246_g128502 , WorldPosition246_g128502 , WorldNormal246_g128502 );
				TEXTURE2D(Texture234_g128502) = _TerrainNormalTex9;
				SamplerState Sampler234_g128502 = SS29_g128549;
				float4 Coords234_g128502 = temp_output_37_0_g128502;
				float3 WorldPosition234_g128502 = temp_output_279_0_g128502;
				float4 localSampleStochastic2D234_g128502 = SampleStochastic2D( Texture234_g128502 , Sampler234_g128502 , Coords234_g128502 , WorldPosition234_g128502 );
				TEXTURE2D(Texture263_g128502) = _TerrainNormalTex9;
				SamplerState Sampler263_g128502 = SS29_g128549;
				half4 Coords263_g128502 = temp_output_37_0_g128502;
				half3 WorldPosition263_g128502 = temp_output_279_0_g128502;
				half3 WorldNormal263_g128502 = temp_output_280_0_g128502;
				half4 localSampleStochastic3D263_g128502 = SampleStochastic3D( Texture263_g128502 , Sampler263_g128502 , Coords263_g128502 , WorldPosition263_g128502 , WorldNormal263_g128502 );
				#if defined( TVE_TERRAIN_SAMPLE_09_PLANAR_2D )
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_PLANAR_3D )
				float4 staticSwitch8849_g128458 = localSamplePlanar3D246_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_2D )
				float4 staticSwitch8849_g128458 = localSampleStochastic2D234_g128502;
				#elif defined( TVE_TERRAIN_SAMPLE_09_STOCHASTIC_3D )
				float4 staticSwitch8849_g128458 = localSampleStochastic3D263_g128502;
				#else
				float4 staticSwitch8849_g128458 = localSamplePlanar2D238_g128502;
				#endif
				half4 Layer133_g128476 = staticSwitch8849_g128458;
				TEXTURE2D(Texture238_g128507) = _TerrainNormalTex10;
				SamplerState Sampler238_g128507 = SS29_g128549;
				float4 temp_output_37_0_g128507 = Input_Terrain_Coords_108834_g128458;
				half4 Coords238_g128507 = temp_output_37_0_g128507;
				float3 temp_output_279_0_g128507 = Input_Position9197_g128458;
				half3 WorldPosition238_g128507 = temp_output_279_0_g128507;
				half4 localSamplePlanar2D238_g128507 = SamplePlanar2D( Texture238_g128507 , Sampler238_g128507 , Coords238_g128507 , WorldPosition238_g128507 );
				TEXTURE2D(Texture246_g128507) = _TerrainNormalTex10;
				SamplerState Sampler246_g128507 = SS29_g128549;
				half4 Coords246_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition246_g128507 = temp_output_279_0_g128507;
				float3 temp_output_280_0_g128507 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128507 = temp_output_280_0_g128507;
				half4 localSamplePlanar3D246_g128507 = SamplePlanar3D( Texture246_g128507 , Sampler246_g128507 , Coords246_g128507 , WorldPosition246_g128507 , WorldNormal246_g128507 );
				TEXTURE2D(Texture234_g128507) = _TerrainNormalTex10;
				SamplerState Sampler234_g128507 = SS29_g128549;
				float4 Coords234_g128507 = temp_output_37_0_g128507;
				float3 WorldPosition234_g128507 = temp_output_279_0_g128507;
				float4 localSampleStochastic2D234_g128507 = SampleStochastic2D( Texture234_g128507 , Sampler234_g128507 , Coords234_g128507 , WorldPosition234_g128507 );
				TEXTURE2D(Texture263_g128507) = _TerrainNormalTex10;
				SamplerState Sampler263_g128507 = SS29_g128549;
				half4 Coords263_g128507 = temp_output_37_0_g128507;
				half3 WorldPosition263_g128507 = temp_output_279_0_g128507;
				half3 WorldNormal263_g128507 = temp_output_280_0_g128507;
				half4 localSampleStochastic3D263_g128507 = SampleStochastic3D( Texture263_g128507 , Sampler263_g128507 , Coords263_g128507 , WorldPosition263_g128507 , WorldNormal263_g128507 );
				#if defined( TVE_TERRAIN_SAMPLE_10_PLANAR_2D )
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_PLANAR_3D )
				float4 staticSwitch8876_g128458 = localSamplePlanar3D246_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_2D )
				float4 staticSwitch8876_g128458 = localSampleStochastic2D234_g128507;
				#elif defined( TVE_TERRAIN_SAMPLE_10_STOCHASTIC_3D )
				float4 staticSwitch8876_g128458 = localSampleStochastic3D263_g128507;
				#else
				float4 staticSwitch8876_g128458 = localSamplePlanar2D238_g128507;
				#endif
				half4 Layer237_g128476 = staticSwitch8876_g128458;
				TEXTURE2D(Texture238_g128508) = _TerrainNormalTex11;
				SamplerState Sampler238_g128508 = SS29_g128549;
				float4 temp_output_37_0_g128508 = Input_Terrain_Coords_118835_g128458;
				half4 Coords238_g128508 = temp_output_37_0_g128508;
				float3 temp_output_279_0_g128508 = Input_Position9197_g128458;
				half3 WorldPosition238_g128508 = temp_output_279_0_g128508;
				half4 localSamplePlanar2D238_g128508 = SamplePlanar2D( Texture238_g128508 , Sampler238_g128508 , Coords238_g128508 , WorldPosition238_g128508 );
				TEXTURE2D(Texture246_g128508) = _TerrainNormalTex11;
				SamplerState Sampler246_g128508 = SS29_g128549;
				half4 Coords246_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition246_g128508 = temp_output_279_0_g128508;
				float3 temp_output_280_0_g128508 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128508 = temp_output_280_0_g128508;
				half4 localSamplePlanar3D246_g128508 = SamplePlanar3D( Texture246_g128508 , Sampler246_g128508 , Coords246_g128508 , WorldPosition246_g128508 , WorldNormal246_g128508 );
				TEXTURE2D(Texture234_g128508) = _TerrainNormalTex11;
				SamplerState Sampler234_g128508 = SS29_g128549;
				float4 Coords234_g128508 = temp_output_37_0_g128508;
				float3 WorldPosition234_g128508 = temp_output_279_0_g128508;
				float4 localSampleStochastic2D234_g128508 = SampleStochastic2D( Texture234_g128508 , Sampler234_g128508 , Coords234_g128508 , WorldPosition234_g128508 );
				TEXTURE2D(Texture263_g128508) = _TerrainNormalTex11;
				SamplerState Sampler263_g128508 = SS29_g128549;
				half4 Coords263_g128508 = temp_output_37_0_g128508;
				half3 WorldPosition263_g128508 = temp_output_279_0_g128508;
				half3 WorldNormal263_g128508 = temp_output_280_0_g128508;
				half4 localSampleStochastic3D263_g128508 = SampleStochastic3D( Texture263_g128508 , Sampler263_g128508 , Coords263_g128508 , WorldPosition263_g128508 , WorldNormal263_g128508 );
				#if defined( TVE_TERRAIN_SAMPLE_11_PLANAR_2D )
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_PLANAR_3D )
				float4 staticSwitch8850_g128458 = localSamplePlanar3D246_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_2D )
				float4 staticSwitch8850_g128458 = localSampleStochastic2D234_g128508;
				#elif defined( TVE_TERRAIN_SAMPLE_11_STOCHASTIC_3D )
				float4 staticSwitch8850_g128458 = localSampleStochastic3D263_g128508;
				#else
				float4 staticSwitch8850_g128458 = localSamplePlanar2D238_g128508;
				#endif
				half4 Layer338_g128476 = staticSwitch8850_g128458;
				TEXTURE2D(Texture238_g128509) = _TerrainNormalTex12;
				SamplerState Sampler238_g128509 = SS29_g128549;
				float4 temp_output_37_0_g128509 = Input_Terrain_Coords_128836_g128458;
				half4 Coords238_g128509 = temp_output_37_0_g128509;
				float3 temp_output_279_0_g128509 = Input_Position9197_g128458;
				half3 WorldPosition238_g128509 = temp_output_279_0_g128509;
				half4 localSamplePlanar2D238_g128509 = SamplePlanar2D( Texture238_g128509 , Sampler238_g128509 , Coords238_g128509 , WorldPosition238_g128509 );
				TEXTURE2D(Texture246_g128509) = _TerrainNormalTex12;
				SamplerState Sampler246_g128509 = SS29_g128549;
				half4 Coords246_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition246_g128509 = temp_output_279_0_g128509;
				float3 temp_output_280_0_g128509 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128509 = temp_output_280_0_g128509;
				half4 localSamplePlanar3D246_g128509 = SamplePlanar3D( Texture246_g128509 , Sampler246_g128509 , Coords246_g128509 , WorldPosition246_g128509 , WorldNormal246_g128509 );
				TEXTURE2D(Texture234_g128509) = _TerrainNormalTex12;
				SamplerState Sampler234_g128509 = SS29_g128549;
				float4 Coords234_g128509 = temp_output_37_0_g128509;
				float3 WorldPosition234_g128509 = temp_output_279_0_g128509;
				float4 localSampleStochastic2D234_g128509 = SampleStochastic2D( Texture234_g128509 , Sampler234_g128509 , Coords234_g128509 , WorldPosition234_g128509 );
				TEXTURE2D(Texture263_g128509) = _TerrainNormalTex12;
				SamplerState Sampler263_g128509 = SS29_g128549;
				half4 Coords263_g128509 = temp_output_37_0_g128509;
				half3 WorldPosition263_g128509 = temp_output_279_0_g128509;
				half3 WorldNormal263_g128509 = temp_output_280_0_g128509;
				half4 localSampleStochastic3D263_g128509 = SampleStochastic3D( Texture263_g128509 , Sampler263_g128509 , Coords263_g128509 , WorldPosition263_g128509 , WorldNormal263_g128509 );
				#if defined( TVE_TERRAIN_SAMPLE_12_PLANAR_2D )
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_PLANAR_3D )
				float4 staticSwitch8877_g128458 = localSamplePlanar3D246_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_2D )
				float4 staticSwitch8877_g128458 = localSampleStochastic2D234_g128509;
				#elif defined( TVE_TERRAIN_SAMPLE_12_STOCHASTIC_3D )
				float4 staticSwitch8877_g128458 = localSampleStochastic3D263_g128509;
				#else
				float4 staticSwitch8877_g128458 = localSamplePlanar2D238_g128509;
				#endif
				half4 Layer439_g128476 = staticSwitch8877_g128458;
				float4 weightedBlendVar31_g128476 = Weights52_g128476;
				float4 weightedBlend31_g128476 = ( weightedBlendVar31_g128476.x*Layer133_g128476 + weightedBlendVar31_g128476.y*Layer237_g128476 + weightedBlendVar31_g128476.z*Layer338_g128476 + weightedBlendVar31_g128476.w*Layer439_g128476 );
				half4 Terrain_B_128865_g128458 = weightedBlend31_g128476;
				half4 Layer_1243_g128464 = Terrain_B_128865_g128458;
				half4 Weights52_g128482 = Terrain_Weights_167709_g128458;
				TEXTURE2D(Texture238_g128512) = _TerrainNormalTex13;
				SamplerState Sampler238_g128512 = SS29_g128549;
				float4 temp_output_37_0_g128512 = Input_Terrain_Coords_138960_g128458;
				half4 Coords238_g128512 = temp_output_37_0_g128512;
				float3 temp_output_279_0_g128512 = Input_Position9197_g128458;
				half3 WorldPosition238_g128512 = temp_output_279_0_g128512;
				half4 localSamplePlanar2D238_g128512 = SamplePlanar2D( Texture238_g128512 , Sampler238_g128512 , Coords238_g128512 , WorldPosition238_g128512 );
				TEXTURE2D(Texture246_g128512) = _TerrainNormalTex13;
				SamplerState Sampler246_g128512 = SS29_g128549;
				half4 Coords246_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition246_g128512 = temp_output_279_0_g128512;
				float3 temp_output_280_0_g128512 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128512 = temp_output_280_0_g128512;
				half4 localSamplePlanar3D246_g128512 = SamplePlanar3D( Texture246_g128512 , Sampler246_g128512 , Coords246_g128512 , WorldPosition246_g128512 , WorldNormal246_g128512 );
				TEXTURE2D(Texture234_g128512) = _TerrainNormalTex13;
				SamplerState Sampler234_g128512 = SS29_g128549;
				float4 Coords234_g128512 = temp_output_37_0_g128512;
				float3 WorldPosition234_g128512 = temp_output_279_0_g128512;
				float4 localSampleStochastic2D234_g128512 = SampleStochastic2D( Texture234_g128512 , Sampler234_g128512 , Coords234_g128512 , WorldPosition234_g128512 );
				TEXTURE2D(Texture263_g128512) = _TerrainNormalTex13;
				SamplerState Sampler263_g128512 = SS29_g128549;
				half4 Coords263_g128512 = temp_output_37_0_g128512;
				half3 WorldPosition263_g128512 = temp_output_279_0_g128512;
				half3 WorldNormal263_g128512 = temp_output_280_0_g128512;
				half4 localSampleStochastic3D263_g128512 = SampleStochastic3D( Texture263_g128512 , Sampler263_g128512 , Coords263_g128512 , WorldPosition263_g128512 , WorldNormal263_g128512 );
				#if defined( TVE_TERRAIN_SAMPLE_13_PLANAR_2D )
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_PLANAR_3D )
				float4 staticSwitch8991_g128458 = localSamplePlanar3D246_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_2D )
				float4 staticSwitch8991_g128458 = localSampleStochastic2D234_g128512;
				#elif defined( TVE_TERRAIN_SAMPLE_13_STOCHASTIC_3D )
				float4 staticSwitch8991_g128458 = localSampleStochastic3D263_g128512;
				#else
				float4 staticSwitch8991_g128458 = localSamplePlanar2D238_g128512;
				#endif
				half4 Layer133_g128482 = staticSwitch8991_g128458;
				TEXTURE2D(Texture238_g128519) = _TerrainNormalTex14;
				SamplerState Sampler238_g128519 = SS29_g128549;
				float4 temp_output_37_0_g128519 = Input_Terrain_Coords_148961_g128458;
				half4 Coords238_g128519 = temp_output_37_0_g128519;
				float3 temp_output_279_0_g128519 = Input_Position9197_g128458;
				half3 WorldPosition238_g128519 = temp_output_279_0_g128519;
				half4 localSamplePlanar2D238_g128519 = SamplePlanar2D( Texture238_g128519 , Sampler238_g128519 , Coords238_g128519 , WorldPosition238_g128519 );
				TEXTURE2D(Texture246_g128519) = _TerrainNormalTex14;
				SamplerState Sampler246_g128519 = SS29_g128549;
				half4 Coords246_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition246_g128519 = temp_output_279_0_g128519;
				float3 temp_output_280_0_g128519 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128519 = temp_output_280_0_g128519;
				half4 localSamplePlanar3D246_g128519 = SamplePlanar3D( Texture246_g128519 , Sampler246_g128519 , Coords246_g128519 , WorldPosition246_g128519 , WorldNormal246_g128519 );
				TEXTURE2D(Texture234_g128519) = _TerrainNormalTex14;
				SamplerState Sampler234_g128519 = SS29_g128549;
				float4 Coords234_g128519 = temp_output_37_0_g128519;
				float3 WorldPosition234_g128519 = temp_output_279_0_g128519;
				float4 localSampleStochastic2D234_g128519 = SampleStochastic2D( Texture234_g128519 , Sampler234_g128519 , Coords234_g128519 , WorldPosition234_g128519 );
				TEXTURE2D(Texture263_g128519) = _TerrainNormalTex14;
				SamplerState Sampler263_g128519 = SS29_g128549;
				half4 Coords263_g128519 = temp_output_37_0_g128519;
				half3 WorldPosition263_g128519 = temp_output_279_0_g128519;
				half3 WorldNormal263_g128519 = temp_output_280_0_g128519;
				half4 localSampleStochastic3D263_g128519 = SampleStochastic3D( Texture263_g128519 , Sampler263_g128519 , Coords263_g128519 , WorldPosition263_g128519 , WorldNormal263_g128519 );
				#if defined( TVE_TERRAIN_SAMPLE_14_PLANAR_2D )
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_PLANAR_3D )
				float4 staticSwitch8990_g128458 = localSamplePlanar3D246_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_2D )
				float4 staticSwitch8990_g128458 = localSampleStochastic2D234_g128519;
				#elif defined( TVE_TERRAIN_SAMPLE_14_STOCHASTIC_3D )
				float4 staticSwitch8990_g128458 = localSampleStochastic3D263_g128519;
				#else
				float4 staticSwitch8990_g128458 = localSamplePlanar2D238_g128519;
				#endif
				half4 Layer237_g128482 = staticSwitch8990_g128458;
				TEXTURE2D(Texture238_g128520) = _TerrainNormalTex15;
				SamplerState Sampler238_g128520 = SS29_g128549;
				float4 temp_output_37_0_g128520 = Input_Terrain_Coords_158962_g128458;
				half4 Coords238_g128520 = temp_output_37_0_g128520;
				float3 temp_output_279_0_g128520 = Input_Position9197_g128458;
				half3 WorldPosition238_g128520 = temp_output_279_0_g128520;
				half4 localSamplePlanar2D238_g128520 = SamplePlanar2D( Texture238_g128520 , Sampler238_g128520 , Coords238_g128520 , WorldPosition238_g128520 );
				TEXTURE2D(Texture246_g128520) = _TerrainNormalTex15;
				SamplerState Sampler246_g128520 = SS29_g128549;
				half4 Coords246_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition246_g128520 = temp_output_279_0_g128520;
				float3 temp_output_280_0_g128520 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128520 = temp_output_280_0_g128520;
				half4 localSamplePlanar3D246_g128520 = SamplePlanar3D( Texture246_g128520 , Sampler246_g128520 , Coords246_g128520 , WorldPosition246_g128520 , WorldNormal246_g128520 );
				TEXTURE2D(Texture234_g128520) = _TerrainNormalTex15;
				SamplerState Sampler234_g128520 = SS29_g128549;
				float4 Coords234_g128520 = temp_output_37_0_g128520;
				float3 WorldPosition234_g128520 = temp_output_279_0_g128520;
				float4 localSampleStochastic2D234_g128520 = SampleStochastic2D( Texture234_g128520 , Sampler234_g128520 , Coords234_g128520 , WorldPosition234_g128520 );
				TEXTURE2D(Texture263_g128520) = _TerrainNormalTex15;
				SamplerState Sampler263_g128520 = SS29_g128549;
				half4 Coords263_g128520 = temp_output_37_0_g128520;
				half3 WorldPosition263_g128520 = temp_output_279_0_g128520;
				half3 WorldNormal263_g128520 = temp_output_280_0_g128520;
				half4 localSampleStochastic3D263_g128520 = SampleStochastic3D( Texture263_g128520 , Sampler263_g128520 , Coords263_g128520 , WorldPosition263_g128520 , WorldNormal263_g128520 );
				#if defined( TVE_TERRAIN_SAMPLE_15_PLANAR_2D )
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_PLANAR_3D )
				float4 staticSwitch8989_g128458 = localSamplePlanar3D246_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_2D )
				float4 staticSwitch8989_g128458 = localSampleStochastic2D234_g128520;
				#elif defined( TVE_TERRAIN_SAMPLE_15_STOCHASTIC_3D )
				float4 staticSwitch8989_g128458 = localSampleStochastic3D263_g128520;
				#else
				float4 staticSwitch8989_g128458 = localSamplePlanar2D238_g128520;
				#endif
				half4 Layer338_g128482 = staticSwitch8989_g128458;
				TEXTURE2D(Texture238_g128521) = _TerrainNormalTex16;
				SamplerState Sampler238_g128521 = SS29_g128549;
				float4 temp_output_37_0_g128521 = Input_Terrain_Coords_168959_g128458;
				half4 Coords238_g128521 = temp_output_37_0_g128521;
				float3 temp_output_279_0_g128521 = Input_Position9197_g128458;
				half3 WorldPosition238_g128521 = temp_output_279_0_g128521;
				half4 localSamplePlanar2D238_g128521 = SamplePlanar2D( Texture238_g128521 , Sampler238_g128521 , Coords238_g128521 , WorldPosition238_g128521 );
				TEXTURE2D(Texture246_g128521) = _TerrainNormalTex16;
				SamplerState Sampler246_g128521 = SS29_g128549;
				half4 Coords246_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition246_g128521 = temp_output_279_0_g128521;
				float3 temp_output_280_0_g128521 = Input_Normal9199_g128458;
				half3 WorldNormal246_g128521 = temp_output_280_0_g128521;
				half4 localSamplePlanar3D246_g128521 = SamplePlanar3D( Texture246_g128521 , Sampler246_g128521 , Coords246_g128521 , WorldPosition246_g128521 , WorldNormal246_g128521 );
				TEXTURE2D(Texture234_g128521) = _TerrainNormalTex16;
				SamplerState Sampler234_g128521 = SS29_g128549;
				float4 Coords234_g128521 = temp_output_37_0_g128521;
				float3 WorldPosition234_g128521 = temp_output_279_0_g128521;
				float4 localSampleStochastic2D234_g128521 = SampleStochastic2D( Texture234_g128521 , Sampler234_g128521 , Coords234_g128521 , WorldPosition234_g128521 );
				TEXTURE2D(Texture263_g128521) = _TerrainNormalTex16;
				SamplerState Sampler263_g128521 = SS29_g128549;
				half4 Coords263_g128521 = temp_output_37_0_g128521;
				half3 WorldPosition263_g128521 = temp_output_279_0_g128521;
				half3 WorldNormal263_g128521 = temp_output_280_0_g128521;
				half4 localSampleStochastic3D263_g128521 = SampleStochastic3D( Texture263_g128521 , Sampler263_g128521 , Coords263_g128521 , WorldPosition263_g128521 , WorldNormal263_g128521 );
				#if defined( TVE_TERRAIN_SAMPLE_16_PLANAR_2D )
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_PLANAR_3D )
				float4 staticSwitch8988_g128458 = localSamplePlanar3D246_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_2D )
				float4 staticSwitch8988_g128458 = localSampleStochastic2D234_g128521;
				#elif defined( TVE_TERRAIN_SAMPLE_16_STOCHASTIC_3D )
				float4 staticSwitch8988_g128458 = localSampleStochastic3D263_g128521;
				#else
				float4 staticSwitch8988_g128458 = localSamplePlanar2D238_g128521;
				#endif
				half4 Layer439_g128482 = staticSwitch8988_g128458;
				float4 weightedBlendVar31_g128482 = Weights52_g128482;
				float4 weightedBlend31_g128482 = ( weightedBlendVar31_g128482.x*Layer133_g128482 + weightedBlendVar31_g128482.y*Layer237_g128482 + weightedBlendVar31_g128482.z*Layer338_g128482 + weightedBlendVar31_g128482.w*Layer439_g128482 );
				half4 Terrain_B_168987_g128458 = weightedBlend31_g128482;
				half4 Layer_1644_g128464 = Terrain_B_168987_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128464 = ( Layer_045_g128464 + Layer_0810_g128464 + Layer_1243_g128464 + Layer_1644_g128464 );
				#else
				float4 staticSwitch40_g128464 = Layer_045_g128464;
				#endif
				half4 Blend_Normal7512_g128458 = staticSwitch40_g128464;
				half4 Normal_Packed45_g128543 = Blend_Normal7512_g128458;
				float2 appendResult58_g128543 = (float2(( (Normal_Packed45_g128543).x * (Normal_Packed45_g128543).w ) , (Normal_Packed45_g128543).y));
				half2 Normal_Default50_g128543 = appendResult58_g128543;
				half2 Normal_ASTC41_g128543 = (Normal_Packed45_g128543).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128543 = Normal_ASTC41_g128543;
				#else
				float2 staticSwitch38_g128543 = Normal_Default50_g128543;
				#endif
				half2 Normal_NO_DTX544_g128543 = (Normal_Packed45_g128543).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128543 = Normal_NO_DTX544_g128543;
				#else
				float2 staticSwitch37_g128543 = staticSwitch38_g128543;
				#endif
				half4 Weights52_g128460 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128460 = temp_output_6970_0_g128458;
				half4 Layer237_g128460 = temp_output_6977_0_g128458;
				half4 Layer338_g128460 = temp_output_6978_0_g128458;
				half4 Layer439_g128460 = temp_output_6983_0_g128458;
				float4 weightedBlendVar31_g128460 = Weights52_g128460;
				float4 weightedBlend31_g128460 = ( weightedBlendVar31_g128460.x*Layer133_g128460 + weightedBlendVar31_g128460.y*Layer237_g128460 + weightedBlendVar31_g128460.z*Layer338_g128460 + weightedBlendVar31_g128460.w*Layer439_g128460 );
				half4 Terrain_Shaders_047203_g128458 = weightedBlend31_g128460;
				half4 Layer_045_g128466 = Terrain_Shaders_047203_g128458;
				half4 Weights52_g128472 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128472 = temp_output_8714_0_g128458;
				half4 Layer237_g128472 = temp_output_8721_0_g128458;
				half4 Layer338_g128472 = temp_output_8724_0_g128458;
				half4 Layer439_g128472 = temp_output_8727_0_g128458;
				float4 weightedBlendVar31_g128472 = Weights52_g128472;
				float4 weightedBlend31_g128472 = ( weightedBlendVar31_g128472.x*Layer133_g128472 + weightedBlendVar31_g128472.y*Layer237_g128472 + weightedBlendVar31_g128472.z*Layer338_g128472 + weightedBlendVar31_g128472.w*Layer439_g128472 );
				half4 Terrain_Shaders_088730_g128458 = weightedBlend31_g128472;
				half4 Layer_0810_g128466 = Terrain_Shaders_088730_g128458;
				half4 Weights52_g128478 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128478 = temp_output_8815_0_g128458;
				half4 Layer237_g128478 = temp_output_8818_0_g128458;
				half4 Layer338_g128478 = temp_output_8819_0_g128458;
				half4 Layer439_g128478 = temp_output_8820_0_g128458;
				float4 weightedBlendVar31_g128478 = Weights52_g128478;
				float4 weightedBlend31_g128478 = ( weightedBlendVar31_g128478.x*Layer133_g128478 + weightedBlendVar31_g128478.y*Layer237_g128478 + weightedBlendVar31_g128478.z*Layer338_g128478 + weightedBlendVar31_g128478.w*Layer439_g128478 );
				half4 Terrain_Shaders_128871_g128458 = weightedBlend31_g128478;
				half4 Layer_1243_g128466 = Terrain_Shaders_128871_g128458;
				half4 Weights52_g128484 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128484 = temp_output_8931_0_g128458;
				half4 Layer237_g128484 = temp_output_8934_0_g128458;
				half4 Layer338_g128484 = temp_output_8935_0_g128458;
				half4 Layer439_g128484 = temp_output_8936_0_g128458;
				float4 weightedBlendVar31_g128484 = Weights52_g128484;
				float4 weightedBlend31_g128484 = ( weightedBlendVar31_g128484.x*Layer133_g128484 + weightedBlendVar31_g128484.y*Layer237_g128484 + weightedBlendVar31_g128484.z*Layer338_g128484 + weightedBlendVar31_g128484.w*Layer439_g128484 );
				half4 Terrain_Shaders_169014_g128458 = weightedBlend31_g128484;
				half4 Layer_1644_g128466 = Terrain_Shaders_169014_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128466 = ( Layer_045_g128466 + Layer_0810_g128466 + Layer_1243_g128466 + Layer_1644_g128466 );
				#else
				float4 staticSwitch40_g128466 = Layer_045_g128466;
				#endif
				half4 Blend_Shaders7420_g128458 = staticSwitch40_g128466;
				half4 Normal_Packed45_g128542 = Blend_Shaders7420_g128458;
				half2 Normal_NO_DTX544_g128542 = (Normal_Packed45_g128542).wy;
				#ifdef TVE_TERRAIN_PACKED
				float2 staticSwitch9080_g128458 = (Normal_NO_DTX544_g128542*2.0 + -1.0);
				#else
				float2 staticSwitch9080_g128458 = (staticSwitch37_g128543*2.0 + -1.0);
				#endif
				half4 Weights52_g128461 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128461 = _TerrainParams1;
				half4 Layer237_g128461 = _TerrainParams2;
				half4 Layer338_g128461 = _TerrainParams3;
				half4 Layer439_g128461 = _TerrainParams4;
				float4 weightedBlendVar31_g128461 = Weights52_g128461;
				float4 weightedBlend31_g128461 = ( weightedBlendVar31_g128461.x*Layer133_g128461 + weightedBlendVar31_g128461.y*Layer237_g128461 + weightedBlendVar31_g128461.z*Layer338_g128461 + weightedBlendVar31_g128461.w*Layer439_g128461 );
				half4 Terrain_Params_047533_g128458 = weightedBlend31_g128461;
				half4 Layer_045_g128467 = Terrain_Params_047533_g128458;
				half4 Weights52_g128473 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128473 = _TerrainParams5;
				half4 Layer237_g128473 = _TerrainParams6;
				half4 Layer338_g128473 = _TerrainParams7;
				half4 Layer439_g128473 = _TerrainParams8;
				float4 weightedBlendVar31_g128473 = Weights52_g128473;
				float4 weightedBlend31_g128473 = ( weightedBlendVar31_g128473.x*Layer133_g128473 + weightedBlendVar31_g128473.y*Layer237_g128473 + weightedBlendVar31_g128473.z*Layer338_g128473 + weightedBlendVar31_g128473.w*Layer439_g128473 );
				half4 Terrain_Params_088739_g128458 = weightedBlend31_g128473;
				half4 Layer_0810_g128467 = Terrain_Params_088739_g128458;
				half4 Weights52_g128479 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128479 = _TerrainParams9;
				half4 Layer237_g128479 = _TerrainParams10;
				half4 Layer338_g128479 = _TerrainParams11;
				half4 Layer439_g128479 = _TerrainParams12;
				float4 weightedBlendVar31_g128479 = Weights52_g128479;
				float4 weightedBlend31_g128479 = ( weightedBlendVar31_g128479.x*Layer133_g128479 + weightedBlendVar31_g128479.y*Layer237_g128479 + weightedBlendVar31_g128479.z*Layer338_g128479 + weightedBlendVar31_g128479.w*Layer439_g128479 );
				half4 Terrain_Params_128867_g128458 = weightedBlend31_g128479;
				half4 Layer_1243_g128467 = Terrain_Params_128867_g128458;
				half4 Weights52_g128485 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128485 = _TerrainParams13;
				half4 Layer237_g128485 = _TerrainParams14;
				half4 Layer338_g128485 = _TerrainParams15;
				half4 Layer439_g128485 = _TerrainParams16;
				float4 weightedBlendVar31_g128485 = Weights52_g128485;
				float4 weightedBlend31_g128485 = ( weightedBlendVar31_g128485.x*Layer133_g128485 + weightedBlendVar31_g128485.y*Layer237_g128485 + weightedBlendVar31_g128485.z*Layer338_g128485 + weightedBlendVar31_g128485.w*Layer439_g128485 );
				half4 Terrain_Params_169017_g128458 = weightedBlend31_g128485;
				half4 Layer_1644_g128467 = Terrain_Params_169017_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128467 = ( Layer_045_g128467 + Layer_0810_g128467 + Layer_1243_g128467 + Layer_1644_g128467 );
				#else
				float4 staticSwitch40_g128467 = Layer_045_g128467;
				#endif
				half4 Blend_Params7547_g128458 = staticSwitch40_g128467;
				half2 Normal_Planar45_g128544 = ( ( staticSwitch9080_g128458 * (Blend_Params7547_g128458).z ) * _TerrainNormalValue );
				float2 break71_g128544 = Normal_Planar45_g128544;
				float3 appendResult72_g128544 = (float3(break71_g128544.x , 0.0 , break71_g128544.y));
				half2 Final_NormalTS9145_g128458 = (mul( ase_worldToTangent, appendResult72_g128544 )).xy;
				half2 Local_Normal9200_g128457 = Final_NormalTS9145_g128458;
				float2 In_NormalTS3_g128570 = Local_Normal9200_g128457;
				float3 appendResult68_g128568 = (float3(Local_Normal9200_g128457 , 1.0));
				float3 tanToWorld0 = float3( TangentWS.xyz.x, BitangentWS.x, NormalWS.x );
				float3 tanToWorld1 = float3( TangentWS.xyz.y, BitangentWS.y, NormalWS.y );
				float3 tanToWorld2 = float3( TangentWS.xyz.z, BitangentWS.z, NormalWS.z );
				float3 tanNormal74_g128568 = appendResult68_g128568;
				float3 worldNormal74_g128568 = normalize( float3( dot( tanToWorld0, tanNormal74_g128568 ), dot( tanToWorld1, tanNormal74_g128568 ), dot( tanToWorld2, tanNormal74_g128568 ) ) );
				float3 In_NormalWS3_g128570 = worldNormal74_g128568;
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9139_g128458 = 0.0;
				#else
				float staticSwitch9139_g128458 = ( (Blend_Shaders7420_g128458).x * (Blend_Params7547_g128458).x * _TerrainMetallicValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9097_g128458 = 1.0;
				#else
				float staticSwitch9097_g128458 = ( (Blend_Shaders7420_g128458).y * _TerrainOcclusionValue );
				#endif
				#ifdef TVE_TERRAIN_PACKED
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).x;
				#else
				float staticSwitch9105_g128458 = (Blend_Shaders7420_g128458).w;
				#endif
				float4 appendResult9147_g128458 = (float4(staticSwitch9139_g128458 , staticSwitch9097_g128458 , (Blend_Shaders7420_g128458).z , ( staticSwitch9105_g128458 * (Blend_Params7547_g128458).w * _TerrainSmoothnessValue )));
				half4 Final_Shaders9146_g128458 = appendResult9147_g128458;
				half4 Local_Shader9201_g128457 = Final_Shaders9146_g128458;
				float4 In_Shader3_g128570 = Local_Shader9201_g128457;
				half4 Weights52_g128535 = Terrain_Weights_046781_g128458;
				half4 Layer133_g128535 = _TerrainSpecular1;
				half4 Layer237_g128535 = _TerrainSpecular2;
				half4 Layer338_g128535 = _TerrainSpecular3;
				half4 Layer439_g128535 = _TerrainSpecular4;
				float4 weightedBlendVar31_g128535 = Weights52_g128535;
				float4 weightedBlend31_g128535 = ( weightedBlendVar31_g128535.x*Layer133_g128535 + weightedBlendVar31_g128535.y*Layer237_g128535 + weightedBlendVar31_g128535.z*Layer338_g128535 + weightedBlendVar31_g128535.w*Layer439_g128535 );
				half4 Terrain_Specular_047390_g128458 = weightedBlend31_g128535;
				half4 Layer_045_g128540 = Terrain_Specular_047390_g128458;
				half4 Weights52_g128474 = Terrain_Weights_087340_g128458;
				half4 Layer133_g128474 = _TerrainSpecular5;
				half4 Layer237_g128474 = _TerrainSpecular6;
				half4 Layer338_g128474 = _TerrainSpecular7;
				half4 Layer439_g128474 = _TerrainSpecular8;
				float4 weightedBlendVar31_g128474 = Weights52_g128474;
				float4 weightedBlend31_g128474 = ( weightedBlendVar31_g128474.x*Layer133_g128474 + weightedBlendVar31_g128474.y*Layer237_g128474 + weightedBlendVar31_g128474.z*Layer338_g128474 + weightedBlendVar31_g128474.w*Layer439_g128474 );
				half4 Terrain_Specular_088745_g128458 = weightedBlend31_g128474;
				half4 Layer_0810_g128540 = Terrain_Specular_088745_g128458;
				half4 Weights52_g128480 = Terrain_Weights_127710_g128458;
				half4 Layer133_g128480 = _TerrainSpecular9;
				half4 Layer237_g128480 = _TerrainSpecular10;
				half4 Layer338_g128480 = _TerrainSpecular11;
				half4 Layer439_g128480 = _TerrainSpecular12;
				float4 weightedBlendVar31_g128480 = Weights52_g128480;
				float4 weightedBlend31_g128480 = ( weightedBlendVar31_g128480.x*Layer133_g128480 + weightedBlendVar31_g128480.y*Layer237_g128480 + weightedBlendVar31_g128480.z*Layer338_g128480 + weightedBlendVar31_g128480.w*Layer439_g128480 );
				half4 Terrain_Specular_128869_g128458 = weightedBlend31_g128480;
				half4 Layer_1243_g128540 = Terrain_Specular_128869_g128458;
				half4 Weights52_g128486 = Terrain_Weights_167709_g128458;
				half4 Layer133_g128486 = _TerrainSpecular13;
				half4 Layer237_g128486 = _TerrainSpecular14;
				half4 Layer338_g128486 = _TerrainSpecular15;
				half4 Layer439_g128486 = _TerrainSpecular16;
				float4 weightedBlendVar31_g128486 = Weights52_g128486;
				float4 weightedBlend31_g128486 = ( weightedBlendVar31_g128486.x*Layer133_g128486 + weightedBlendVar31_g128486.y*Layer237_g128486 + weightedBlendVar31_g128486.z*Layer338_g128486 + weightedBlendVar31_g128486.w*Layer439_g128486 );
				half4 Terrain_Specular_169019_g128458 = weightedBlend31_g128486;
				half4 Layer_1644_g128540 = Terrain_Specular_169019_g128458;
				#if defined( TVE_TERRAIN_04 )
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#elif defined( TVE_TERRAIN_08 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 );
				#elif defined( TVE_TERRAIN_12 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 );
				#elif defined( TVE_TERRAIN_16 )
				float4 staticSwitch40_g128540 = ( Layer_045_g128540 + Layer_0810_g128540 + Layer_1243_g128540 + Layer_1644_g128540 );
				#else
				float4 staticSwitch40_g128540 = Layer_045_g128540;
				#endif
				half4 Blend_TerrainSpecular7446_g128458 = staticSwitch40_g128540;
				float3 temp_output_9088_0_g128458 = (Blend_TerrainSpecular7446_g128458).rgb;
				float4 appendResult9189_g128458 = (float4(temp_output_9088_0_g128458 , 1.0));
				half4 Final_Emissive9151_g128458 = appendResult9189_g128458;
				half4 Local_EmissiveLDR9202_g128457 = Final_Emissive9151_g128458;
				float4 In_Emissive3_g128570 = Local_EmissiveLDR9202_g128457;
				float3 temp_output_3_0_g128569 = Local_Albedo9199_g128457;
				float dotResult20_g128569 = dot( temp_output_3_0_g128569 , float3( 0.2126, 0.7152, 0.0722 ) );
				float temp_output_9165_0_g128457 = dotResult20_g128569;
				float In_Grayscale3_g128570 = temp_output_9165_0_g128457;
				float clampResult9168_g128457 = clamp( saturate( ( temp_output_9165_0_g128457 * 5.0 ) ) , 0.2 , 1.0 );
				float In_Luminosity3_g128570 = clampResult9168_g128457;
				half Final_MultiShader9150_g128458 = ( (Blend_TerrainSpecular7446_g128458).a * (Blend_Albedo7468_g128458).w );
				half Local_MultiMask9203_g128457 = Final_MultiShader9150_g128458;
				float In_MultiMask3_g128570 = Local_MultiMask9203_g128457;
				float4 temp_output_35_0_g128551 = appendResult9125_g128458;
				float2 InputScale48_g128551 = (temp_output_35_0_g128551).zw;
				half2 FinalScale53_g128551 = ( 1.0 / InputScale48_g128551 );
				float2 InputPosition52_g128551 = (temp_output_35_0_g128551).xy;
				half2 FinalPosition58_g128551 = -( FinalScale53_g128551 * InputPosition52_g128551 );
				float2 temp_output_65_0_g128551 = ( ( (PositionWS).xz * FinalScale53_g128551 ) + FinalPosition58_g128551 );
				float2 Terrain_Holes_UV9406_g128458 = temp_output_65_0_g128551;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch9188_g128458 = SAMPLE_TEXTURE2D( _TerrainHolesTex, sampler_Point_Repeat, Terrain_Holes_UV9406_g128458 ).r;
				#else
				float staticSwitch9188_g128458 = 1.0;
				#endif
				half Terrain_Holes7437_g128458 = staticSwitch9188_g128458;
				half Local_HoleMask9204_g128457 = Terrain_Holes7437_g128458;
				float In_AlphaClip3_g128570 = Local_HoleMask9204_g128457;
				float In_AlphaFade3_g128570 = 1.0;
				float3 temp_cast_9 = (1.0).xxx;
				float3 In_Translucency3_g128570 = temp_cast_9;
				float In_Transmission3_g128570 = 1.0;
				float In_Thickness3_g128570 = 0.0;
				float In_Diffusion3_g128570 = 0.0;
				float In_Depth3_g128570 = 0.0;
				{
				Data3_g128570.Dummy = In_Dummy3_g128570;
				Data3_g128570.Albedo = In_Albedo3_g128570;
				Data3_g128570.AlbedoRaw = In_AlbedoRaw3_g128570;
				Data3_g128570.NormalTS = In_NormalTS3_g128570;
				Data3_g128570.NormalWS = In_NormalWS3_g128570;
				Data3_g128570.Shader = In_Shader3_g128570;
				Data3_g128570.Emissive= In_Emissive3_g128570;
				Data3_g128570.MultiMask = In_MultiMask3_g128570;
				Data3_g128570.Grayscale = In_Grayscale3_g128570;
				Data3_g128570.Luminosity = In_Luminosity3_g128570;
				Data3_g128570.AlphaClip = In_AlphaClip3_g128570;
				Data3_g128570.AlphaFade = In_AlphaFade3_g128570;
				Data3_g128570.Translucency = In_Translucency3_g128570;
				Data3_g128570.Transmission = In_Transmission3_g128570;
				Data3_g128570.Thickness = In_Thickness3_g128570;
				Data3_g128570.Diffusion = In_Diffusion3_g128570;
				Data3_g128570.Depth = In_Depth3_g128570;
				}
				TVEVisualData Data4_g128575 = Data3_g128570;
				float Out_Dummy4_g128575 = 0;
				float3 Out_Albedo4_g128575 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128575 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128575 = float2( 0,0 );
				float3 Out_NormalWS4_g128575 = float3( 0,0,0 );
				float4 Out_Shader4_g128575 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128575 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128575 = 0;
				float Out_Grayscale4_g128575 = 0;
				float Out_Luminosity4_g128575 = 0;
				float Out_AlphaClip4_g128575 = 0;
				float Out_AlphaFade4_g128575 = 0;
				float3 Out_Translucency4_g128575 = float3( 0,0,0 );
				float Out_Transmission4_g128575 = 0;
				float Out_Thickness4_g128575 = 0;
				float Out_Diffusion4_g128575 = 0;
				float Out_Depth4_g128575 = 0;
				{
				Out_Dummy4_g128575 = Data4_g128575.Dummy;
				Out_Albedo4_g128575 = Data4_g128575.Albedo;
				Out_AlbedoRaw4_g128575 = Data4_g128575.AlbedoRaw;
				Out_NormalTS4_g128575 = Data4_g128575.NormalTS;
				Out_NormalWS4_g128575 = Data4_g128575.NormalWS;
				Out_Shader4_g128575 = Data4_g128575.Shader;
				Out_Emissive4_g128575= Data4_g128575.Emissive;
				Out_MultiMask4_g128575 = Data4_g128575.MultiMask;
				Out_Grayscale4_g128575 = Data4_g128575.Grayscale;
				Out_Luminosity4_g128575= Data4_g128575.Luminosity;
				Out_AlphaClip4_g128575 = Data4_g128575.AlphaClip;
				Out_AlphaFade4_g128575 = Data4_g128575.AlphaFade;
				Out_Translucency4_g128575 = Data4_g128575.Translucency;
				Out_Transmission4_g128575 = Data4_g128575.Transmission;
				Out_Thickness4_g128575 = Data4_g128575.Thickness;
				Out_Diffusion4_g128575 = Data4_g128575.Diffusion;
				Out_Depth4_g128575= Data4_g128575.Depth;
				}
				half3 Visual_Albedo139_g128571 = Out_Albedo4_g128575;
				float temp_output_200_12_g128571 = Out_Grayscale4_g128575;
				half Visual_Grayscale150_g128571 = temp_output_200_12_g128571;
				float3 temp_cast_10 = (Visual_Grayscale150_g128571).xxx;
				float localBuildGlobalData204_g128376 = ( 0.0 );
				TVEGlobalData Data204_g128376 = (TVEGlobalData)0;
				half Dummy211_g128376 = ( _GlobalCategory + _GlobalEnd + 0.0 );
				float In_Dummy204_g128376 = Dummy211_g128376;
				half4 Coat_Params302_g128376 = TVE_CoatParams;
				float4 In_CoatDataRT204_g128376 = Coat_Params302_g128376;
				float temp_output_82_0_g128377 = _GlobalPaintLayerValue;
				float temp_output_19_0_g128379 = TVE_PaintLayers[(int)temp_output_82_0_g128377];
				TVEModelData Data16_g117799 = (TVEModelData)0;
				float In_Dummy16_g117799 = 0.0;
				float3 vertexToFrag73_g117794 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g117794 = vertexToFrag73_g117794;
				float3 In_PositionWS16_g117799 = PositionWS122_g117794;
				float3 localObjectPosition_UNITY_MATRIX_M14_g128370 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g128370 = ( localObjectPosition_UNITY_MATRIX_M14_g128370 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g128370 = localObjectPosition_UNITY_MATRIX_M14_g128370;
				#endif
				float3 temp_output_340_7_g117794 = staticSwitch13_g128370;
				half3 PivotWS121_g117794 = temp_output_340_7_g117794;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g117794 = ( PositionWS122_g117794 - PivotWS121_g117794 );
				#else
				float3 staticSwitch204_g117794 = PositionWS122_g117794;
				#endif
				half3 PositionWO132_g117794 = ( staticSwitch204_g117794 - TVE_WorldOrigin );
				float3 In_PositionWO16_g117799 = PositionWO132_g117794;
				float3 In_PivotWS16_g117799 = PivotWS121_g117794;
				half3 PivotWO133_g117794 = ( PivotWS121_g117794 - TVE_WorldOrigin );
				float3 In_PivotWO16_g117799 = PivotWO133_g117794;
				float3 normalizedWorldNormal = normalize( NormalWS );
				half3 Normal_WS95_g117794 = normalizedWorldNormal;
				float3 In_NormalWS16_g117799 = Normal_WS95_g117794;
				float3 normalizeResult296_g117794 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g117794 ) );
				half3 ViewDirWS169_g117794 = normalizeResult296_g117794;
				float3 In_ViewDirWS16_g117799 = ViewDirWS169_g117794;
				half4 VertexMasks171_g117794 = packedInput.ase_color;
				float4 In_VertexData16_g117799 = VertexMasks171_g117794;
				float4 In_BoundsData16_g117799 = float4( 1,1,1,1 );
				{
				Data16_g117799.Dummy = In_Dummy16_g117799;
				Data16_g117799.PositionWS = In_PositionWS16_g117799;
				Data16_g117799.PositionWO = In_PositionWO16_g117799;
				Data16_g117799.PivotWS = In_PivotWS16_g117799;
				Data16_g117799.PivotWO = In_PivotWO16_g117799;
				Data16_g117799.NormalWS = In_NormalWS16_g117799;
				Data16_g117799.ViewDirWS = In_ViewDirWS16_g117799;
				Data16_g117799.VertexData = In_VertexData16_g117799;
				Data16_g117799.BoundsData = In_BoundsData16_g117799;
				}
				TVEModelData Data15_g128422 = Data16_g117799;
				float Out_Dummy15_g128422 = 0;
				float3 Out_PositionWS15_g128422 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128422 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128422 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128422 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128422 = float3( 0,0,0 );
				float4 Out_VertexData15_g128422 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128422 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128422 = Data15_g128422.Dummy;
				Out_PositionWS15_g128422 = Data15_g128422.PositionWS;
				Out_PositionWO15_g128422 = Data15_g128422.PositionWO;
				Out_PivotWS15_g128422 = Data15_g128422.PivotWS;
				Out_PivotWO15_g128422 = Data15_g128422.PivotWO;
				Out_NormalWS15_g128422 = Data15_g128422.NormalWS;
				Out_ViewDirWS15_g128422 = Data15_g128422.ViewDirWS;
				Out_VertexData15_g128422 = Data15_g128422.VertexData;
				Out_BoundsData15_g128422 = Data15_g128422.BoundsData;
				}
				half3 Model_PositionWS143_g128376 = Out_PositionWS15_g128422;
				half3 Input_Position180_g128380 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128380 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_82_0_g128380 = temp_output_82_0_g128377;
				float2 temp_output_119_0_g128380 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128380).xz ) );
				float temp_output_7_0_g128385 = 1.0;
				float temp_output_9_0_g128385 = ( saturate( ( distance( Input_Position180_g128380 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128385 );
				float4 lerpResult131_g128380 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128380,temp_output_82_0_g128380, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_PaintNearTex, sampler_Linear_Repeat, temp_output_119_0_g128380,temp_output_82_0_g128380, 0.0 ) , saturate( ( temp_output_9_0_g128385 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128385 ) ) ));
				float4 temp_output_17_0_g128379 = lerpResult131_g128380;
				float4 temp_output_3_0_g128379 = TVE_PaintParams;
				float4 ifLocalVar18_g128379 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128379 >= 0.5 )
				ifLocalVar18_g128379 = temp_output_17_0_g128379;
				else
				ifLocalVar18_g128379 = temp_output_3_0_g128379;
				float4 lerpResult22_g128379 = lerp( temp_output_3_0_g128379 , temp_output_17_0_g128379 , temp_output_19_0_g128379);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128379 = lerpResult22_g128379;
				#else
				float4 staticSwitch24_g128379 = ifLocalVar18_g128379;
				#endif
				half4 Paint_Params71_g128376 = staticSwitch24_g128379;
				float4 In_PaintDataRT204_g128376 = Paint_Params71_g128376;
				float temp_output_82_0_g128423 = _GlobalGlowLayerValue;
				float temp_output_19_0_g128425 = TVE_GlowLayers[(int)temp_output_82_0_g128423];
				half3 Input_Position180_g128426 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128426 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_82_0_g128426 = temp_output_82_0_g128423;
				float2 temp_output_119_0_g128426 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128426).xz ) );
				float temp_output_7_0_g128431 = 1.0;
				float temp_output_9_0_g128431 = ( saturate( ( distance( Input_Position180_g128426 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128431 );
				float4 lerpResult131_g128426 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128426,temp_output_82_0_g128426, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_GlowNearTex, sampler_Linear_Repeat, temp_output_119_0_g128426,temp_output_82_0_g128426, 0.0 ) , saturate( ( temp_output_9_0_g128431 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128431 ) ) ));
				float4 temp_output_17_0_g128425 = lerpResult131_g128426;
				float4 temp_output_3_0_g128425 = TVE_GlowParams;
				float4 ifLocalVar18_g128425 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128425 >= 0.5 )
				ifLocalVar18_g128425 = temp_output_17_0_g128425;
				else
				ifLocalVar18_g128425 = temp_output_3_0_g128425;
				float4 lerpResult22_g128425 = lerp( temp_output_3_0_g128425 , temp_output_17_0_g128425 , temp_output_19_0_g128425);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128425 = lerpResult22_g128425;
				#else
				float4 staticSwitch24_g128425 = ifLocalVar18_g128425;
				#endif
				half4 Glow_Params248_g128376 = staticSwitch24_g128425;
				float4 In_GlowDataRT204_g128376 = Glow_Params248_g128376;
				float temp_output_132_0_g128404 = _GlobalAtmoLayerValue;
				float temp_output_19_0_g128406 = TVE_AtmoLayers[(int)temp_output_132_0_g128404];
				half3 Input_Position180_g128407 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128407 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_82_0_g128407 = temp_output_132_0_g128404;
				float2 temp_output_119_0_g128407 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128407).xz ) );
				float temp_output_7_0_g128412 = 1.0;
				float temp_output_9_0_g128412 = ( saturate( ( distance( Input_Position180_g128407 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128412 );
				float4 lerpResult131_g128407 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128407,temp_output_82_0_g128407, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_AtmoNearTex, sampler_Linear_Repeat, temp_output_119_0_g128407,temp_output_82_0_g128407, 0.0 ) , saturate( ( temp_output_9_0_g128412 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128412 ) ) ));
				float4 temp_output_17_0_g128406 = lerpResult131_g128407;
				float4 temp_output_3_0_g128406 = TVE_AtmoParams;
				float4 ifLocalVar18_g128406 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128406 >= 0.5 )
				ifLocalVar18_g128406 = temp_output_17_0_g128406;
				else
				ifLocalVar18_g128406 = temp_output_3_0_g128406;
				float4 lerpResult22_g128406 = lerp( temp_output_3_0_g128406 , temp_output_17_0_g128406 , temp_output_19_0_g128406);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128406 = lerpResult22_g128406;
				#else
				float4 staticSwitch24_g128406 = ifLocalVar18_g128406;
				#endif
				half4 Atmo_Params80_g128376 = staticSwitch24_g128406;
				float4 In_AtmoDataRT204_g128376 = Atmo_Params80_g128376;
				float temp_output_132_0_g128413 = _GlobalFadeLayerValue;
				float temp_output_19_0_g128415 = TVE_FadeLayers[(int)temp_output_132_0_g128413];
				half3 Input_Position180_g128416 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128416 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_82_0_g128416 = temp_output_132_0_g128413;
				float2 temp_output_119_0_g128416 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128416).xz ) );
				float temp_output_7_0_g128421 = 1.0;
				float temp_output_9_0_g128421 = ( saturate( ( distance( Input_Position180_g128416 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128421 );
				float4 lerpResult131_g128416 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128416,temp_output_82_0_g128416, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FadeNearTex, sampler_Linear_Repeat, temp_output_119_0_g128416,temp_output_82_0_g128416, 0.0 ) , saturate( ( temp_output_9_0_g128421 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128421 ) ) ));
				float4 temp_output_17_0_g128415 = lerpResult131_g128416;
				float4 temp_output_3_0_g128415 = TVE_FadeParams;
				float4 ifLocalVar18_g128415 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128415 >= 0.5 )
				ifLocalVar18_g128415 = temp_output_17_0_g128415;
				else
				ifLocalVar18_g128415 = temp_output_3_0_g128415;
				float4 lerpResult22_g128415 = lerp( temp_output_3_0_g128415 , temp_output_17_0_g128415 , temp_output_19_0_g128415);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128415 = lerpResult22_g128415;
				#else
				float4 staticSwitch24_g128415 = ifLocalVar18_g128415;
				#endif
				half4 Fade_Params387_g128376 = staticSwitch24_g128415;
				float4 In_FadeDataRT204_g128376 = Fade_Params387_g128376;
				float temp_output_130_0_g128395 = _GlobalFormLayerValue;
				float temp_output_19_0_g128397 = TVE_FormLayers[(int)temp_output_130_0_g128395];
				half3 Input_Position180_g128398 = Model_PositionWS143_g128376;
				float2 temp_output_75_0_g128398 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_82_0_g128398 = temp_output_130_0_g128395;
				float2 temp_output_119_0_g128398 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g128398).xz ) );
				float temp_output_7_0_g128403 = 1.0;
				float temp_output_9_0_g128403 = ( saturate( ( distance( Input_Position180_g128398 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g128403 );
				float4 lerpResult131_g128398 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormBaseTex, sampler_Linear_Clamp, temp_output_75_0_g128398,temp_output_82_0_g128398, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_FormNearTex, sampler_Linear_Repeat, temp_output_119_0_g128398,temp_output_82_0_g128398, 0.0 ) , saturate( ( temp_output_9_0_g128403 / ( TVE_RenderNearFadeValue - temp_output_7_0_g128403 ) ) ));
				float4 temp_output_17_0_g128397 = lerpResult131_g128398;
				float4 temp_output_3_0_g128397 = TVE_FormParams;
				float4 ifLocalVar18_g128397 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g128397 >= 0.5 )
				ifLocalVar18_g128397 = temp_output_17_0_g128397;
				else
				ifLocalVar18_g128397 = temp_output_3_0_g128397;
				float4 lerpResult22_g128397 = lerp( temp_output_3_0_g128397 , temp_output_17_0_g128397 , temp_output_19_0_g128397);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g128397 = lerpResult22_g128397;
				#else
				float4 staticSwitch24_g128397 = ifLocalVar18_g128397;
				#endif
				half4 Form_Params112_g128376 = staticSwitch24_g128397;
				float4 In_FormDataRT204_g128376 = Form_Params112_g128376;
				half4 Flow_Params405_g128376 = TVE_FlowParams;
				float4 In_FlowDataRT204_g128376 = Flow_Params405_g128376;
				{
				Data204_g128376.Dummy = In_Dummy204_g128376;
				Data204_g128376.CoatDataRT = In_CoatDataRT204_g128376;
				Data204_g128376.PaintDataRT = In_PaintDataRT204_g128376;
				Data204_g128376.GlowDataRT = In_GlowDataRT204_g128376;
				Data204_g128376.AtmoDataRT= In_AtmoDataRT204_g128376;
				Data204_g128376.FadeDataRT = In_FadeDataRT204_g128376;
				Data204_g128376.FormDataRT= In_FormDataRT204_g128376;
				Data204_g128376.FlowDataRT = In_FlowDataRT204_g128376;
				}
				TVEGlobalData Data15_g128572 = Data204_g128376;
				float Out_Dummy15_g128572 = 0;
				float4 Out_CoatDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128572 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128572 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128572 = Data15_g128572.Dummy;
				Out_CoatDataRT15_g128572 = Data15_g128572.CoatDataRT;
				Out_PaintDataRT15_g128572 = Data15_g128572.PaintDataRT;
				Out_GlowDataRT15_g128572= Data15_g128572.GlowDataRT;
				Out_AtmoDataRT15_g128572= Data15_g128572.AtmoDataRT;
				Out_FadeDataRT15_g128572= Data15_g128572.FadeDataRT;
				Out_FormDataRT15_g128572 = Data15_g128572.FormDataRT;
				Out_FlowDataRT15_g128572 = Data15_g128572.FlowDataRT;
				}
				half4 Global_PaintParams209_g128571 = Out_PaintDataRT15_g128572;
				float4 temp_output_6_0_g128589 = Global_PaintParams209_g128571;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128589 = ( temp_output_6_0_g128589 + _TintingElementMode );
				#else
				float4 staticSwitch14_g128589 = temp_output_6_0_g128589;
				#endif
				#ifdef TVE_TINTING_ELEMENT
				float4 staticSwitch283_g128571 = staticSwitch14_g128589;
				#else
				float4 staticSwitch283_g128571 = TVE_PaintParams;
				#endif
				float4 lerpResult412_g128571 = lerp( float4( 1,1,1,1 ) , staticSwitch283_g128571 , ( _TintingGlobalValue * TVE_IsEnabled ));
				half Tinting_GlobalValue285_g128571 = saturate( (lerpResult412_g128571).w );
				float3 lerpResult368_g128571 = lerp( Visual_Albedo139_g128571 , temp_cast_10 , ( Tinting_GlobalValue285_g128571 * _TintingGrayValue ));
				half3 Tinting_GlobalColor290_g128571 = (lerpResult412_g128571).xyz;
				float temp_output_200_11_g128571 = Out_MultiMask4_g128575;
				half Visual_MultiMask181_g128571 = temp_output_200_11_g128571;
				float lerpResult147_g128571 = lerp( 1.0 , Visual_MultiMask181_g128571 , _TintingMultiValue);
				half Tinting_MutiMask121_g128571 = lerpResult147_g128571;
				half Tinting_TexMask385_g128571 = 1.0;
				float temp_output_200_15_g128571 = Out_Luminosity4_g128575;
				half Visual_Luminosity257_g128571 = temp_output_200_15_g128571;
				float clampResult17_g128582 = clamp( Visual_Luminosity257_g128571 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128586 = _TintingLumaRemap.x;
				float temp_output_9_0_g128586 = ( clampResult17_g128582 - temp_output_7_0_g128586 );
				float lerpResult228_g128571 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128586 * _TintingLumaRemap.z ) + 0.0001 ) ) , _TintingLumaValue);
				half Tinting_LumaMask153_g128571 = lerpResult228_g128571;
				half Tinting_VertMask309_g128571 = 1.0;
				half Tinting_NoiseMask213_g128571 = 1.0;
				half Custom_Mask345_g128571 = 1.0;
				half Tinting_CoreMasks433_g128571 = ( Tinting_MutiMask121_g128571 * Tinting_TexMask385_g128571 * Tinting_LumaMask153_g128571 * Tinting_VertMask309_g128571 * Tinting_NoiseMask213_g128571 * Custom_Mask345_g128571 );
				float temp_output_7_0_g128593 = _TintingBlendRemap.x;
				float temp_output_9_0_g128593 = ( ( _TintingIntensityValue * Tinting_CoreMasks433_g128571 * Tinting_GlobalValue285_g128571 ) - temp_output_7_0_g128593 );
				half Tinting_Mask242_g128571 = ( saturate( ( ( temp_output_9_0_g128593 * _TintingBlendRemap.z ) + 0.0001 ) ) * TVE_IsEnabled );
				float3 lerpResult90_g128571 = lerp( Visual_Albedo139_g128571 , ( lerpResult368_g128571 * 4.594794 * Tinting_GlobalColor290_g128571 * (_TintingColor).rgb ) , Tinting_Mask242_g128571);
				#ifdef TVE_TINTING
				float3 staticSwitch286_g128571 = lerpResult90_g128571;
				#else
				float3 staticSwitch286_g128571 = Visual_Albedo139_g128571;
				#endif
				half3 Final_Albedo97_g128571 = staticSwitch286_g128571;
				float3 In_Albedo3_g128591 = Final_Albedo97_g128571;
				float3 In_AlbedoRaw3_g128591 = Out_AlbedoRaw4_g128575;
				float2 In_NormalTS3_g128591 = Out_NormalTS4_g128575;
				float3 In_NormalWS3_g128591 = Out_NormalWS4_g128575;
				float4 In_Shader3_g128591 = Out_Shader4_g128575;
				float4 In_Emissive3_g128591 = Out_Emissive4_g128575;
				float In_Grayscale3_g128591 = temp_output_200_12_g128571;
				float In_Luminosity3_g128591 = temp_output_200_15_g128571;
				float In_MultiMask3_g128591 = temp_output_200_11_g128571;
				float In_AlphaClip3_g128591 = Out_AlphaClip4_g128575;
				float In_AlphaFade3_g128591 = Out_AlphaFade4_g128575;
				float3 In_Translucency3_g128591 = Out_Translucency4_g128575;
				float In_Transmission3_g128591 = Out_Transmission4_g128575;
				float In_Thickness3_g128591 = Out_Thickness4_g128575;
				float In_Diffusion3_g128591 = Out_Diffusion4_g128575;
				float In_Depth3_g128591 = Out_Depth4_g128575;
				{
				Data3_g128591.Dummy = In_Dummy3_g128591;
				Data3_g128591.Albedo = In_Albedo3_g128591;
				Data3_g128591.AlbedoRaw = In_AlbedoRaw3_g128591;
				Data3_g128591.NormalTS = In_NormalTS3_g128591;
				Data3_g128591.NormalWS = In_NormalWS3_g128591;
				Data3_g128591.Shader = In_Shader3_g128591;
				Data3_g128591.Emissive= In_Emissive3_g128591;
				Data3_g128591.MultiMask = In_MultiMask3_g128591;
				Data3_g128591.Grayscale = In_Grayscale3_g128591;
				Data3_g128591.Luminosity = In_Luminosity3_g128591;
				Data3_g128591.AlphaClip = In_AlphaClip3_g128591;
				Data3_g128591.AlphaFade = In_AlphaFade3_g128591;
				Data3_g128591.Translucency = In_Translucency3_g128591;
				Data3_g128591.Transmission = In_Transmission3_g128591;
				Data3_g128591.Thickness = In_Thickness3_g128591;
				Data3_g128591.Diffusion = In_Diffusion3_g128591;
				Data3_g128591.Depth = In_Depth3_g128591;
				}
				TVEVisualData Data4_g128598 = Data3_g128591;
				float Out_Dummy4_g128598 = 0;
				float3 Out_Albedo4_g128598 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128598 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128598 = float2( 0,0 );
				float3 Out_NormalWS4_g128598 = float3( 0,0,0 );
				float4 Out_Shader4_g128598 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128598 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128598 = 0;
				float Out_Grayscale4_g128598 = 0;
				float Out_Luminosity4_g128598 = 0;
				float Out_AlphaClip4_g128598 = 0;
				float Out_AlphaFade4_g128598 = 0;
				float3 Out_Translucency4_g128598 = float3( 0,0,0 );
				float Out_Transmission4_g128598 = 0;
				float Out_Thickness4_g128598 = 0;
				float Out_Diffusion4_g128598 = 0;
				float Out_Depth4_g128598 = 0;
				{
				Out_Dummy4_g128598 = Data4_g128598.Dummy;
				Out_Albedo4_g128598 = Data4_g128598.Albedo;
				Out_AlbedoRaw4_g128598 = Data4_g128598.AlbedoRaw;
				Out_NormalTS4_g128598 = Data4_g128598.NormalTS;
				Out_NormalWS4_g128598 = Data4_g128598.NormalWS;
				Out_Shader4_g128598 = Data4_g128598.Shader;
				Out_Emissive4_g128598= Data4_g128598.Emissive;
				Out_MultiMask4_g128598 = Data4_g128598.MultiMask;
				Out_Grayscale4_g128598 = Data4_g128598.Grayscale;
				Out_Luminosity4_g128598= Data4_g128598.Luminosity;
				Out_AlphaClip4_g128598 = Data4_g128598.AlphaClip;
				Out_AlphaFade4_g128598 = Data4_g128598.AlphaFade;
				Out_Translucency4_g128598 = Data4_g128598.Translucency;
				Out_Transmission4_g128598 = Data4_g128598.Transmission;
				Out_Thickness4_g128598 = Data4_g128598.Thickness;
				Out_Diffusion4_g128598 = Data4_g128598.Diffusion;
				Out_Depth4_g128598= Data4_g128598.Depth;
				}
				half3 Visual_Albedo292_g128596 = Out_Albedo4_g128598;
				float temp_output_280_12_g128596 = Out_Grayscale4_g128598;
				half Visual_Grayscale308_g128596 = temp_output_280_12_g128596;
				float3 temp_cast_32 = (Visual_Grayscale308_g128596).xxx;
				TVEGlobalData Data15_g128597 = Data204_g128376;
				float Out_Dummy15_g128597 = 0;
				float4 Out_CoatDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128597 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128597 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128597 = Data15_g128597.Dummy;
				Out_CoatDataRT15_g128597 = Data15_g128597.CoatDataRT;
				Out_PaintDataRT15_g128597 = Data15_g128597.PaintDataRT;
				Out_GlowDataRT15_g128597= Data15_g128597.GlowDataRT;
				Out_AtmoDataRT15_g128597= Data15_g128597.AtmoDataRT;
				Out_FadeDataRT15_g128597= Data15_g128597.FadeDataRT;
				Out_FormDataRT15_g128597 = Data15_g128597.FormDataRT;
				Out_FlowDataRT15_g128597 = Data15_g128597.FlowDataRT;
				}
				half4 Global_AtmoParams314_g128596 = Out_AtmoDataRT15_g128597;
				float temp_output_6_0_g128615 = (Global_AtmoParams314_g128596).x;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128615 = ( temp_output_6_0_g128615 + _DrynessElementMode );
				#else
				float staticSwitch14_g128615 = temp_output_6_0_g128615;
				#endif
				#ifdef TVE_DRYNESS_ELEMENT
				float staticSwitch351_g128596 = staticSwitch14_g128615;
				#else
				float staticSwitch351_g128596 = TVE_AtmoParams.x;
				#endif
				float lerpResult505_g128596 = lerp( 1.0 , ( staticSwitch351_g128596 * TVE_IsEnabled ) , _DrynessGlobalValue);
				half Dryness_GlobalValue352_g128596 = lerpResult505_g128596;
				float3 lerpResult485_g128596 = lerp( Visual_Albedo292_g128596 , temp_cast_32 , ( Dryness_GlobalValue352_g128596 * _DrynessGrayValue ));
				half Dryness_TexMask478_g128596 = 1.0;
				float temp_output_280_11_g128596 = Out_MultiMask4_g128598;
				half Visual_MultiMask310_g128596 = temp_output_280_11_g128596;
				float lerpResult283_g128596 = lerp( 1.0 , Visual_MultiMask310_g128596 , _DrynessMultiValue);
				half Dryness_MultiMask302_g128596 = lerpResult283_g128596;
				float temp_output_280_15_g128596 = Out_Luminosity4_g128598;
				half Visual_Luminosity309_g128596 = temp_output_280_15_g128596;
				float clampResult17_g128608 = clamp( Visual_Luminosity309_g128596 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128612 = _DrynessLumaRemap.x;
				float temp_output_9_0_g128612 = ( clampResult17_g128608 - temp_output_7_0_g128612 );
				float lerpResult295_g128596 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128612 * _DrynessLumaRemap.z ) + 0.0001 ) ) , _DrynessLumaValue);
				half Dryness_LumaMask301_g128596 = lerpResult295_g128596;
				half Dryness_VertMask378_g128596 = 1.0;
				half Dryness_MaskNoise291_g128596 = 1.0;
				half Custom_Mask411_g128596 = 1.0;
				float temp_output_7_0_g128617 = _DrynessBlendRemap.x;
				float temp_output_9_0_g128617 = ( ( _DrynessIntensityValue * Dryness_TexMask478_g128596 * Dryness_MultiMask302_g128596 * Dryness_LumaMask301_g128596 * Dryness_VertMask378_g128596 * Dryness_MaskNoise291_g128596 * Dryness_GlobalValue352_g128596 * Custom_Mask411_g128596 ) - temp_output_7_0_g128617 );
				half Dryness_Mask329_g128596 = saturate( ( ( temp_output_9_0_g128617 * _DrynessBlendRemap.z ) + 0.0001 ) );
				float3 lerpResult336_g128596 = lerp( Visual_Albedo292_g128596 , ( lerpResult485_g128596 * 4.594794 * (_DrynessColor).rgb ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float3 staticSwitch356_g128596 = lerpResult336_g128596;
				#else
				float3 staticSwitch356_g128596 = Visual_Albedo292_g128596;
				#endif
				half3 Final_Albedo331_g128596 = staticSwitch356_g128596;
				float3 In_Albedo3_g128599 = Final_Albedo331_g128596;
				float3 In_AlbedoRaw3_g128599 = Out_AlbedoRaw4_g128598;
				float2 In_NormalTS3_g128599 = Out_NormalTS4_g128598;
				float3 In_NormalWS3_g128599 = Out_NormalWS4_g128598;
				half4 Visual_Shader415_g128596 = Out_Shader4_g128598;
				float4 break438_g128596 = Visual_Shader415_g128596;
				float4 appendResult439_g128596 = (float4(break438_g128596.x , break438_g128596.y , break438_g128596.z , ( break438_g128596.w * _DrynessSmoothnessValue )));
				float4 lerpResult427_g128596 = lerp( Visual_Shader415_g128596 , appendResult439_g128596 , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float4 staticSwitch426_g128596 = lerpResult427_g128596;
				#else
				float4 staticSwitch426_g128596 = Visual_Shader415_g128596;
				#endif
				half4 Final_Shader433_g128596 = staticSwitch426_g128596;
				float4 In_Shader3_g128599 = Final_Shader433_g128596;
				float4 In_Emissive3_g128599 = Out_Emissive4_g128598;
				float In_Grayscale3_g128599 = temp_output_280_12_g128596;
				float In_Luminosity3_g128599 = temp_output_280_15_g128596;
				float In_MultiMask3_g128599 = temp_output_280_11_g128596;
				float In_AlphaClip3_g128599 = Out_AlphaClip4_g128598;
				float In_AlphaFade3_g128599 = Out_AlphaFade4_g128598;
				float3 In_Translucency3_g128599 = Out_Translucency4_g128598;
				half Visual_Transmission416_g128596 = Out_Transmission4_g128598;
				float lerpResult421_g128596 = lerp( Visual_Transmission416_g128596 , ( Visual_Transmission416_g128596 * _DrynessSubsurfaceValue ) , Dryness_Mask329_g128596);
				#ifdef TVE_DRYNESS
				float staticSwitch418_g128596 = lerpResult421_g128596;
				#else
				float staticSwitch418_g128596 = Visual_Transmission416_g128596;
				#endif
				half Final_Transmission425_g128596 = staticSwitch418_g128596;
				float In_Transmission3_g128599 = Final_Transmission425_g128596;
				float In_Thickness3_g128599 = Out_Thickness4_g128598;
				float In_Diffusion3_g128599 = Out_Diffusion4_g128598;
				float In_Depth3_g128599 = Out_Depth4_g128598;
				{
				Data3_g128599.Dummy = In_Dummy3_g128599;
				Data3_g128599.Albedo = In_Albedo3_g128599;
				Data3_g128599.AlbedoRaw = In_AlbedoRaw3_g128599;
				Data3_g128599.NormalTS = In_NormalTS3_g128599;
				Data3_g128599.NormalWS = In_NormalWS3_g128599;
				Data3_g128599.Shader = In_Shader3_g128599;
				Data3_g128599.Emissive= In_Emissive3_g128599;
				Data3_g128599.MultiMask = In_MultiMask3_g128599;
				Data3_g128599.Grayscale = In_Grayscale3_g128599;
				Data3_g128599.Luminosity = In_Luminosity3_g128599;
				Data3_g128599.AlphaClip = In_AlphaClip3_g128599;
				Data3_g128599.AlphaFade = In_AlphaFade3_g128599;
				Data3_g128599.Translucency = In_Translucency3_g128599;
				Data3_g128599.Transmission = In_Transmission3_g128599;
				Data3_g128599.Thickness = In_Thickness3_g128599;
				Data3_g128599.Diffusion = In_Diffusion3_g128599;
				Data3_g128599.Depth = In_Depth3_g128599;
				}
				TVEVisualData Data4_g128621 = Data3_g128599;
				float Out_Dummy4_g128621 = 0;
				float3 Out_Albedo4_g128621 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128621 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128621 = float2( 0,0 );
				float3 Out_NormalWS4_g128621 = float3( 0,0,0 );
				float4 Out_Shader4_g128621 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128621 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128621 = 0;
				float Out_Grayscale4_g128621 = 0;
				float Out_Luminosity4_g128621 = 0;
				float Out_AlphaClip4_g128621 = 0;
				float Out_AlphaFade4_g128621 = 0;
				float3 Out_Translucency4_g128621 = float3( 0,0,0 );
				float Out_Transmission4_g128621 = 0;
				float Out_Thickness4_g128621 = 0;
				float Out_Diffusion4_g128621 = 0;
				float Out_Depth4_g128621 = 0;
				{
				Out_Dummy4_g128621 = Data4_g128621.Dummy;
				Out_Albedo4_g128621 = Data4_g128621.Albedo;
				Out_AlbedoRaw4_g128621 = Data4_g128621.AlbedoRaw;
				Out_NormalTS4_g128621 = Data4_g128621.NormalTS;
				Out_NormalWS4_g128621 = Data4_g128621.NormalWS;
				Out_Shader4_g128621 = Data4_g128621.Shader;
				Out_Emissive4_g128621= Data4_g128621.Emissive;
				Out_MultiMask4_g128621 = Data4_g128621.MultiMask;
				Out_Grayscale4_g128621 = Data4_g128621.Grayscale;
				Out_Luminosity4_g128621= Data4_g128621.Luminosity;
				Out_AlphaClip4_g128621 = Data4_g128621.AlphaClip;
				Out_AlphaFade4_g128621 = Data4_g128621.AlphaFade;
				Out_Translucency4_g128621 = Data4_g128621.Translucency;
				Out_Transmission4_g128621 = Data4_g128621.Transmission;
				Out_Thickness4_g128621 = Data4_g128621.Thickness;
				Out_Diffusion4_g128621 = Data4_g128621.Diffusion;
				Out_Depth4_g128621= Data4_g128621.Depth;
				}
				half3 Visual_Albedo127_g128620 = Out_Albedo4_g128621;
				float3 temp_output_622_0_g128620 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g128624) = _OverlayAlbedoTex;
				float localFilterTexture19_g128635 = ( 0.0 );
				SamplerState SS19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerDefault19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g128635 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g128635 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g128635 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g128635 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS19_g128635 = SamplerDefault19_g128635;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g128635 = SamplerDefault19_g128635;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g128635 = SamplerPoint19_g128635;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g128635 = SamplerLow19_g128635;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g128635 = SamplerMedium19_g128635;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g128635 = SamplerHigh19_g128635;
				#endif
				}
				SamplerState Sampler238_g128624 = SS19_g128635;
				float4 temp_output_6_0_g128625 = _overlay_coord_value;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128625 = ( temp_output_6_0_g128625 + ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) );
				#else
				float4 staticSwitch14_g128625 = temp_output_6_0_g128625;
				#endif
				half4 Overlay_Coords639_g128620 = staticSwitch14_g128625;
				float4 temp_output_37_0_g128624 = Overlay_Coords639_g128620;
				half4 Coords238_g128624 = temp_output_37_0_g128624;
				TVEModelData Data15_g128637 = Data16_g117799;
				float Out_Dummy15_g128637 = 0;
				float3 Out_PositionWS15_g128637 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128637 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128637 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128637 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128637 = float3( 0,0,0 );
				float4 Out_VertexData15_g128637 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128637 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128637 = Data15_g128637.Dummy;
				Out_PositionWS15_g128637 = Data15_g128637.PositionWS;
				Out_PositionWO15_g128637 = Data15_g128637.PositionWO;
				Out_PivotWS15_g128637 = Data15_g128637.PivotWS;
				Out_PivotWO15_g128637 = Data15_g128637.PivotWO;
				Out_NormalWS15_g128637 = Data15_g128637.NormalWS;
				Out_ViewDirWS15_g128637 = Data15_g128637.ViewDirWS;
				Out_VertexData15_g128637 = Data15_g128637.VertexData;
				Out_BoundsData15_g128637 = Data15_g128637.BoundsData;
				}
				half3 Model_PositionWO602_g128620 = Out_PositionWO15_g128637;
				float3 temp_output_279_0_g128624 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128624 = temp_output_279_0_g128624;
				half4 localSamplePlanar2D238_g128624 = SamplePlanar2D( Texture238_g128624 , Sampler238_g128624 , Coords238_g128624 , WorldPosition238_g128624 );
				TEXTURE2D(Texture246_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler246_g128624 = SS19_g128635;
				half4 Coords246_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition246_g128624 = temp_output_279_0_g128624;
				half3 Model_NormalWS712_g128620 = Out_NormalWS15_g128637;
				float3 temp_output_280_0_g128624 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128624 = temp_output_280_0_g128624;
				half4 localSamplePlanar3D246_g128624 = SamplePlanar3D( Texture246_g128624 , Sampler246_g128624 , Coords246_g128624 , WorldPosition246_g128624 , WorldNormal246_g128624 );
				TEXTURE2D(Texture234_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler234_g128624 = SS19_g128635;
				float4 Coords234_g128624 = temp_output_37_0_g128624;
				float3 WorldPosition234_g128624 = temp_output_279_0_g128624;
				float4 localSampleStochastic2D234_g128624 = SampleStochastic2D( Texture234_g128624 , Sampler234_g128624 , Coords234_g128624 , WorldPosition234_g128624 );
				TEXTURE2D(Texture263_g128624) = _OverlayAlbedoTex;
				SamplerState Sampler263_g128624 = SS19_g128635;
				half4 Coords263_g128624 = temp_output_37_0_g128624;
				half3 WorldPosition263_g128624 = temp_output_279_0_g128624;
				half3 WorldNormal263_g128624 = temp_output_280_0_g128624;
				half4 localSampleStochastic3D263_g128624 = SampleStochastic3D( Texture263_g128624 , Sampler263_g128624 , Coords263_g128624 , WorldPosition263_g128624 , WorldNormal263_g128624 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g128620 = localSamplePlanar3D246_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g128620 = localSampleStochastic2D234_g128624;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g128620 = localSampleStochastic3D263_g128624;
				#else
				float4 staticSwitch676_g128620 = localSamplePlanar2D238_g128624;
				#endif
				half3 Overlay_Albedo526_g128620 = (staticSwitch676_g128620).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g128620 = ( temp_output_622_0_g128620 * Overlay_Albedo526_g128620 );
				#else
				float3 staticSwitch578_g128620 = temp_output_622_0_g128620;
				#endif
				float3 temp_output_6_0_g128638 = staticSwitch578_g128620;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128638 = ( temp_output_6_0_g128638 + _OverlayTextureMode );
				#else
				float3 staticSwitch14_g128638 = temp_output_6_0_g128638;
				#endif
				float3 temp_cast_33 = (0.0).xxx;
				TEXTURE2D(Texture246_g128628) = _OverlayGlitterTexRT;
				SamplerState Sampler246_g128628 = sampler_Linear_Repeat;
				float4 appendResult863_g128620 = (float4(_OverlayGlitterTillingValue , _OverlayGlitterTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128628 = appendResult863_g128620;
				half4 Coords246_g128628 = temp_output_37_0_g128628;
				float3 temp_output_279_0_g128628 = Model_PositionWO602_g128620;
				half3 WorldPosition246_g128628 = temp_output_279_0_g128628;
				float3 temp_output_280_0_g128628 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128628 = temp_output_280_0_g128628;
				half4 localSamplePlanar3D246_g128628 = SamplePlanar3D( Texture246_g128628 , Sampler246_g128628 , Coords246_g128628 , WorldPosition246_g128628 , WorldNormal246_g128628 );
				half Overlay_GlitterTex854_g128620 = (localSamplePlanar3D246_g128628).x;
				half3 Model_PositionWS879_g128620 = Out_PositionWS15_g128637;
				#ifdef TVE_OVERLAY_GLITTER
				float3 staticSwitch868_g128620 = ( _OverlayGlitterIntensityValue * (_OverlayGlitterColor).rgb * Overlay_GlitterTex854_g128620 * ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS879_g128620 ) / _OverlayGlitterDistValue ) ) ) );
				#else
				float3 staticSwitch868_g128620 = temp_cast_33;
				#endif
				half3 Overlay_GlitterColor865_g128620 = staticSwitch868_g128620;
				half Overlay_TexMask908_g128620 = 1.0;
				float3 temp_output_739_21_g128620 = Out_NormalWS4_g128621;
				half3 Visual_NormalWS749_g128620 = temp_output_739_21_g128620;
				float clampResult17_g128644 = clamp( saturate( (Visual_NormalWS749_g128620).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128648 = _OverlayProjRemap.x;
				float temp_output_9_0_g128648 = ( clampResult17_g128644 - temp_output_7_0_g128648 );
				float lerpResult842_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128648 * _OverlayProjRemap.z ) + 0.0001 ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g128620 = lerpResult842_g128620;
				float temp_output_739_15_g128620 = Out_Luminosity4_g128621;
				half Visual_Luminosity654_g128620 = temp_output_739_15_g128620;
				float clampResult17_g128652 = clamp( Visual_Luminosity654_g128620 , 0.0001 , 0.9999 );
				float temp_output_7_0_g128653 = _OverlayLumaRemap.x;
				float temp_output_9_0_g128653 = ( clampResult17_g128652 - temp_output_7_0_g128653 );
				float lerpResult587_g128620 = lerp( 1.0 , saturate( ( ( temp_output_9_0_g128653 * _OverlayLumaRemap.z ) + 0.0001 ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g128620 = lerpResult587_g128620;
				half Overlay_VertMask801_g128620 = 1.0;
				half Overlay_MaskNoise427_g128620 = 1.0;
				TVEGlobalData Data15_g128622 = Data204_g128376;
				float Out_Dummy15_g128622 = 0;
				float4 Out_CoatDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128622 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128622 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128622 = Data15_g128622.Dummy;
				Out_CoatDataRT15_g128622 = Data15_g128622.CoatDataRT;
				Out_PaintDataRT15_g128622 = Data15_g128622.PaintDataRT;
				Out_GlowDataRT15_g128622= Data15_g128622.GlowDataRT;
				Out_AtmoDataRT15_g128622= Data15_g128622.AtmoDataRT;
				Out_FadeDataRT15_g128622= Data15_g128622.FadeDataRT;
				Out_FormDataRT15_g128622 = Data15_g128622.FormDataRT;
				Out_FlowDataRT15_g128622 = Data15_g128622.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128620 = Out_AtmoDataRT15_g128622;
				float temp_output_6_0_g128654 = (Global_AtmoParams516_g128620).z;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128654 = ( temp_output_6_0_g128654 + _OverlayElementMode );
				#else
				float staticSwitch14_g128654 = temp_output_6_0_g128654;
				#endif
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g128620 = staticSwitch14_g128654;
				#else
				float staticSwitch705_g128620 = TVE_AtmoParams.z;
				#endif
				float lerpResult937_g128620 = lerp( 1.0 , ( staticSwitch705_g128620 * TVE_IsEnabled ) , _OverlayGlobalValue);
				half Overlay_MaskGlobal429_g128620 = lerpResult937_g128620;
				half Custom_Mask646_g128620 = 1.0;
				float temp_output_7_0_g128651 = _OverlayBlendRemap.x;
				float temp_output_9_0_g128651 = ( ( _OverlayIntensityValue * Overlay_TexMask908_g128620 * Overlay_MaskProj457_g128620 * Overlay_MaskLuma438_g128620 * Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 * Custom_Mask646_g128620 ) - temp_output_7_0_g128651 );
				half Overlay_Mask494_g128620 = saturate( ( ( temp_output_9_0_g128651 / ( _OverlayBlendRemap.y - temp_output_7_0_g128651 ) ) + 0.0001 ) );
				float3 lerpResult467_g128620 = lerp( Visual_Albedo127_g128620 , ( staticSwitch14_g128638 + Overlay_GlitterColor865_g128620 ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g128620 = lerpResult467_g128620;
				#else
				float3 staticSwitch577_g128620 = Visual_Albedo127_g128620;
				#endif
				half3 Final_Albedo493_g128620 = staticSwitch577_g128620;
				float3 In_Albedo3_g128623 = Final_Albedo493_g128620;
				float3 In_AlbedoRaw3_g128623 = Out_AlbedoRaw4_g128621;
				half2 Visual_NormalTS535_g128620 = Out_NormalTS4_g128621;
				TEXTURE2D(Texture238_g128626) = _OverlayNormalTex;
				float localFilterTexture29_g128636 = ( 0.0 );
				SamplerState SS29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerDefault29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g128636 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g128636 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g128636 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g128636 = sampler_Linear_Repeat_Aniso8;
				{
				//SamplerState SS29_g128636 = SamplerDefault29_g128636;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g128636 = SamplerDefault29_g128636;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g128636 = SamplerPoint29_g128636;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g128636 = SamplerLow29_g128636;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g128636 = SamplerMedium29_g128636;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g128636 = SamplerHigh29_g128636;
				#endif
				}
				SamplerState Sampler238_g128626 = SS29_g128636;
				float4 temp_output_37_0_g128626 = Overlay_Coords639_g128620;
				half4 Coords238_g128626 = temp_output_37_0_g128626;
				float3 temp_output_279_0_g128626 = Model_PositionWO602_g128620;
				half3 WorldPosition238_g128626 = temp_output_279_0_g128626;
				half4 localSamplePlanar2D238_g128626 = SamplePlanar2D( Texture238_g128626 , Sampler238_g128626 , Coords238_g128626 , WorldPosition238_g128626 );
				TEXTURE2D(Texture246_g128626) = _OverlayNormalTex;
				SamplerState Sampler246_g128626 = SS29_g128636;
				half4 Coords246_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition246_g128626 = temp_output_279_0_g128626;
				float3 temp_output_280_0_g128626 = Model_NormalWS712_g128620;
				half3 WorldNormal246_g128626 = temp_output_280_0_g128626;
				half4 localSamplePlanar3D246_g128626 = SamplePlanar3D( Texture246_g128626 , Sampler246_g128626 , Coords246_g128626 , WorldPosition246_g128626 , WorldNormal246_g128626 );
				TEXTURE2D(Texture234_g128626) = _OverlayNormalTex;
				SamplerState Sampler234_g128626 = SS29_g128636;
				float4 Coords234_g128626 = temp_output_37_0_g128626;
				float3 WorldPosition234_g128626 = temp_output_279_0_g128626;
				float4 localSampleStochastic2D234_g128626 = SampleStochastic2D( Texture234_g128626 , Sampler234_g128626 , Coords234_g128626 , WorldPosition234_g128626 );
				TEXTURE2D(Texture263_g128626) = _OverlayNormalTex;
				SamplerState Sampler263_g128626 = SS29_g128636;
				half4 Coords263_g128626 = temp_output_37_0_g128626;
				half3 WorldPosition263_g128626 = temp_output_279_0_g128626;
				half3 WorldNormal263_g128626 = temp_output_280_0_g128626;
				half4 localSampleStochastic3D263_g128626 = SampleStochastic3D( Texture263_g128626 , Sampler263_g128626 , Coords263_g128626 , WorldPosition263_g128626 , WorldNormal263_g128626 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g128620 = localSamplePlanar3D246_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g128620 = localSampleStochastic2D234_g128626;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g128620 = localSampleStochastic3D263_g128626;
				#else
				float4 staticSwitch686_g128620 = localSamplePlanar2D238_g128626;
				#endif
				half4 Normal_Packed45_g128629 = staticSwitch686_g128620;
				float2 appendResult58_g128629 = (float2(( (Normal_Packed45_g128629).x * (Normal_Packed45_g128629).w ) , (Normal_Packed45_g128629).y));
				half2 Normal_Default50_g128629 = appendResult58_g128629;
				half2 Normal_ASTC41_g128629 = (Normal_Packed45_g128629).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g128629 = Normal_ASTC41_g128629;
				#else
				float2 staticSwitch38_g128629 = Normal_Default50_g128629;
				#endif
				half2 Normal_NO_DTX544_g128629 = (Normal_Packed45_g128629).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g128629 = Normal_NO_DTX544_g128629;
				#else
				float2 staticSwitch37_g128629 = staticSwitch38_g128629;
				#endif
				float2 temp_output_623_0_g128620 = (staticSwitch37_g128629*2.0 + -1.0);
				half2 Overlay_Normal528_g128620 = temp_output_623_0_g128620;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g128620 = Overlay_Normal528_g128620;
				#else
				float2 staticSwitch579_g128620 = Visual_NormalTS535_g128620;
				#endif
				float2 lerpResult551_g128620 = lerp( Visual_NormalTS535_g128620 , ( staticSwitch579_g128620 * _OverlayNormalValue ) , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g128620 = lerpResult551_g128620;
				#else
				float2 staticSwitch583_g128620 = Visual_NormalTS535_g128620;
				#endif
				half2 Final_NormalTS499_g128620 = staticSwitch583_g128620;
				float2 In_NormalTS3_g128623 = Final_NormalTS499_g128620;
				float3 In_NormalWS3_g128623 = temp_output_739_21_g128620;
				half4 Visual_Masks536_g128620 = Out_Shader4_g128621;
				float4 appendResult585_g128620 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g128620 = lerp( Visual_Masks536_g128620 , appendResult585_g128620 , Overlay_Mask494_g128620);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g128620 = lerpResult584_g128620;
				#else
				float4 staticSwitch586_g128620 = Visual_Masks536_g128620;
				#endif
				half4 Final_Masks482_g128620 = staticSwitch586_g128620;
				float4 In_Shader3_g128623 = Final_Masks482_g128620;
				float4 In_Emissive3_g128623 = Out_Emissive4_g128621;
				float temp_output_739_12_g128620 = Out_Grayscale4_g128621;
				float In_Grayscale3_g128623 = temp_output_739_12_g128620;
				float In_Luminosity3_g128623 = temp_output_739_15_g128620;
				float In_MultiMask3_g128623 = Out_MultiMask4_g128621;
				float In_AlphaClip3_g128623 = Out_AlphaClip4_g128621;
				float In_AlphaFade3_g128623 = Out_AlphaFade4_g128621;
				float3 In_Translucency3_g128623 = Out_Translucency4_g128621;
				half Visual_Transmission699_g128620 = Out_Transmission4_g128621;
				float lerpResult746_g128620 = lerp( Visual_Transmission699_g128620 , ( Visual_Transmission699_g128620 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g128620 * Overlay_MaskNoise427_g128620 * Overlay_MaskGlobal429_g128620 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g128620 = lerpResult746_g128620;
				#else
				float staticSwitch703_g128620 = Visual_Transmission699_g128620;
				#endif
				half Final_Transmission702_g128620 = staticSwitch703_g128620;
				float In_Transmission3_g128623 = Final_Transmission702_g128620;
				float In_Thickness3_g128623 = Out_Thickness4_g128621;
				float In_Diffusion3_g128623 = Out_Diffusion4_g128621;
				float In_Depth3_g128623 = Out_Depth4_g128621;
				{
				Data3_g128623.Dummy = In_Dummy3_g128623;
				Data3_g128623.Albedo = In_Albedo3_g128623;
				Data3_g128623.AlbedoRaw = In_AlbedoRaw3_g128623;
				Data3_g128623.NormalTS = In_NormalTS3_g128623;
				Data3_g128623.NormalWS = In_NormalWS3_g128623;
				Data3_g128623.Shader = In_Shader3_g128623;
				Data3_g128623.Emissive= In_Emissive3_g128623;
				Data3_g128623.MultiMask = In_MultiMask3_g128623;
				Data3_g128623.Grayscale = In_Grayscale3_g128623;
				Data3_g128623.Luminosity = In_Luminosity3_g128623;
				Data3_g128623.AlphaClip = In_AlphaClip3_g128623;
				Data3_g128623.AlphaFade = In_AlphaFade3_g128623;
				Data3_g128623.Translucency = In_Translucency3_g128623;
				Data3_g128623.Transmission = In_Transmission3_g128623;
				Data3_g128623.Thickness = In_Thickness3_g128623;
				Data3_g128623.Diffusion = In_Diffusion3_g128623;
				Data3_g128623.Depth = In_Depth3_g128623;
				}
				TVEVisualData Data4_g128658 = Data3_g128623;
				float Out_Dummy4_g128658 = 0;
				float3 Out_Albedo4_g128658 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128658 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128658 = float2( 0,0 );
				float3 Out_NormalWS4_g128658 = float3( 0,0,0 );
				float4 Out_Shader4_g128658 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128658 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128658 = 0;
				float Out_Grayscale4_g128658 = 0;
				float Out_Luminosity4_g128658 = 0;
				float Out_AlphaClip4_g128658 = 0;
				float Out_AlphaFade4_g128658 = 0;
				float3 Out_Translucency4_g128658 = float3( 0,0,0 );
				float Out_Transmission4_g128658 = 0;
				float Out_Thickness4_g128658 = 0;
				float Out_Diffusion4_g128658 = 0;
				float Out_Depth4_g128658 = 0;
				{
				Out_Dummy4_g128658 = Data4_g128658.Dummy;
				Out_Albedo4_g128658 = Data4_g128658.Albedo;
				Out_AlbedoRaw4_g128658 = Data4_g128658.AlbedoRaw;
				Out_NormalTS4_g128658 = Data4_g128658.NormalTS;
				Out_NormalWS4_g128658 = Data4_g128658.NormalWS;
				Out_Shader4_g128658 = Data4_g128658.Shader;
				Out_Emissive4_g128658= Data4_g128658.Emissive;
				Out_MultiMask4_g128658 = Data4_g128658.MultiMask;
				Out_Grayscale4_g128658 = Data4_g128658.Grayscale;
				Out_Luminosity4_g128658= Data4_g128658.Luminosity;
				Out_AlphaClip4_g128658 = Data4_g128658.AlphaClip;
				Out_AlphaFade4_g128658 = Data4_g128658.AlphaFade;
				Out_Translucency4_g128658 = Data4_g128658.Translucency;
				Out_Transmission4_g128658 = Data4_g128658.Transmission;
				Out_Thickness4_g128658 = Data4_g128658.Thickness;
				Out_Diffusion4_g128658 = Data4_g128658.Diffusion;
				Out_Depth4_g128658= Data4_g128658.Depth;
				}
				half3 Visual_Albedo127_g128657 = Out_Albedo4_g128658;
				TVEGlobalData Data15_g128663 = Data204_g128376;
				float Out_Dummy15_g128663 = 0;
				float4 Out_CoatDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128663 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128663 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128663 = Data15_g128663.Dummy;
				Out_CoatDataRT15_g128663 = Data15_g128663.CoatDataRT;
				Out_PaintDataRT15_g128663 = Data15_g128663.PaintDataRT;
				Out_GlowDataRT15_g128663= Data15_g128663.GlowDataRT;
				Out_AtmoDataRT15_g128663= Data15_g128663.AtmoDataRT;
				Out_FadeDataRT15_g128663= Data15_g128663.FadeDataRT;
				Out_FormDataRT15_g128663 = Data15_g128663.FormDataRT;
				Out_FlowDataRT15_g128663 = Data15_g128663.FlowDataRT;
				}
				half4 Global_AtmoParams516_g128657 = Out_AtmoDataRT15_g128663;
				float4 temp_output_6_0_g128684 = Global_AtmoParams516_g128657;
				#ifdef TVE_DUMMY
				float4 staticSwitch14_g128684 = ( temp_output_6_0_g128684 + _WetnessElementMode );
				#else
				float4 staticSwitch14_g128684 = temp_output_6_0_g128684;
				#endif
				#ifdef TVE_WETNESS_ELEMENT
				float4 staticSwitch663_g128657 = staticSwitch14_g128684;
				#else
				float4 staticSwitch663_g128657 = TVE_AtmoParams;
				#endif
				float2 lerpResult1121_g128657 = lerp( float2( 1,1 ) , (( staticSwitch663_g128657 * TVE_IsEnabled )).yw , _WetnessGlobalValue);
				float2 break1123_g128657 = lerpResult1121_g128657;
				half Global_Wetness429_g128657 = break1123_g128657.x;
				half Wetness_Value1042_g128657 = ( _WetnessIntensityValue * Global_Wetness429_g128657 );
				half Wetness_VertMask1024_g128657 = 1.0;
				float temp_output_1043_0_g128657 = ( Wetness_Value1042_g128657 * Wetness_VertMask1024_g128657 );
				half Wetness_Mask866_g128657 = temp_output_1043_0_g128657;
				half Water_VertMask1094_g128657 = 1.0;
				half4 Visual_Masks536_g128657 = Out_Shader4_g128658;
				float lerpResult1013_g128657 = lerp( 1.0 , (Visual_Masks536_g128657).z , _WetnessWaterBaseValue);
				half Water_HeightMask782_g128657 = lerpResult1013_g128657;
				float clampResult17_g128670 = clamp( ( ( _WetnessWaterIntensityValue * Wetness_Mask866_g128657 * Water_VertMask1094_g128657 ) - Water_HeightMask782_g128657 ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g128683 = _WetnessWaterBlendRemap.x;
				float temp_output_9_0_g128683 = ( clampResult17_g128670 - temp_output_7_0_g128683 );
				TVEModelData Data15_g128669 = Data16_g117799;
				float Out_Dummy15_g128669 = 0;
				float3 Out_PositionWS15_g128669 = float3( 0,0,0 );
				float3 Out_PositionWO15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWS15_g128669 = float3( 0,0,0 );
				float3 Out_PivotWO15_g128669 = float3( 0,0,0 );
				float3 Out_NormalWS15_g128669 = float3( 0,0,0 );
				float3 Out_ViewDirWS15_g128669 = float3( 0,0,0 );
				float4 Out_VertexData15_g128669 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g128669 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128669 = Data15_g128669.Dummy;
				Out_PositionWS15_g128669 = Data15_g128669.PositionWS;
				Out_PositionWO15_g128669 = Data15_g128669.PositionWO;
				Out_PivotWS15_g128669 = Data15_g128669.PivotWS;
				Out_PivotWO15_g128669 = Data15_g128669.PivotWO;
				Out_NormalWS15_g128669 = Data15_g128669.NormalWS;
				Out_ViewDirWS15_g128669 = Data15_g128669.ViewDirWS;
				Out_VertexData15_g128669 = Data15_g128669.VertexData;
				Out_BoundsData15_g128669 = Data15_g128669.BoundsData;
				}
				half3 Model_NormalWS798_g128657 = Out_NormalWS15_g128669;
				float temp_output_786_0_g128657 = saturate( (Model_NormalWS798_g128657).y );
				half Wetness_ProjMask790_g128657 = temp_output_786_0_g128657;
				half Water_Mask760_g128657 = ( saturate( ( ( temp_output_9_0_g128683 * _WetnessWaterBlendRemap.z ) + 0.0001 ) ) * Wetness_ProjMask790_g128657 );
				float3 lerpResult918_g128657 = lerp( Visual_Albedo127_g128657 , ( Visual_Albedo127_g128657 * (_WetnessWaterColor).rgb ) , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float3 staticSwitch946_g128657 = lerpResult918_g128657;
				#else
				float3 staticSwitch946_g128657 = Visual_Albedo127_g128657;
				#endif
				float3 lerpResult768_g128657 = lerp( staticSwitch946_g128657 , ( staticSwitch946_g128657 * staticSwitch946_g128657 ) , _WetnessContrastValue);
				float3 lerpResult651_g128657 = lerp( Visual_Albedo127_g128657 , lerpResult768_g128657 , Wetness_Mask866_g128657);
				#ifdef TVE_WETNESS
				float3 staticSwitch577_g128657 = lerpResult651_g128657;
				#else
				float3 staticSwitch577_g128657 = Visual_Albedo127_g128657;
				#endif
				half3 Final_Albedo493_g128657 = staticSwitch577_g128657;
				float3 In_Albedo3_g128659 = Final_Albedo493_g128657;
				float3 In_AlbedoRaw3_g128659 = Out_AlbedoRaw4_g128658;
				half2 Visual_Normal535_g128657 = Out_NormalTS4_g128658;
				float lerpResult877_g128657 = lerp( 1.0 , 0.0 , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch957_g128657 = ( Visual_Normal535_g128657 * lerpResult877_g128657 );
				#else
				float2 staticSwitch957_g128657 = Visual_Normal535_g128657;
				#endif
				float2 temp_cast_34 = (0.0).xx;
				TEXTURE2D(Texture238_g128667) = _WetnessDropsTexRT;
				SamplerState Sampler238_g128667 = sampler_Linear_Repeat_Aniso8;
				float4 appendResult924_g128657 = (float4(_WetnessDropsTillingValue , _WetnessDropsTillingValue , 0.0 , 0.0));
				float4 temp_output_37_0_g128667 = appendResult924_g128657;
				half4 Coords238_g128667 = temp_output_37_0_g128667;
				half3 Model_PositionWO602_g128657 = Out_PositionWO15_g128669;
				float3 temp_output_279_0_g128667 = Model_PositionWO602_g128657;
				half3 WorldPosition238_g128667 = temp_output_279_0_g128667;
				half4 localSamplePlanar2D238_g128667 = SamplePlanar2D( Texture238_g128667 , Sampler238_g128667 , Coords238_g128667 , WorldPosition238_g128667 );
				float4 temp_output_1010_0_g128657 = localSamplePlanar2D238_g128667;
				half2 Rain_DropsNormal919_g128657 = (temp_output_1010_0_g128657).zw;
				float2 temp_output_903_0_g128657 = (Rain_DropsNormal919_g128657*2.0 + -1.0);
				half2 Rain_RingsNormal713_g128657 = (temp_output_1010_0_g128657).xy;
				float2 lerpResult904_g128657 = lerp( temp_output_903_0_g128657 , (Rain_RingsNormal713_g128657*2.0 + -1.0) , ( Water_Mask760_g128657 * Water_Mask760_g128657 ));
				#ifdef TVE_WETNESS_WATER
				float2 staticSwitch960_g128657 = lerpResult904_g128657;
				#else
				float2 staticSwitch960_g128657 = temp_output_903_0_g128657;
				#endif
				half2 Rain_Drops1002_g128657 = ( staticSwitch960_g128657 * _WetnessDropsIntensityValue * _WetnessDropsNormalValue );
				half3 Model_PositionWS823_g128657 = Out_PositionWS15_g128669;
				half Global_Rain955_g128657 = break1123_g128657.y;
				half Rain_Value1067_g128657 = Global_Rain955_g128657;
				half Rain_VertMask1108_g128657 = 1.0;
				half Rain_Mask999_g128657 = ( ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS823_g128657 ) / _WetnessDropsDistValue ) ) ) * Rain_Value1067_g128657 * Rain_VertMask1108_g128657 );
				half2 Normal_Planar45_g128666 = ( Rain_Drops1002_g128657 * Rain_Mask999_g128657 * Wetness_ProjMask790_g128657 );
				float2 break71_g128666 = Normal_Planar45_g128666;
				float3 appendResult72_g128666 = (float3(break71_g128666.x , 0.0 , break71_g128666.y));
				half2 Wetness_Normal526_g128657 = (mul( ase_worldToTangent, appendResult72_g128666 )).xy;
				#ifdef TVE_WETNESS_DROPS
				float2 staticSwitch583_g128657 = Wetness_Normal526_g128657;
				#else
				float2 staticSwitch583_g128657 = temp_cast_34;
				#endif
				#ifdef TVE_WETNESS
				float2 staticSwitch774_g128657 = ( staticSwitch957_g128657 + staticSwitch583_g128657 );
				#else
				float2 staticSwitch774_g128657 = Visual_Normal535_g128657;
				#endif
				half2 Final_Normal499_g128657 = staticSwitch774_g128657;
				float2 In_NormalTS3_g128659 = Final_Normal499_g128657;
				float3 In_NormalWS3_g128659 = Out_NormalWS4_g128658;
				float4 break658_g128657 = Visual_Masks536_g128657;
				float temp_output_935_0_g128657 = ( Wetness_Mask866_g128657 * _WetnessSmoothnessValue );
				float lerpResult941_g128657 = lerp( temp_output_935_0_g128657 , 2.0 , Water_Mask760_g128657);
				#ifdef TVE_WETNESS_WATER
				float staticSwitch959_g128657 = lerpResult941_g128657;
				#else
				float staticSwitch959_g128657 = temp_output_935_0_g128657;
				#endif
				float4 appendResult661_g128657 = (float4(break658_g128657.x , break658_g128657.y , break658_g128657.z , saturate( ( break658_g128657.w + staticSwitch959_g128657 ) )));
				#ifdef TVE_WETNESS
				float4 staticSwitch586_g128657 = appendResult661_g128657;
				#else
				float4 staticSwitch586_g128657 = Visual_Masks536_g128657;
				#endif
				half4 Final_Masks482_g128657 = staticSwitch586_g128657;
				float4 In_Shader3_g128659 = Final_Masks482_g128657;
				float4 In_Emissive3_g128659 = Out_Emissive4_g128658;
				float In_Grayscale3_g128659 = Out_Grayscale4_g128658;
				float In_Luminosity3_g128659 = Out_Luminosity4_g128658;
				float In_MultiMask3_g128659 = Out_MultiMask4_g128658;
				float In_AlphaClip3_g128659 = Out_AlphaClip4_g128658;
				float In_AlphaFade3_g128659 = Out_AlphaFade4_g128658;
				float3 In_Translucency3_g128659 = Out_Translucency4_g128658;
				float In_Transmission3_g128659 = Out_Transmission4_g128658;
				float In_Thickness3_g128659 = Out_Thickness4_g128658;
				float In_Diffusion3_g128659 = Out_Diffusion4_g128658;
				float In_Depth3_g128659 = Out_Depth4_g128658;
				{
				Data3_g128659.Dummy = In_Dummy3_g128659;
				Data3_g128659.Albedo = In_Albedo3_g128659;
				Data3_g128659.AlbedoRaw = In_AlbedoRaw3_g128659;
				Data3_g128659.NormalTS = In_NormalTS3_g128659;
				Data3_g128659.NormalWS = In_NormalWS3_g128659;
				Data3_g128659.Shader = In_Shader3_g128659;
				Data3_g128659.Emissive= In_Emissive3_g128659;
				Data3_g128659.MultiMask = In_MultiMask3_g128659;
				Data3_g128659.Grayscale = In_Grayscale3_g128659;
				Data3_g128659.Luminosity = In_Luminosity3_g128659;
				Data3_g128659.AlphaClip = In_AlphaClip3_g128659;
				Data3_g128659.AlphaFade = In_AlphaFade3_g128659;
				Data3_g128659.Translucency = In_Translucency3_g128659;
				Data3_g128659.Transmission = In_Transmission3_g128659;
				Data3_g128659.Thickness = In_Thickness3_g128659;
				Data3_g128659.Diffusion = In_Diffusion3_g128659;
				Data3_g128659.Depth = In_Depth3_g128659;
				}
				TVEVisualData Data4_g128690 = Data3_g128659;
				float Out_Dummy4_g128690 = 0;
				float3 Out_Albedo4_g128690 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128690 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128690 = float2( 0,0 );
				float3 Out_NormalWS4_g128690 = float3( 0,0,0 );
				float4 Out_Shader4_g128690 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128690 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128690 = 0;
				float Out_Grayscale4_g128690 = 0;
				float Out_Luminosity4_g128690 = 0;
				float Out_AlphaClip4_g128690 = 0;
				float Out_AlphaFade4_g128690 = 0;
				float3 Out_Translucency4_g128690 = float3( 0,0,0 );
				float Out_Transmission4_g128690 = 0;
				float Out_Thickness4_g128690 = 0;
				float Out_Diffusion4_g128690 = 0;
				float Out_Depth4_g128690 = 0;
				{
				Out_Dummy4_g128690 = Data4_g128690.Dummy;
				Out_Albedo4_g128690 = Data4_g128690.Albedo;
				Out_AlbedoRaw4_g128690 = Data4_g128690.AlbedoRaw;
				Out_NormalTS4_g128690 = Data4_g128690.NormalTS;
				Out_NormalWS4_g128690 = Data4_g128690.NormalWS;
				Out_Shader4_g128690 = Data4_g128690.Shader;
				Out_Emissive4_g128690= Data4_g128690.Emissive;
				Out_MultiMask4_g128690 = Data4_g128690.MultiMask;
				Out_Grayscale4_g128690 = Data4_g128690.Grayscale;
				Out_Luminosity4_g128690= Data4_g128690.Luminosity;
				Out_AlphaClip4_g128690 = Data4_g128690.AlphaClip;
				Out_AlphaFade4_g128690 = Data4_g128690.AlphaFade;
				Out_Translucency4_g128690 = Data4_g128690.Translucency;
				Out_Transmission4_g128690 = Data4_g128690.Transmission;
				Out_Thickness4_g128690 = Data4_g128690.Thickness;
				Out_Diffusion4_g128690 = Data4_g128690.Diffusion;
				Out_Depth4_g128690= Data4_g128690.Depth;
				}
				float3 temp_output_297_0_g128686 = Out_Albedo4_g128690;
				float3 In_Albedo3_g128701 = temp_output_297_0_g128686;
				float3 temp_output_297_23_g128686 = Out_AlbedoRaw4_g128690;
				float3 In_AlbedoRaw3_g128701 = temp_output_297_23_g128686;
				float2 In_NormalTS3_g128701 = Out_NormalTS4_g128690;
				float3 In_NormalWS3_g128701 = Out_NormalWS4_g128690;
				float4 In_Shader3_g128701 = Out_Shader4_g128690;
				float4 temp_cast_35 = (0.0).xxxx;
				half4 Visual_Emissive255_g128686 = Out_Emissive4_g128690;
				half Emissive_MeshMask221_g128686 = 1.0;
				half Emissive_Mask103_g128686 = 1.0;
				float temp_output_279_0_g128686 = ( Emissive_MeshMask221_g128686 * Emissive_Mask103_g128686 );
				float3 appendResult293_g128686 = (float3(temp_output_279_0_g128686 , temp_output_279_0_g128686 , temp_output_279_0_g128686));
				half3 Local_EmissiveColor278_g128686 = appendResult293_g128686;
				float3 temp_output_316_0_g128686 = (TVE_GlowParams).xyz;
				TVEGlobalData Data15_g128687 = Data204_g128376;
				float Out_Dummy15_g128687 = 0;
				float4 Out_CoatDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128687 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128687 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128687 = Data15_g128687.Dummy;
				Out_CoatDataRT15_g128687 = Data15_g128687.CoatDataRT;
				Out_PaintDataRT15_g128687 = Data15_g128687.PaintDataRT;
				Out_GlowDataRT15_g128687= Data15_g128687.GlowDataRT;
				Out_AtmoDataRT15_g128687= Data15_g128687.AtmoDataRT;
				Out_FadeDataRT15_g128687= Data15_g128687.FadeDataRT;
				Out_FormDataRT15_g128687 = Data15_g128687.FormDataRT;
				Out_FlowDataRT15_g128687 = Data15_g128687.FlowDataRT;
				}
				half4 Global_GlowParams179_g128686 = Out_GlowDataRT15_g128687;
				float3 temp_output_6_0_g128693 = (Global_GlowParams179_g128686).xyz;
				#ifdef TVE_DUMMY
				float3 staticSwitch14_g128693 = ( temp_output_6_0_g128693 + _EmissiveElementMode );
				#else
				float3 staticSwitch14_g128693 = temp_output_6_0_g128693;
				#endif
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g128686 = staticSwitch14_g128693;
				#else
				float3 staticSwitch228_g128686 = temp_output_316_0_g128686;
				#endif
				float3 lerpResult299_g128686 = lerp( float3( 1,1,1 ) , staticSwitch228_g128686 , ( _EmissiveGlobalValue * TVE_IsEnabled ));
				half3 Emissive_GlobalMask248_g128686 = lerpResult299_g128686;
				half3 Visual_AlbedoRaw306_g128686 = temp_output_297_23_g128686;
				float3 lerpResult307_g128686 = lerp( float3( 1,1,1 ) , Visual_AlbedoRaw306_g128686 , _EmissiveColorMode);
				half3 Local_EmissiveValue88_g128686 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g128686 * lerpResult307_g128686 );
				half3 Emissive_Blend260_g128686 = ( ( (Visual_Emissive255_g128686).xyz * Local_EmissiveColor278_g128686 ) * Local_EmissiveValue88_g128686 );
				float3 temp_output_3_0_g128692 = Emissive_Blend260_g128686;
				float temp_output_15_0_g128692 = _emissive_power_value;
				float3 hdEmission22_g128692 = ASEGetEmissionHDRColor(temp_output_3_0_g128692,temp_output_15_0_g128692,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				half Local_EmissiveMask294_g128686 = temp_output_279_0_g128686;
				float4 appendResult295_g128686 = (float4(hdEmission22_g128692 , Local_EmissiveMask294_g128686));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g128686 = appendResult295_g128686;
				#else
				float4 staticSwitch129_g128686 = temp_cast_35;
				#endif
				half4 Final_Emissive184_g128686 = staticSwitch129_g128686;
				float4 In_Emissive3_g128701 = Final_Emissive184_g128686;
				float In_Grayscale3_g128701 = Out_Grayscale4_g128690;
				float In_Luminosity3_g128701 = Out_Luminosity4_g128690;
				float temp_output_297_11_g128686 = Out_MultiMask4_g128690;
				float In_MultiMask3_g128701 = temp_output_297_11_g128686;
				float In_AlphaClip3_g128701 = Out_AlphaClip4_g128690;
				float In_AlphaFade3_g128701 = Out_AlphaFade4_g128690;
				float3 In_Translucency3_g128701 = Out_Translucency4_g128690;
				float In_Transmission3_g128701 = Out_Transmission4_g128690;
				float In_Thickness3_g128701 = Out_Thickness4_g128690;
				float In_Diffusion3_g128701 = Out_Diffusion4_g128690;
				float In_Depth3_g128701 = Out_Depth4_g128690;
				{
				Data3_g128701.Dummy = In_Dummy3_g128701;
				Data3_g128701.Albedo = In_Albedo3_g128701;
				Data3_g128701.AlbedoRaw = In_AlbedoRaw3_g128701;
				Data3_g128701.NormalTS = In_NormalTS3_g128701;
				Data3_g128701.NormalWS = In_NormalWS3_g128701;
				Data3_g128701.Shader = In_Shader3_g128701;
				Data3_g128701.Emissive= In_Emissive3_g128701;
				Data3_g128701.MultiMask = In_MultiMask3_g128701;
				Data3_g128701.Grayscale = In_Grayscale3_g128701;
				Data3_g128701.Luminosity = In_Luminosity3_g128701;
				Data3_g128701.AlphaClip = In_AlphaClip3_g128701;
				Data3_g128701.AlphaFade = In_AlphaFade3_g128701;
				Data3_g128701.Translucency = In_Translucency3_g128701;
				Data3_g128701.Transmission = In_Transmission3_g128701;
				Data3_g128701.Thickness = In_Thickness3_g128701;
				Data3_g128701.Diffusion = In_Diffusion3_g128701;
				Data3_g128701.Depth = In_Depth3_g128701;
				}
				TVEVisualData Data4_g128705 = Data3_g128701;
				float Out_Dummy4_g128705 = 0;
				float3 Out_Albedo4_g128705 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128705 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128705 = float2( 0,0 );
				float3 Out_NormalWS4_g128705 = float3( 0,0,0 );
				float4 Out_Shader4_g128705 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128705 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128705 = 0;
				float Out_Grayscale4_g128705 = 0;
				float Out_Luminosity4_g128705 = 0;
				float Out_AlphaClip4_g128705 = 0;
				float Out_AlphaFade4_g128705 = 0;
				float3 Out_Translucency4_g128705 = float3( 0,0,0 );
				float Out_Transmission4_g128705 = 0;
				float Out_Thickness4_g128705 = 0;
				float Out_Diffusion4_g128705 = 0;
				float Out_Depth4_g128705 = 0;
				{
				Out_Dummy4_g128705 = Data4_g128705.Dummy;
				Out_Albedo4_g128705 = Data4_g128705.Albedo;
				Out_AlbedoRaw4_g128705 = Data4_g128705.AlbedoRaw;
				Out_NormalTS4_g128705 = Data4_g128705.NormalTS;
				Out_NormalWS4_g128705 = Data4_g128705.NormalWS;
				Out_Shader4_g128705 = Data4_g128705.Shader;
				Out_Emissive4_g128705= Data4_g128705.Emissive;
				Out_MultiMask4_g128705 = Data4_g128705.MultiMask;
				Out_Grayscale4_g128705 = Data4_g128705.Grayscale;
				Out_Luminosity4_g128705= Data4_g128705.Luminosity;
				Out_AlphaClip4_g128705 = Data4_g128705.AlphaClip;
				Out_AlphaFade4_g128705 = Data4_g128705.AlphaFade;
				Out_Translucency4_g128705 = Data4_g128705.Translucency;
				Out_Transmission4_g128705 = Data4_g128705.Transmission;
				Out_Thickness4_g128705 = Data4_g128705.Thickness;
				Out_Diffusion4_g128705 = Data4_g128705.Diffusion;
				Out_Depth4_g128705= Data4_g128705.Depth;
				}
				float3 In_Albedo3_g128703 = Out_Albedo4_g128705;
				float3 In_AlbedoRaw3_g128703 = Out_AlbedoRaw4_g128705;
				float2 In_NormalTS3_g128703 = Out_NormalTS4_g128705;
				float3 In_NormalWS3_g128703 = Out_NormalWS4_g128705;
				float4 In_Shader3_g128703 = Out_Shader4_g128705;
				float4 In_Emissive3_g128703 = Out_Emissive4_g128705;
				float In_Grayscale3_g128703 = Out_Grayscale4_g128705;
				float In_Luminosity3_g128703 = Out_Luminosity4_g128705;
				float temp_output_836_11_g128702 = Out_MultiMask4_g128705;
				float In_MultiMask3_g128703 = temp_output_836_11_g128702;
				half Visual_AlphaClip667_g128702 = Out_AlphaClip4_g128705;
				half Input_True57_g128713 = Visual_AlphaClip667_g128702;
				half True36_g128713 = Input_True57_g128713;
				TVEGlobalData Data15_g128704 = Data204_g128376;
				float Out_Dummy15_g128704 = 0;
				float4 Out_CoatDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_PaintDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_GlowDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_AtmoDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FadeDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FormDataRT15_g128704 = float4( 0,0,0,0 );
				float4 Out_FlowDataRT15_g128704 = float4( 0,0,0,0 );
				{
				Out_Dummy15_g128704 = Data15_g128704.Dummy;
				Out_CoatDataRT15_g128704 = Data15_g128704.CoatDataRT;
				Out_PaintDataRT15_g128704 = Data15_g128704.PaintDataRT;
				Out_GlowDataRT15_g128704= Data15_g128704.GlowDataRT;
				Out_AtmoDataRT15_g128704= Data15_g128704.AtmoDataRT;
				Out_FadeDataRT15_g128704= Data15_g128704.FadeDataRT;
				Out_FormDataRT15_g128704 = Data15_g128704.FormDataRT;
				Out_FlowDataRT15_g128704 = Data15_g128704.FlowDataRT;
				}
				half4 Global_FadeParams516_g128702 = Out_FadeDataRT15_g128704;
				float temp_output_6_0_g128711 = saturate( (Global_FadeParams516_g128702).w );
				#ifdef TVE_DUMMY
				float staticSwitch14_g128711 = ( temp_output_6_0_g128711 + _CutoutElementMode );
				#else
				float staticSwitch14_g128711 = temp_output_6_0_g128711;
				#endif
				#ifdef TVE_CUTOUT_ELEMENT
				float staticSwitch663_g128702 = staticSwitch14_g128711;
				#else
				float staticSwitch663_g128702 = TVE_FadeParams.w;
				#endif
				float lerpResult843_g128702 = lerp( 1.0 , ( staticSwitch663_g128702 * TVE_IsEnabled ) , _CutoutGlobalValue);
				half Local_GlobalMask429_g128702 = lerpResult843_g128702;
				half Local_AlphaMask814_g128702 = 1.0;
				half Local_NoiseMask678_g128702 = 1.0;
				half Local_VertMask766_g128702 = 1.0;
				half Local_MultiMask685_g128702 = 1.0;
				float lerpResult728_g128702 = lerp( Visual_AlphaClip667_g128702 , min( Visual_AlphaClip667_g128702 , ( -0.001 - ( ( _CutoutIntensityValue * Local_GlobalMask429_g128702 ) - ( Local_AlphaMask814_g128702 * Local_NoiseMask678_g128702 * Local_VertMask766_g128702 ) ) ) ) , Local_MultiMask685_g128702);
				half Local_AlphaClip784_g128702 = lerpResult728_g128702;
				half Input_False58_g128713 = Local_AlphaClip784_g128702;
				half False36_g128713 = Input_False58_g128713;
				half localShadowPassCheck36_g128713 = ShadowPassCheck36_g128713( True36_g128713 , False36_g128713 );
				#ifdef TVE_CUTOUT_SHADOW
				float staticSwitch791_g128702 = Local_AlphaClip784_g128702;
				#else
				float staticSwitch791_g128702 = localShadowPassCheck36_g128713;
				#endif
				float temp_output_6_0_g128714 = staticSwitch791_g128702;
				#ifdef TVE_DUMMY
				float staticSwitch14_g128714 = ( temp_output_6_0_g128714 + _CutoutShadowMode );
				#else
				float staticSwitch14_g128714 = temp_output_6_0_g128714;
				#endif
				float temp_output_798_0_g128702 = staticSwitch14_g128714;
				#ifdef TVE_CUTOUT
				float staticSwitch577_g128702 = temp_output_798_0_g128702;
				#else
				float staticSwitch577_g128702 = Visual_AlphaClip667_g128702;
				#endif
				half Final_AlphaClip795_g128702 = staticSwitch577_g128702;
				float In_AlphaClip3_g128703 = Final_AlphaClip795_g128702;
				float In_AlphaFade3_g128703 = Out_AlphaFade4_g128705;
				float3 In_Translucency3_g128703 = Out_Translucency4_g128705;
				float In_Transmission3_g128703 = Out_Transmission4_g128705;
				float In_Thickness3_g128703 = Out_Thickness4_g128705;
				float In_Diffusion3_g128703 = Out_Diffusion4_g128705;
				float In_Depth3_g128703 = Out_Depth4_g128705;
				{
				Data3_g128703.Dummy = In_Dummy3_g128703;
				Data3_g128703.Albedo = In_Albedo3_g128703;
				Data3_g128703.AlbedoRaw = In_AlbedoRaw3_g128703;
				Data3_g128703.NormalTS = In_NormalTS3_g128703;
				Data3_g128703.NormalWS = In_NormalWS3_g128703;
				Data3_g128703.Shader = In_Shader3_g128703;
				Data3_g128703.Emissive= In_Emissive3_g128703;
				Data3_g128703.MultiMask = In_MultiMask3_g128703;
				Data3_g128703.Grayscale = In_Grayscale3_g128703;
				Data3_g128703.Luminosity = In_Luminosity3_g128703;
				Data3_g128703.AlphaClip = In_AlphaClip3_g128703;
				Data3_g128703.AlphaFade = In_AlphaFade3_g128703;
				Data3_g128703.Translucency = In_Translucency3_g128703;
				Data3_g128703.Transmission = In_Transmission3_g128703;
				Data3_g128703.Thickness = In_Thickness3_g128703;
				Data3_g128703.Diffusion = In_Diffusion3_g128703;
				Data3_g128703.Depth = In_Depth3_g128703;
				}
				TVEVisualData Data4_g128731 = Data3_g128703;
				float Out_Dummy4_g128731 = 0;
				float3 Out_Albedo4_g128731 = float3( 0,0,0 );
				float3 Out_AlbedoRaw4_g128731 = float3( 0,0,0 );
				float2 Out_NormalTS4_g128731 = float2( 0,0 );
				float3 Out_NormalWS4_g128731 = float3( 0,0,0 );
				float4 Out_Shader4_g128731 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g128731 = float4( 0,0,0,0 );
				float Out_MultiMask4_g128731 = 0;
				float Out_Grayscale4_g128731 = 0;
				float Out_Luminosity4_g128731 = 0;
				float Out_AlphaClip4_g128731 = 0;
				float Out_AlphaFade4_g128731 = 0;
				float3 Out_Translucency4_g128731 = float3( 0,0,0 );
				float Out_Transmission4_g128731 = 0;
				float Out_Thickness4_g128731 = 0;
				float Out_Diffusion4_g128731 = 0;
				float Out_Depth4_g128731 = 0;
				{
				Out_Dummy4_g128731 = Data4_g128731.Dummy;
				Out_Albedo4_g128731 = Data4_g128731.Albedo;
				Out_AlbedoRaw4_g128731 = Data4_g128731.AlbedoRaw;
				Out_NormalTS4_g128731 = Data4_g128731.NormalTS;
				Out_NormalWS4_g128731 = Data4_g128731.NormalWS;
				Out_Shader4_g128731 = Data4_g128731.Shader;
				Out_Emissive4_g128731= Data4_g128731.Emissive;
				Out_MultiMask4_g128731 = Data4_g128731.MultiMask;
				Out_Grayscale4_g128731 = Data4_g128731.Grayscale;
				Out_Luminosity4_g128731= Data4_g128731.Luminosity;
				Out_AlphaClip4_g128731 = Data4_g128731.AlphaClip;
				Out_AlphaFade4_g128731 = Data4_g128731.AlphaFade;
				Out_Translucency4_g128731 = Data4_g128731.Translucency;
				Out_Transmission4_g128731 = Data4_g128731.Transmission;
				Out_Thickness4_g128731 = Data4_g128731.Thickness;
				Out_Diffusion4_g128731 = Data4_g128731.Diffusion;
				Out_Depth4_g128731= Data4_g128731.Depth;
				}
				float temp_output_3_0_g128733 = Out_AlphaClip4_g128731;
				float Alpha21_g128733 = temp_output_3_0_g128733;
				float temp_output_15_0_g128733 = 0.5;
				float Treshold21_g128733 = temp_output_15_0_g128733;
				{
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_GLANCING) || defined (TVE_DITHER)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha21_g128733 - Treshold21_g128733);
				#endif
				#endif
				}
				

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;

				surfaceDescription.Alpha = Alpha21_g128733;

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					#if !defined( _DEPTHOFFSET_ON )
						posInput.deviceDepth = input.positionSS.z;
					#else
						surfaceDescription.DepthOffset = 0;
					#endif
				#endif

				#if defined( ASE_DEPTH_WRITE_ON )
					outputDepth = posInput.deviceDepth;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {
            Name "FullScreenDebug"
            Tags
			{
				"LightMode" = "FullScreenDebug"
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC _TRANSPARENT_REFRACTIVE_SORT
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/DebugMipmapStreamingMacros.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

            #if _MATERIAL_FEATURE_COLORED_TRANSMISSION
            #undef _MATERIAL_FEATURE_CLEAR_COAT
            #endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

            #if SHADERPASS == SHADERPASS_MOTION_VECTORS && defined(WRITE_DECAL_BUFFER_AND_RENDERING_LAYER)
                #define WRITE_DECAL_BUFFER
            #endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if (defined(_TRANSPARENT_WRITES_MOTION_VEC) || defined(_TRANSPARENT_REFRACTIVE_SORT)) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED || defined(ATTRIBUTES_NEED_INSTANCEID)
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal = input.normalOS;
				output.ObjectSpaceTangent = input.tangentOS.xyz;
				output.ObjectSpacePosition = input.positionOS;

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TheVisualEngine.MaterialGUI"
	
	Fallback Off
}
/*ASEBEGIN
Version=19802
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1087;-4352,-384;Inherit;False;Block Model;468;;117794;7ad7765e793a6714babedee0033c36e9;14,240,0,290,0,291,0,289,0,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1088;-4032,-320;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1089;-3584,-384;Inherit;False;1088;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1090;-3328,-384;Inherit;False;Block Global;31;;128376;212e17d4006dc88449d56ce0340cb5ff;17,315,0,311,1,317,1,388,1,321,1,398,1,404,0,337,0,282,0,396,0,283,0,285,0,276,0,349,0,402,0,385,0,308,0;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1091;-3008,-384;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1092;-1536,-256;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1093;-1536,-384;Inherit;False;Block Terrain Layers;75;;128457;ef8fd3ec282e419478dcf625231d8508;0;0;1;OBJECT;9091
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1094;-1152,-256;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1095;-1152,-384;Inherit;False;Block Tinting;262;;128571;9f39e156ea8d89e4997ea2a1e194137e;10,352,0,416,1,414,1,407,1,400,0,334,1,336,1,339,0,355,0,344,0;4;198;OBJECT;0,0,0,0;False;223;OBJECT;0,0,0,0;False;207;OBJECT;0,0,0,0;False;346;FLOAT;1;False;1;OBJECT;204
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1096;-768,-192;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1097;-768,-384;Inherit;False;Block Dryness;292;;128596;f05795de23f951c45bb73c8b4321e4b7;10,398,0,510,0,507,1,504,1,482,0,400,1,403,1,405,0,442,0,410,0;4;279;OBJECT;0,0,0,0;False;297;OBJECT;0,0,0,0;False;281;OBJECT;0,0,0,0;False;409;FLOAT;1;False;1;OBJECT;346
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1098;-768,-256;Inherit;False;1088;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1099;-384,-192;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1100;-384,-256;Inherit;False;1088;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1101;-384,-384;Inherit;False;Block Overlay;325;;128620;8ae9c8285a7817844a51243251284d21;11,813,0,821,1,819,1,942,1,940,1,944,0,826,1,823,1,828,0,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1102;0,-256;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1103;0,-384;Inherit;False;Block Wetness;373;;128657;52c5a1f52507fc44e926833b126e7855;10,850,0,1124,1,1120,1,1075,0,945,1,930,1,857,1,1092,0,851,1,1107,0;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1104;-4032,-384;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1105;384,-256;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1106;384,-384;Inherit;False;Block Emissive;435;;128686;64497f287b9096b43b688b52b4a0bf20;6,282,0,273,1,319,1,312,1,264,0,267,0;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1107;-2560,-256;Inherit;False;1091;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1108;-2560,-384;Inherit;False;1104;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1109;768,-384;Inherit;False;Block Cutout;415;;128702;866b4a5fe67e7f34085520e1bb5be2b7;8,775,0,846,1,840,1,777,0,815,0,853,0,779,0,817,0;3;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;1;OBJECT;566
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1110;-2304,-384;Inherit;False;Block Terrain Conform;459;;128719;96b819750ac2c854b90e8e52674e7c45;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1111;-1984,-384;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1112;1088,-384;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;837;1792,-384;Inherit;False;1112;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;810;1792,-320;Inherit;False;1111;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1026;1792,-640;Half;False;Property;_IsTerrainShader;_IsTerrainShader;480;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;785;2560,-640;Inherit;False;Base Compile;-1;;128726;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1027;2048,-640;Half;False;Property;_IsStandardShader;_IsStandardShader;481;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1060;2048,-384;Inherit;False;Block Render Terrain;0;;128727;494080da1e9aade47a313fe971224c33;0;3;17;OBJECT;;False;19;OBJECT;;False;115;FLOAT;0;False;15;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;109;FLOAT;108;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1049;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1050;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1051;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1052;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1053;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1054;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;True;3;1;False;;10;False;;0;1;False;;0;False;;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1055;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1056;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1057;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;True;1;1;False;;0;True;_DstBlend2;0;1;False;;0;False;;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1058;2720,-384;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode, AmplifyShaderEditor, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null;1048;2560,-384;Float;False;True;-1;2;TheVisualEngine.MaterialGUI;0;17;BOXOPHOBIC/The Visual Engine/Landscape/Terrain Standard Lit;28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;35;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;4;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;TerrainCompatible=True;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;40;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;4;638504318655869354;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Normal Space,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;0;638509654690735861;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Write Depth;0;0;  Depth Offset;0;0;  Conservative;0;0;GPU Instancing;0;638536052091280644;LOD CrossFade;0;638504318420745472;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504318408748697;0;11;True;True;True;True;True;False;False;False;False;True;True;True;;True;0
WireConnection;1088;0;1087;314
WireConnection;1090;206;1089;0
WireConnection;1091;0;1090;151
WireConnection;1095;198;1093;9091
WireConnection;1095;207;1092;0
WireConnection;1097;279;1095;204
WireConnection;1097;281;1094;0
WireConnection;1101;572;1097;346
WireConnection;1101;596;1098;0
WireConnection;1101;600;1096;0
WireConnection;1103;572;1101;566
WireConnection;1103;596;1100;0
WireConnection;1103;600;1099;0
WireConnection;1104;0;1087;128
WireConnection;1106;146;1103;566
WireConnection;1106;178;1102;0
WireConnection;1109;572;1106;183
WireConnection;1109;600;1105;0
WireConnection;1110;146;1108;0
WireConnection;1110;212;1107;0
WireConnection;1111;0;1110;128
WireConnection;1112;0;1109;566
WireConnection;1060;17;837;0
WireConnection;1060;19;810;0
WireConnection;1048;0;1060;21
WireConnection;1048;1;1060;22
WireConnection;1048;5;1060;77
WireConnection;1048;7;1060;27
WireConnection;1048;8;1060;26
WireConnection;1048;6;1060;34
WireConnection;1048;9;1060;28
WireConnection;1048;11;1060;30
WireConnection;1048;12;1060;32
WireConnection;1048;27;1060;33
ASEEND*/
//CHKSM=2FE07E84C46B6A72D6E938980EB6DBBC4D3DC9A0