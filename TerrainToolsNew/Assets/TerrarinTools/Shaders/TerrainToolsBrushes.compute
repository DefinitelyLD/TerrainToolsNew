#pragma kernel RaiseBrush
#pragma kernel LowerBrush
#pragma kernel SmoothBrush
#pragma kernel FlatBrush
#pragma kernel EraseBrush

#pragma kernel StripsBrush
#pragma kernel RingsBrush
#pragma kernel CurveyStripsBrush
#pragma kernel SpiralBrush
#pragma kernel DoubleSpiralBrush

#pragma kernel PaintBrush

#pragma kernel MaskHeightmap
#pragma kernel Compose
#pragma kernel Tween

#define PI 3.14159265358979323846
#define PATTERN_UV_REDZONE 8.0

Texture2D<float> HeightmapMaskTexture;

Texture2D<float> HeightmapTexture;
Texture2D<float> TweenStateHeightmap;
Texture2D<float> CompositiveHeightmapTexture;

RWTexture2D<float> OutputHeightmapTexture;

Texture2D<float> BrushHeightmapTexture;
Texture2D<float> BrushMaskTexture;
RWTexture2D<float> OutputBrushHeightmapTexture;

SamplerState pointClampBrushMaskTextureSampler
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
};

int2 BrushPosition;

int2 BrushSize;
int2 ActualBrushSize;

float BrushStrength;
float BrushAngle;

float DeltaTime;

float BrushHeight;
int BrushStripCount;

float TweenStrength;

float2 RotateUV(float2 uv, float angleDegrees)
{
    float angleRadians = radians(angleDegrees);

    uv -= 0.5;

    float cosA = cos(angleRadians);
    float sinA = sin(angleRadians);

    float2 rotatedUV;
    rotatedUV.x = uv.x * cosA - uv.y * sinA;
    rotatedUV.y = uv.x * sinA + uv.y * cosA;

    rotatedUV += 0.5;

    return rotatedUV;
}

float2 UVFromId(uint3 id, float redZone)
{
    float2 offset = (ActualBrushSize - BrushSize) * 0.5;
    offset += redZone;
    float2 uv = (float2(id.xy) - offset) / float2(BrushSize - redZone);
    
    return uv;
}

bool IsPointInRotatedBox(float2 boxPosition, int2 boxSize, float boxAngle, int2 target)
{
    // Convert angle to radians
    float angleRad = radians(boxAngle);
    float cosAngle = cos(angleRad);
    float sinAngle = sin(angleRad);

    // Calculate half sizes of the box
    float halfWidth = boxSize.x / 2.0f;
    float halfHeight = boxSize.y / 2.0f;

    // Step 1: Translate the point into the box's local space by subtracting the box position
    int2 translatedPoint = target - boxPosition;

    // Step 2: Rotate the point by the inverse of the box's angle
    float rotatedX = translatedPoint.x * cosAngle + translatedPoint.y * sinAngle;
    float rotatedY = -translatedPoint.x * sinAngle + translatedPoint.y * cosAngle;

    // Step 3: Check if the rotated point is within the box's unrotated bounds
    bool isInside = (rotatedX >= -halfWidth && rotatedX <= halfWidth) &&
                    (rotatedY >= -halfHeight && rotatedY <= halfHeight);

    return isInside;
}

bool IsCulled(uint3 id)
{
    if ((int) id.x >= ActualBrushSize.x || (int) id.y >= ActualBrushSize.y)
    {
        return true;
    }
    
    if (IsPointInRotatedBox(ActualBrushSize * 0.5, BrushSize, BrushAngle, id.xy) == false)
    {
        return true;
    }
    
    return false;
}

float GetBrushMaskValue(uint3 id)
{
    float2 uv = UVFromId(id, 0);
    uv = RotateUV(uv, BrushAngle);
    
    float color = BrushMaskTexture.SampleLevel(pointClampBrushMaskTextureSampler, uv, 0);
    return color;
}

[numthreads(32, 32,1)]
void RaiseBrush(uint3 id : SV_DispatchThreadID)
{
    if (IsCulled(id))
    {
        return;
    }
    
    float currentHeight = BrushHeightmapTexture.Load(int3(id.x, id.y, 0));
    float mask = GetBrushMaskValue(id);
    
    currentHeight += BrushStrength * DeltaTime * mask;
    currentHeight = clamp(currentHeight, 0, 0.5);
    
    OutputBrushHeightmapTexture[id.xy] = currentHeight;
}

[numthreads(32, 32, 1)]
void LowerBrush(uint3 id : SV_DispatchThreadID)
{
    if (IsCulled(id))
    {
        return;
    }
    
    float currentHeight = BrushHeightmapTexture.Load(int3(id.x, id.y, 0));
    float mask = GetBrushMaskValue(id);
    
    currentHeight -= BrushStrength * DeltaTime * mask;
    currentHeight = clamp(currentHeight, 0, 0.5);
    
    OutputBrushHeightmapTexture[id.xy] = currentHeight;
}

[numthreads(32, 32, 1)]
void SmoothBrush(uint3 id : SV_DispatchThreadID)
{
    if (IsCulled(id))
    {
        return;
    }
    
    float mask = GetBrushMaskValue(id);
    
    float accumulation = 0;
    uint sampleCount = 0;
    
    for (int y = -BrushStrength; y < BrushStrength + 1; y++)
    {
        for (int x = -BrushStrength; x < BrushStrength + 1; x++)
        {
            int3 index = int3(id.x + x, id.y + y, 0);
            
            if (index.x < 0 || index.x >= ActualBrushSize.x || index.y < 0 || index.y >= ActualBrushSize.y)
            {
                continue;
            }
            
            accumulation += BrushHeightmapTexture.Load(index);
            sampleCount++;
        }
    }
    
    float newHeight = accumulation / (float)sampleCount;
    
    newHeight = clamp(newHeight, 0, 0.5);
    OutputBrushHeightmapTexture[id.xy] = newHeight;
}

[numthreads(32, 32, 1)]
void FlatBrush(uint3 id : SV_DispatchThreadID)
{
    if (IsCulled(id))
    {
        return;
    }
    
    float currentHeight = BrushHeightmapTexture.Load(int3(id.x, id.y, 0));
    float mask = GetBrushMaskValue(id);
    
    currentHeight += BrushStrength * DeltaTime * mask;
    currentHeight = clamp(currentHeight, 0, BrushHeight);
    
    currentHeight = clamp(currentHeight, 0, 0.5);
    OutputBrushHeightmapTexture[id.xy] = currentHeight;
}

[numthreads(32, 32, 1)]
void EraseBrush(uint3 id : SV_DispatchThreadID)
{
    if (IsCulled(id))
    {
        return;
    }
    
    float currentHeight = BrushHeightmapTexture.Load(int3(id.x, id.y, 0));
    float mask = GetBrushMaskValue(id);
    
    currentHeight = mask > 0? 0 : currentHeight;
    OutputBrushHeightmapTexture[id.xy] = currentHeight;
}

[numthreads(32, 32, 1)]
void StripsBrush(uint3 id : SV_DispatchThreadID)
{
    if (IsCulled(id))
    {
        return;
    }
    
    float mask = GetBrushMaskValue(id);
    mask = mask > 0.0? 1.0 : 0.0;
   
    float2 uv = UVFromId(id, PATTERN_UV_REDZONE);
    uv = RotateUV(uv, BrushAngle);
    
    float wave = sqrt(max(sin((uv.x + 0.0) * BrushStripCount * PI * 2.0), 0));

    float newHeight = (wave * BrushHeight) * mask;

    newHeight = clamp(newHeight, 0, 0.5);
    OutputBrushHeightmapTexture[id.xy] = newHeight;
}

[numthreads(32, 32, 1)]
void RingsBrush(uint3 id : SV_DispatchThreadID)
{
    
}

[numthreads(32, 32, 1)]
void CurveyStripsBrush(uint3 id : SV_DispatchThreadID)
{
    
}

[numthreads(32, 32, 1)]
void SpiralBrush(uint3 id : SV_DispatchThreadID)
{
    
}

[numthreads(32, 32, 1)]
void DoubleSpiralBrush(uint3 id : SV_DispatchThreadID)
{
    
}

[numthreads(32, 32, 1)]
void PaintBrush(uint3 id : SV_DispatchThreadID)
{
    
}

[numthreads(32, 32, 1)]
void MaskHeightmap(uint3 id : SV_DispatchThreadID)
{
    float mask = HeightmapMaskTexture.Load(int3(id.x, id.y, 0));
    float height = HeightmapTexture.Load(int3(id.x, id.y, 0));
    
    mask = mask > 0.0 ? 1.0 : 0.0;
    
    float newHeight = height * mask;
    
    OutputHeightmapTexture[id.xy] = newHeight;
}

[numthreads(32, 32, 1)]
void Compose(uint3 id : SV_DispatchThreadID)
{   
    float baseHeight = HeightmapTexture.Load(int3(id.x, id.y, 0));
    float compositiveHeight = CompositiveHeightmapTexture.Load(int3(id.x, id.y, 0));
    
    float newHeight = baseHeight + compositiveHeight;
    
    //newHeight = clamp(newHeight, 0, 0.5);
    OutputHeightmapTexture[id.xy] = newHeight;
}

[numthreads(32, 32, 1)]
void Tween(uint3 id : SV_DispatchThreadID)
{
    float targetHeight = HeightmapTexture.Load(int3(id.x, id.y, 0));
    float currentHeight = TweenStateHeightmap.Load(int3(id.x, id.y, 0));
    
    float newHeight = lerp(currentHeight, targetHeight, DeltaTime * TweenStrength);
    
    newHeight = clamp(newHeight, 0, 0.5);
    OutputHeightmapTexture[id.xy] = newHeight;
}